package xtensus.beans.common.GBO_LDAP;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.naming.NamingException;
import javax.naming.directory.Attribute;
import javax.naming.directory.BasicAttribute;
import javax.naming.directory.BasicAttributes;
import javax.naming.directory.DirContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import xtensus.aop.LogClass;
import xtensus.beans.common.LanguageManagerBean;
import xtensus.beans.common.VariableGlobale;
import xtensus.ldap.business.LdapOperation;
import xtensus.ldap.model.Group;
import xtensus.services.ApplicationManager;


@Component
@Scope("request")
public class ListeGroupeBean {
	
	private ApplicationManager appMgr;
	private int groupReference;
	private String groupName;
	private String groupDescription;
	private List<Group> listGroups;
	private DataModel groupDataModel;
	private int records;
	public boolean status1;
	public boolean status2;
	@Autowired
	private LanguageManagerBean lm;
	@Autowired
	private MessageSource messageSource;
	private String message;
	private String hideAccor;
	@Autowired
	private VariableGlobale vb;
	private LdapOperation ldapOperation;
	
	@Autowired
	public ListeGroupeBean(@Qualifier("applicationManager") ApplicationManager appMgr){
		this.appMgr = appMgr;
		ldapOperation = new LdapOperation();
		listGroups = new ArrayList<Group>();
		groupDataModel = new ListDataModel();
		groupDataModel.setWrappedData(listGroups);
		hideAccor="none";
	}
	
	
	@PostConstruct
	public void initialize(){
		groupReference = ldapOperation.getListGroup(listGroups);
		groupDataModel.setWrappedData(listGroups);
	}

	public void save() {
		DirContext dirContext;
		groupReference++;
		Group group=new Group();
		status1=false;
		status2=false;
		if(groupDescription.equalsIgnoreCase("")) {groupDescription = " ";}
		String entryDN="cn="+groupName+","+ldapOperation.CONTEXT_GROUP;
		Attribute ObjectClass=new BasicAttribute("objectClass");
		ObjectClass.add("top");
		ObjectClass.add("posixGroup");
		ObjectClass.add("extensibleObject");
		try {
			dirContext = ldapOperation.getDirContext();
			BasicAttributes entry=new BasicAttributes();
			entry.put(ObjectClass);
			entry.put("cn",groupName);group.setCn(groupName);
			entry.put("gidNumber",String.valueOf(groupReference));group.setId(groupReference);
			entry.put("description",groupDescription);group.setDescription(groupDescription);
			dirContext.createSubcontext(entryDN, entry);
			listGroups.add(0, group);
			groupDataModel.setWrappedData(listGroups);
			status1=true;
			LogClass logClass = new LogClass();
			logClass.addTrack("ajout", "Evénement de log d'ajout du groupe "+group.getId()+"-"+group.getCn(), vb.getPerson(), "INFO", appMgr);
			System.out.println("groupe ajouté avec succés");
		} catch (NamingException e) {
			setMessage(messageSource.getMessage("erreurInsertUtilisateurRemain",
					new Object[] {}, lm.createLocal()));
			groupReference--;
			status2=true;
			this.groupName="";
			e.printStackTrace();
		}
	}
	
	public void initializesave(){
		status1=false;
		status2=false;
	}
	
	public void getSelectionRow() {
		Group group = new Group();
		group = (Group) groupDataModel.getRowData();
		vb.setGroup(group);
		LogClass logClass = new LogClass();
		logClass.addTrack("consultation", "Evénement de log de consultation du groupe "+group.getId()+"-"+group.getCn(), vb.getPerson(), "INFO", appMgr);
	}
	
	public void showAddForm(){
		status1=false;
		status2=false;
		groupName = "";
		groupDescription = "";
		hideAccor = "inline";
	}
	
	public void cleanAll(){
		status1=false;
		status2=false;
		groupName = "";
		groupDescription = "";
		hideAccor = "none";
	}

//  Getters && Setters
	@SuppressWarnings("unchecked")
	public long getRecords() {
		if(groupDataModel == null && groupDataModel.getWrappedData()==null)
			records=0;
		else
			records=((List<Group>)groupDataModel.getWrappedData()).size();
		return records;
	}

	
	public int getGroupReference() {
		return groupReference;
	}

	public void setGroupReference(int groupReference) {
		this.groupReference = groupReference;
	}

	public String getGroupName() {
		return groupName;
	}

	public void setGroupName(String groupName) {
		this.groupName = groupName;
	}

	public String getGroupDescription() {
		return groupDescription;
	}

	public void setGroupDescription(String groupDescription) {
		this.groupDescription = groupDescription;
	}

	public void setRecords(int records) {
		this.records = records;
	}
	
	public boolean isStatus1() {
		return status1;
	}

	public void setStatus1(boolean status1) {
		this.status1 = status1;
	}

	public boolean isStatus2() {
		return status2;
	}

	public void setStatus2(boolean status2) {
		this.status2 = status2;
	}

	public LanguageManagerBean getLm() {
		return lm;
	}

	public void setLm(LanguageManagerBean lm) {
		this.lm = lm;
	}

	public MessageSource getMessageSource() {
		return messageSource;
	}

	public void setMessageSource(MessageSource messageSource) {
		this.messageSource = messageSource;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}
	
	public void setHideAccor(String hideAccor) {
		this.hideAccor = hideAccor;
	}

	public String getHideAccor() {
		return hideAccor;
	}

	public void setVb(VariableGlobale vb) {
		this.vb = vb;
	}

	public VariableGlobale getVb() {
		return vb;
	}

	public void setLdapOperation(LdapOperation ldapOperation) {
		this.ldapOperation = ldapOperation;
	}


	public LdapOperation getLdapOperation() {
		return ldapOperation;
	}


	public void setListGroups(List<Group> listGroups) {
		this.listGroups = listGroups;
	}


	public List<Group> getListGroups() {
		return listGroups;
	}


	public void setGroupDataModel(DataModel groupDataModel) {
		this.groupDataModel = groupDataModel;
	}


	public DataModel getGroupDataModel() {
		return groupDataModel;
	}


	public void setAppMgr(ApplicationManager appMgr) {
		this.appMgr = appMgr;
	}


	public ApplicationManager getAppMgr() {
		return appMgr;
	}

	
}
