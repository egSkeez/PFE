package xtensus.beans.common.GBO;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import xtensus.beans.common.VariableGlobale;
import xtensus.beans.utils.SuiviCourrier;
import xtensus.beans.utils.SuiviCourrierCourrier;
import xtensus.entity.Confidentialite;
import xtensus.entity.Courrier;
import xtensus.entity.Expdest;
import xtensus.entity.Expdestexterne;
import xtensus.entity.Nature;
import xtensus.entity.Transaction;
import xtensus.entity.TransactionDestination;
import xtensus.entity.TransactionDestinationReelle;
import xtensus.entity.Transmission;
import xtensus.entity.Typetransaction;
import xtensus.entity.Urgence;
import xtensus.ldap.business.LdapOperation;
import xtensus.ldap.model.Person;
import xtensus.ldap.model.Unit;
import xtensus.services.ApplicationManager;
import xtensus.services.Export;

@Component
@Scope("request")
public class CourrierSuiviBean {

	private ApplicationManager appMgr;
	private Export export;
	private Courrier courrier;
	private DataModel listTransactionCourrier;
	private long records = 0;
	private Nature nature;
	private Transmission transmission;
	private Confidentialite confidentialite;
	private Urgence urgence;
	private List<SuiviCourrierCourrier> suiviCourriers;
	private List<Transaction> transactions;
	private LdapOperation ldapOperation;
	private SuiviCourrierCourrier suiviCourrier;
	@Autowired
	private VariableGlobale vb;

	@Autowired
	public CourrierSuiviBean(
			@Qualifier("applicationManager") ApplicationManager appMgr,
			@Qualifier("export") Export export) {
		this.appMgr = appMgr;
		this.export = export;
		courrier = new Courrier();
		nature = new Nature();
		transmission = new Transmission();
		confidentialite = new Confidentialite();
		urgence = new Urgence();
		suiviCourriers = new ArrayList<SuiviCourrierCourrier>();
		transactions = new ArrayList<Transaction>();
		listTransactionCourrier = new ListDataModel();
		System.out.println("**************BeanInjecte CourrierSuiviBean *********");
	}

	@PostConstruct
	public void Initialize() {
		try {
			courrier = vb.getCourrier();
			nature = vb.getNature();
			transmission = vb.getTransmission();
			confidentialite = vb.getConfidentialite();
			urgence = vb.getUrgence();
			ldapOperation = new LdapOperation();
			transactions = appMgr.getTransactionByIdDossier(vb.getReferenceDossier());
			SuiviCourrierCourrier suiviCourrier;
			Expdest expDest;
			int refTypeTr;
			String listDestinataire;
			for (Transaction tr : transactions) {
				suiviCourrier = new SuiviCourrierCourrier();
				suiviCourrier.setTransaction(tr);
				refTypeTr = tr.getTypetransaction().getTypeTransactionId();
				Typetransaction typetransaction = new Typetransaction();
				typetransaction = appMgr.getTypeTransactionById(refTypeTr).get(0);
				suiviCourrier.setTypeTransaction(typetransaction);
				listDestinataire = "";
				expDest = new Expdest();
				expDest = appMgr.getListExpDestByIdExpDest(tr.getExpdest().getIdExpDest()).get(0);
				//*****DEBUT NADER
//				if (expDest.getTypeExpDest().equals("Interne-Person")) {
//					suiviCourrier.setExpediteur(ldapOperation.getCnById(ldapOperation.CONTEXT_USER, "uid", expDest.getIdExpDestLdap()));
//				}else if (expDest.getTypeExpDest().equals("Interne-Unité")) {
//					suiviCourrier.setExpediteur(ldapOperation.getCnById(ldapOperation.CONTEXT_UNIT, "departmentNumber", expDest.getIdExpDestLdap()));
//				}else if (expDest.getTypeExpDest().equals("Interne-Boc")) {
//					suiviCourrier.setExpediteur(ldapOperation.getCnById(ldapOperation.CONTEXT_BOC, "departmentNumber", expDest.getIdExpDestLdap()));
//				}else if (expDest.getTypeExpDest().equals("Externe")) {
//					Expdestexterne expDestExte = new Expdestexterne();
//					expDestExte = appMgr.getExpediteurById(expDest.getExpdestexterne().getIdExpDestExterne()).get(0);
//					if (expDestExte.getTypeutilisateur().getTypeUtilisateurLibelle().equals("PP")) {
//						suiviCourrier.setExpediteur(expDestExte.getExpDestExterneNom()+" (PP)");
//					} else {
//						suiviCourrier.setExpediteur(expDestExte.getExpDestExterneNom()+" (PM)");
//					}
//				}
				//****FIN NADER
				//****DEBUT KHALED
				if (expDest.getTypeExpDest().equals("Interne-Person")) {
//					 Person person = ldapOperation.getUserById(expDest.getIdExpDestLdap());
					suiviCourrier.setExpediteur(ldapOperation.getUserById(expDest.getIdExpDestLdap()).getCn());
					//consulterInformations.setCourrierExpediteur(person.getCn());
					//consulterInformations.setCourrierExpediteurObjet(person);
				} else if (expDest.getTypeExpDest().equals("Interne-Unité")) {
//					 Unit unit = ldapOperation.getUnitById(expDest.getIdExpDestLdap());
					suiviCourrier.setExpediteur(ldapOperation.getUnitById(expDest.getIdExpDestLdap()).getNameUnit());
					//consulterInformations.setCourrierExpediteurObjet(unit);
				} else if (expDest.getTypeExpDest().equals("Interne-Boc")) {
					Unit unit = new Unit();
					unit = ldapOperation.getBocById(expDest.getIdExpDestLdap());
					suiviCourrier.setExpediteur(unit.getNameUnit());
				} else if (expDest.getTypeExpDest().equals("Externe")) {
					if (expDest.getExpdestexterne().getTypeutilisateur()
							.getTypeUtilisateurLibelle().equals("PP")) {
						suiviCourrier.setExpediteur(expDest
								.getExpdestexterne().getExpDestExterneNom() + " " + expDest.getExpdestexterne().getExpDestExternePrenom()
								+ " (PP)");
						//consulterInformations.setCourrierExpediteurObjet(expDest
						//	.getExpdestexterne());
					} else {
						suiviCourrier.setExpediteur(expDest
								.getExpdestexterne().getExpDestExterneNom()
								+ " (PM)");
						//consulterInformations.setCourrierExpediteurObjet(expDest
						//		.getExpdestexterne());
					}
				}
				//****FIN KHALED
				if (tr.getTransactionDestinationReelle() != null) {
					TransactionDestinationReelle transactionDestinationReelle = new TransactionDestinationReelle();
					Expdestexterne expDestExterne ;
					transactionDestinationReelle = tr.getTransactionDestinationReelle();
					if(transactionDestinationReelle.getTransactionDestinationReelleTypeDestinataire().equals("Externe")){
						expDestExterne = new Expdestexterne();
						expDestExterne = appMgr.getExpediteurById(transactionDestinationReelle.getTransactionDestinationReelleIdDestinataire()).get(0);
						if (expDestExterne.getTypeutilisateur().getTypeUtilisateurLibelle().equals("PP")) {
							suiviCourrier.setDestinataireReelle(expDestExterne.getExpDestExterneNom()+" (PP)");
						} else {
							suiviCourrier.setDestinataireReelle(expDestExterne.getExpDestExterneNom()+" (PM)");
						}
						TransactionDestination transactionDestination = new TransactionDestination();
						transactionDestination = appMgr.getListTransactionDestinationByIdTransaction(tr.getTransactionId()).get(0);
						expDest = new Expdest();
						expDest = appMgr.getListExpDestByIdExpDest(transactionDestination.getId().getIdExpDest()).get(0);
						if (expDest.getTypeExpDest().equals("Interne-Person")) {
							suiviCourrier.setListDestinataire(ldapOperation.getCnById(ldapOperation.CONTEXT_USER, "uid", expDest.getIdExpDestLdap()));
						}else if (expDest.getTypeExpDest().equals("Interne-Unité")) {
							suiviCourrier.setListDestinataire(ldapOperation.getCnById(ldapOperation.CONTEXT_UNIT, "departmentNumber", expDest.getIdExpDestLdap()));
						}else if (expDest.getTypeExpDest().equals("Interne-Boc")) {
							suiviCourrier.setListDestinataire(ldapOperation.getCnById(ldapOperation.CONTEXT_BOC, "departmentNumber", expDest.getIdExpDestLdap()));
						}else if (expDest.getTypeExpDest().equals("Externe")) {
							Expdestexterne expDestExte = new Expdestexterne();
							expDestExte = appMgr.getExpediteurById(expDest.getExpdestexterne().getIdExpDestExterne()).get(0);
							if (expDestExte.getTypeutilisateur().getTypeUtilisateurLibelle().equals("PP")) {
								suiviCourrier.setListDestinataire(expDestExte.getExpDestExterneNom()+" (PP)");
							} else {
								suiviCourrier.setListDestinataire(expDestExte.getExpDestExterneNom()+" (PM)");
							}
						}
					}
				}else{
					List<TransactionDestination> listTransactionDestination = new ArrayList<TransactionDestination>();
					listTransactionDestination = appMgr.getListTransactionDestinationByIdTransaction(tr.getTransactionId());
					for (TransactionDestination transactionDestination : listTransactionDestination) {
						expDest = new Expdest();
						expDest = appMgr.getListExpDestByIdExpDest(transactionDestination.getId().getIdExpDest()).get(0);
						if (expDest.getTypeExpDest().equals("Interne-Person")) {
							listDestinataire = listDestinataire + ldapOperation.getCnById(ldapOperation.CONTEXT_USER, "uid", expDest.getIdExpDestLdap()) + " / ";
							//suiviCourrier.setExpediteur(ldapOperation.getCnById(ldapOperation.CONTEXT_USER, "uid", expDest.getIdExpDestLdap()));
						} else if (expDest.getTypeExpDest().equals("Interne-Unité")) {
							listDestinataire = listDestinataire + ldapOperation.getCnById(ldapOperation.CONTEXT_UNIT, "departmentNumber", expDest.getIdExpDestLdap()) + " / ";
							//suiviCourrier.setExpediteur(ldapOperation.getCnById(ldapOperation.CONTEXT_UNIT, "departmentNumber", expDest.getIdExpDestLdap()));
						} else if (expDest.getTypeExpDest().equals("Externe")) {
							if (expDest.getExpdestexterne().getTypeutilisateur().getTypeUtilisateurLibelle().equals("PP")) {
								listDestinataire = listDestinataire + expDest.getExpdestexterne().getExpDestExterneNom()+" (PP)" + " / ";
							} else {
								listDestinataire = listDestinataire + expDest.getExpdestexterne().getExpDestExterneNom()+" (PM)" + " / ";
							}
						}
					}
					if (!listDestinataire.equals("")) {
						int lastIndex = listDestinataire.lastIndexOf("/");
						listDestinataire = listDestinataire.substring(0, lastIndex);
					}
					suiviCourrier.setListDestinataire(listDestinataire);
					suiviCourrier.setDestinataireReelle(listDestinataire);
				}
				suiviCourriers.add(suiviCourrier);
			}
			listTransactionCourrier.setWrappedData(suiviCourriers);
			System.out
					.println("*******ChargementAvecSucces   CourrierSuiviBean******");
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("*******ErreurDeChargement CourrierSuiviBean*******");
		}

	}
	
	public void getSelectedRow(){
		suiviCourrier = new SuiviCourrierCourrier();
		suiviCourrier = (SuiviCourrierCourrier) listTransactionCourrier.getRowData();
	}

	// ************Getter & Setter********************
	@SuppressWarnings("unchecked")
	public long getRecords() {
		if (listTransactionCourrier == null
				&& listTransactionCourrier.getWrappedData() == null)
			records = 0;
		else
			records = ((List<SuiviCourrier>) listTransactionCourrier
					.getWrappedData()).size();
		return records;
	}

	public VariableGlobale getVb() {
		return vb;
	}

	public void setVb(VariableGlobale vb) {
		this.vb = vb;
	}

	public Export getExport() {
		return export;
	}

	public void setExport(Export export) {
		this.export = export;
	}

	public Courrier getCourrier() {
		return courrier;
	}

	public void setCourrier(Courrier courrier) {
		this.courrier = courrier;
	}

	public Nature getNature() {
		return nature;
	}

	public void setNature(Nature nature) {
		this.nature = nature;
	}

	public Transmission getTransmission() {
		return transmission;
	}

	public void setTransmission(Transmission transmission) {
		this.transmission = transmission;
	}

	public Confidentialite getConfidentialite() {
		return confidentialite;
	}

	public void setConfidentialite(Confidentialite confidentialite) {
		this.confidentialite = confidentialite;
	}


	public Urgence getUrgence() {
		return urgence;
	}

	public void setUrgence(Urgence urgence) {
		this.urgence = urgence;
	}

	public void setSuiviCourriers(List<SuiviCourrierCourrier> suiviCourriers) {
		this.suiviCourriers = suiviCourriers;
	}

	public List<SuiviCourrierCourrier> getSuiviCourriers() {
		return suiviCourriers;
	}

	public void setTransactions(List<Transaction> transactions) {
		this.transactions = transactions;
	}

	public List<Transaction> getTransactions() {
		return transactions;
	}

	public void setListTransactionCourrier(DataModel listTransactionCourrier) {
		this.listTransactionCourrier = listTransactionCourrier;
	}

	public DataModel getListTransactionCourrier() {
		return listTransactionCourrier;
	}

	public void setLdapOperation(LdapOperation ldapOperation) {
		this.ldapOperation = ldapOperation;
	}

	public LdapOperation getLdapOperation() {
		return ldapOperation;
	}

	public void setSuiviCourrier(SuiviCourrierCourrier suiviCourrier) {
		this.suiviCourrier = suiviCourrier;
	}

	public SuiviCourrierCourrier getSuiviCourrier() {
		return suiviCourrier;
	}
}