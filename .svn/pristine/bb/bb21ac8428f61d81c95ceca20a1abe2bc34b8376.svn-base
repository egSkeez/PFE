package xtensus.beans.common.GBO;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;
import javax.persistence.Tuple;

import org.apache.poi.hssf.util.HSSFColor.TAN;
import org.mvel2.ast.UntilNode;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import xtensus.MethdesGeneriques.MethodesGenerique;
import xtensus.aop.LogClass;
import xtensus.beans.common.LanguageManagerBean;
import xtensus.beans.common.ListeDestinatairesModel;
import xtensus.beans.common.VariableGlobale;
import xtensus.beans.common.VariableGlobaleNotification;
import xtensus.beans.utils.CourrierInformations;
import xtensus.beans.utils.Informations;
import xtensus.entity.Annotation;
import xtensus.entity.Courrier;
import xtensus.entity.CourrierDossier;
import xtensus.entity.CourrierLiens;
import xtensus.entity.Dossier;
import xtensus.entity.Etat;
import xtensus.entity.Expdest;
import xtensus.entity.Expdestexterne;
import xtensus.entity.Lienscourriers;
import xtensus.entity.Pm;
import xtensus.entity.Pp;
import xtensus.entity.Transaction;
import xtensus.entity.TransactionAnnotation;
import xtensus.entity.TransactionAnnotationId;
import xtensus.entity.TransactionDestination;
import xtensus.entity.TransactionDestinationId;
import xtensus.entity.TransactionDestinationReelle;
import xtensus.entity.Transmission;
import xtensus.entity.Typetransaction;
import xtensus.entity.Variables;
import xtensus.entity.Workflow;
import xtensus.ldap.business.LdapOperation;
import xtensus.ldap.model.BOC;
import xtensus.ldap.model.ItemSelected;
import xtensus.ldap.model.Person;
import xtensus.ldap.model.Unit;
import xtensus.services.ApplicationManager;
import xtensus.workflow.beans.JBPMAccessProcessBean;
import xtensus.workflow.handlers.TraitementEtapeSuivant;

@Component
@Scope("request")
public class CourrierConsultationRecentBean {

	// General
	private ApplicationManager appMgr;
	@Autowired
	private VariableGlobale vb;
	@Autowired
	private LanguageManagerBean lm;
	@Autowired
	private MessageSource messageSource;
	private String message;
	private LdapOperation ldapOperation;
	@Autowired
	private VariableGlobaleNotification vbn;
	// Interface fonctionnement
	private boolean showTab;
	private boolean bocOption;
	private boolean userOption;
	private boolean status1;
	private boolean status2;
	private boolean showExecuteAllButton;
	private boolean hideExecuteAllButton;
	private boolean moreChoices;
	private boolean allMailChecked;
	private boolean toValidateMailChecked;
	private boolean validatedMailChecked;
	private boolean notValidatedMailChecked;
	private boolean treatedMailChecked;


	// donnees
	private List<Transmission> listTr;
	private Variables varConsultationCourrierSecretaire;
	private Variables varConsultationCourrierSubordonne;
	private Variables varConsultationCourrierSousUnite;
	private String consultationCourrierSecretaire;
	private String consultationCourrierSubordonne;
	private String consultationCourrierSousUnite;
	private List<CourrierInformations> lstCourrierEnvoyer;
	private List<CourrierInformations> listCourrier;
	private String typeUserDes;
	private boolean disbledBontonConsultation=false;
	private Long countCourrier;
	private Long countCourrierRecu;
	private Long countCourrierEnvoyer;
	// new
	private Integer idUser;
	private String type;
	private String type1;
	private String typeSecretaire;
	private Integer typeTransmission;
	private Integer stateTraitement;
	private Date dateDebut;
	private Date dateFin;
	private CourrierInformations selectedCourrier;
	private Courrier courrier;
	private Informations info1, info2, info3;
	private List<Informations> listInfo;
	private CourrierInformations courrierInformations;
	private Transaction newTransaction;
	private int idBoc;
	private List<Integer> listIdsSousUnit;
	private List<Integer> listIdsSubordonne;
	private Variables courrierAriverToDG;
	private Variables courrierValidationHearchique;
	private List<Integer> listIdBocMembers;
	private String month;
	private int year;
	private Date dateCourrier;
	private int idBocExpediteur;
	private int idBocDestinataire;
	private Person destinationReel;
	private int IdExpediteur;
	private int idUserDes;

	// JS
	private String texteTypeCourrier;
	private String codeUniqueCourrier = "";
	private List<Variables> var;
	private boolean courrierPointer=false;
	// code de test
	public String hidden1;
	public String hidden2;
    private List<CourrierInformations> listCourriersInformationsAffecte;
    private Boolean etatReceptionPhysique;
	@Autowired
	private UserAgentProcessor userAgent;
	// For filter and Sort
	private String sortField;
	private boolean descending;
	private HashMap<String, Object> filterMap = new HashMap<String, Object>();

	// Filtre recherche
	private String typeCourrierValidationMois;
	private Boolean checkedTypeCourrierValidationMois;
	private String transmissionCourrierMois;
	private String typeCourrierTraitementMois;
	private String categorieCourrierMois;
	private String typeCourrierMois;
	private String courrierRubrique;
	private String styleMessage;
	private String variabledeTest = "test";
	private String variabledeTest2;
	private Integer variableCourrie = 5;
    private int lastIndex;
	public String getVariabledeTest() {
		
		return variabledeTest;
	}

	public void setVariabledeTest(String variabledeTest) {
		
		this.variabledeTest = variabledeTest;
	}

	// ***********************
	// AH : ajouter pour récupérer laliste des Destinataire avec leurs
	// Annotations
	private List<ListeDestinatairesModel> destinatairesAvecAnnotations;
	// KHA 12-02-2019
	private List<ListeDestinatairesModel> destinataireRepondre;
	// KHA - 25-03-2019
	private List<ItemSelected> listSelectedItem;
	private String userInput = "";

	public List<ListeDestinatairesModel> getDestinataireRepondre() {
		return destinataireRepondre;
	}

	public String submit() {
		this.userInput = "The user has entered \"" + this.userInput + " \"";
		return "";
	}

	public void setDestinataireRepondre(
			List<ListeDestinatairesModel> destinataireRepondre) {
		this.destinataireRepondre = destinataireRepondre;
	}

	// KHA
	private Unit unitSup;

	public CourrierConsultationRecentBean() {

	}

	private TransactionAnnotation ta;
	private Transaction tr;
	private int referenceSomeA;
	private boolean receptionphysiqueNonLivre;
	private boolean existeBOSansMembres;
	private int responsableBocDest=0;

	@Autowired
	public CourrierConsultationRecentBean(
			@Qualifier("applicationManager") ApplicationManager appMgr) {
		this.appMgr = appMgr;
		ldapOperation = new LdapOperation();
		listCourrier = new ArrayList<CourrierInformations>();
		listInfo = new ArrayList<Informations>();
		info1 = new Informations();
		info2 = new Informations();
		info3 = new Informations();
		listIdsSousUnit = new ArrayList<Integer>();
		listIdsSubordonne = new ArrayList<Integer>();
		dateCourrier = new Date();
		ta = new TransactionAnnotation();
		tr = new Transaction();
		listCourriersInformationsAffecte=new ArrayList<CourrierInformations>();

	}

	@PostConstruct
	public void Initialize() {
		try {
			
			etatReceptionPhysique = false;

			// C*
			courrierAriverToDG = appMgr.listVariablesById(13).get(0);
			// C*
			
			hideExecuteAllButton = true;
			countCourrier = 0L;
			listTr = appMgr.getList(Transmission.class);
			setShowTab(true);
			setBocOption(false);
			setUserOption(true);

			typeCourrierValidationMois = "";
			transmissionCourrierMois = "Tout les courriers";
			typeCourrierTraitementMois = "tous";
			categorieCourrierMois = "T";
			typeCourrierMois = "Tous";
			courrierRubrique = "6";
			checkedTypeCourrierValidationMois = false;

			if (vb.getPerson() != null) {
				if (vb.getPerson().isBoc()) {
					setShowTab(false);
					setBocOption(true);
					setUserOption(false);
				}
			}
			varConsultationCourrierSecretaire = appMgr.listVariablesById(3)
					.get(0);
			varConsultationCourrierSubordonne = appMgr.listVariablesById(4)
					.get(0);
			varConsultationCourrierSousUnite = appMgr.listVariablesById(5).get(
					0);
			consultationCourrierSecretaire = varConsultationCourrierSecretaire
					.getVaraiablesValeur();
			consultationCourrierSubordonne = varConsultationCourrierSubordonne
					.getVaraiablesValeur();
			consultationCourrierSousUnite = varConsultationCourrierSousUnite
					.getVaraiablesValeur();
			// identify connected user
			idUser = vb.getPerson().getId();
			type = "";
			type1 = "";
			if (vb.getPerson().isBoc()) {
				listIdBocMembers = new ArrayList<Integer>();
				List<Person> listBocMembers = vb.getPerson().getAssociatedBOC()
						.getMembersBOC();
				for (Person person : listBocMembers) {
					
					listIdBocMembers.add(person.getId());
				}
				type = "boc_" + vb.getPerson().getAssociatedBOC().getIdBOC();
				type1 = "";
			} else if (vb.getPerson().isResponsable()) {
				type = "unit_"
						+ vb.getPerson().getAssociatedDirection().getIdUnit();
				type1 = "sub_" + idUser;
				// NEW

				if (consultationCourrierSousUnite.equals("Non")) {
					consultationCourrierSousUnite = "Non";
					consultationCourrierSubordonne = "Non";
				} else {
					for (Unit unit : vb.getPerson().getAssociatedDirection()
							.getListUnitsChildUnit()) {
						if (consultationCourrierSousUnite.equals("Oui")) {
							listIdsSousUnit.add(unit.getIdUnit());
						}
						if (consultationCourrierSubordonne.equals("Oui")) {
							try {
								listIdsSubordonne.add(unit.getResponsibleUnit()
										.getId());
							} catch (Exception e) {
								System.out
										.println("#Sub-Unit without Responsible");
							}
						}
					}
				}
							
				
				//Liste des directions de sous BO 
				
				if (consultationCourrierSousUnite.equals("Non")) {
					consultationCourrierSousUnite = "Non";
					consultationCourrierSubordonne = "Non";
				} else{
				for (BOC boc : vb.getPerson().getAssociatedDirection()
						.getListBOChildUnit()) {
					
					 List<Unit> listUnites = boc.getListDirectionsChildBOC();
						System.out.println("listUnites sous Boc  :"+listUnites.size());

					 for(Unit unite : listUnites){
						
							if (consultationCourrierSousUnite.equals("Oui")) {
								
								listIdsSousUnit.add(unite.getIdUnit());
							}
							if (consultationCourrierSubordonne.equals("Oui")) {
								try {
									listIdsSubordonne.add(unite.getResponsibleUnit()
											.getId());
								} catch (Exception e) {
									System.out
											.println("#Sub-Unit without Responsible");
								}
							}
					 }
				
				}
				
				}
				
				
				
				
				
				
				
				
				// FIn NEW
				if (consultationCourrierSecretaire.equals("Oui")) {
					try {
						typeSecretaire = "secretary_"
								+ vb.getPerson().getAssociatedDirection()
										.getSecretaryUnit().getId();
					} catch (NullPointerException e) {
						consultationCourrierSecretaire = "Non";
					}
				}
			} else if (vb.getPerson().isSecretary()) {
				type = "secretary_" + idUser;
				type1 = "unit_"
						+ vb.getPerson().getAssociatedDirection().getIdUnit();
			} else if (vb.getPerson().isAgent()) {
				type = "agent_" + idUser;
				type1 = "";
			}
			typeTransmission = 0;
			setStateTraitement(0);
			// fin identify connected user


			Calendar calendar = Calendar.getInstance();
			calendar.set(Calendar.HOUR_OF_DAY, 0);
			calendar.set(Calendar.MINUTE, 0);
			calendar.set(Calendar.SECOND, 0);
			calendar.set(Calendar.MILLISECOND, 0);
			dateDebut = calendar.getTime();

			// calendar.add(Calendar.DATE, 1);
			calendar.set(Calendar.HOUR_OF_DAY, 23);
			calendar.set(Calendar.MINUTE, 59);
			calendar.set(Calendar.SECOND, 59);
			calendar.set(Calendar.MILLISECOND, 999);
			dateFin = calendar.getTime();

			String calMonth = calendar.getDisplayName(Calendar.MONTH,
					Calendar.LONG, Locale.FRANCE);
			month = calMonth.substring(0, 3);
			if (calMonth.length() > 0) {
				month += ".";
			}

			if (userAgent.isPhone()) {
				System.out.println("it 's mine ");
				searchListCourrier("annee", filterMap, sortField, descending,
						"Tous", "T", "Tout les courriers", "tous", "", 0, 10,
						false, courrierRubrique);
			}
			year = calendar.get(Calendar.YEAR);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public List<CourrierInformations> searchListCourrier(String recent,
			HashMap<String, Object> filterMap, String sortField,
			boolean descending, String typeCourrierJour,
			String categorieCourrier, String transmissionCourrierJour,
			String typeCourrierTraitementJour, String typeCourrierValidation,
			Integer firstIndex, Integer maxResult, Boolean forRapport,
			String courrierRubrique) {
		System.out.println(" Search List Courrier ");
		try {
			Calendar calendar = Calendar.getInstance();
			if (recent.equals("annee")) {
				calendar.set(Calendar.MONTH, 0);
			}
			calendar.set(Calendar.DAY_OF_MONTH, 1);
			calendar.set(Calendar.HOUR_OF_DAY, 0);
			calendar.set(Calendar.MINUTE, 0);
			calendar.set(Calendar.SECOND, 0);
			calendar.set(Calendar.MILLISECOND, 0);
			dateDebut = calendar.getTime();
			String sousTitreDeJour = " ";
			lstCourrierEnvoyer = new ArrayList<CourrierInformations>();
			if (vb.getPerson().isBoc()) {
				vb.setTransmissionCourrierJourForRapportAncien(transmissionCourrierJour);
				vb.setTypeCourrierTraitementJourForRapportAncien(typeCourrierTraitementJour);
				vb.setCategorieCourrierJourForRapportAncien(categorieCourrier);

				// ---------------KHA : Sous Titre Rapport : ajouté le
				// 19-03-2019-------
				if ((transmissionCourrierJour.equals("Tout les courriers") || transmissionCourrierJour
						.equals("Tous les courriers"))
						&& typeCourrierTraitementJour.equals("tous")
						&& categorieCourrier.equals("T")) {
					sousTitreDeJour = "Tous";
				} else {
					String result = "";
					if (!transmissionCourrierJour.equals("Tout les courriers")) {
						if (!transmissionCourrierJour
								.equals("Tous les courriers")) {
							result = getTypeTransmissionListeCourriers(transmissionCourrierJour)
									+ " -";
						}
					}
					if (!typeCourrierTraitementJour.equals("tous")) {
						result = result
								+ getTypeTraitememtListeCourriers(typeCourrierTraitementJour)
								+ " -";
					}
					if (!categorieCourrier.equals("T")) {
						result = result
								+ getCategorieListeCourriers(categorieCourrier);

					}
					System.out.println("result = " + result);

					if (result.endsWith(" -")) {
						sousTitreDeJour = result.substring(0,
								result.length() - 2);
					} else
						sousTitreDeJour = result;
					System.out.println("===========================");
					System.out.println("sousTitreDeJour = " + sousTitreDeJour);
					System.out.println("===========================");
				}
				vb.setSousTitreRapportBoc(sousTitreDeJour);
				// ----------------------- FIN : KHA

				long startTime = System.currentTimeMillis();
				lstCourrierEnvoyer = appMgr.findCourrierEnvoyerBOCByCriteria(
						filterMap, sortField, descending, 4, dateDebut,
						dateFin, type, type1, listIdBocMembers,
						transmissionCourrierJour, typeCourrierTraitementJour,
						firstIndex, maxResult, categorieCourrier, forRapport,
						vb.getDbType(), null, 0, 0);
				System.out.println("list courrier ancien dure BOCT : "
						+ (System.currentTimeMillis() - startTime));
				for (CourrierInformations courrierInformations : lstCourrierEnvoyer) {
					try {
						System.out.println("1234 : "
								+ courrierInformations.getDestReelList());

						searchExpediteurDestinataire(courrierInformations);
					} catch (Exception e) {
						e.printStackTrace();
						System.out.println("######CAUSED BY  : "
								+ courrierInformations.getCourrierReference());
						continue;
					}
				}
			} else {
				Integer courrierRubriqueId = Integer.valueOf(courrierRubrique);
				vb.setTypeCourrierJourForRapportAncien(typeCourrierJour);
				vb.setTypeCourrierValidationJourForRapportAncien(typeCourrierValidation);
				vb.setCourrierRubrique(courrierRubrique);

				// ------------------------ KHA : SOUS TITRE autre BOC
				// --------------------

				if (vb.getPerson().isResponsable()) {
					// --------- 1: si connectee est un responsable
					if (typeCourrierJour.equals("Tous")
							&& courrierRubrique.equals("1")) {
						sousTitreDeJour = "Tous";

					} else {
						String result = "";
						if (!typeCourrierJour.equals("Tous")) {
							result = getTypeCourrierListeCourriers(typeCourrierJour)
									+ " -";
						}
						if (!courrierRubrique.equals("1")) {
							result = result
									+ getRubriqueListeCourriers(courrierRubriqueId);
						}

						System.out.println("result = " + result);

						if (result.endsWith(" -")) {
							sousTitreDeJour = result.substring(0,
									result.length() - 2);
						} else
							sousTitreDeJour = result;
						System.out.println("===========================");
						System.out.println("sousTitreDeJour = "
								+ sousTitreDeJour);
						System.out.println("===========================");
						vb.setSousTitreRapportResponsable(sousTitreDeJour);
						System.out.println("SousTitreRapportResponsable = "
								+ vb.getSousTitreRapportResponsable());

					}

				} else {
					// --------- 2: si connectee est un Secretaire ou Agent
					sousTitreDeJour = getTypeCourrierListeCourriers(typeCourrierJour);
					vb.setSousTitreRapportSecAgent(sousTitreDeJour);
				}
				System.out.println("SousTitreRapportResponsable=  "
						+ vb.getSousTitreRapportResponsable());
				System.out.println("SousTitreRapportSecAgent=  "
						+ vb.getSousTitreRapportSecAgent());
				System.out.println("sousTitreDeJour=  " + sousTitreDeJour);

				// ----------------------------FIN :
				// KHA--------------------------------------------

				// if (typeCourrierJour.equals("Tous")
				// || typeCourrierJour.equals("Envoyes")) {
				// if (!typeCourrierValidation.equals("Avalider")) {
				long startTime = System.currentTimeMillis();
				lstCourrierEnvoyer = appMgr
						.findCourrierEnvoyerANDRecuByCriteria(vb.getPerson()
								.isResponsable(), listIdsSousUnit,
								listIdsSubordonne, filterMap, sortField,
								descending, consultationCourrierSecretaire,
								consultationCourrierSubordonne,
								consultationCourrierSousUnite, 4, dateDebut,
								dateFin, type, type1, typeSecretaire, idUser,
								typeTransmission, typeCourrierValidation,
								firstIndex, maxResult, forRapport,
								courrierRubriqueId, typeCourrierJour, vb
										.getDbType(), null, 0, 0);
				System.out.println("list courrier ancien dure RESPONSIBLE : "
						+ (System.currentTimeMillis() - startTime));
				for (CourrierInformations courrierInformations : lstCourrierEnvoyer) {
					try {
						
						searchExpediteurDestinataire(courrierInformations);
					} catch (Exception e) {
						e.printStackTrace();
						System.out.println("######CAUSED BY : "
								+ courrierInformations.getCourrierReference());
						continue;
					}
				}
				System.out
						.println("list courrier ancien dure RESPONSIBLE with Exp & Dest : "
								+ (System.currentTimeMillis() - startTime));
			}
			listCourrier.clear();
			listCourrier.addAll(lstCourrierEnvoyer);
//			System.out.println("listCourrier 2 " + listCourrier.size());
			texteTypeCourrier = "<form method='post' id='form'><table width=100% border=1 class='datatable table table-striped table-bordered' >";
			if (listCourrier.size() > 0) {
				for (int k = 0; k < listCourrier.size(); k++) {
//					System.out
//							.println("Style" + listCourrier.get(k).getStyle());
					int idCourrier = listCourrier.get(k).getCourrierID();
					userInput = listCourrier.get(k)
							.getCourrierDestinataireReelle();
					texteTypeCourrier += "<tr onclick='fctClick(this)'>"
							+ "<td valign=top width=50% styleClass='#{courrierConsultationRecentBean.styleMessage}'><input type='hidden' id='input_1' value="
							+ idCourrier
							+ " name="
							+ idCourrier
							+ "/><a href=''><ul class='list-unstyled'><li>"
							+ listCourrier.get(k)
									.getCourrierDestinataireReelle() + "<ul>"
							+ "<li>"
							+ listCourrier.get(k).getCourrierDestinataireReelleDirection()
							+ "</li>" + "<li>" + "<li>"
							+ listCourrier.get(k).getCourrierObjet()
							+ "</li>" + "<li>"
							+ listCourrier.get(k).getCourrierCommentaire()
							+ "</li></ul></li></ul></a>";

					texteTypeCourrier += "</td>";

					texteTypeCourrier += "</tr>";

				}

				texteTypeCourrier += "</table></form>";

			}

			return listCourrier;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	public List<CourrierInformations> searchListCourrierAnnee(String recent,
			HashMap<String, Object> filterMap, String sortField,
			boolean descending, String typeCourrierJour,
			String categorieCourrier, String transmissionCourrierJour,
			String typeCourrierTraitementJour, String typeCourrierValidation,
			Integer firstIndex, Integer maxResult, Boolean forRapport,
			String courrierRubrique) {
		try {
			Calendar calendar = Calendar.getInstance();
			if (recent.equals("annee")) {
				calendar.set(Calendar.MONTH, 0);
			}
			calendar.set(Calendar.DAY_OF_MONTH, 1);
			calendar.set(Calendar.HOUR_OF_DAY, 0);
			calendar.set(Calendar.MINUTE, 0);
			calendar.set(Calendar.SECOND, 0);
			calendar.set(Calendar.MILLISECOND, 0);
			dateDebut = calendar.getTime();
			String sousTitreDeJour = "";
			lstCourrierEnvoyer = new ArrayList<CourrierInformations>();
			if (vb.getPerson().isBoc()) {
				vb.setTransmissionCourrierJourForRapportAncien(transmissionCourrierJour);
				vb.setTypeCourrierTraitementJourForRapportAncien(typeCourrierTraitementJour);
				vb.setCategorieCourrierJourForRapportAncien(categorieCourrier);

				// ---------------KHA : Sous Titre Rapport : ajouté le
				// 19-03-2019-------
				if ((transmissionCourrierJour.equals("Tout les courriers") || transmissionCourrierJour
						.equals("Tous les courriers"))
						&& typeCourrierTraitementJour.equals("tous")
						&& categorieCourrier.equals("T")) {
					sousTitreDeJour = "Tous";
				} else {
					String result = "";
					if (!transmissionCourrierJour.equals("Tout les courriers")) {
						if (!transmissionCourrierJour
								.equals("Tous les courriers")) {
							result = getTypeTransmissionListeCourriers(transmissionCourrierJour)
									+ " -";
						}
					}
					if (!typeCourrierTraitementJour.equals("tous")) {
						result = result
								+ getTypeTraitememtListeCourriers(typeCourrierTraitementJour)
								+ " -";
					}
					if (!categorieCourrier.equals("T")) {
						result = result
								+ getCategorieListeCourriers(categorieCourrier);

					}
					System.out.println("result = " + result);

					if (result.endsWith(" -")) {
						sousTitreDeJour = result.substring(0,
								result.length() - 2);
					} else
						sousTitreDeJour = result;
					System.out.println("===========================");
					System.out.println("sousTitreDeJour = " + sousTitreDeJour);
					System.out.println("===========================");
				}
				vb.setSousTitreRapportBoc(sousTitreDeJour);
				// ----------------------- FIN : KHA

				long startTime = System.currentTimeMillis();
				lstCourrierEnvoyer = appMgr.findCourrierEnvoyerBOCByCriteria(
						filterMap, sortField, descending, 3, dateDebut,
						dateFin, type, type1, listIdBocMembers,
						transmissionCourrierJour, typeCourrierTraitementJour,
						firstIndex, maxResult, categorieCourrier, forRapport,
						vb.getDbType(), null, 0, 0);
				System.out.println("list courrier ancien dure BOCT : "
						+ (System.currentTimeMillis() - startTime));
				for (CourrierInformations courrierInformations : lstCourrierEnvoyer) {
					try {
						searchExpediteurDestinataire(courrierInformations);
					} catch (Exception e) {
						e.printStackTrace();
						System.out.println("######CAUSED BY  : "
								+ courrierInformations.getCourrierReference());
						continue;
					}
				}
			} else {
				Integer courrierRubriqueId = Integer.valueOf(courrierRubrique);
				vb.setTypeCourrierJourForRapportAncien(typeCourrierJour);
				vb.setTypeCourrierValidationJourForRapportAncien(typeCourrierValidation);
				vb.setCourrierRubrique(courrierRubrique);

				// ------------------------ KHA : SOUS TITRE autre BOC
				// --------------------

				if (vb.getPerson().isResponsable()) {
					// --------- 1: si connectee est un responsable
					if (typeCourrierJour.equals("Tous")
							&& courrierRubrique.equals("1")) {
						sousTitreDeJour = "Tous";

					} else {
						String result = "";
						if (!typeCourrierJour.equals("Tous")) {
							result = getTypeCourrierListeCourriers(typeCourrierJour)
									+ " -";
						}
						if (!courrierRubrique.equals("1")) {
							result = result
									+ getRubriqueListeCourriers(courrierRubriqueId);
						}

						System.out.println("result = " + result);

						if (result.endsWith(" -")) {
							sousTitreDeJour = result.substring(0,
									result.length() - 2);
						} else
							sousTitreDeJour = result;
						System.out.println("===========================");
						System.out.println("sousTitreDeJour = "
								+ sousTitreDeJour);
						System.out.println("===========================");
						vb.setSousTitreRapportResponsable(sousTitreDeJour);
						System.out.println("SousTitreRapportResponsable = "
								+ vb.getSousTitreRapportResponsable());

					}

				} else {
					// --------- 2: si connectee est un Secretaire ou Agent
					sousTitreDeJour = getTypeCourrierListeCourriers(typeCourrierJour);
					vb.setSousTitreRapportSecAgent(sousTitreDeJour);
				}

				// ----------------------------FIN :
				// KHA--------------------------------------------

				// if (typeCourrierJour.equals("Tous")
				// || typeCourrierJour.equals("Envoyes")) {
				// if (!typeCourrierValidation.equals("Avalider")) {
				long startTime = System.currentTimeMillis();
				lstCourrierEnvoyer = appMgr
						.findCourrierEnvoyerANDRecuByCriteria(vb.getPerson()
								.isResponsable(), listIdsSousUnit,
								listIdsSubordonne, filterMap, sortField,
								descending, consultationCourrierSecretaire,
								consultationCourrierSubordonne,
								consultationCourrierSousUnite, 3, dateDebut,
								dateFin, type, type1, typeSecretaire, idUser,
								typeTransmission, typeCourrierValidation,
								firstIndex, maxResult, forRapport,
								courrierRubriqueId, typeCourrierJour, vb
										.getDbType(), null, 0, 0);
				System.out.println("list courrier ancien dure RESPONSIBLE : "
						+ (System.currentTimeMillis() - startTime));
				for (CourrierInformations courrierInformations : lstCourrierEnvoyer) {
					try {
						searchExpediteurDestinataire(courrierInformations);
					} catch (Exception e) {
						e.printStackTrace();
						System.out.println("######CAUSED BY : "
								+ courrierInformations.getCourrierReference());
						continue;
					}
				}
				System.out
						.println("list courrier ancien dure RESPONSIBLE with Exp & Dest : "
								+ (System.currentTimeMillis() - startTime));
			}
			listCourrier.clear();
			listCourrier.addAll(lstCourrierEnvoyer);

			return listCourrier;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	public void searchExpediteurDestinataire(
			CourrierInformations courrierInformations) throws Exception {
		System.out.println("AH : DANS searchExpediteurDestinataire ");
		// []
		Transaction transaction = appMgr.getListTransactionByIdTransaction(
				courrierInformations.getTransactionID()).get(0);
		System.out.println("transaction Refere Courrier : "
				+ transaction.getCourrierReferenceCorrespondant());
		courrierInformations.setTransaction(transaction);
		courrierInformations.setTransmission(appMgr.getCourrierByIdCourrier(
				courrierInformations.getCourrierID()).get(0).getTransmission());
		System.out.println("2019-05-21 : "
				+ courrierInformations.getTransaction()
						.getCourrierReferenceCorrespondant());

		// kha =========

		courrierInformations.setCourrier(appMgr.getCourrierByIdCourrier(
				courrierInformations.getCourrierID()).get(0));


		// ======
		System.out.println(" courrier id = "
				+ courrierInformations.getCourrier().getNature().getNatureId());
		// AH :
		destinatairesAvecAnnotations = new ArrayList<ListeDestinatairesModel>();
		listSelectedItem = new ArrayList<ItemSelected>();

		List<Object> listSelectedObject = new ArrayList<Object>();
		List<Person> listSelectedPerson = new ArrayList<Person>();
		List<Pp> listSelectetdPP = new ArrayList<Pp>();
		List<Pm> listSelectetdPM = new ArrayList<Pm>();
		List<Unit> listSelectetdUnit = new ArrayList<Unit>();
		List<BOC> listSelectetdBoc = new ArrayList<BOC>();

		Integer etatID = courrierInformations.getEtatID();
		System.out.println("get id transaction :"
				+ courrierInformations.getTransactionID());
		// get transaction destinataire by id transaction
		List<TransactionDestination> listDestinataire = appMgr.getDestinationByIdTransaction(courrierInformations.getTransactionID());


		if(listDestinataire != null && listDestinataire.size()>0){
			TransactionDestination BocSuivant = listDestinataire.get(0);



		System.out.println("ID BOC Suivant : "
				+ BocSuivant.getTransactionDestIdIntervenant());
		String expType;
		Integer expTypeUser;
		Integer expLdap;
		String expNom;
		String expPrenom;
		if (courrierInformations.getCourrierOldNum() == null) {
			expType = courrierInformations.getExpType();
			expTypeUser = courrierInformations.getExpTypeUser();
			expLdap = courrierInformations.getExpLdap();
			expNom = courrierInformations.getExpNom();
			expPrenom = courrierInformations.getExpPrenom();
		} else {
			expType = courrierInformations.getExpTypeOld();
			expTypeUser = courrierInformations.getExpTypeUserOld();
			expLdap = courrierInformations.getExpLdapOld();
			expNom = courrierInformations.getExpNomOld();
			expPrenom = courrierInformations.getExpPrenomOld();
		}
		// expediteur reel
		String expediteur = "";
		String destinataireExpediteur = "";
		if (vb.getPerson().isBoc()) {
			if (vb.getPerson().isResponsableBO()) {
				System.out.println(" is responsable BO");
			} else if (vb.getPerson().isAgentBO()) {
				System.out.println(" is AGENT BO");
			}
		}
		// KHA : variableExecution ===>Si la valeur de la variable est à Oui
		// nous avons tous les types membre du Bureau d’Ordre
		// a l’accès à l’exécution d’un Courrier.
		// Si la valeur de la variable à Non, seul le responsable du Bureau
		// d’ordre exécute le Courrier.
		Variables variableExecution = appMgr.listVariablesByLibelle(
				"execution_courrier_par_tous_types_membre_bo").get(0);

		System.out.println("Type Expiditeur:" + expType);
		if (expType.equals("Interne-Person")) {
			System.out.println(" DANS  Interne-Person");
			if (expLdap.equals(vb.getPerson().getId())) {
				courrierInformations.setCourrierRecu(0);
			}

			// : Pas de Passage par DG
			// System.out.println("courrierAriverToDG :"+courrierAriverToDG.getVaraiablesValeur());

			// hidden par KHA// if
			// (courrierAriverToDG.getVaraiablesValeur().equals("Non")) {
			/***
			 * test pour que boc execute un courrier
			 */
			System.out.println("courrierInformations.getTransactionOrdre :"
					+ courrierInformations.getTransactionOrdre());
			System.out.println("etat :" + etatID);

			// KHA : Seulement le responsable BO peut exécuter
			if (variableExecution.getVaraiablesValeur().equals("Non")) {
				if (vb.getPerson().getAssociatedBOC() != null
						&& courrierInformations.getTransactionOrdre() == null
						&& etatID.equals(5)) {
					System.out.println("2019-05-18 welcome ");
					courrierInformations.setCourrierAValider(1);
				} else

					System.out
							.println(" //[]: test pour que boc execute un courrier de destination interne-Person avec ordre de transaction != null");
				// []: test pour que boc execute un courrier de destination
				// interne-Person avec ordre de transaction != null
				// if(vb.getPerson().getAssociatedBOC() != null &&
				// courrierInformations.getTransactionOrdre() != null &&
				// etatID.equals(5)){
				// KHA : ajouté le test si le connectee est resp BO

				if (vb.getPerson().getAssociatedBOC() != null
						&& vb.getPerson().isResponsableBO()
						&& courrierInformations.getTransactionOrdre() != null
						&& etatID.equals(5)) {
					System.out.println("-->courrier Interne à executer ");
					courrierInformations.setCourrierAValider(1);

				}
			}
			// KHA : touls les Membres(Agent/Responsable) de BO peuvent exécuter
			else {
				// [] 2019-05-18 :ajouter condition where BOC connecté a le meme
				// id que le boc qui sera executer courrier

				System.out
						.println("2019-05-18 : vb.getPerson().getAssociatedBOC() : "
								+ vb.getPerson().getAssociatedBOC());
				System.out.println("2019-05-18 : etatID.equals(5) : "
						+ etatID.equals(5));
				System.out
						.println("2019-05-18 : BocSuivant.getTransactionDestIdIntervenant() : "
								+ BocSuivant.getTransactionDestIdIntervenant());

				if (vb.getPerson().getAssociatedBOC() != null
						&& courrierInformations.getTransactionOrdre() != null
						&& etatID.equals(5)
						&& vb.getPerson().getAssociatedBOC().getIdBOC() == BocSuivant
								.getTransactionDestIdIntervenant()) {
					System.out.println("-->courrier Interne à executer ");
					courrierInformations.setCourrierAValider(1);

				}

			}
			// }
			Person person = vb.getHashMapAllUser().get(expLdap);
			System.out.println("person : " + person);
			Person p = vb.getLdapOperation().getPersonalisedUserById(
					person.getId());
			System.out.println("person ================> " + p);
			if (p.isResponsable() || p.isAgent() || p.isSecretary()) {
				System.out.println("===========> "
						+ p.getAssociatedDirection().getShortNameUnit());
				destinataireExpediteur = p.getAssociatedDirection()
						.getShortNameUnit();
				System.out.println("directionPerson : "
						+ destinataireExpediteur);

			}
			System.out.println("person.isboc 2: " + p.isBoc());
			if (p.getAssociatedBOC() != null) {
				System.out.println("person.isboc 3: " + p.isBoc());
				destinataireExpediteur = "BOC";

			}
			expediteur = person.getCn();
		} else if (expType.equals("Interne-Unité")) {
			System.out.println(" DANS execute Interne-Unité");
			if (vb.getPerson().isResponsable()
					&& !vb.getPerson().isBoc()
					&& expLdap.equals(vb.getPerson().getAssociatedDirection()
							.getIdUnit())) {
				courrierInformations.setCourrierRecu(0);
			}
			// hidden par KHA //if
			// (courrierAriverToDG.getVaraiablesValeur().equals("Non")) {
			/***
			 * test pour que boc execute un courrier
			 */

			if (variableExecution.getVaraiablesValeur().equals("Non")) {

				if (vb.getPerson().getAssociatedBOC() != null
						&& courrierInformations.getTransactionOrdre() == null
						&& etatID.equals(5)) {
					courrierInformations.setCourrierAValider(1);

				} else
					System.out
							.println(" //[]: test pour que boc execute un courrier de destination interne-unité avec ordre de transaction != null");

				// ajouter partie connected person is responsable responsable
				// ==========KHA
				// []: test pour que boc execute un courrier de destination
				// interne-unité avec ordre de transaction != null
				// if(vb.getPerson().getAssociatedBOC() != null &&
				// courrierInformations.getTransactionOrdre() != null &&
				// etatID.equals(5)){
				// KHA : ajouté le test si le connectee est resp BO
				if (vb.getPerson().getAssociatedBOC() != null
						&& vb.getPerson().isResponsableBO()
						&& courrierInformations.getTransactionOrdre() != null
						&& etatID.equals(5)) {
					courrierInformations.setCourrierAValider(1);
				}

			} else if (vb.getPerson().getAssociatedBOC() != null
					&& courrierInformations.getTransactionOrdre() != null
					&& etatID.equals(5)) {
				courrierInformations.setCourrierAValider(1);
				if(courrierInformations.getTransmission().getTransmissionId() != null){
					if(courrierInformations.getTransmission().getTransmissionId()==11){
					//Enveloppe : Caché bouton execution 
					System.out.println("### 8===> 1 ###");
					courrierInformations.setCourrierAValider(0);
					System.out.println("Affiche bouton Execute 1 : "+courrierInformations.getCourrierAValider());}
				}
				
				List<CourrierLiens> list = appMgr.getCourrierLiensByCourrierId(courrierInformations.getCourrierID());

				for(CourrierLiens liensCourrier:list){
					int courrierLien=liensCourrier.getId().getLiensCourrier();
					System.out.println("Courrier Lien ===========> "+courrierLien);
					List<Lienscourriers> list2 = appMgr.getCourrierL(courrierLien);
					System.out.println("list2=========>"+list2.size());
					for(Lienscourriers lienncourrier:list2){
						System.out.println("========================================== 2020-02-15 ============================================================");
						System.out.println("lien id tr 1 ===========================> "+lienncourrier.getCourrier().getTransmission().getTransmissionId());
						System.out.println("lien id tr 2============================> "+lienncourrier.getCourrier().getTransmission().getTransmissionId());
						System.out.println("Tr Courrier en cours====================>  "+courrierInformations.getTransmission().getTransmissionId());
						System.out.println("========================================== 2020-02-15 ============================================================");

						if((lienncourrier.getCourrier().getTransmission().getTransmissionId()==11 || lienncourrier.getCourrier().getTransmission().getTransmissionId()==9) && 
								courrierInformations.getTransmission().getTransmissionId()==10){
							disbledBontonConsultation=true;
						courrierInformations.setDisbledBontonConsultation(disbledBontonConsultation);
						courrierInformations.setCourrierAValider(0);
						System.out.println("Disabled True ");
						}
					}
					
				}
				
				
				
				
				
				
				
				
				
				
				

			}
			// }
			Unit unit = vb.getHashMapUnit().get(expLdap);
			System.out.println("unit : " + unit);
			destinataireExpediteur = unit.getShortNameUnit();
			System.out.println("destinataireExpediteur : "
					+ destinataireExpediteur);
			expediteur = unit.getNameUnit();
		} else if (expType.equals("Interne-Boc")) {
			expediteur = vb.getCentralBoc().getNameBOC();
			// if (courrierAriverToDG.getVaraiablesValeur().equals("Non")) {
			/***
			 * test pour que boc execute un courrier
			 */

			System.out.println(" DANS execute Interne-Boc");
			if (variableExecution.getVaraiablesValeur().equals("Non")) {
				if (vb.getPerson().getAssociatedBOC() != null
						&& courrierInformations.getTransactionOrdre() == null
						&& etatID.equals(5)) {
					courrierInformations.setCourrierAValider(1);

				}

				else if (vb.getPerson().getAssociatedBOC() != null
						&& vb.getPerson().isResponsableBO()
						&& courrierInformations.getTransactionOrdre() != null
						&& etatID.equals(5)) {
					courrierInformations.setCourrierAValider(1);
				}
			} else if (vb.getPerson().getAssociatedBOC() != null
					&& courrierInformations.getTransactionOrdre() != null
					&& etatID.equals(5)) {
				courrierInformations.setCourrierAValider(1);

			}

			// }
		} else if (expType.equals("Externe")) {

			System.out.println(" DANS execute Externe");
			// C* pour que le bouton executer soit activé pour les courriers
			// d'arrivé
			// provisoire .. juste pour activer l'execution des courrier arrivé
			// pour le BOCT
			// if (courrierAriverToDG.getVaraiablesValeur().equals("Non")) {
			// if (vb.getPerson().getAssociatedBOC() != null &&
			// courrierInformations.getTransactionOrdre() == null &&
			// etatID.equals(5)) {
			// KHA
			if (variableExecution.getVaraiablesValeur().equals("Non")) {
				if (vb.getPerson().getAssociatedBOC() != null
						&& courrierInformations.getTransactionOrdre() == null
						&& etatID.equals(5)) {
					courrierInformations.setCourrierAValider(1);
				} else if (vb.getPerson().getAssociatedBOC() != null
						&& vb.getPerson().isResponsableBO()
						&& courrierInformations.getTransactionOrdre() != null
						&& etatID.equals(5)) {
					courrierInformations.setCourrierAValider(1);
				}
			} else if (vb.getPerson().getAssociatedBOC() != null
					&& courrierInformations.getTransactionOrdre() != null
					&& etatID.equals(5)) {
				courrierInformations.setCourrierAValider(1);

			}
			// }
			// provisoire .. juste pour activer l'execution des courrier arrivé
			// pour le BOCT
			// C* pour que le bouton executer soit activé pour les courriers
			// d'arrivé
			
			List<Transaction> allTransactions = appMgr
			.getTransactionByIdDossier(courrierInformations
					.getDossierID());


	courrierInformations.setCourrierAllTransactions(allTransactions);

	Transaction firstTransaction = allTransactions.get(allTransactions
			.size() - 1);
			if(courrierInformations.getCourrierAllTransactions()!=null && courrierInformations.getCourrierAllTransactions().size()>0)
			{ List<Transaction> tousTR = courrierInformations.getCourrierAllTransactions();
			System.out.println(firstTransaction.getTransactionId());
			if(firstTransaction.getExpdest().getTypeExpDest().equals("Externe")){
				expTypeUser=firstTransaction.getExpdest().getExpdestexterne().getTypeutilisateur().getTypeUtilisateurId();
				System.out.println("expTypeUser  "+expTypeUser);
				expediteur=firstTransaction.getExpdest().getExpdestexterne().getExpDestExterneNom();
				if(expTypeUser == 1)
					expediteur=expediteur+ " "+firstTransaction.getExpdest().getExpdestexterne().getExpDestExternePrenom()+" (PP)";
				else 
					expediteur=expediteur+ " (PM)";
				destinataireExpediteur = "EXT";
			}
				
			}
//			if (expTypeUser == 1) {
//				expediteur = expNom + " " + expPrenom + " (PP)";
//				destinataireExpediteur = "EXT";
//			} else {
//				expediteur = expNom + " (PM)";
//				destinataireExpediteur = "EXT";
//			}
		}
		courrierInformations.setCourrierExpediteur(expediteur);
		// courrierInformations
		// .setCourrierDestinataireReelleDirection(destinataireExpediteur);

		// [JS] 2019-10-09 Format Référence [SRV]-[Annee]/[Mois]-[ID]
//		var = appMgr
//				.listVariablesByLibelle("code_courrier_unique_personnalisable");
//		codeUniqueCourrier = "";
//		codeUniqueCourrier = var.get(0).getVaraiablesValeur();
//		System.out.println("codeUniqueCourrier ========> :"
//				+ codeUniqueCourrier);
//		System.out
//				.println("transaction.getCourrierReferenceCorrespondant()  =====> :"
//						+ transaction.getCourrierReferenceCorrespondant());
//		System.out.println("transaction.getCourrierType() =====> :"
//				+ transaction.getCourrierType());
//
//		codeUniqueCourrier = codeUniqueCourrier.replace("[ID]",
//				transaction.getCourrierReferenceCorrespondant() + "");
//
//		codeUniqueCourrier = codeUniqueCourrier.replace("[Annee]",
//				new Date().getYear() + 1900 + "");
//		codeUniqueCourrier = codeUniqueCourrier.replace("[Mois]",
//				new Date().getMonth() + 1 + "");
//		// XTE : Si le courrier est ajouté par un non Boc, il aura le type à
//		// NULL--------------------------------------------------
//		if (transaction.getCourrierType() != null) {
//			codeUniqueCourrier = codeUniqueCourrier.replace("[Sens]",
//					transaction.getCourrierType());
//		} else {
//			codeUniqueCourrier = codeUniqueCourrier.replace("[Sens]", "I");
//		}
//		System.out.println("courrier type = "
//				+ vb.getCourrier().getCourrierType());
//		codeUniqueCourrier = codeUniqueCourrier.replace("[SRV]",
//				destinataireExpediteur);
//
//		
//		
//		System.out.println("########### ID ########## "+courrierInformations.getTransaction().getTransactionId());
//		System.out.println(vb.getPerson().isBoc());
//		System.out.println(courrierInformations.getTransaction().getEtat().getEtatId());
//			if ((!vb.getPerson().isBoc()&& courrierInformations.getTransaction().getEtat().getEtatId() != 5)||(vb.getPerson().isBoc())) {
////				System.out.println("c'est l'ajout de la ref de BO");
//
//				int idUtilisateurTransaction = courrierInformations
//						.getTransaction().getIdUtilisateur();
////				System.out.println(">>>>>>>> idUtilisateurTransaction  "
////						+ idUtilisateurTransaction);
//
//				// Si le courrier est ajouté par autre que BO
//
//				boolean personeTrouve = false;
//
//				List<BOC> listeBOS = vb.getListTousBos();
//				for (BOC b : listeBOS) {
////					System.out.println("DANS " + b.getShortNameBOC());
//					List<Person> listeMembres = b.getMembersBOC();
//					for (Person p : listeMembres) {
////						System.out.println("MEMBRE ID " + p.getId());
//						if (p.getId() == idUtilisateurTransaction) {
//							codeUniqueCourrier = codeUniqueCourrier + " - "
//									+ b.getShortNameBOC();
//							personeTrouve = true;
//							break;
//						}
//					}
//				}
//				if (!personeTrouve) {
//					// récupérer le BO de la direction de cette utilisateur
//					Person person = new Person();
//					boolean findUser = false;
//					for (int i = 0; i < vb.getCopyLdapListAllUser().size(); i++) {
//						int j = 0;
//
//						do {
//							if (vb.getCopyLdapListUser().get(j).getId() == idUtilisateurTransaction) {
//								person = vb.getCopyLdapListUser().get(j);
//								findUser = true;
//							} else {
//								j++;
//							}
//						} while (!findUser
//								&& j < vb.getCopyLdapListUser().size());
//
//					}
//					if (findUser) {
//						// chercher le BO de l'unité du personne trouvé
//						Unit u = person.getAssociatedDirection();
//						System.out.println(u);
//						if (u.getAssociatedBOC() != null) {
//							codeUniqueCourrier = codeUniqueCourrier + " - "
//									+ u.getAssociatedBOC().getShortNameBOC();
//						}
//
//					}
//
//				}
//
//			}
			
		
			boolean connecteIsBoc=vb.getPerson().isBoc();
			Integer courrierEtat = courrierInformations.getTransaction().getEtat().getEtatId();
			List<BOC> listeBOS = vb.getListTousBos();
			List<Person> listTousUtilisateur = vb.getCopyLdapListUser();
			
			String anneeCourrier = "";
			String moisCourier="";
			List<Courrier> listCourriers = appMgr.listCourrierByIdTransaction(transaction.getTransactionId());
			if(listCourriers!=null && listCourriers.size()>0){
				Courrier courrierConsulte = listCourriers.get(0);
				anneeCourrier=courrierConsulte.getCourrierOldDateOper().toString();
				moisCourier=courrierConsulte.getCourrierDateReceptionMois().toString();
			}
			
			int idUtilisateurTransaction = courrierInformations.getTransaction().getIdUtilisateur();
			
			codeUniqueCourrier=MethodesGenerique.generationCodeUniqueCourrier(vb.getPerson(),appMgr, transaction,anneeCourrier,moisCourier, destinataireExpediteur, connecteIsBoc, courrierEtat, listeBOS, listTousUtilisateur,idUtilisateurTransaction);
			

		courrierInformations
				.setCourrierDestinataireReelleDirection(codeUniqueCourrier);

		// remplissage de l'objet TransactionDest pour l'execution du BOC ou la
		// validation des responsable
//		System.out.println("1111 : " + courrierInformations.getTransactionID());
		List<TransactionDestination> listTransactionDestination = appMgr
				.getListTransactionDestinationByIdTransaction(courrierInformations
						.getTransactionID());// valeur ancien
												// #firstTransaction.getTransactionId()#
		System.out.println("listTransactionDestination : "
				+ listTransactionDestination.size());
		if (!listTransactionDestination.isEmpty()) {
			courrierInformations
					.setTransactionDestination(listTransactionDestination
							.get(listTransactionDestination.size() - 1));
		}
		if ((etatID.equals(2) || etatID.equals(10))
				&& !vb.getPerson().isBoc()
				&& !courrierInformations.getIdUtilisateur().equals(
						vb.getPerson().getId())) {

			courrierInformations.setCourrierAValider(1);
		}
		// pour activer l'execution des courrier qui suit un workflow pour le
		// boct et juste la premiere execution
		if (vb.getPerson().isBoc()
				&& courrierInformations.getCourrierCircuit().equals("workflow")) {
			if (etatID.equals(10)
					&& courrierInformations.getTransactionOrdre().equals(1)) {
				courrierInformations.setCourrierAValider(1);
			}
		}
		// pour activer l'execution des courrier qui suit un workflow pour le
		// boct et juste la premiere execution
		if (!courrierInformations.getIdUtilisateur().equals(
				vb.getPerson().getId())) {
			courrierInformations.setCourrierRecu(1);
		}
		// detinataire reel *
		StringBuilder destinataire = new StringBuilder("");
		StringBuilder destinataireCourrierReference = new StringBuilder("");

		String unitName;
		// AH
		ListeDestinatairesModel destR;
		// List<String> destinataireCourrierReference=new ArrayList<String>();

		List<Transaction> allTransactions = appMgr
				.getTransactionByIdDossier(courrierInformations.getDossierID());
		courrierInformations.setCourrierAllTransactions(allTransactions);

		List<Transaction> allTransactionsByEtat = appMgr
				.getTransactionByIdDossierByEtat(courrierInformations
						.getDossierID());
		courrierInformations
				.setCourrierAllTransactionsByEtat(allTransactionsByEtat);
		System.out.println("size alla transaction by Etat : "
				+ allTransactionsByEtat.size());
		for (Transaction tr : allTransactionsByEtat) {
			System.out.println("2019-06-10 id transaction : "
					+ tr.getTransactionId());
		}
		// for(Transaction tr : allTransactions){
		// //[]
		// System.out.println("----------------------------------");
		// System.out.println("2019-06-10 = "+tr.getTransactionId());
		// System.out.println("2019-06-10 = "+tr.getCourrierReferenceCorrespondant());
		// Person person =
		// vb.getHashMapAllUser().get(tr.getTransactionDestinationReelle().getTransactionDestinationReelleIdDestinataire());
		// destinataireCourrierReference.append(person.getCn());
		// destinataireCourrierReference.append(" [").append(tr.getCourrierReferenceCorrespondant()).append("] ");
		// System.out.println("----------------------------------");
		// System.out.println("destinataireCourrierReference.toString() : "+destinataireCourrierReference.toString());
		// courrierInformations.setReferenceDestinataireReelle(destinataireCourrierReference.toString());
		// destinataireCourrierReference.append("<br/>");
		//
		// }
		//
		// System.out.println("2019-06-10 destinataireCourrierReference := "+destinataireCourrierReference);
		// vb.setReferenceDestinataireReel(courrierInformations.getReferenceDestinataireReelle());

		Transaction firstTransaction = allTransactions.get(allTransactions
				.size() - 1);
		System.out.println("2019-06-08 firstTransaction : "
				+ firstTransaction.getTransactionId());
		System.out.println("2019-06-08 id Expdest : "
				+ firstTransaction.getExpdest().getIdExpDest());

		Expdest expdestExpediteurREEL = appMgr.getListExpDestByIdExpDest(
				firstTransaction.getExpdest().getIdExpDest()).get(0);
		System.out.println("2019-08-06 expdestExpediteurREEL : "
				+ expdestExpediteurREEL);
		courrierInformations.setExpDest(expdestExpediteurREEL);
		System.out.println("courrierInformations.getDestReelList() :"
				+ courrierInformations.getDestReelList());
		if (courrierInformations.getDestReelList() != null) {
			// AH
			destR = new ListeDestinatairesModel();
//			System.out.println("2019-06-08 : "
//					+ courrierInformations.getDestReelList());
			List<String> destReelList = new ArrayList<String>(
					Arrays.asList(courrierInformations.getDestReelList().split(
							"\\|", -1)));
//			System.out.println(destReelList);
//			System.out.println(" destReelList size  = " + destReelList.size());
			for (int i = 0; i < destReelList.size(); i++) {
				List<String> destReelElement = new ArrayList<String>(
						Arrays.asList(destReelList.get(i).split(";", -1)));
				System.out.println("liste dest Reel Element :"
						+ destReelElement.toString());
				// Integer transactionId = 0;
				// if(!destReelElement.get(0).equals("")) {
				// transactionId = Integer.valueOf(destReelElement.get(0));
				// }

				Integer idExpDest = 0;
//				System.out.println("2019-06-10 : destReelElement.get(1) : "
//						+ destReelElement.get(1));
				if (!destReelElement.get(1).equals("")) {
					idExpDest = Integer.valueOf(destReelElement.get(1));
					System.out.println("2019-06-10 idExpDest ;" + idExpDest);
				}
				String type = destReelElement.get(2);
				System.out.println("2019-06-10 type ;" + type);

				Integer ldap = 0;
//				System.out.println("2019-06-10 : destReelElement.get(3) : "
//						+ destReelElement.get(3));

				if (!destReelElement.get(3).equals("")) {
					ldap = Integer.valueOf(destReelElement.get(3));
//					System.out.println("2019-06-10 :  ldaaaaaaaaaaaap : "
//							+ ldap);
				}
				String nom = destReelElement.get(4);
				String prenom = destReelElement.get(5);

//				System.out.println("2019-06-10 : nom : " + nom);
//				System.out.println("2019-06-10 : prenom : " + prenom);

				Integer typeUser = 0;
//				System.out.println("2019-06-10 : destReelElement.get(6) : "
//						+ destReelElement.get(6));

				if (!destReelElement.get(6).equals("")) {
					typeUser = Integer.valueOf(destReelElement.get(6));
//					System.out.println("2019-06-10 : typeUser : " + typeUser);

				}
				Integer idDestReelLdap = 0;
//				System.out.println("2019-06-10 : destReelElement.get(7) :"
//						+ destReelElement.get(7));
				if (!destReelElement.get(7).equals("")) {
					idDestReelLdap = Integer.valueOf(destReelElement.get(7));
//					System.out.println("2019-06-10 idDestReelLdap :"
//							+ idDestReelLdap);
				}
//				System.out.println("2019-06-10 : destReelElement.get(8) :"
//						+ destReelElement.get(8));

				String destReelType = destReelElement.get(8);
//				System.out.println("### destReelType ###  :" + destReelType);
//				System.out.println("###  idDestReelLdap ###  :"
//						+ idDestReelLdap);

				if (idDestReelLdap != 0) {

					// : workflow
					// ----------------------------------------------------------------------------------------------------

					if (courrierInformations.getCourrierCircuit().equals(
							"workflow")) {
						try {
							Unit unitDestinataireReel = vb.getHashMapUnit()
									.get(idDestReelLdap);
							unitName = unitDestinataireReel.getNameUnit();

							System.out
									.println("==============1===============");
							ItemSelected itemSelected = new ItemSelected();
							itemSelected.setItemSelectedId(idDestReelLdap);
							itemSelected.setItemSelectedName(unitName);
							itemSelected
									.setSelectedObject(unitDestinataireReel);
							listSelectedItem.add(itemSelected);
							//
							Object object = (Object) unitDestinataireReel;
							listSelectedObject.add(object);
							listSelectetdUnit.add(unitDestinataireReel);

						} catch (Exception e) {
							unitName = "Inconnue";
							e.printStackTrace();
						}
						destinataire.append(" / ");
						destinataire.append(unitName);

						// [JS]:Reference Courrier de chaque Destinataire
						destinataireCourrierReference.append(unitName);
						List<Transaction> listTransaction = appMgr
								.getReferenceCourrierByDestinataire(idDestReelLdap);
						if (listTransaction != null
								&& listTransaction.size() > 0)
							destinataireCourrierReference
									.append(" [")
									.append(listTransaction
											.get(0)
											.getCourrierReferenceCorrespondant())
									.append("]");
						destinataireCourrierReference.append("<br/>");

						break;
					} else {
						if (destReelType.equals("Interne-Unité")) {
							System.out
									.println("### Type de destination Réel est Interne-Unité ###");
							Unit unit = vb.getHashMapUnit().get(idDestReelLdap);
							System.out.println("unité :"
									+ unit.getShortNameUnit());

							if (!destinataire.toString().contains(
									unit.getNameUnit())) {
								destinataire.append(" / ");
								System.out
										.println("Ajout Unité dans liste des destinataires");
								destinataire.append(unit.getNameUnit());

								// [JS] :Référence de Courrier pour chaque
								// destinataire
								destinataireCourrierReference.append(unit
										.getNameUnit());
								List<Transaction> listTransaction = appMgr
										.getReferenceCourrierByDestinataire(idDestReelLdap);
								if (listTransaction != null
										&& listTransaction.size() > 0)
									destinataireCourrierReference
											.append(" [")
											.append(listTransaction
													.get(0)
													.getCourrierReferenceCorrespondant())
											.append("]");
								destinataireCourrierReference.append("<br/>");
//								System.out
//										.println("2019-06-2019 Destinataire + Référence : "
//												+ destinataireCourrierReference
//														.toString());

								destR = new ListeDestinatairesModel();
//								System.out.println("idDestReelLdap :"
//										+ idDestReelLdap);
								destR.setDestinataireId(idDestReelLdap);
								destR.setDestinataireName(unit.getNameUnit());
//								System.out.println("AH AJOUT "
//										+ unit.getNameUnit());
//								System.out
//										.println("============== affecter annotations unit 1 ===============");

								// List<Annotation> l =
								// appMgr.listeAnnotationParDestinataireEtTransaction(idDestReelLdap,courrierInformations.getDossierID());
								List<Annotation> listeAnnotationParDestinataire = new ArrayList<Annotation>();

								if (appMgr
										.listeAnnotationParDestinataireEtTransactionReell(
												idDestReelLdap,
												courrierInformations
														.getDossierID()) != null) {
									System.out
											.println(" KHA===> Destinataire reel enregistre dans table transactionDestinationRelle");
									listeAnnotationParDestinataire = appMgr
											.listeAnnotationParDestinataireEtTransactionReell(
													idDestReelLdap,
													courrierInformations
															.getDossierID());
								} else {

									listeAnnotationParDestinataire = appMgr
											.listeAnnotationParDestinataireEtTransactionExpDest(
													idDestReelLdap,
													courrierInformations
															.getDossierID());
									System.out
											.println(" KHA===> Destinataire reel enregistre dans table expdest");
								}
								
								String otherAnnotation="";
								if (listeAnnotationParDestinataire != null) {
									List<String> listAnnotationDest = new ArrayList<String>();
									for (Annotation a : listeAnnotationParDestinataire) {

										listAnnotationDest.add(String.valueOf(a.getAnnotationId()));
										System.out.println("listAnnotationDest = "+ listAnnotationDest);
										
										TransactionAnnotation ta = appMgr
												.getTransactionByIdAnnotation(a.getAnnotationId())
												.get(0);
										
										//Récupérer la transaction de l'annotaion
										if(a.getAnnotationId().intValue()==10){
										 Transaction tr = listTransaction.get(0);
										 otherAnnotation=tr.getTransactionCommentaireAnnotation();
										 System.out.println("####### otherAnnotation "+otherAnnotation);
										 destR.setOtherAnnotation(otherAnnotation);
										 }
									}
									destR.setListeAnnotations(listAnnotationDest);
									
									// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());
								}
//								System.out.println("destR.ListeAnnotations = "
//										+ destR.getListeAnnotations());
//
//								System.out
//										.println("============== Fin : affecter annotations  unit 1===============");

								destinatairesAvecAnnotations.add(destR);

//								System.out
//										.println("==============2===============");
								ItemSelected itemSelected = new ItemSelected();
								itemSelected.setItemSelectedId(idDestReelLdap);
								itemSelected.setItemSelectedName(unit
										.getNameUnit());
								listSelectedItem.add(itemSelected);

								Object object = (Object) unit;
								listSelectedObject.add(object);
								listSelectetdUnit.add(unit);
//								System.out
//										.println("============== ===============");

							}
						} else if (destReelType.equals("Interne-Person")) {
							System.out.println("2019-06-09 idDestReelLdap : "
									+ idDestReelLdap);
							Person person = vb.getHashMapAllUser().get(
									idDestReelLdap);
							System.out.println("Interne-Person");
							System.out.println(" : Person ### :"
									+ person.getNom());
							if (!destinataire.toString().contains(
									person.getCn())) {

								destinataire.append(" / ");
								System.out
										.println("Ajout Personne dans liste destinataires");
								System.out.println("Cn Person :"
										+ person.getCn());
								destinataire.append(person.getCn());

								// [JS] :Référence de Courrier pour chaque
								// destinataire
								destinataireCourrierReference.append(person
										.getCn());
								List<Transaction> listTransaction = appMgr
										.getReferenceCourrierByDestinataire(idDestReelLdap);
								if (listTransaction != null
										&& listTransaction.size() > 0)
									destinataireCourrierReference
											.append(" [")
											.append(listTransaction
													.get(0)
													.getCourrierReferenceCorrespondant())
											.append("]");
								destinataireCourrierReference.append("<br/>");
								System.out
										.println("2019-06-2019 Destinataire + Référence : "
												+ destinataireCourrierReference
														.toString());

								System.out
										.println("########## destR ##############");
								destR = new ListeDestinatairesModel();
								destR.setDestinataireId(idDestReelLdap);
								destR.setDestinataireName(person.getCn());

								System.out
										.println("============== affecter annotations Person ===============");

								// ajouté le 16-04-2019 : pour séparer les
								// destinataires enregistrés dans table
								// transactionDestinataireReel et dans table
								// expdest

								// List<Annotation> l =
								// appMgr.listeAnnotationParDestinataireEtTransaction(idDestReelLdap,courrierInformations.getDossierID());
								List<Annotation> l = new ArrayList<Annotation>();
								if (appMgr
										.listeAnnotationParDestinataireEtTransactionReell(
												idDestReelLdap,
												courrierInformations
														.getDossierID()) != null) {
									System.out
											.println(" KHA :Person Dans  listeAnnotationParDestinataireEtTransactionReell");
									l = appMgr
											.listeAnnotationParDestinataireEtTransactionReell(
													idDestReelLdap,
													courrierInformations
															.getDossierID());
								} else {
									System.out
											.println(" KHA :Person Dans  listeAnnotationParDestinataireEtTransactionExpDest");
									l = appMgr
											.listeAnnotationParDestinataireEtTransactionExpDest(
													idDestReelLdap,
													courrierInformations
															.getDossierID());

								}
								if (l != null) {
									List<String> listAnnotationDest = new ArrayList<String>();
									List<String> listRefCourrierDest = new ArrayList<String>();
									for (Annotation a : l) {

										listAnnotationDest.add(String.valueOf(a
												.getAnnotationId()));
										System.out
												.println("listAnnotationDest = "
														+ listAnnotationDest);
										// []
										ta = appMgr
												.getTransactionByIdAnnotation(
														a.getAnnotationId())
												.get(0);
										tr = appMgr
												.getListTransactionByIdTransaction(
														ta.getId()
																.getIdTransaction())
												.get(0);
									}
									destR.setListeAnnotations(listAnnotationDest);
									// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());

								}
								System.out.println("destR.ListeAnnotations = "
										+ destR.getListeAnnotations());

								System.out
										.println("============== Fin : affecter annotations Person===============");
								System.out
										.println("AH AJOUT " + person.getCn());
								destinatairesAvecAnnotations.add(destR);
								System.out
										.println("==============3===============");
								ItemSelected itemSelected = new ItemSelected();
								itemSelected.setItemSelectedId(idDestReelLdap);
								itemSelected
										.setItemSelectedName(person.getCn());
								listSelectedItem.add(itemSelected);
								Object object = (Object) person;
								listSelectedObject.add(object);
								listSelectedPerson.add(person);

								System.out
										.println("============== ===============");
							}
						} else if (destReelType.equals("Externe")) {
							System.out.println("### Externe");
							/*
							 * if (vb.getPerson().isBoc() && !etatID.equals(6))
							 * { courrierInformations.setCourrierAValider(1);
							 * 
							 * }
							 */

							// KHA : executer externe si etat à 5

							if (vb.getPerson().isBoc() && etatID.equals(5)) {
								System.out
										.println("KHA : avalider si vb.getPerson().isBoc() && etatID.equals(5)");

								if (variableExecution.getVaraiablesValeur()
										.equals("Non")) {
									if (vb.getPerson().isResponsableBO()) {

										courrierInformations
												.setCourrierAValider(1);
									}
								} else {
									System.out.println(" ");
									courrierInformations.setCourrierAValider(1);
								}
							}
							System.out.println("idDestReelLdap :"
									+ idDestReelLdap);
							Expdestexterne destReelExterne = appMgr
									.getExpediteurById(idDestReelLdap).get(0);
							if (destReelExterne.getTypeutilisateur()
									.getTypeUtilisateurId().equals(1)) {
								String dest = destReelExterne
										.getExpDestExternePrenom()
										+ " "
										+ destReelExterne
												.getExpDestExterneNom();
								System.out.println("dest :" + dest);
								if (!destinataire.toString().contains(dest)) {
									destinataire.append(" / ");
									destinataire.append(dest);

									// [JS] :Référence de Courrier pour chaque
									// destinataire
									destinataireCourrierReference.append(dest);
									List<Transaction> listTransaction = appMgr
											.getReferenceCourrierByDestinataire(idDestReelLdap);
									if (listTransaction != null
											&& listTransaction.size() > 0)
										destinataireCourrierReference
												.append(" [")
												.append(listTransaction
														.get(0)
														.getCourrierReferenceCorrespondant())
												.append("]");
									destinataireCourrierReference
											.append("<br/>");
									System.out
											.println("2019-06-2019 Destinataire + Référence : "
													+ destinataireCourrierReference
															.toString());

									destR = new ListeDestinatairesModel();
									destR.setDestinataireId(idDestReelLdap);
									destR.setDestinataireName(dest);
									System.out
											.println("type1 AH AJOUT " + dest);
									System.out
											.println("============== affecter annotations Externe ===============");
									System.out.println("");
									List<Annotation> l = appMgr
											.listeAnnotationParDestinataireEtTransactionReell(
													idDestReelLdap,
													courrierInformations
															.getDossierID());

									if (l != null) {
										List<String> listAnnotationDest = new ArrayList<String>();
										for (Annotation a : l) {

											listAnnotationDest
													.add(String.valueOf(a
															.getAnnotationId()));
											System.out
													.println("listAnnotationDest = "
															+ listAnnotationDest);
											// []
											ta = appMgr
													.getTransactionByIdAnnotation(
															a.getAnnotationId())
													.get(0);
											tr = appMgr
													.getListTransactionByIdTransaction(
															ta.getId()
																	.getIdTransaction())
													.get(0);
										}
										destR.setListeAnnotations(listAnnotationDest);
										// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());
									}
									System.out
											.println("destR.ListeAnnotations = "
													+ destR.getListeAnnotations());

									System.out
											.println("============== Fin : affecter annotations Externe===============");
									destinatairesAvecAnnotations.add(destR);

									System.out
											.println("==============4===============");
									ItemSelected itemSelected = new ItemSelected();
									itemSelected
											.setItemSelectedId(idDestReelLdap);
									itemSelected.setItemSelectedName(dest);
									listSelectedItem.add(itemSelected);

									System.out
											.println("============== ===============");
								}
							} else if (destReelExterne.getTypeutilisateur()
									.getTypeUtilisateurId().equals(2)) {
								String dest = destReelExterne
										.getExpDestExterneNom();
								if (!destinataire.toString().contains(dest)) {
									destinataire.append(" / ");
									destinataire.append(destReelExterne
											.getExpDestExterneNom());

									// [JS] :Référence de Courrier pour chaque
									// destinataire
									destinataireCourrierReference.append(dest);
									System.out.println("Id Expdest Externe :"
											+ destReelExterne
													.getIdExpDestExterne());
									List<Transaction> listTransaction = appMgr
											.getReferenceCourrierByDestinataire(destReelExterne
													.getIdExpDestExterne());
									if (listTransaction != null
											&& listTransaction.size() > 0)
										destinataireCourrierReference
												.append(" [")
												.append(listTransaction
														.get(0)
														.getCourrierReferenceCorrespondant())
												.append("]");
									destinataireCourrierReference
											.append("<br/>");
									System.out
											.println("2019-06-2019 Destinataire + Référence : "
													+ destinataireCourrierReference
															.toString());

									// KHA ajouté 08-02-2019
									destR = new ListeDestinatairesModel();
									destR.setDestinataireId(idDestReelLdap);
									destR.setDestinataireName(dest);
									System.out
											.println("type2 AH AJOUT " + dest);

									System.out
											.println("============== affecter annotations destReelExterne ===============");
									System.out.println("idDestReelLdap= "
											+ idDestReelLdap);
									System.out.println("Dossier id ="
											+ courrierInformations
													.getDossierID());
									List<Annotation> l = appMgr
											.listeAnnotationParDestinataireEtTransactionReell(
													idDestReelLdap,
													courrierInformations
															.getDossierID());
									System.out.println("KHA===> l size =  "
											+ l.size());
									if (l != null) {
										List<String> listAnnotationDest = new ArrayList<String>();
										for (Annotation a : l) {

											listAnnotationDest
													.add(String.valueOf(a
															.getAnnotationId()));
											System.out
													.println("listAnnotationDest = "
															+ listAnnotationDest);
											// []
											ta = appMgr
													.getTransactionByIdAnnotation(
															a.getAnnotationId())
													.get(0);
											tr = appMgr
													.getListTransactionByIdTransaction(
															ta.getId()
																	.getIdTransaction())
													.get(0);
										}
										destR.setListeAnnotations(listAnnotationDest);
										// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());
									}
									System.out
											.println("destR.ListeAnnotations = "
													+ destR.getListeAnnotations());

									System.out
											.println("============== Fin : affecter annotations destReelExterne===============");

									destinatairesAvecAnnotations.add(destR);

									System.out
											.println("==============5===============");
									ItemSelected itemSelected = new ItemSelected();
									itemSelected
											.setItemSelectedId(idDestReelLdap);
									itemSelected.setItemSelectedName(dest);
									listSelectedItem.add(itemSelected);
									System.out
											.println("============== ===============");
								}
							}
						} else {
							destinataire.append("--------");
							destinataireCourrierReference.append("--------");
						}
					}
				} else {
					// courrier qui n'a pas des étaps de validation
					System.out.println("-->size listTransactionDestination"
							+ listTransactionDestination.size());
					if (!listTransactionDestination.isEmpty()) {
						for (TransactionDestination transactionDestination : listTransactionDestination) {
							System.out.println("-->idExpDest" + idExpDest);
							System.out
									.println("-->TransactionDestination.getID.getIDExpdest :"
											+ transactionDestination.getId()
													.getIdExpDest());
							// if
							// (idExpDest.equals(transactionDestination.getId().getIdExpDest()))
							// {
							destinataire.append(" / ");
							if (type.equals("Interne-Person")) {
								System.out
										.println("==> Courrier qui n'as pas des téapes de validation (Interne-Person)");
								System.out.println("LDAP :" + ldap);
								if (ldap.equals(vb.getPerson().getId())) {
									courrierInformations.setCourrierRecu(1);
								}
								courrierInformations
										.setTransactionDestination(transactionDestination);
								// destinataire = new StringBuilder(" / ");

								Person person = vb.getHashMapAllUser()
										.get(ldap);
								System.out.println(" person.getCn() = "
										+ person.getCn());
								if (!destinataire.toString().contains(
										person.getCn())) {
									destinataire.append(" / ");
									destinataire.append(person.getCn());

									// [JS] :Référence de Courrier pour chaque
									// destinataire
									destinataireCourrierReference.append(person
											.getCn());
									List<Transaction> listTransaction = appMgr
											.getReferenceCourrierByDestinataire(ldap);
									if (listTransaction != null
											&& listTransaction.size() > 0)
										destinataireCourrierReference
												.append(" [")
												.append(listTransaction
														.get(0)
														.getCourrierReferenceCorrespondant())
												.append("]");
									destinataireCourrierReference
											.append("<br/>");
									System.out
											.println("2019-06-2019 Destinataire + Référence : "
													+ destinataireCourrierReference
															.toString());

									// destinataire.append(transactionDestination.getId().get)
									// KHA - ajouté 08-02-2019
									destR = new ListeDestinatairesModel();
									destR.setDestinataireId(ldap);
									destR.setDestinataireName(person.getCn());
									System.out
											.println("============== affecter annotations Person 2===============");

									// List<Annotation> l =
									// appMgr.listeAnnotationParDestinataireEtTransaction(ldap,courrierInformations.getDossierID());
									List<Annotation> l = new ArrayList<Annotation>();
									if (appMgr
											.listeAnnotationParDestinataireEtTransactionReell(
													ldap, courrierInformations
															.getDossierID()) != null) {
										System.out
												.println(" KHA :Person2 Dans  listeAnnotationParDestinataireEtTransactionReell");
										l = appMgr
												.listeAnnotationParDestinataireEtTransactionReell(
														idDestReelLdap,
														courrierInformations
																.getDossierID());
									} else {

										l = appMgr
												.listeAnnotationParDestinataireEtTransactionExpDest(
														ldap,
														courrierInformations
																.getDossierID());
										System.out
												.println(" KHA :Person2 Dans  listeAnnotationParDestinataireEtTransactionExpDest");
									}
									if (l != null) {
										List<String> listAnnotationDest = new ArrayList<String>();
										for (Annotation a : l) {

											listAnnotationDest
													.add(String.valueOf(a
															.getAnnotationId()));
											System.out
													.println("listAnnotationDest = "
															+ listAnnotationDest);
											// []
											ta = appMgr
													.getTransactionByIdAnnotation(
															a.getAnnotationId())
													.get(0);
											tr = appMgr
													.getListTransactionByIdTransaction(
															ta.getId()
																	.getIdTransaction())
													.get(0);
										}
										destR.setListeAnnotations(listAnnotationDest);
										// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());
									}
									System.out
											.println("destR.ListeAnnotations = "
													+ destR.getListeAnnotations());

									System.out
											.println("============== Fin : affecter annotations Person 2===============");

									destinatairesAvecAnnotations.add(destR);

									System.out
											.println("==============6===============");
									ItemSelected itemSelected = new ItemSelected();
									itemSelected.setItemSelectedId(ldap);
									itemSelected.setItemSelectedName(person
											.getCn());
									listSelectedItem.add(itemSelected);
									Object object = (Object) person;
									listSelectedObject.add(object);
									listSelectedPerson.add(person);
									System.out
											.println("============== ===============");

									// break;

									/*
									 * Person person =
									 * vb.getHashMapAllUser().get(ldap); if
									 * (!destinataire
									 * .toString().contains(person.getCn())) {
									 * destinataire.append(person.getCn());}
									 */
								}
							} else if (type.equals("Interne-Unité")) {
								if (vb.getPerson().isResponsable()
										&& ldap.equals(vb.getPerson()
												.getAssociatedDirection()
												.getIdUnit())) {
									courrierInformations.setCourrierRecu(1);
								}
								courrierInformations
										.setTransactionDestination(transactionDestination);
								// destinataire = new StringBuilder(" / ");
								Unit unit = vb.getHashMapUnit().get(ldap);
								if (!destinataire.toString().contains(
										unit.getNameUnit())) {
									destinataire.append(" / ");
									destinataire.append(unit.getNameUnit());
									// [JS] :Référence de Courrier pour chaque
									// destinataire
									destinataireCourrierReference.append(unit
											.getNameUnit());
									List<Transaction> listTransaction = appMgr
											.getReferenceCourrierByDestinataire(ldap);
									if (listTransaction != null
											&& listTransaction.size() > 0)
										destinataireCourrierReference
												.append(" [")
												.append(listTransaction
														.get(0)
														.getCourrierReferenceCorrespondant())
												.append("]");
									destinataireCourrierReference
											.append("<br/>");
									System.out
											.println("2019-06-2019 Destinataire + Référence : "
													+ destinataireCourrierReference
															.toString());

									// KHA - ajouté 08-02-2019
									destR = new ListeDestinatairesModel();
									destR.setDestinataireId(ldap);
									destR.setDestinataireName(unit
											.getNameUnit());
									System.out
											.println("============== affecter annotations  unit 2===============");

									// List<Annotation> l =
									// appMgr.listeAnnotationParDestinataireEtTransaction(ldap,courrierInformations.getDossierID());
									List<Annotation> l = new ArrayList<Annotation>();
									if (appMgr
											.listeAnnotationParDestinataireEtTransactionReell(
													ldap, courrierInformations
															.getDossierID()) != null) {
										System.out
												.println(" KHA :unit2 Dans  listeAnnotationParDestinataireEtTransactionReell");

										System.out
												.println(" 2 KHA===> Destinataire reel enregistre dans table transactionDestinationRelle");
										l = appMgr
												.listeAnnotationParDestinataireEtTransactionReell(
														idDestReelLdap,
														courrierInformations
																.getDossierID());
									} else {
										System.out
												.println(" KHA :unit2 Dans  listeAnnotationParDestinataireEtTransactionExpDest");

										l = appMgr
												.listeAnnotationParDestinataireEtTransactionExpDest(
														ldap,
														courrierInformations
																.getDossierID());
										System.out
												.println(" 2 KHA===> Destinataire reel enregistre dans table expdest");
									}
									if (l != null) {
										List<String> listAnnotationDest = new ArrayList<String>();
										for (Annotation a : l) {

											listAnnotationDest
													.add(String.valueOf(a
															.getAnnotationId()));
											System.out
													.println("listAnnotationDest = "
															+ listAnnotationDest);
											// []
											ta = appMgr
													.getTransactionByIdAnnotation(
															a.getAnnotationId())
													.get(0);
											tr = appMgr
													.getListTransactionByIdTransaction(
															ta.getId()
																	.getIdTransaction())
													.get(0);
										}
										destR.setListeAnnotations(listAnnotationDest);
										// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());
									}
									System.out
											.println("destR.ListeAnnotations = "
													+ destR.getListeAnnotations());

									System.out
											.println("============== Fin : affecter annotations unit 2===============");

									destinatairesAvecAnnotations.add(destR);

									System.out
											.println("==============7===============");
									ItemSelected itemSelected = new ItemSelected();

									itemSelected.setItemSelectedId(ldap);
									itemSelected.setItemSelectedName(unit
											.getNameUnit());
									listSelectedItem.add(itemSelected);
									Object object = (Object) unit;
									listSelectedObject.add(object);
									listSelectetdUnit.add(unit);
									System.out
											.println("============== ===============");

									// break;
								}
								/*
								 * Unit unit = vb.getHashMapUnit().get(ldap); if
								 * (!destinataire.toString().contains(unit.
								 * getNameUnit())) {
								 * destinataire.append(unit.getNameUnit());}
								 */

							} else if (type.equals("Interne-Boc")) {
								if (vb.getPerson().isBoc()) {
									courrierInformations.setCourrierRecu(1);
									courrierInformations
											.setTransactionDestination(transactionDestination);
								}
								// KHA - modifié 08-02-2019
								if (!destinataire.toString().contains(
										vb.getCentralBoc().getNameBOC())) {
									destinataire.append(" / ");
									destinataire.append(vb.getCentralBoc()
											.getNameBOC());
									destR = new ListeDestinatairesModel();
									destR.setDestinataireId(ldap);
									destR.setDestinataireName(vb
											.getCentralBoc().getNameBOC());
									System.out
											.println("============== affecter annotations  intern boc===============");

									// List<Annotation> l =
									// appMgr.listeAnnotationParDestinataireEtTransaction(ldap,courrierInformations.getDossierID());
									List<Annotation> l = new ArrayList<Annotation>();
									if (appMgr
											.listeAnnotationParDestinataireEtTransactionReell(
													ldap, courrierInformations
															.getDossierID()) != null) {
										System.out
												.println(" 2 KHA===> Destinataire reel enregistre dans table transactionDestinationRelle");
										l = appMgr
												.listeAnnotationParDestinataireEtTransactionReell(
														idDestReelLdap,
														courrierInformations
																.getDossierID());
									} else {

										l = appMgr
												.listeAnnotationParDestinataireEtTransactionExpDest(
														ldap,
														courrierInformations
																.getDossierID());
										System.out
												.println(" 2 KHA===> Destinataire reel enregistre dans table expdest");
									}
									if (l != null) {
										List<String> listAnnotationDest = new ArrayList<String>();
										for (Annotation a : l) {

											listAnnotationDest
													.add(String.valueOf(a
															.getAnnotationId()));
											System.out
													.println("listAnnotationDest = "
															+ listAnnotationDest);
											// []
											ta = appMgr
													.getTransactionByIdAnnotation(
															a.getAnnotationId())
													.get(0);
											tr = appMgr
													.getListTransactionByIdTransaction(
															ta.getId()
																	.getIdTransaction())
													.get(0);
										}
										destR.setListeAnnotations(listAnnotationDest);
										// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());
									}
									System.out
											.println("destR.ListeAnnotations = "
													+ destR.getListeAnnotations());

									System.out
											.println("============== Fin : affecter annotations intern boc===============");

									destinatairesAvecAnnotations.add(destR);

									System.out
											.println("==============8===============");
									ItemSelected itemSelected = new ItemSelected();
									itemSelected.setItemSelectedId(ldap);
									itemSelected.setItemSelectedName(vb
											.getCentralBoc().getNameBOC());
									listSelectedItem.add(itemSelected);

									System.out
											.println("============== ===============");
								}

							} else if (type.equals("Externe")) {
								if (typeUser.equals(1)) {
									if (!destinataire.toString().contains(
											nom + " " + prenom + " (PP)")) {
										destinataire.append(" / ");
										destinataire.append(nom + " " + prenom
												+ " (PP)");
										// KHA - ajouté 08-02-2019
										destR = new ListeDestinatairesModel();
										destR.setDestinataireId(ldap);
										destR.setDestinataireName(nom + " "
												+ prenom + " (PP)");
										System.out
												.println("============== affecter annotations  externe PP===============");

										List<Annotation> l = appMgr
												.listeAnnotationParDestinataireEtTransactionReell(
														ldap,
														courrierInformations
																.getDossierID());

										if (l != null) {
											List<String> listAnnotationDest = new ArrayList<String>();
											for (Annotation a : l) {

												listAnnotationDest
														.add(String.valueOf(a
																.getAnnotationId()));
												System.out
														.println("listAnnotationDest = "
																+ listAnnotationDest);
												// []
												ta = appMgr
														.getTransactionByIdAnnotation(
																a.getAnnotationId())
														.get(0);
												tr = appMgr
														.getListTransactionByIdTransaction(
																ta.getId()
																		.getIdTransaction())
														.get(0);
											}
											destR.setListeAnnotations(listAnnotationDest);
											// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());
										}


										destinatairesAvecAnnotations.add(destR);

										
										ItemSelected itemSelected = new ItemSelected();
										itemSelected.setItemSelectedId(ldap);
										itemSelected.setItemSelectedName(nom
												+ " " + prenom);
										listSelectedItem.add(itemSelected);
										Pp pp = (Pp) appMgr
												.getPPByReferenceExpediteur(
														ldap).get(0);
										Object object = (Object) pp;
										listSelectedObject.add(object);
										listSelectetdPP.add(pp);

									

									}
								} else {
									if (!destinataire.toString().contains(
											nom + " (PM)")) {

										destinataire.append(" / ");
										destinataire.append(nom + " (PM)");
										// KHA - ajouté 08-02-2019
										destR = new ListeDestinatairesModel();
										destR.setDestinataireId(ldap);
										destR.setDestinataireName(nom + " (PM)");
										

										List<Annotation> l = appMgr
												.listeAnnotationParDestinataireEtTransactionReell(
														ldap,
														courrierInformations
																.getDossierID());

										if (l != null) {
											List<String> listAnnotationDest = new ArrayList<String>();
											for (Annotation a : l) {

												listAnnotationDest
														.add(String.valueOf(a
																.getAnnotationId()));
												
												// []
												ta = appMgr
														.getTransactionByIdAnnotation(
																a.getAnnotationId())
														.get(0);
												tr = appMgr
														.getListTransactionByIdTransaction(
																ta.getId()
																		.getIdTransaction())
														.get(0);
											}
											destR.setListeAnnotations(listAnnotationDest);
											// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());
										}
										
										
										destinatairesAvecAnnotations.add(destR);
									
										ItemSelected itemSelected = new ItemSelected();
										itemSelected.setItemSelectedId(ldap);
										itemSelected.setItemSelectedName(nom
												+ " " + prenom);
										listSelectedItem.add(itemSelected);
										Pm pm = (Pm) appMgr
												.getPMByReferenceExpediteur(
														ldap).get(0);
										Object object = (Object) pm;
										listSelectedObject.add(object);
										listSelectetdPM.add(pm);
									

									}
								}
							}
							// }
						}
					}
					if (courrierInformations.getCourrierRecu() == 1
							&& (etatID.equals(10) || etatID.equals(2))) {

						courrierInformations.setCourrierAValider(1);
					} else {
						// provisoire .. juste pour activer l'execution des
						// courrier arrivé pour le BOCT
						if (courrierAriverToDG.getVaraiablesValeur().equals(
								"Non")) {
							if (!vb.getPerson().isBoc()) {
								courrierInformations.setCourrierAValider(0);
							}
						}
						// provisoire .. juste pour activer l'execution des
						// courrier arrivé pour le BOCT
					}
					if (vb.getPerson().getAssociatedBOC() != null
							&& courrierInformations.getCourrierRecu() == 1
							&& etatID.equals(5) && etatID.equals(2)) {
						courrierInformations.setCourrierAValider(1);
					}
				}
				// KHA =========
				courrierInformations.setListSelectedItemDest(listSelectedItem);
				courrierInformations.setListSelectedObject(listSelectedObject);

				courrierInformations.setListSelectedPerson(listSelectedPerson);
				courrierInformations.setListSelectetdUnit(listSelectetdUnit);
				courrierInformations.setListSelectetdBoc(listSelectetdBoc);
				// ========
				// ========
			}

		}

	

		destinataire.delete(0, 3);
		
		courrierInformations.setCourrierDestinataireReelle(destinataire
				.toString());
		courrierInformations
				.setReferenceDestinataireReelle(destinataireCourrierReference
						.toString());
		// AH
		/*
		 * System.out.println(
		 * "==============DANS  COURRIER CONSULTATION-RECENT-BEAN=========== "
		 * ); for(ListeDestinatairesModel d: destinatairesAvecAnnotations){
		 * 
		 * System.out.println("liste annotation=  "+d.getListeAnnotations().toString
		 * ()); System.out.println(d.getDestinataireName()); }
		 * System.out.println
		 * ("================================================================== "
		 * );
		 */
		courrierInformations
				.setListeDestinatairesAvecAnnotations(destinatairesAvecAnnotations);
		
		if ((courrierInformations.getTransactionDateConsultation() == null && courrierInformations
				.getCourrierRecu() != 1)
				|| (courrierInformations.getTransactionDestination()
						.getTransactionDestDateConsultation() == null && courrierInformations
						.getCourrierRecu() == 1)) {
			
			courrierInformations
					.setStyle("tableau_liste_courrier_non_consulte_gras");
			styleMessage = "tableau_liste_courrier_non_consulte_gras";
		}
		System.out
				.println("listSelectedItem size : " + listSelectedItem.size());

		/***
		 * test pour que bouton réception physique s'affiche 
		 */
		Expdest cupExpDest;
		cupExpDest = new Expdest();
		
		cupExpDest = appMgr.getListExpDestByIdExpDest(transaction.getExpdest().getIdExpDest()).get(0);			
		
		CourrierDossier courrierDossier1 = appMgr.getCourrierDossierByIdCourrier(courrierInformations.getCourrierID()).get(0);
		int refdossier = courrierDossier1.getId().getDossierId();
		
		 
	     
		Transaction transactionn = new Transaction();
		List<Transaction> listTr = appMgr.getTransactionByIdDossier(refdossier);
		lastIndex=listTr.size();
		transactionn=listTr.get(lastIndex-1);
		int idEditeur=transactionn.getIdUtilisateur();
			
		
		List<ListeDestinatairesModel> list = destinatairesAvecAnnotations;
		List<Integer> listeIdDest = new ArrayList<Integer>();
		for (ListeDestinatairesModel d : list) {
			int idDest = 0;
		
			if (vb.getPerson().isResponsable() && !vb.getPerson().isBoc()) {
				if (vb.getPerson().getAssociatedDirection().getIdUnit() == d
						.getDestinataireId()) {
					idDest = vb.getPerson().getId();
				} else {
					
					idDest = d.getDestinataireId();
				}
			}else{
			System.out.println("heloo");
				
			}
			listeIdDest.add(idDest);
			//
		}
		
		
		
		
		// récuperer liste des memebres de bureau d'ordre connecté
		List<Integer> listeIdMembresBOc=new ArrayList<Integer>();
		if(vb.getPerson().isBoc()){
		List<Person> listMembresBoc = vb.getPerson().getAssociatedBOC().getMembersBOC();
		for(Person membres:listMembresBoc){

			listeIdMembresBOc.add(membres.getId());
		}
		}
		
		
		
		
		System.out.println("===============================reception physique =========================================");

		
		Courrier courrier=appMgr.getCourrierByIdCourrier(courrierInformations.getCourrierID()).get(0);	
		System.out.println("Courrier Dans Liste ===> : "+courrier.getIdCourrier());
		System.out.println("Courrier Avec Document physique  ===> : "+courrier.getCourrierAvecDocumentPhysique());
		if (courrier.getCourrierAvecDocumentPhysique() != null
				&& courrier.getCourrierAvecDocumentPhysique() == true ) {
			
			/* si Le personne connecté est un responsable et qui est l'éditeur  : bouton reception physique ne s'affiche pas**/
			if (vb.getPerson().isResponsable()  && !vb.getPerson().isBoc()) {
				if (cupExpDest.getIdExpDestLdap() != null
						&& vb.getPerson().getAssociatedDirection()
								.getIdUnit() == cupExpDest
								.getIdExpDestLdap()){
					System.out
							.println("si l'expediteur est l'editeur de courrier");
				etatReceptionPhysique = false;
				System.out.println("###1");
				}else if(listeIdDest.contains(vb.getPerson().getId())){
					System.out.println("###22");
					System.out
					.println("Destinataire Finale");
					etatReceptionPhysique = true;
					if(appMgr.getListCourrierAvecReceptionPhysiqueByEtat(courrier.getIdCourrier(),transaction.getTransactionId()).size() !=0 ){
						System.out.println("### Reception  physique Validé ### ");
						etatReceptionPhysique = false;
						
					}
					
				}

			}	
					
			
				//is BOC et n'est pas l'editeur de courrier DONC FAIT LE VALIDATION HEARCHQIUE		
			
			else if ((vb.getPerson().isBoc() && !listeIdMembresBOc.contains(idEditeur))
					|| listeIdDest.contains(vb.getPerson().getId())
					|| vb.getPerson().getId() == cupExpDest
							.getIdExpDestLdap()){
				// si le connectee est l'expediteur, le destinataire reel ou le
			// BO
			etatReceptionPhysique = true;
			System.out.println("###2");
			if(appMgr.getListCourrierAvecReceptionPhysiqueByEtat(courrier.getIdCourrier(),transaction.getTransactionId()).size() !=0 || transaction.getEtat().getEtatId()==6){
				System.out.println("### Reception  physique Validé ### ");
				etatReceptionPhysique = false;
				
			}
			
		

			}
			
		}
		
		
//		Courrier cr=appMgr.getCourrierByIdCourrier(courrierInformations.getCourrierID()).get(0);				
		
		if(courrier.getCourrierAvecDocumentPhysique() != null
				&& courrier.getCourrierAvecDocumentPhysique() != true){
			System.out.println("KHA ===> reception physique : non ");
			etatReceptionPhysique = false;
			System.out.println("###4");


		}

		courrierInformations.setCourrierAvecDocumentPhysique(etatReceptionPhysique);
		
		
		

		System.out
				.println("***********************FIN searchExpediteurDestinataire *********************");
	}}


	public void getSelectionRow() {
		try {

			vb.setSelectedListCourrier("CRmois");
			vb.setDestinataireReel("");
			vb.setPremiereEntreeTransfert(1);
			Transaction transaction = new Transaction();
			CourrierInformations consulterInformations = selectedCourrier;
			vb.setCodeUniqueCourrier(consulterInformations
					.getCourrierDestinataireReelleDirection());

			if (consulterInformations.getCourrier() == null) {
				consulterInformations.setCourrier(appMgr
						.getCourrierByIdCourrier(
								consulterInformations.getCourrierID()).get(0));
			}
			if (consulterInformations.getTransaction() == null) {
				consulterInformations.setTransaction(appMgr
						.getListTransactionByIdTransaction(
								consulterInformations.getTransactionID())
						.get(0));
			}
			System.out
					.println("***********************************************************");
			vb.setListSelectedItem(consulterInformations
					.getListSelectedItemDest());
			System.out.println("ListSelectedItem size = "
					+ vb.getListSelectedItem().size());

			if (consulterInformations.getListSelectedObject() != null) {
				vb.setCopyListSelectedObject(consulterInformations
						.getListSelectedObject());
			}
			if (consulterInformations.getListSelectedPerson() != null) {
				vb.setCopyListSelectedPerson(consulterInformations
						.getListSelectedPerson());
				System.out.println("CopyListSelectedPerson size = "
						+ vb.getCopyListSelectedPerson().size());
			}
			if (consulterInformations.getListSelectetdUnit() != null) {
				vb.setCopyListSelectedUnit(consulterInformations
						.getListSelectetdUnit());
				System.out.println("CopyListSelectedUnit size = "
						+ vb.getCopyListSelectedUnit().size());
			}
			if (consulterInformations.getListSelectetdBoc() != null) {
				vb.setCopyListSelectedBoc(consulterInformations
						.getListSelectetdBoc());
				System.out.println("CopyListSelectedBoc size = "
						+ vb.getCopyListSelectedBoc().size());
			}

			System.out
					.println("***********************************************************");

			vb.setCourDossConsulterInformations(consulterInformations);// a
																		// commenté
																		// si on
																		// a
																		// renversé
																		// l'ancienne
																		// liste
																		// de
																		// courriers
			courrier = consulterInformations.getCourrier();
			vb.setCourrier(courrier);
			transaction = consulterInformations.getTransaction();
			List<TransactionDestination> listTransactionDestination = appMgr
					.getListTransactionDestinationByIdTransaction(consulterInformations
							.getTransactionID());// valeur ancien
													// #firstTransaction.getTransactionId()#
			if (!listTransactionDestination.isEmpty()) {
				vb.setTransactionDestination(listTransactionDestination
						.get(listTransactionDestination.size() - 1));// 2015-02-27
				consulterInformations
						.setTransactionDestination(listTransactionDestination
								.get(listTransactionDestination.size() - 1));
			}
			if (vb.getPerson().isBoc()) {
				if (consulterInformations.getCourrierDestinataireReelle()
						.contains("(PP)")
						|| consulterInformations
								.getCourrierDestinataireReelle().contains(
										"(PM)")) {
					vb.setShowMonitoringButtonForDest(false);
				} else {
					vb.setShowMonitoringButtonForDest(true);
				}
				try {
					if (transaction.getIdUtilisateur() != vb.getPerson()
							.getId()
							|| listCourrier.contains(consulterInformations)) {

						

						if (transaction.getIdUtilisateur() != vb.getPerson()
								.getId()) {
						
							TransactionDestination transactionDestination = new TransactionDestination();
							transactionDestination = consulterInformations
									.getTransactionDestination();
							if (transactionDestination
									.getTransactionDestDateConsultation() == null) {
								transactionDestination
										.setTransactionDestDateConsultation(new Date());
								appMgr.update(transactionDestination);
							}
							vb.setTransactionDestination(transactionDestination);
						} else {
							if (transaction.getTransactionDateConsultation() == null) {
								transaction
										.setTransactionDateConsultation(new Date());
								appMgr.update(transaction);
							}
							// ajouté lors #// C *# pour que la date de
							// consultation des courriers arrivé par le boct
							// soit enregistré
							TransactionDestination transactionDestination = consulterInformations
									.getTransactionDestination();
							
							Expdest expdest = appMgr.getListExpDestByIdExpDest(
									transactionDestination.getId()
											.getIdExpDest()).get(0);
							
							if (vb.getPerson().isBoc()
									&& expdest.getTypeExpDest().equals(
											"Interne-Boc")) {
								
								if (transactionDestination
										.getTransactionDestDateConsultation() == null) {
									transactionDestination
											.setTransactionDestDateConsultation(new Date());
									appMgr.update(transactionDestination);
								}
							}
							vb.setTransactionDestination(transactionDestination);
						}
					} else {
						if (transaction.getTransactionDateConsultation() == null) {
							transaction
									.setTransactionDateConsultation(new Date());
							appMgr.update(transaction);
						}
					}
				} catch (NullPointerException e) {
					e.printStackTrace();
				}
			} else {
				
				

				if (consulterInformations.getCourrierRecu() == 1
						&& consulterInformations.getTransactionDestination()
								.getTransactionDestDateConsultation() == null) {
					TransactionDestination transactionDestination = new TransactionDestination();
					transactionDestination = consulterInformations
							.getTransactionDestination();
					transactionDestination
							.setTransactionDestDateConsultation(new Date());
					appMgr.update(transactionDestination);
					vb.setTransactionDestination(transactionDestination);
					// chargement variable log & notification
					chargementNotification(consulterInformations);
				} else if (transaction.getIdUtilisateur() == vb.getPerson()
						.getId()
						&& transaction.getTransactionDateConsultation() == null) {
					transaction.setTransactionDateConsultation(new Date());
					appMgr.update(transaction);
				}
			}
			vb.setCopyDestNom(consulterInformations
					.getCourrierDestinataireReelle());
			vb.setCopyExpNom(consulterInformations.getCourrierExpediteur());
			vb.setCopyCourrierCommentaire(consulterInformations
					.getCourrierCommentaire());
			vb.setCopyOtherDest(consulterInformations
					.getCourrierAutreDestinataires());
			vb.setTransaction(transaction);
			// ** expediteur reel
			vb.setCopyExpReelNom(consulterInformations.getCourrierExpediteur());
			// ** destinataire reel
			
			vb.setDestinataireReel(consulterInformations
					.getCourrierDestinataireReelle());
			
			
			vb.setReferenceDestinataireReel(consulterInformations
					.getReferenceDestinataireReelle());

			// AH
			vb.setListeDestinataire(consulterInformations
					.getListeDestinatairesAvecAnnotations());

			
			
			

			// ***
			// ** expediteur reel
			List<TransactionAnnotation> annotations = new ArrayList<TransactionAnnotation>();
			annotations = appMgr
					.getAnnotationByIdTransaction(consulterInformations
							.getTransactionID());
			int lastIndex;
			int refAnnotation;
			String result = "";
			for (TransactionAnnotation ta : annotations) {
				refAnnotation = ta.getId().getIdAnnotation();
				result += appMgr.getAnnotationByIdAnotation(refAnnotation)
						.get(0).getAnnotationLibelle()
						+ " / ";
			}
			if (!result.equals("")) {
				lastIndex = result.lastIndexOf("/");
				result = result.substring(0, lastIndex);
			}
			vb.setCopyAnnotationResult(result);
			//Vider les listes des detinatires avant de transferer le courrier pour ne pas garder le destinataire de l'ancien courrier
			vb.setCopyListSelectedUnit(new ArrayList<Unit>());
			vb.setCopyListSelectedPerson(new ArrayList<Person>());
			vb.setCopyListPP(new ArrayList<Pp>());
			vb.setCopyListPM(new ArrayList<Pm>());
		

			LogClass logClass = new LogClass();
			// logClass.addTrack(
			// "consultation",
			// "Evénement de log de consultation du courrier "
			// + courrier.getIdCourrier() + "-"
			// + courrier.getCourrierReferenceCorrespondant(),
			// vb.getPerson(), "INFO", appMgr);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void getSelectionRowForValidate() {
		try {
			vb.setSelectedListCourrier("CRancien");
			Transaction transaction = new Transaction();
			CourrierInformations courrierInformations = selectedCourrier;
			if (courrierInformations.getCourrier() == null) {
				courrierInformations.setCourrier(appMgr
						.getCourrierByIdCourrier(
								courrierInformations.getCourrierID()).get(0));
			}
			if (courrierInformations.getTransaction() == null) {
				courrierInformations
						.setTransaction(appMgr
								.getListTransactionByIdTransaction(
										courrierInformations.getTransactionID())
								.get(0));
			}
			vb.setCourDossConsulterInformations(courrierInformations);// commenter
																		// si on
																		// renverse
																		// l'ancienne
																		// liste
																		// de
																		// courriers
			courrier = courrierInformations.getCourrier();
			vb.setCourrier(courrier);
			transaction = courrierInformations.getTransaction();

			switch (courrierInformations.getCourrierRecu()) {
			case 1:
				TransactionDestination transactionDestination = courrierInformations
						.getTransactionDestination();
				vb.setTransactionDestination(transactionDestination);
				if (courrierInformations.getTransactionDestination()
						.getTransactionDestDateConsultation() == null) {
					transactionDestination
							.setTransactionDestDateConsultation(new Date());
					appMgr.update(transactionDestination);
				}
				break;
			case 0:
				if (transaction.getTransactionDateConsultation() == null) {
					transaction.setTransactionDateConsultation(new Date());
					appMgr.update(transaction);
				}
				break;
			}
			// ** expediteur reel
			vb.setCopyExpReelNom(courrierInformations.getCourrierExpediteur());
			// ** destinataire reel
			

			vb.setDestinataireReel(courrierInformations
					.getCourrierDestinataireReelle());
			
			
			vb.setCopyDestNom(courrierInformations
					.getCourrierDestinataireReelle());
			vb.setCopyExpNom(courrierInformations.getCourrierExpediteur());
			vb.setCopyCourrierCommentaire(courrierInformations.getCourrier()
					.getCourrierCommentaire());
			vb.setCopyOtherDest(courrierInformations
					.getCourrierAutreDestinataires());
			vb.setTransaction(transaction);
			
			vb.setListeDestinataire(courrierInformations
					.getListeDestinatairesAvecAnnotations());
			
			// destinataire reel
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public void getSelectionRowForResponse() {
		try {
			vb.setSelectedListCourrier("CRancien");
			Transaction transaction = new Transaction();
			CourrierInformations courrierInformations = selectedCourrier;
			if (courrierInformations.getCourrier() == null) {
				courrierInformations.setCourrier(appMgr
						.getCourrierByIdCourrier(
								courrierInformations.getCourrierID()).get(0));
			}
			if (courrierInformations.getTransaction() == null) {
				courrierInformations
						.setTransaction(appMgr
								.getListTransactionByIdTransaction(
										courrierInformations.getTransactionID())
								.get(0));
			}
			courrier = courrierInformations.getCourrier();
			vb.setCourDossConsulterInformations(courrierInformations); // é
																		// commenté
																		// si on
																		// a
																		// renversé
																		// l'ancienne
																		// liste
																		// de
																		// courriers
			vb.setCourrier(courrier);
			transaction = courrierInformations.getTransaction();

			switch (courrierInformations.getCourrierRecu()) {
			case 1:
				TransactionDestination transactionDestination = courrierInformations
						.getTransactionDestination();
				vb.setTransactionDestination(transactionDestination);
				if (courrierInformations.getTransactionDestination()
						.getTransactionDestDateConsultation() == null) {
					transactionDestination
							.setTransactionDestDateConsultation(new Date());
					appMgr.update(transactionDestination);
				}
				break;
			case 0:
				if (transaction.getTransactionDateConsultation() == null) {
					transaction.setTransactionDateConsultation(new Date());
					appMgr.update(transaction);
				}
				break;
			}
			if (courrierInformations.getCourrierExpediteurObjet() instanceof Person) {
				Person person = new Person();
				person = (Person) courrierInformations
						.getCourrierExpediteurObjet();
				vb.setCopyListSelectedPerson(new ArrayList<Person>());
				vb.getCopyListSelectedPerson().add(
						vb.getLdapOperation().getPersonalisedUserById(
								person.getId()));
				vb.setDestNom(person.getCn());
			} else if (courrierInformations.getCourrierExpediteurObjet() instanceof Unit) {
				Unit unit = new Unit();
				unit = (Unit) courrierInformations.getCourrierExpediteurObjet();
				vb.setCopyListSelectedUnit(new ArrayList<Unit>());
				vb.getCopyListSelectedUnit().add(unit);
				vb.setDestNom(unit.getNameUnit());
			}
			vb.setCopyDestNom(courrierInformations
					.getCourrierDestinataireReelle());
			vb.setCopyExpNom(courrierInformations.getCourrierExpediteur());
			vb.setCopyCourrierCommentaire(courrierInformations
					.getCourrierCommentaire());
			vb.setToReplay(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void repondre() {
		try {
			vb.setSelectedListCourrier("CRancien");
			Transaction transaction = new Transaction();
			CourrierInformations courrierInformations = selectedCourrier;
			if (courrierInformations.getCourrier() == null) {
				courrierInformations.setCourrier(appMgr
						.getCourrierByIdCourrier(
								courrierInformations.getCourrierID()).get(0));
			}
			if (courrierInformations.getTransaction() == null) {
				courrierInformations
						.setTransaction(appMgr
								.getListTransactionByIdTransaction(
										courrierInformations.getTransactionID())
								.get(0));
			}
			courrier = courrierInformations.getCourrier();
			vb.setCourDossConsulterInformations(courrierInformations); // commenter
																		// si on
																		// renverse
																		// l'ancienne
																		// liste
																		// de
																		// courriers
			vb.setCourrier(courrier);
			transaction = courrierInformations.getTransaction();
			switch (courrierInformations.getCourrierRecu()) {
			case 1:
				if (courrierInformations.getTransactionDestination()
						.getTransactionDestDateConsultation() == null) {
					TransactionDestination transactionDestination = courrierInformations
							.getTransactionDestination();
					transactionDestination
							.setTransactionDestDateConsultation(new Date());
					appMgr.update(transactionDestination);
				}
				break;
			case 0:
				if (transaction.getTransactionDateConsultation() == null) {
					transaction.setTransactionDateConsultation(new Date());
					appMgr.update(transaction);
				}
				break;
			}
			vb.setCopyDestNom(courrierInformations
					.getCourrierDestinataireReelle());
			vb.setCopyExpNom(courrierInformations.getCourrierExpediteur());
			vb.setCopyCourrierCommentaire(courrierInformations
					.getCourrierCommentaire());
			vb.setToReplay(true);

			// C* seach the real expediteur :
			if (courrierInformations.getCourrierAllTransactions() == null) {
				List<Transaction> allTransactions = appMgr
						.getTransactionByIdDossier(transaction.getDossier()
								.getDossierId());
				courrierInformations
						.setCourrierAllTransactions(allTransactions);
			}
			if (courrierInformations.getCourrierAllTransactionsByEtat() == null) {
				List<Transaction> allTransactionByEtat = appMgr
						.getTransactionByIdDossierByEtat(transaction
								.getDossier().getDossierId());
				courrierInformations
						.setCourrierAllTransactionsByEtat(allTransactionByEtat);

			}
			Transaction firstTransaction = courrierInformations
					.getCourrierAllTransactions().get(
							courrierInformations.getCourrierAllTransactions()
									.size() - 1);
			Expdest realExpediteur = appMgr.getListExpDestByIdExpDest(
					firstTransaction.getExpdest().getIdExpDest()).get(0);
			courrierInformations.setExpDest(realExpediteur);
			if (realExpediteur.getTypeExpDest().equals("Interne-Person")) {
				Person person = vb.getLdapOperation().getPersonalisedUserById(
						realExpediteur.getIdExpDestLdap());
				vb.getCopyListSelectedPerson().add(person);
				vb.setDestNom(person.getCn());
				// *** kha- ajoute 12-02-2019
				vb.setDestinataireId(person.getId());
				ListeDestinatairesModel dest = new ListeDestinatairesModel();
				dest.setDestinataireId(person.getId());
				dest.setDestinataireName(person.getNom());
				destinataireRepondre.add(dest);
				vb.setListeDestinataire(destinataireRepondre);
			} else if (realExpediteur.getTypeExpDest().equals("Interne-Unité")) {
				Unit unit = vb.getHashMapUnit().get(
						courrierInformations.getExpDest().getIdExpDestLdap());
				vb.getCopyListSelectedUnit().add(unit);
				vb.setDestNom(unit.getNameUnit());
				// *** kha- ajoute 12-02-2019
				vb.setDestinataireId(unit.getIdUnit());
				ListeDestinatairesModel dest = new ListeDestinatairesModel();
				dest.setDestinataireId(unit.getIdUnit());
				dest.setDestinataireName(unit.getNameUnit());

				destinataireRepondre.add(dest);
				vb.setListeDestinataire(destinataireRepondre);
			} else if (realExpediteur.getTypeExpDest().equals("Externe")) {
				Expdestexterne realExpediteurExterne = appMgr
						.getExpediteurById(
								realExpediteur.getExpdestexterne()
										.getIdExpDestExterne()).get(0);
				if (realExpediteurExterne.getTypeutilisateur()
						.getTypeUtilisateurLibelle().equals("PP")) {
					Pp pp = appMgr.getPPByReferenceExpediteur(
							realExpediteurExterne.getIdExpDestExterne()).get(0);
					pp.setExpdestexterne(realExpediteurExterne);
					vb.getCopyListPP().add(pp);
					vb.setDestNom(realExpediteurExterne.getExpDestExterneNom()
							+ " "
							+ realExpediteurExterne.getExpDestExternePrenom());
					// *** kha- ajoute 12-02-2019
					vb.setDestinataireId(pp.getExpdestexterne()
							.getIdExpDestExterne());
					ListeDestinatairesModel dest = new ListeDestinatairesModel();
					dest.setDestinataireId(pp.getExpdestexterne()
							.getIdExpDestExterne());
					dest.setDestinataireName(pp.getExpdestexterne()
							.getExpDestExterneNom());

					destinataireRepondre.add(dest);
					vb.setListeDestinataire(destinataireRepondre);
				} else {
					Pm pm = appMgr.getPMByReferenceExpediteur(
							realExpediteurExterne.getIdExpDestExterne()).get(0);
					pm.setExpdestexterne(realExpediteurExterne);
					vb.getCopyListPM().add(pm);
					vb.setDestNom(realExpediteur.getExpdestexterne()
							.getExpDestExterneNom());
					// *** kha- ajoute 12-02-2019
					vb.setDestinataireId(pm.getExpdestexterne()
							.getIdExpDestExterne());
					ListeDestinatairesModel dest = new ListeDestinatairesModel();
					dest.setDestinataireId(pm.getExpdestexterne()
							.getIdExpDestExterne());
					dest.setDestinataireName(pm.getExpdestexterne()
							.getExpDestExterneNom());
					destinataireRepondre.add(dest);
					vb.setListeDestinataire(destinataireRepondre);
				}
			}
			for (ListeDestinatairesModel d : destinataireRepondre) {
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	
	//Execution les courriers Liées à Courrier Enveloppe
	public void executeCourrierElementaire(Transaction tr,TransactionDestinationReelle destinataionReel,CourrierInformations ci){
		
		int IdCourrier=ci.getCourrierID();
		System.out.println("2019-11-26 IdCourrier =========> "+IdCourrier);
		validateTransactionToDestinationReel(tr, destinataionReel);
		
			//les courriers Lies 
		
		
					//[JS] : Liste des Courriers Affectées 
			List<CourrierInformations> courriersInformationsAffectes=new ArrayList<CourrierInformations>();
			
			courriersInformationsAffectes=appMgr.findCourrierEnvoyerANDRecuByCriteria(vb.getPerson()
			.isResponsable(), listIdsSousUnit,
			listIdsSubordonne, filterMap, sortField,
			descending, consultationCourrierSecretaire,
			consultationCourrierSubordonne,
			consultationCourrierSousUnite, 7, dateDebut,
			dateFin, type, type1, typeSecretaire, idUser,
			typeTransmission, "",
			0, 10, false,6, "Tous", vb.getDbType(),IdCourrier,0,0);				
			System.out.println("Courriers Liées Affectées :  "+courriersInformationsAffectes.size());
			for (CourrierInformations courrierInformations : courriersInformationsAffectes) {
			try {
			searchExpediteurDestinataire(courrierInformations);
			} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			}
			}
			listCourriersInformationsAffecte.addAll(courriersInformationsAffectes);
			System.out.println("listCourriersInformationsAffecte===>"+listCourriersInformationsAffecte.size());
			for(CourrierInformations cr:listCourriersInformationsAffecte){
					System.out.println("Dans liste Des courriers Liees");
				validateTransactionToDestinationReel(cr.getTransaction(), cr.getTransaction().getTransactionDestinationReelle());
				System.out.println("Fin execution les courriers 2lémentaires");
			}
			
					
	}
	
	
	
	
	public void execute() {
		// AAAA
		System.out.println("Dans Méthode Execute");
		Courrier courrier = new Courrier();
		BOC bocDest = new BOC();
		courrierInformations = selectedCourrier;
		System.out.println("courrierInformations :" + courrierInformations);
		/*------------------------------------------------------------
		 * Vérifier est ce que le bureau d'ordre connecté est l'éditeur de courrier 
		 */
		List<Integer> listeIdMembresBOc=new ArrayList<Integer>();
		int idEditeur;
		System.out.println("******************************************");
		System.out.println("courrier.getIdCourrier() "+courrier.getIdCourrier());
		CourrierDossier courrierDossier1 =  appMgr.getCourrierDossierByIdCourrier(courrierInformations.getCourrierID()).get(0);
			int refdossier = courrierDossier1.getId().getDossierId();
			Transaction transactionn = new Transaction();
			List<Transaction> listTr = appMgr.getTransactionByIdDossier(refdossier);
			lastIndex=listTr.size();
			transactionn=listTr.get(lastIndex-1);
			idEditeur=transactionn.getIdUtilisateur();
			System.out.println("Id Editeur ====>"+idEditeur);	
		


	
		
		System.out.println("****************************************");
		
	
		List<Person> listMembresBoc = vb.getPerson().getAssociatedBOC().getMembersBOC();
		for(Person membres:listMembresBoc){
			listeIdMembresBOc.add(membres.getId());
		}
		existeBOSansMembres = false;
		for (Transaction transaction : courrierInformations
				.getCourrierAllTransactions()) {
			List<Transaction> transactionExpediteur;
			transactionExpediteur = new ArrayList<Transaction>();
			transactionExpediteur = appMgr
					.getTransactionExpediteurByIdTransactionDestinationReelle(
							transaction.getTransactionDestinationReelle()
									.getTransactionDestinationReelleId(), 1);
			for (Transaction tra : transactionExpediteur) {
				idUserDes = tra.getTransactionDestinationReelle()
						.getTransactionDestinationReelleIdDestinataire();
				typeUserDes = tra.getTransactionDestinationReelle()
						.getTransactionDestinationReelleTypeDestinataire();
			}
			int idDest;
			Unit unitRechecheDes = new Unit();
			boolean findPersonDest = false;
			boolean findUnitDest = false;
			Person personneRechercheDes = new Person();
			int k = 0;
			if (typeUserDes.equals("Interne-Person")
					|| typeUserDes.equals("Interne-Person")) {
				if (typeUserDes.equals("Interne-Person")) {

					do {

						idDest = vb.getCopyLdapListUser().get(k).getId();

						if (idDest == idUserDes) {
							findPersonDest = true;
							personneRechercheDes = vb.getCopyLdapListUser()
									.get(k);
						} else {
							k++;
						}

					} while (!findPersonDest
							&& k < vb.getCopyLdapListUser().size());
					getIdBocByUnit(personneRechercheDes
							.getAssociatedDirection());

				} else if (typeUserDes.equals("Interne-Unité")) {
					do {

						idDest = vb.getCopyLdapListUnit().get(k).getIdUnit();

						if (idDest == idUserDes) {
							findUnitDest = true;
							unitRechecheDes = vb.getCopyLdapListUnit().get(k);
						} else {
							k++;
						}

					} while (!findUnitDest
							&& k < vb.getCopyLdapListUnit().size());

					Unit unite = ldapOperation.getUnitById(unitRechecheDes
							.getIdUnit());

					getIdBocByUnit(unite);
				}
				int idBocDestinataire = idBoc;
				
				bocDest = ldapOperation.getBocByID(idBocDestinataire);
				listIdBocMembers = new ArrayList<Integer>();

				List<Person> listBocMembers = bocDest.getMembersBOC();
				if (listBocMembers != null && listBocMembers.size() > 0) {
					// BO avec Membres
				} else {
					// Le BO Dest n'a pas des Membres
					existeBOSansMembres = true;
					break;
				}

				

			} else if (typeUserDes.equals("Externe")) {
				existeBOSansMembres = false;
			}

		}
		

		

		if (!existeBOSansMembres) {

			receptionphysiqueNonLivre = false;
			// [JS] Ajouté le 2019-07-30
			List<TransactionDestination> listTransactionDest = appMgr
					.getDestinationByIdTransaction(courrierInformations
							.getTransaction().getTransactionId());
			
			if (listTransactionDest != null && listTransactionDest.size() > 0) {
				TransactionDestination trDest = listTransactionDest.get(0);
				List<Courrier> listeCourriers = appMgr
						.getCourrierByIdCourrier(courrierInformations
								.getCourrierID());
				if (listeCourriers != null && listeCourriers.size() > 0) {
					Courrier cr = listeCourriers.get(0);				
					if (trDest.getTransactionDestEtatReceptionPhysique() != null) {
						
						if (cr.getCourrierAvecDocumentPhysique() == true && !listeIdMembresBOc.contains(idEditeur)
								&& trDest
										.getTransactionDestEtatReceptionPhysique()
										.getEtatId() == 9) {
						
							receptionphysiqueNonLivre = true;
						}
					} else {

						// Fin JS
						System.out.println("[receptionphysiqueNonLivre] : "
								+ receptionphysiqueNonLivre);
					}
					
					

					System.out.println("=========================== Pointer Courrier Avant d'executer ===============");
					System.out.println("ID boc "+idBoc);
					System.out.println("bocDest.getIdBOC() "+bocDest.getIdBOC());
					//BO DEstinataire va faire le pointage 
					if(bocDest.getIdBOC()==idBoc){
					 
						 System.out.println("Courrier "+courrierInformations.getCourrierID());
						 courrier=appMgr.getCourrierByIdCourrier(courrierInformations.getCourrierID()).get(0);
						 System.out.println("Courrier "+courrier.getIdCourrier());
						   //Si courrier est affecté à une valise
						 if (courrier.getIdcourrierFK() != null){							 
							 
							 Courrier crValise = appMgr.getCourrierByIdCourrier(courrier.getIdcourrierFK().getIdCourrier()).get(0);
						  	 List<CourrierDossier> dossiers=appMgr.getCourrierDossierByIdCourrier(crValise.getIdCourrier());
							Dossier dossier= appMgr.getDossierByIdDossier(dossiers.get(0).getId().getDossierId()).get(0);
							  List<Transaction> transactions=appMgr.getTransactionByIdDossier(dossier.getDossierId());
							 if(transactions != null && transactions.size()>0){
								  Transaction tr=transactions.get(0);
							 //Si courrier a type de transmission  valise et n'est pas encore Pointé
								  if(courrier.getTransmission().getTransmissionId()==9 && courrier.getCourrierDatePointage() == null && tr.getEtat().getEtatId()==12  ){
							   						 courrierPointer=true;
									  }								
							 }
							   
						   }
						 
					 }
				
					System.out.println("courrierPointer==============> "+courrierPointer);				
					

					if (!receptionphysiqueNonLivre && !courrierPointer) {
						if (courrierInformations.getCourrier() == null) {
							courrierInformations.setCourrier(appMgr
									.getCourrierByIdCourrier(
											courrierInformations
													.getCourrierID()).get(0));
						}

						courrier = courrierInformations.getCourrier();
						Etat etat = new Etat();
						etat = appMgr.listEtatByRef(
								courrierInformations.getEtatID()).get(0);

						if (etat.getEtatLibelle().equals("Faire suivre")) {
							String circuitCourrier = courrier
									.getCourrierCircuit();
							if (circuitCourrier.equals("workflow")) {
								int refNature = courrier.getNature()
										.getNatureId();
								int etatActuelle = courrier
										.getCourrierEtatActuelleWorkflow();
								Workflow workflow = new Workflow();
								int nb = appMgr.listWorkflowByIdNature(
										refNature).size();
								if (nb != 0) {
									/********* WorkFlow Request ********/
									workflow = appMgr.listWorkflowByIdNature(
											refNature).get(0);
									String processId = workflow
											.getWorkflowTitre();
									int idLastNode = workflow
											.getWorkflowIdLastNode();
									if (etatActuelle == idLastNode) {
										if (courrierInformations
												.getTransaction() == null) {
											courrierInformations
													.setTransaction(appMgr
															.getListTransactionByIdTransaction(
																	courrierInformations
																			.getTransactionID())
															.get(0));
										}
										validerFinProcessus(courrierInformations
												.getTransaction());
									} else {
										if (courrierInformations
												.getTransaction() == null) {
											courrierInformations
													.setTransaction(appMgr
															.getListTransactionByIdTransaction(
																	courrierInformations
																			.getTransactionID())
															.get(0));
										}
										TraitementEtapeSuivant etapeSuivant = new TraitementEtapeSuivant();
										JBPMAccessProcessBean jbpmAccessProcessBean = new JBPMAccessProcessBean();
										etapeSuivant = jbpmAccessProcessBean
												.startProcessTraitementCourrier(
														processId, etatActuelle);
										List<TransactionDestination> listTrDest = appMgr
												.getListTransactionDestinationByIdTransaction(courrierInformations
														.getTransactionID());
										validateWorkflow(etapeSuivant,
												courrierInformations
														.getTransaction(),
												listTrDest.get(listTrDest
														.size() - 1), courrier);
									}
								}
							}
						} else {

							// C*

							// [] : Liste de Tous Les Transactions where Etat= 5
							// => Non Traité
							System.out
									.println("Taille liste CourrierAllTransactions :"
											+ courrierInformations
													.getCourrierAllTransactionsByEtat()
													.size());

							for (Transaction transaction : courrierInformations
									.getCourrierAllTransactionsByEtat()) {
								// System.out.println("=============================");
								// System.out.println(transaction.getTransactionId());
								// System.out.println(transaction.getEtat().getEtatId());
								// System.out.println("=============================");

								// [] : Get Destinataire Réel by
								// System.out.println("-->ID Transaction Destination Reelle "
								// +
								// transaction.getTransactionDestinationReelle()
								// .getTransactionDestinationReelleId());
								TransactionDestinationReelle destinataionReel = appMgr
										.getTransactionDestinationReelById(transaction
												.getTransactionDestinationReelle()
												.getTransactionDestinationReelleId());

								// System.out
								// .println("--> destinataionReel :"
								// + destinataionReel
								// .getTransactionDestinationReelleTypeDestinataire());

								// : Courrier interne de type destination réel
								// :interne-unité ou
								// interne-Persone et necessite pas une
								// validation héarchique
								// ---------------------------------------

								if (destinataionReel != null) {

									// System.out
									// .println("2019-05-31 => Destination Reelle"
									// + destinataionReel
									// .getTransactionDestinationReelleTypeDestinataire());

									if (!destinataionReel
											.getTransactionDestinationReelleTypeDestinataire()
											.equals("Externe")) {
										
										
										if(courrierInformations.getTransmission().getTransmissionId()==9){
											
											System.out.println("Helloê Enveloppe de type valise");
											System.out.println("transaction==>"+transaction.getTransactionId());
											System.out.println("destinataionReel==>"+destinataionReel.getTransactionDestinationReelleId());
											executeCourrierElementaire(transaction,destinataionReel,courrierInformations);
										
										}else{
										// c'est un courrier d'arrivé depuis
										// l'exterieur (PP ou
										// PM) vers l'interne, donc il faut
										// l'executer pour que
										// le courrier s'entre dans le circuit
										// de validation
										// hierarchique
										// ( validation hierarchique depend de
										// la variable de
										// parametrage
										// #passage_hierarchique_courrier_arrive_apres_directeur_generale#
										// System.out
										// .println(" -->Faire Appel à la méthode de validation ");
										validateTransactionToDestinationReel(
												transaction, destinataionReel);

									}} else {
										// c'est un courrier d'un personne ou
										// unité interne vers
										// l'exterieur, juste il faut l'executer
										// pour ajouter la
										// transaction de depart d'un courrier
										// System.out
										// .println(" -->Faire Appel à la méthode execute One Transaction");
										executeOneTransaction(courrierInformations);
										break;

									}

								}
							}
						}
					}
				}
			}
		}
	}

	private void validateTransactionToDestinationReel(Transaction transaction,
			TransactionDestinationReelle trDestinationReelle) {
		try {
 
			Variables variable = appMgr.listVariablesByLibelle("validation_hierarchique_courrier_arrive").get(0);
			Variables variableToDGEN = appMgr.listVariablesByLibelle("envoie_courrier_arrive_directeur_generale").get(0);
			boolean passageDGEN = false;
			Person generalDirector = null;
			Unit generalDirectorUnit = null;
			// XET - AH : Si nous avons
			// envoie_courrier_arrive_directeur_generale= Oui
			if (variableToDGEN.getVaraiablesValeur().equals("Oui")) {
				passageDGEN = true;
				// special pour le BOC dans le cas ou la vlalidation ne passe
				// pas par le DGEN pour la fonction #findIdDestinataireSuivant#
				generalDirectorUnit = ldapOperation.getUnitById(2990);
				generalDirector = generalDirectorUnit.getResponsibleUnit();
				// special pour le BOC dans le cas ou la vlalidation ne passe
				// pas par le DGEN pour la fonction #findIdDestinataireSuivant#
			}
			// XET - AH : Si nous avons
			// envoie_courrier_arrive_directeur_generale= Oui
			else {
				// special pour le BOC dans le cas ou la vlalidation ne passe
				// pas par le DGEN pour la fonction #findIdDestinataireSuivant#
				generalDirectorUnit = ldapOperation.getUnitById(2990);
				generalDirector = generalDirectorUnit.getResponsibleUnit();
				// special pour le BOC dans le cas ou la vlalidation ne passe
				// pas par le DGEN pour la fonction #findIdDestinataireSuivant#
			}
			status1 = false;
			status2 = false;
			TransactionDestination transactionDestination = selectedCourrier.getTransactionDestination();
			transactionDestination = appMgr.getDestinationByIdTransaction(transactionDestination.getId().getIdTransaction()).get(0);
			// XET - AH Si nous avons une validation hiérarchique arrivé
			if (variable.getVaraiablesValeur().equals("Oui")) {
				
				// si le courrier à D et l'expéditeur et le destinataire ne sont pas sou le même BO
				
				Integer idDestinataireReel = trDestinationReelle.getTransactionDestinationReelleIdDestinataire();
				
				
				if( transaction.getCourrierType().equals("D"))	{
					if(isBocExp(transaction))
					executeTransactionInterne(transaction, courrierInformations);
				}
							
				
				// Vérifier si le destinataire réelle sous le même BO qui
				// exécute
				// Si "OUI"
				else if (transaction.getCourrierType().equals("I")) {
					System.out
							.println("##### La Ref est I c'est une première exécution d'un courrier ajouté par Direction");
					executeTransactionInterne(transaction, courrierInformations);
				} else {
					System.out.println("##### Ce n'est un Courrier interne "+ transaction.getCourrierType());

					// Si "NON" : passer le courrier au BO suivant
					if (trDestinationReelle.getTransactionDestinationReelleTypeDestinataire().equals("Interne-Person")) {
						// Le destinaite est Person
						
						if (idDestinataireReel != generalDirector.getId()) {
							
							Integer idDestinataireSuivant = findIdDestinataireSuivant(idDestinataireReel, vb.getPerson().getId(),true, passageDGEN, generalDirector);
							// XTE - AH : si le destinataire suivant est le
							// destinataire final
							if (idDestinataireSuivant.equals(idDestinataireReel)) {
								
								validateTransactionDestinataireFinale(transaction, transactionDestination);
							} else {
								
								validateTransactionDestinataireSuivant(transaction, transactionDestination,idDestinataireSuivant);
							}
						} else {
							
							validateTransactionDestinataireFinale(transaction,
									transactionDestination);
						}
					}
					else if (trDestinationReelle
							.getTransactionDestinationReelleTypeDestinataire()
							.equals("Interne-Unité")) {
						
						if (idDestinataireReel != generalDirectorUnit
								.getIdUnit()) {
						
							Integer idDestinataireSuivant = findIdDestinataireSuivant(
									idDestinataireReel, vb.getPerson().getId(),
									false, passageDGEN, generalDirector);

							Unit unit = ldapOperation
									.getUnitById(idDestinataireReel);
//							System.out
//							.println(">>>>>> idDestinataireSuivant :: "
//											+ idDestinataireSuivant);
//							System.out
//									.println(">>>>>> unit.getResponsibleUnit().getId() "
//											+ unit.getResponsibleUnit().getId());
							if (idDestinataireSuivant.equals(unit
									.getResponsibleUnit().getId())) {
//								System.out
//										.println("#####  aller à : validateTransactionDestinataireFinale ");
								validateTransactionDestinataireFinale(
										transaction, transactionDestination);
							} else {
//								System.out
//										.println("#####  aller à : validateTransactionDestinataireSuivant ");
								validateTransactionDestinataireSuivant(
										transaction, transactionDestination,
										idDestinataireSuivant);
							}
						} else {
//							System.out
//									.println("#####  Dans else de idDestinataireReel != generalDirectorUnit.getIdUnit()");
							validateTransactionDestinataireFinale(transaction,
									transactionDestination);
						}
					}
				}
			}
			else {
				System.out.println("-->Variable Passage par DG :"+ variableToDGEN.getVaraiablesValeur());
				System.out.println("-->Variable Passage héarchique :"+ variable.getVaraiablesValeur());
				System.out.println("Valeur de la variable executé :"+ vb.isExecute());
				if (vb.isExecute()) {
					validateTransactionDestinataireFinale(transaction,
							transactionDestination);
				} else {
//					System.out
//							.println("Methode d'execution un courrier interne par BO");
					// [] Methode qui permet d'execute un courrier de
					// destination interne par BO
					executeTransactionInterne(transaction, courrierInformations);
				}
			}
			try {
				if (transactionDestination != null) {
					transactionDestination.getId();
					// AAA

					if (transactionDestination
							.getTransactionDestDateTransfert() == null) {
						transactionDestination
								.setTransactionDestDateTransfert(new Date());
					}
					if (transactionDestination
							.getTransactionDestDateConsultation() == null) {
						transactionDestination
								.setTransactionDestDateConsultation(new Date());
					}
					appMgr.update(transactionDestination);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			status1 = true;
		} catch (Exception e) {
			status2 = true;
			e.printStackTrace();
		}
	}

	private void validateTransactionDestinataireSuivant(
			Transaction transaction,
			TransactionDestination transactionDestination,
			Integer idDestinataireSuivant) throws Exception {
		List<TransactionAnnotation> transactionAnnotation = appMgr
				.getAnnotationByIdTransaction(transaction.getTransactionId());
		newTransaction = new Transaction();
		Etat etat = new Etat();
		Expdest expdest = new Expdest();
		Typetransaction typetransaction = new Typetransaction();
		TransactionDestinationId id = new TransactionDestinationId();
		TransactionDestination trDest = new TransactionDestination();
		etat = appMgr.listEtatByRef(4).get(0);
		transaction.setEtat(etat);
		// [] :exception : org.hibernate.NonUniqueObjectException: a different
		// object with the same identifier value was already associated with the
		// session: [xtensus.entity.Transaction#12]
		if (transaction.getTransactionOrdre() == null) {
			transaction.setTransactionOrdre(1);
		}
		appMgr.update(transaction);

		// List<Transaction>
		// transaction2s=appMgr.getListTransactionByIdTransaction(transaction.getTransactionId());
		// System.out.println("2019-05-31 : "+transaction2s.size());
		// if(transaction2s!=null && transaction2s.size()>0){
		// transaction=transaction2s.get(0);
		// if (transaction.getTransactionOrdre() == null) {
		// transaction.setTransactionOrdre(1);
		// }
		// appMgr.update(transaction);
		//
		// }
		//

		expdest.setTypeExpDest("Interne-Person");
		expdest.setIdExpDestLdap(vb.getPerson().getId());
		appMgr.insert(expdest);
		newTransaction.setTransactionTypeIntervenant("sub_"
				+ vb.getPerson().getId());
		// newTransaction.setTransactionCommentaire(commentaireTransaction);
		newTransaction.setExpdest(expdest);
		newTransaction.setIdUtilisateur(vb.getPerson().getId());
		newTransaction.setTransactionDateTransaction(new Date());
		typetransaction = appMgr.getTypeTransactionByLibelle("Envoi").get(0);
		newTransaction.setTypetransaction(typetransaction);
		etat = appMgr.listEtatByRef(2).get(0);
		newTransaction.setEtat(etat);
		newTransaction.setTransactionSupprimer(true);
		int ordreTransaction = transaction.getTransactionOrdre();
		newTransaction.setTransactionOrdre(++ordreTransaction);
		newTransaction.setDossier(transaction.getDossier());
		newTransaction.setTransactionDestinationReelle(transaction
				.getTransactionDestinationReelle());
		newTransaction.setTransactionFirst(transaction.getTransactionId());
		// newTransaction.setCourrierReferenceCorrespondant(transaction.getCourrierReferenceCorrespondant());
		// newTransaction.setCourrierType(transaction.getCourrierType());
		// newTransaction.setCourrierTypeOrdre(transaction.getCourrierTypeOrdre());
		// newTransaction.setCourrierDateReceptionAnnee(transaction.getCourrierDateReceptionAnnee());
		appMgr.insert(newTransaction);
		Expdest expdestSuivant = new Expdest();

		expdestSuivant.setTypeExpDest("Interne-Person");
		expdestSuivant.setIdExpDestLdap(idDestinataireSuivant);
		appMgr.insert(expdestSuivant);
		String type = "sub_" + idDestinataireSuivant;
		id = new TransactionDestinationId();
		trDest = new TransactionDestination();
		id.setIdTransaction(newTransaction.getTransactionId());
		id.setIdExpDest(expdestSuivant.getIdExpDest());

		trDest.setTransactionDestTypeIntervenant(type);
		trDest.setId(id);
		trDest.setTransactionDestDateReponse(transactionDestination
				.getTransactionDestDateReponse());
		appMgr.insert(trDest);
		TransactionAnnotationId cI = new TransactionAnnotationId();
		TransactionAnnotation cA = new TransactionAnnotation();
		for (TransactionAnnotation tr : transactionAnnotation) {
			cI.setIdAnnotation(tr.getId().getIdAnnotation());
			cI.setIdTransaction(newTransaction.getTransactionId());
			cA.setId(cI);
			appMgr.insert(cA);
			cA = new TransactionAnnotation();
			cI = new TransactionAnnotationId();
		}
	}

	private void validateTransactionDestinataireFinale(Transaction transaction,
			TransactionDestination transactionDestination) throws Exception {
		List<TransactionAnnotation> transactionAnnotation = appMgr
				.getAnnotationByIdTransaction(transaction.getTransactionId());
		newTransaction = new Transaction();

		Etat etat = new Etat();
		Expdest expdest = new Expdest();
		Typetransaction typetransaction = new Typetransaction();
		TransactionDestinationId id = new TransactionDestinationId();
		TransactionDestination trDest = new TransactionDestination();

		// : Mettre à jour Table Transaction Après exécution
		// Transaction----------------------------------------
//		System.out.println("2019-05-31 etat transaction 1 :  "
//				+ transaction.getEtat().getEtatId() + " ID Transaction : "
//				+ transaction.getTransactionId());

		etat = appMgr.listEtatByRef(6).get(0);
		transaction.setEtat(etat);
		// transaction.setTransactionDateReponse(new Date());
		if (transaction.getTransactionOrdre() == null) {
			transaction.setTransactionOrdre(1);
		}
//		System.out.println("update transaction : "
//				+ transaction.getTransactionId());
		appMgr.update(transaction);

		// List<Transaction>
		// transaction2s=appMgr.getListTransactionByIdTransaction(transaction.getTransactionId());
		// System.out.println("2019-05-31 : "+transaction2s.size());
		// for(Transaction t:transaction2s)
		// { System.out.println("====== 2019-05-31 =======");
		// System.out.println(t.getTransactionId());
		// System.out.println("=====================");
		// }
		// if(transaction2s!=null && transaction2s.size()>0){
		// Transaction transaction2=transaction2s.get(0);
		// appMgr.update(transaction2);
		// }

		// : insertion dans Table Expdest
		// ----------------------------------------
		expdest.setTypeExpDest("Interne-Person");
		expdest.setIdExpDestLdap(vb.getPerson().getId());
		appMgr.insert(expdest);

		// newTransaction.setTransactionTypeIntervenant("sub_"
		// + vb.getPerson().getId());

		// : insertion une nouvelle ligne dans Table Transaction
		// ----------------------------------------
		newTransaction.setExpdest(expdest);
		newTransaction.setIdUtilisateur(vb.getPerson().getId());
		newTransaction.setTransactionDateTransaction(new Date());
		typetransaction = appMgr.getTypeTransactionByLibelle("Envoi").get(0);
		newTransaction.setTypetransaction(typetransaction);
		etat = appMgr.listEtatByRef(6).get(0);
		newTransaction.setEtat(etat);
		newTransaction.setTransactionSupprimer(true);
		int ordreTransaction = transaction.getTransactionOrdre();
		newTransaction.setTransactionOrdre(++ordreTransaction);
		newTransaction.setDossier(transaction.getDossier());
		newTransaction.setTransactionDestinationReelle(transaction
				.getTransactionDestinationReelle());
		newTransaction.setTransactionFirst(transaction.getTransactionId());


		newTransaction.setCourrierReferenceCorrespondant(transaction
				.getCourrierReferenceCorrespondant());
		newTransaction.setCourrierType(transaction.getCourrierType());
		newTransaction.setCourrierTypeOrdre(transaction.getCourrierTypeOrdre());
		newTransaction.setCourrierDateReceptionAnnee(transaction
				.getCourrierDateReceptionAnnee());

		appMgr.insert(newTransaction);
		// : Fin insertion une nouvelle ligne dans Table Transaction
		// ----------------------------------------

		String type = "";
		Expdest expdestFinal = new Expdest();
		if (transaction.getTransactionDestinationReelle()
				.getTransactionDestinationReelleTypeDestinataire()
				.equals("Interne-Person")) {
			Person personDestinationReel = vb
					.getLdapOperation()
					.getPersonalisedUserById(
							transaction
									.getTransactionDestinationReelle()
									.getTransactionDestinationReelleIdDestinataire());
			expdestFinal.setTypeExpDest("Interne-Person");
			expdestFinal.setIdExpDestLdap(transaction
					.getTransactionDestinationReelle()
					.getTransactionDestinationReelleIdDestinataire());
			if (personDestinationReel.isResponsable()) {
				type = "sub_" + personDestinationReel.getId();
			} else if (personDestinationReel.isSecretary()) {
				type = "secretary_" + personDestinationReel.getId();
			} else {
				type = "agent_" + personDestinationReel.getId();
			}
			trDest.setTransactionDestTypeIntervenant(type);
			trDest.setTransactionDestIdIntervenant(personDestinationReel
					.getId());

		} else if (transaction.getTransactionDestinationReelle()
				.getTransactionDestinationReelleTypeDestinataire()
				.equals("Interne-Unité")) {
			// Unit unit =
			// ldapOperation.getUnitById(transaction.getTransactionDestinationReelle().getTransactionDestinationReelleIdDestinataire());
			expdestFinal.setTypeExpDest("Interne-Unité");
			expdestFinal.setIdExpDestLdap(transaction
					.getTransactionDestinationReelle()
					.getTransactionDestinationReelleIdDestinataire());
			type = "unit_"
					+ transaction.getTransactionDestinationReelle()
							.getTransactionDestinationReelleIdDestinataire();
			trDest.setTransactionDestTypeIntervenant(type);
			trDest.setTransactionDestIdIntervenant(transaction
					.getTransactionDestinationReelle()
					.getTransactionDestinationReelleIdDestinataire());

		}
		appMgr.insert(expdestFinal);


		id = new TransactionDestinationId();
		trDest = new TransactionDestination();
		id.setIdTransaction(newTransaction.getTransactionId());
		id.setIdExpDest(expdestFinal.getIdExpDest());

		trDest.setTransactionDestTypeIntervenant(type);
		trDest.setId(id);
		trDest.setTransactionDestDateReponse(transactionDestination
				.getTransactionDestDateReponse());
		appMgr.insert(trDest);

		TransactionAnnotationId cI = new TransactionAnnotationId();
		TransactionAnnotation cA = new TransactionAnnotation();
		for (TransactionAnnotation tr : transactionAnnotation) {
			cI.setIdAnnotation(tr.getId().getIdAnnotation());
			cI.setIdTransaction(newTransaction.getTransactionId());
			cA.setId(cI);
			appMgr.insert(cA);
			cA = new TransactionAnnotation();
			cI = new TransactionAnnotationId();
		}
	}

	private Integer findIdDestinataireSuivant(Integer idDestinataireReel,
			Integer idConnectedPerson, Boolean destinataireReelIsPerson,
			boolean passageDGEN, Person generalDirector) {

		Person person;

		if (destinataireReelIsPerson) {
			person = vb.getLdapOperation().getPersonalisedUserById(
					idDestinataireReel);

		} else {
			Unit unit = vb.getLdapOperation().getUnitById(idDestinataireReel);
			person = vb.getLdapOperation().getPersonalisedUserById(
					unit.getResponsibleUnit().getId());

		}
		Unit superiorUnit = new Unit();
		if (person.isResponsable()) {
			superiorUnit = person.getAssociatedDirection().getAssociatedUnit();
		} else {
			superiorUnit = person.getAssociatedDirection();
		}
		superiorUnit = vb.getLdapOperation().getUnitById(
				superiorUnit.getIdUnit());

		if (passageDGEN) {
			if (superiorUnit.getResponsibleUnit().getId() != idConnectedPerson) {
				return findIdDestinataireSuivant(superiorUnit
						.getResponsibleUnit().getId(), idConnectedPerson, true,
						passageDGEN, generalDirector);
			}
		} else {
			if (superiorUnit.getResponsibleUnit().getId() != idConnectedPerson
					|| (generalDirector != null && superiorUnit
							.getResponsibleUnit().getId() != generalDirector
							.getId())) {
				
				return findIdDestinataireSuivant(superiorUnit
						.getResponsibleUnit().getId(), idConnectedPerson, true,
						passageDGEN, generalDirector);
			}
		}
		return person.getId();
	}

	public void validerFinProcessus(Transaction transaction) {
		setStatus1(false);
		setStatus2(false);
		try {
			Etat etat = new Etat();
			etat = appMgr.listEtatByLibelle("Validé").get(0);
			transaction.setEtat(etat);
			transaction.setTransactionDateReponse(new Date());
			appMgr.update(transaction);
			setStatus1(true);
		} catch (Exception e) {
			setStatus2(true);
			e.printStackTrace();
		}

	}

	public void validateWorkflow(TraitementEtapeSuivant etapeSuivant,
			Transaction transaction,
			TransactionDestination transactionDestination, Courrier courrier) {
		setStatus1(false);
		setStatus2(false);
		try {
			if (transactionDestination != null) {
				if (transactionDestination.getTransactionDestDateConsultation() == null) {
					transactionDestination
							.setTransactionDestDateConsultation(new Date());
				}
			}
			transactionDestination.setTransactionDestDateTransfert(new Date());
			appMgr.update(transactionDestination);
			newTransaction = new Transaction();
			Etat etat = new Etat();
			Expdest expdest = new Expdest();
			Typetransaction typetransaction = new Typetransaction();
			TransactionDestinationId id = new TransactionDestinationId();
			TransactionDestination trDest = new TransactionDestination();
			etat = appMgr.listEtatByLibelle("Validé").get(0);
			transaction.setEtat(etat);
			transaction.setTransactionDateReponse(new Date());
			appMgr.update(transaction);
			
			expdest.setTypeExpDest("Interne-Person");
			expdest.setIdExpDestLdap(vb.getPerson().getId());
			appMgr.insert(expdest);
			if (vb.getPerson().isResponsable()) {
				newTransaction.setTransactionTypeIntervenant("sub_"
						+ String.valueOf(vb.getPerson().getId()));
			} else if (vb.getPerson().isSecretary()) {
				newTransaction.setTransactionTypeIntervenant("secretary_"
						+ String.valueOf(vb.getPerson().getId()));
			}
			newTransaction.setExpdest(expdest);
			newTransaction.setIdUtilisateur(vb.getPerson().getId());
			newTransaction.setTransactionDateTransaction(new Date());
			typetransaction = appMgr.getTypeTransactionByLibelle("Envoi")
					.get(0);
			newTransaction.setTypetransaction(typetransaction);
			// Faire suivre
			etat = appMgr.listEtatByLibelle("Faire suivre").get(0);
			newTransaction.setEtat(etat);
			newTransaction.setTransactionSupprimer(true);
			int newOrderNumber = transaction.getTransactionOrdre();
			newOrderNumber++;
			newTransaction.setTransactionOrdre(newOrderNumber);
			newTransaction.setDossier(transaction.getDossier());
			// C * // dupliquer le destinataire reel du workflow au niveau de la
			// nouvelle transaction
			newTransaction.setTransactionDestinationReelle(transaction
					.getTransactionDestinationReelle());
			// C * // dupliquer le destinataire reel du workflow au niveau de la
			// nouvelle transaction
			newTransaction.setTransactionFirst(transaction.getTransactionId());
			appMgr.insert(newTransaction);

			/********** Workflow **********/

			long resultat = etapeSuivant.getIdNodeSuivante();
			int etatActuelle = (int) resultat;
			courrier.setCourrierEtatActuelleWorkflow(etatActuelle);
			appMgr.update(courrier);

			String result = "";
			Unit u = new Unit();
			String unite = etapeSuivant.getEtatSuivant();
			// Unite
			u = vb.getLdapOperation().getUnitByShortName(unite);

			// Envoi Unité
			result = result + u.getNameUnit() + " / ";
			expdest = new Expdest();
			id = new TransactionDestinationId();
			trDest = new TransactionDestination();
			if (unite.equals("BOC")) {
				if (vb.getPerson().getAssociatedDirection() != null) {
					getIdBocByUnit(vb.getPerson().getAssociatedDirection());
				} else {
					idBoc = vb.getPerson().getAssociatedBOC().getIdBOC();
				}
				expdest.setTypeExpDest("Interne-Boc");
				expdest.setIdExpDestLdap(idBoc);
				appMgr.insert(expdest);
				id.setIdTransaction(newTransaction.getTransactionId());
				id.setIdExpDest(expdest.getIdExpDest());
				trDest.setId(id);

				trDest.setTransactionDestTypeIntervenant("boc_" + idBoc);
			} else {
				expdest.setTypeExpDest("Interne-Unité");
				expdest.setIdExpDestLdap(u.getIdUnit());
				appMgr.insert(expdest);
				id.setIdTransaction(newTransaction.getTransactionId());
				id.setIdExpDest(expdest.getIdExpDest());
				trDest.setId(id);

				trDest.setTransactionDestTypeIntervenant("unit_"
						+ String.valueOf(u.getIdUnit()));
			}
			appMgr.insert(trDest);

			TransactionAnnotationId cI = new TransactionAnnotationId();
			TransactionAnnotation cA = new TransactionAnnotation();
			List<TransactionAnnotation> transactionAnnotation = new ArrayList<TransactionAnnotation>();
			transactionAnnotation = appMgr
					.getAnnotationByIdTransaction(transaction
							.getTransactionId());
			for (TransactionAnnotation tr : transactionAnnotation) {
				cI.setIdAnnotation(tr.getId().getIdAnnotation());
				cI.setIdTransaction(newTransaction.getTransactionId());
				cA.setId(cI);
				appMgr.insert(cA);
				cA = new TransactionAnnotation();
				cI = new TransactionAnnotationId();
			}
			setStatus1(true);

		} catch (Exception e) {
			setStatus2(true);
			e.printStackTrace();
		}
	}

	private void executeOneTransaction(CourrierInformations courrierInformations) {
		if (courrierInformations.getCourrier() == null) {
			courrierInformations.setCourrier(appMgr.getCourrierByIdCourrier(
					courrierInformations.getCourrierID()).get(0));
		}
		if (courrierInformations.getTransaction() == null) {
			courrierInformations.setTransaction(appMgr
					.getListTransactionByIdTransaction(
							courrierInformations.getTransactionID()).get(0));
		}
		setStatus1(false);
		setStatus2(false);
		Transaction transaction = new Transaction();
		transaction = courrierInformations.getTransaction();
		Transaction newTransaction;
		Transaction transactionExpediteur;
		List<Transaction> listTransaction = new ArrayList<Transaction>();
		try {
			if (transaction.getTransactionDestinationReelle() != null) {
				newTransaction = new Transaction();
				transactionExpediteur = new Transaction();

				transactionExpediteur = appMgr
						.getTransactionExpediteurByIdTransactionDestinationReelle(
								transaction.getTransactionDestinationReelle()
										.getTransactionDestinationReelleId(), 1)
						.get(0);

				listTransaction = appMgr
						.getTransactionByIdTransactionDestinationReelle(transaction
								.getTransactionDestinationReelle()
								.getTransactionDestinationReelleId());
				Etat etat = new Etat();
				Expdest expdest = new Expdest();
				Typetransaction typetransaction = new Typetransaction();
				TransactionDestinationId id = new TransactionDestinationId();
				TransactionDestination trDest = new TransactionDestination();
				etat = appMgr.listEtatByLibelle("Traité").get(0);
				newTransaction.setExpdest(transactionExpediteur.getExpdest());
				newTransaction.setIdUtilisateur(vb.getPerson().getId());
				newTransaction.setTransactionDateTransaction(new Date());
				typetransaction = appMgr.getTypeTransactionByLibelle("Envoi")
						.get(0);
				newTransaction.setTypetransaction(typetransaction);
				newTransaction.setEtat(etat);
				newTransaction.setTransactionSupprimer(true);
				int newOrderNumber = transaction.getTransactionOrdre();
				newOrderNumber++;
				newTransaction.setTransactionOrdre(newOrderNumber);
				newTransaction.setDossier(transaction.getDossier());
				newTransaction.setTransactionDestinationReelle(transaction
						.getTransactionDestinationReelle());
				newTransaction.setTransactionFirst(transaction
						.getTransactionId());

				appMgr.insert(newTransaction);

				expdest = new Expdest();
				Expdestexterne expDestExterne = new Expdestexterne();
				TransactionDestinationReelle transactionDestinationReelle = appMgr
						.getTransactionDestinationReelById(transaction
								.getTransactionDestinationReelle()
								.getTransactionDestinationReelleId());
				expdest.setTypeExpDest("Externe");
				expDestExterne = appMgr
						.getExpediteurById(
								transactionDestinationReelle
										.getTransactionDestinationReelleIdDestinataire())
						.get(0);
				expdest.setExpdestexterne(expDestExterne);
				transactionDestinationReelle
						.setTransactionDestinationReelleDateTraitement(new Date());
				appMgr.update(transactionDestinationReelle);
				appMgr.insert(expdest);

				id = new TransactionDestinationId();
				trDest = new TransactionDestination();
				id.setIdTransaction(newTransaction.getTransactionId());
				id.setIdExpDest(expdest.getIdExpDest());
				trDest.setTransactionDestTypeIntervenant(type);
				trDest.setId(id);
				appMgr.insert(trDest);

				List<TransactionAnnotation> transactionAnnotation = new ArrayList<TransactionAnnotation>();
				transactionAnnotation = appMgr
						.getAnnotationByIdTransaction(transaction
								.getTransactionId());
				TransactionAnnotationId cI = new TransactionAnnotationId();
				TransactionAnnotation cA = new TransactionAnnotation();
				for (TransactionAnnotation tr : transactionAnnotation) {
					cI.setIdAnnotation(tr.getId().getIdAnnotation());
					cI.setIdTransaction(newTransaction.getTransactionId());
					cA.setId(cI);
					appMgr.insert(cA);
					cA = new TransactionAnnotation();
					cI = new TransactionAnnotationId();
				}

				for (Transaction transaction1 : listTransaction) {
					transaction1.setEtat(etat);
					appMgr.update(transaction1);
				}
				Date dateCourrier = courrierInformations.getCourrier()
						.getCourrierDateReception();
				year = dateCourrier.getYear() + 1900;

//				System.out.println("year   " + year);
//				System.out.println("Boc  "
//						+ "boc_"
//						+ String.valueOf(vb.getPerson().getAssociatedBOC()
//								.getIdBOC()));

				if (courrierInformations.getCourrier().getCourrierType()
						.equals("I")) {

					Integer lastId2 = appMgr.CountAllCourrierBOCByTransaction(
							"D",
							year,
							"boc_"
									+ String.valueOf(vb.getPerson()
											.getAssociatedBOC().getIdBOC()),
							listIdBocMembers);
					
					List<Courrier> listeCourrier=appMgr.getCourrierByIdCourrier(courrierInformations.getCourrier().getIdCourrier().intValue());
					if(listeCourrier!=null && listeCourrier.size()>0)
						courrier=listeCourrier.get(0);
					
					
					courrier.setCourrierType("D");

					if (lastId2 != null) {
						courrier
								.setCourrierTypeOrdre(lastId2 + 1);

					} else {
						courrier
								.setCourrierTypeOrdre(1);
					}

					courrier
							.setCourrierReferenceCorrespondant(
									courrier
											.getCourrierType()
											+ courrier
													.getCourrierTypeOrdre());
					appMgr.update(courrier);
					courrierInformations.setCourrier(courrier);
					// XTE - AH : Dans le cas ou le courrier est I màj la ref du
					// Courrier dans la transaction
					List<Transaction> transactions = appMgr
							.getListTransactionByIdTransaction(transaction
									.getTransactionId());
					if (transactions != null && transactions.size() > 0) {
						transaction = transactions.get(0);

						transaction
								.setCourrierReferenceCorrespondant(courrierInformations
										.getCourrier()
										.getCourrierReferenceCorrespondant());

						transaction.setCourrierType(courrierInformations
								.getCourrier().getCourrierType());
						transaction.setCourrierTypeOrdre(courrierInformations
								.getCourrier().getCourrierTypeOrdre());
						appMgr.update(transaction);
					}

				}

				// /////////////////////////////////////////
				// courrierInformations.getCourrier().setCourrierReferenceCorrespondant("D"+courrierInformations.getCourrier().getIdCourrier());

				// XTE - AH : Mettre à jour la reference dans la dernière
				// transaction ajoutée
				newTransaction.setCourrierTypeOrdre(courrierInformations
						.getCourrier().getCourrierTypeOrdre());

				newTransaction.setCourrierType(courrierInformations
						.getCourrier().getCourrierType());
				newTransaction.setCourrierDateReceptionAnnee(transaction
						.getCourrierDateReceptionAnnee());
				newTransaction
						.setCourrierReferenceCorrespondant(courrierInformations
								.getCourrier()
								.getCourrierReferenceCorrespondant());
				appMgr.update(newTransaction);

				Dossier dossier = appMgr.getDossierByIdDossier(
						transaction.getDossier().getDossierId()).get(0);
				dossier.setDossierIntitule("Courrier_"
						+ courrierInformations.getCourrier().getIdCourrier());
				appMgr.update(dossier);
				// mettre a jour la reference pour indiquer qu'il est un
				// courrier de depart
				// mettre a jour la colonne #courrierDateReponseSysteme# pour
				// indiquer que le courrier originale a été repondu
				// trouvez le courrier original
				List<Lienscourriers> liensCourriers = appMgr
						.getListCourrierLiensByIdCourrier(courrierInformations
								.getCourrier().getIdCourrier());
				if (!liensCourriers.isEmpty()) {
					List<Integer> listIdLien = new ArrayList<Integer>();
					for (Lienscourriers liens : liensCourriers) {
						listIdLien.add(liens.getLiensCourrier());
					}
					CourrierLiens courrierLiens = appMgr
							.getCourrierLienByListIdLienAndTypeLien(listIdLien,
									1);
					if (courrierLiens != null) {
						Courrier courrierOriginal = appMgr
								.getCourrierByIdCourrier(
										courrierLiens.getId().getIdCourrier())
								.get(0);
						courrierOriginal
								.setCourrierDateReponseSysteme(new Date());
						appMgr.update(courrierOriginal);
					}
				}
				// trouver le courrier original
				// mettre a jour la colonne #courrierDateReponseSysteme# pour
				// indiquer que le courrier originale a été repondu
				// inséré la date de traitement

				TransactionDestination trDestinationInter = courrierInformations
						.getTransactionDestination();
				List<TransactionDestination> listTrDestination = appMgr
						.getDestinationByIdTransaction(courrierInformations
								.getTransaction().getTransactionId());
				if (listTrDestination != null && listTrDestination.size() > 0) {
					TransactionDestination trDestination = listTrDestination
							.get(0);

					if (trDestination.getTransactionDestDateTransfert() == null) {

						trDestination
								.setTransactionDestDateTransfert(new Date());
						appMgr.update(trDestination);
					}
					// inséré la date de traitement
					// inséré la date de consultation
					// [JS] : set Date De Consultation lors de consultation de
					// courrier et non pas au niveau execution
					// if (trDestination.getTransactionDestDateConsultation() ==
					// null) {
					// trDestination
					// .setTransactionDestDateConsultation(new Date());
					// appMgr.update(trDestination);
					// }
				}
				// inséré la date de consultation
			}
			setStatus1(true);
		} catch (Exception e) {
			setStatus2(true);
			e.printStackTrace();
		}
	}

	public void chargementNotification(
			CourrierInformations consulterInformations) {
		try {
			// Transaction transaction = new Transaction();
			// transaction = consulterInformations.getTransaction();
			// *** Log && Notification ***//
			vbn.setEvenementNomVariableNotif("event_consult_courrier_notif");
			vbn.setNotificationNomVariablAdmin("consult_courrier_admin");
			vbn.setNotificationNomVariableDestinataire("consult_courrier_dest");
			vbn.setEvenementNomVariableLog("event_consult_courrier_log");
			vbn.setNomExpediteur("Administrator");
			vbn.setMailExpediteur("xtexte2@gmail.com");
			// ***Fin Log & notification***//
			List<Person> listPersonDest = new ArrayList<Person>();

			String expdest = consulterInformations.getCourrierExpediteur();
			Courrier courrierConsult = new Courrier();
			if (consulterInformations.getCourrier() == null) {
				consulterInformations.setCourrier(appMgr
						.getCourrierByIdCourrier(
								consulterInformations.getCourrierID()).get(0));
			}
			courrierConsult = consulterInformations.getCourrier();

			Date dateSystem = new Date();
			SimpleDateFormat formaterDate = null;
			formaterDate = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");

			String infoCourrier = "La réference de ce courrier est : "
					+ courrierConsult.getCourrierReferenceCorrespondant();

			vbn.setInfo(infoCourrier);
			vbn.setNomClass(CourrierAjoutBean.class.getName());
			vbn.setTypeLog("INFO");
			Person p = new Person();
			p = vb.getLdapOperation().getUserByName(expdest);
			listPersonDest.add(p);

			// Chargement Hard Codé de les elements à remplir dans la classe
			// informations
			info1.setVar("#p");
			info1.setContenu(vb.getPerson().getNom());
			info2.setVar("#I");
			info2.setContenu(infoCourrier);
			info3.setVar("#d");
			info3.setContenu(formaterDate.format(dateSystem));
			listInfo.add(info1);
			listInfo.add(info2);
			listInfo.add(info3);
			vbn.setListInformations(listInfo);
			vbn.setTypeObject("TEST");
			vbn.setCopyListSelectedPersonNotif(listPersonDest);
			vbn.setPerson(vb.getPerson());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void getIdBocByUnit(Unit unit) {

		if (unit.getAssociatedUnit() != null && unit.getIdUnit() != null) {
			//[JS]:2019-10-03
			Unit u = ldapOperation.getUnitById(unit.getAssociatedUnit().getIdUnit()
					);
			getIdBocByUnit(u);

		} else if (unit.getAssociatedBOC() != null) {
			idBoc = unit.getAssociatedBOC().getIdBOC();
			unitSup = unit;

		} else {
			System.out
					.println("DANS else unit.getAssociatedUnit() != null && unit.getAssociatedBOC()!=null ");
		
		}
	}

	public Long CountCourrier(String recent, HashMap<String, Object> filterMap,
			int jourOrAutre, Date dateDebut, Date dateFin, String type,
			String type1, Integer idUser, Integer typeTransmission,
			String stateTraitement, String typeCourrier,
			String courrierRubrique, boolean forTotal) {
		Integer courrierRubriqueId = Integer.valueOf(courrierRubrique);
		Calendar calendar = Calendar.getInstance();
		if (recent.equals("annee")) {
			calendar.set(Calendar.MONTH, 0);
		}
		calendar.set(Calendar.DAY_OF_MONTH, 1);
		calendar.set(Calendar.HOUR_OF_DAY, 0);
		calendar.set(Calendar.MINUTE, 0);
		calendar.set(Calendar.SECOND, 0);
		calendar.set(Calendar.MILLISECOND, 0);
		dateDebut = calendar.getTime();
		countCourrier = appMgr.CountAllCourrierEnvoyerANDRecuByCriteria(vb
				.getPerson().isResponsable(), listIdsSousUnit,
				listIdsSubordonne, filterMap, consultationCourrierSecretaire,
				consultationCourrierSubordonne, consultationCourrierSousUnite,
				jourOrAutre, dateDebut, dateFin, type, type1, typeSecretaire,
				idUser, typeTransmission, stateTraitement, courrierRubriqueId,
				forTotal, typeCourrier);
		return countCourrier;
	}

	public Long getCountCourrier(String recent,
			HashMap<String, Object> filterMap, String transmissionCourrierJour,
			String typeCourrierTraitementJour, String typeCourrier,
			String typeCourrierValidation, String categorieCourrier,
			String courrierRubrique, boolean forTotal) {
		Long countCourrier = 0L;
		Calendar calendar = Calendar.getInstance();
		if (recent.equals("annee")) {
			calendar.set(Calendar.MONTH, 0);
		}
		calendar.set(Calendar.DAY_OF_MONTH, 1);
		calendar.set(Calendar.HOUR_OF_DAY, 0);
		calendar.set(Calendar.MINUTE, 0);
		calendar.set(Calendar.SECOND, 0);
		calendar.set(Calendar.MILLISECOND, 0);
		dateDebut = calendar.getTime();
		// AAAA
		if (vb.getPerson().isBoc()) {
			countCourrier = appMgr.CountAllCourrierBOCByCriteria(filterMap, 14,
					dateDebut, dateFin, type, type1, listIdBocMembers,
					transmissionCourrierJour, typeCourrierTraitementJour,
					categorieCourrier);
		} else {
			countCourrier = appMgr.CountAllCourrierEnvoyerANDRecuByCriteria(vb
					.getPerson().isResponsable(), listIdsSousUnit,
					listIdsSubordonne, filterMap,
					consultationCourrierSecretaire,
					consultationCourrierSubordonne,
					consultationCourrierSousUnite, 13, dateDebut, dateFin,
					type, type1, typeSecretaire, idUser, typeTransmission,
					typeCourrierValidation, Integer.valueOf(courrierRubrique),
					forTotal, typeCourrier);
		}

		return countCourrier;
	}

	public Long getCountCourrierAnnee(String recent,
			HashMap<String, Object> filterMap, String transmissionCourrierJour,
			String typeCourrierTraitementJour, String typeCourrier,
			String typeCourrierValidation, String categorieCourrier,
			String courrierRubrique, boolean forTotal) {
		Long countCourrier = 0L;
		Calendar calendar = Calendar.getInstance();
		if (recent.equals("annee")) {
			calendar.set(Calendar.MONTH, 0);
		}
		calendar.set(Calendar.DAY_OF_MONTH, 1);
		calendar.set(Calendar.HOUR_OF_DAY, 0);
		calendar.set(Calendar.MINUTE, 0);
		calendar.set(Calendar.SECOND, 0);
		calendar.set(Calendar.MILLISECOND, 0);
		dateDebut = calendar.getTime();

		if (vb.getPerson().isBoc()) {
			countCourrier = appMgr.CountAllCourrierBOCByCriteria(filterMap, 13,
					dateDebut, dateFin, type, type1, listIdBocMembers,
					transmissionCourrierJour, typeCourrierTraitementJour,
					categorieCourrier);
		} else {
			countCourrier = appMgr.CountAllCourrierEnvoyerANDRecuByCriteria(vb
					.getPerson().isResponsable(), listIdsSousUnit,
					listIdsSubordonne, filterMap,
					consultationCourrierSecretaire,
					consultationCourrierSubordonne,
					consultationCourrierSousUnite, 12, dateDebut, dateFin,
					type, type1, typeSecretaire, idUser, typeTransmission,
					typeCourrierValidation, Integer.valueOf(courrierRubrique),
					forTotal, typeCourrier);
		}

		return countCourrier;
	}

	public void executeAllTransaction() {

	}

	// ---------------------- KHA : sous titre rapport------------
	public String getCategorieListeCourriers(String s) {
		String categorieListeCourriers = "";
		if (s.equals("T")) {
			categorieListeCourriers = "Tous";

		} else if (s.equals("A")) {
			categorieListeCourriers = "Arrivé";
		} else if (s.equals("D")) {
			categorieListeCourriers = "Départ";
		}
		return categorieListeCourriers;

	}

	public String getTypeTraitememtListeCourriers(String s) {
		String typeTraitememtListeCourriers = "";
		if (s.equals("tous")) {
			typeTraitememtListeCourriers = "Tous";

		} else if (s.equals("traite")) {
			typeTraitememtListeCourriers = "Traité";
		} else if (s.equals("nonTraite")) {
			typeTraitememtListeCourriers = "Non Traité";
		}
		return typeTraitememtListeCourriers;

	}

	public String getTypeTransmissionListeCourriers(String s) {
		String typeTransmissionListeCourriers = "";
		if (s.equals("Tous les courriers") || s.equals("Tout les courriers")) {
			typeTransmissionListeCourriers = "Tous";

		} else {
			typeTransmissionListeCourriers = appMgr
					.getTransmissionById(Integer.valueOf(s)).get(0)
					.getTransmissionLibelle();
		}

		return typeTransmissionListeCourriers;

	}

	// ------------------------ KHA : SOUS TITRE autre BOC --------------------
	public String getTypeCourrierListeCourriers(String s) {
		String typeCourriers = "";
		if (s.equals("Tous")) {
			typeCourriers = "Tous";

		} else if (s.equals("Recu")) {
			typeCourriers = "Reçus";
		} else if (s.equals("Envoyes")) {
			typeCourriers = "Envoyés";
		}

		return typeCourriers;
	}

	public String getRubriqueListeCourriers(int courrierRubriqueId) {
		String RubriqueCourriers = "";
		switch (courrierRubriqueId) {
		case 1:
			RubriqueCourriers = "Tous";
			break;
		case 2:
			RubriqueCourriers = "Mes Courriers";
			break;
		case 3:
			RubriqueCourriers = "Mon Unité";
			break;
		case 4:
			RubriqueCourriers = "De mes Subordonnées";
			break;
		case 5:
			RubriqueCourriers = "De ma Secretaire ";
			break;
		case 6:
			RubriqueCourriers = "De mes Sous Unités";
			break;

		default:
			break;
		}
		return RubriqueCourriers;
	}

	// --------------------------------
	public List<SelectItem> getSelectItemsTr() {
		String libelle;
		String id;
		List<SelectItem> selectItemsTr = new ArrayList<SelectItem>();

		selectItemsTr.add(new SelectItem(messageSource.getMessage(
				"toutCourrier", new Object[] {}, lm.createLocal())));
		for (Transmission item : listTr) {
			if (vb.getLocale().equals("ar")) {
				libelle = item.getTransmissionLibelleAr();
			} else {
				libelle = item.getTransmissionLibelle();
			}
			id = item.getTransmissionId().toString();
			selectItemsTr.add(new SelectItem(id, libelle));
		}
		// selectItemsTr.add(new
		// SelectItem(messageSource.getMessage("AutreLabel",
		// new Object[] {}, lm.createLocal())));
		return selectItemsTr;
	}

	// Geeters & Setters ...
	public ApplicationManager getAppMgr() {
		return appMgr;
	}

	public void setAppMgr(ApplicationManager appMgr) {
		this.appMgr = appMgr;
	}

	public VariableGlobale getVb() {
		return vb;
	}

	public void setVb(VariableGlobale vb) {
		this.vb = vb;
	}

	public LanguageManagerBean getLm() {
		return lm;
	}

	public void setLm(LanguageManagerBean lm) {
		this.lm = lm;
	}

	public MessageSource getMessageSource() {
		return messageSource;
	}

	public void setMessageSource(MessageSource messageSource) {
		this.messageSource = messageSource;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public LdapOperation getLdapOperation() {
		return ldapOperation;
	}

	public void setLdapOperation(LdapOperation ldapOperation) {
		this.ldapOperation = ldapOperation;
	}

	public VariableGlobaleNotification getVbn() {
		return vbn;
	}

	public void setVbn(VariableGlobaleNotification vbn) {
		this.vbn = vbn;
	}

	public boolean isShowTab() {
		return showTab;
	}

	public void setShowTab(boolean showTab) {
		this.showTab = showTab;
	}

	public boolean isBocOption() {
		return bocOption;
	}

	public void setBocOption(boolean bocOption) {
		this.bocOption = bocOption;
	}

	public boolean isUserOption() {
		return userOption;
	}

	public void setUserOption(boolean userOption) {
		this.userOption = userOption;
	}

	public boolean isStatus1() {
		return status1;
	}

	public void setStatus1(boolean status1) {
		this.status1 = status1;
	}

	public boolean isStatus2() {
		return status2;
	}

	public void setStatus2(boolean status2) {
		this.status2 = status2;
	}

	public List<Transmission> getListTr() {
		return listTr;
	}

	public void setListTr(List<Transmission> listTr) {
		this.listTr = listTr;
	}

	public Variables getVariableConsultationCourrierSecretaire() {
		return varConsultationCourrierSecretaire;
	}

	public void setVariableConsultationCourrierSecretaire(
			Variables variableConsultationCourrierSecretaire) {
		this.varConsultationCourrierSecretaire = variableConsultationCourrierSecretaire;
	}

	public Variables getVariableConsultationCourrierSubordonne() {
		return varConsultationCourrierSubordonne;
	}

	public void setVariableConsultationCourrierSubordonne(
			Variables variableConsultationCourrierSubordonne) {
		this.varConsultationCourrierSubordonne = variableConsultationCourrierSubordonne;
	}

	public Variables getVariableConsultationCourrierSousUnite() {
		return varConsultationCourrierSousUnite;
	}

	public void setVariableConsultationCourrierSousUnite(
			Variables variableConsultationCourrierSousUnite) {
		this.varConsultationCourrierSousUnite = variableConsultationCourrierSousUnite;
	}

	public void setCountCourrier(Long countCourrier) {
		this.countCourrier = countCourrier;
	}

	public void setTypeSecretaire(String typeSecretaire) {
		this.typeSecretaire = typeSecretaire;
	}

	public String getTypeSecretaire() {
		return typeSecretaire;
	}

	public void setStateTraitement(Integer stateTraitement) {
		this.stateTraitement = stateTraitement;
	}

	public Integer getStateTraitement() {
		return stateTraitement;
	}

	public Long getCountCourrierRecu() {
		return countCourrierRecu;
	}

	public void setCountCourrierRecu(Long countCourrierRecu) {
		this.countCourrierRecu = countCourrierRecu;
	}

	public CourrierInformations getSelectedCourrier() {
		return selectedCourrier;
	}

	public void setSelectedCourrier(CourrierInformations selectedCourrier) {
		this.selectedCourrier = selectedCourrier;
	}

	public boolean isShowExecuteAllButton() {
		return showExecuteAllButton;
	}

	public void setShowExecuteAllButton(boolean showExecuteAllButton) {
		this.showExecuteAllButton = showExecuteAllButton;
	}

	public boolean isHideExecuteAllButton() {
		return hideExecuteAllButton;
	}

	public void setHideExecuteAllButton(boolean hideExecuteAllButton) {
		this.hideExecuteAllButton = hideExecuteAllButton;
	}

	public boolean isMoreChoices() {
		return moreChoices;
	}

	public void setMoreChoices(boolean moreChoices) {
		this.moreChoices = moreChoices;
	}

	public boolean isAllMailChecked() {
		return allMailChecked;
	}

	public void setAllMailChecked(boolean allMailChecked) {
		this.allMailChecked = allMailChecked;
	}

	public boolean isToValidateMailChecked() {
		return toValidateMailChecked;
	}

	public void setToValidateMailChecked(boolean toValidateMailChecked) {
		this.toValidateMailChecked = toValidateMailChecked;
	}

	public boolean isValidatedMailChecked() {
		return validatedMailChecked;
	}

	public void setValidatedMailChecked(boolean validatedMailChecked) {
		this.validatedMailChecked = validatedMailChecked;
	}

	public boolean isNotValidatedMailChecked() {
		return notValidatedMailChecked;
	}

	public void setNotValidatedMailChecked(boolean notValidatedMailChecked) {
		this.notValidatedMailChecked = notValidatedMailChecked;
	}

	public boolean isTreatedMailChecked() {
		return treatedMailChecked;
	}

	public void setTreatedMailChecked(boolean treatedMailChecked) {
		this.treatedMailChecked = treatedMailChecked;
	}

	public String getConsultationCourrierSecretaire() {
		return consultationCourrierSecretaire;
	}

	public void setConsultationCourrierSecretaire(
			String consultationCourrierSecretaire) {
		this.consultationCourrierSecretaire = consultationCourrierSecretaire;
	}

	public String getConsultationCourrierSubordonne() {
		return consultationCourrierSubordonne;
	}

	public void setConsultationCourrierSubordonne(
			String consultationCourrierSubordonne) {
		this.consultationCourrierSubordonne = consultationCourrierSubordonne;
	}

	public String getConsultationCourrierSousUnite() {
		return consultationCourrierSousUnite;
	}

	public void setConsultationCourrierSousUnite(
			String consultationCourrierSousUnite) {
		this.consultationCourrierSousUnite = consultationCourrierSousUnite;
	}

	public Long getCountCourrierEnvoyer() {
		return countCourrierEnvoyer;
	}

	public void setCountCourrierEnvoyer(Long countCourrierEnvoyer) {
		this.countCourrierEnvoyer = countCourrierEnvoyer;
	}

	public String getMonth() {
		return month;
	}

	public void setMonth(String month) {
		this.month = month;
	}

	public int getYear() {
		return year;
	}

	public void setYear(int year) {
		this.year = year;
	}

	public int ReturnBocAssociéeUnite(Unit u) {

		if (u.getAssociatedBOC() != null)
			return u.getAssociatedBOC().getIdBOC();
		else
			return ReturnBocAssociéeUnite(u.getAssociatedUnit());

	}

	// private void getIdBocByUnit(Unit unit) {
	// System.out.println("unit // : " + unit);
	// System.out.println("Associate Unit //  : " + unit.getAssociatedUnit());
	// if (unit.getAssociatedUnit() != null && unit.getIdUnit() != null) {
	// getIdBocByUnit(unit.getAssociatedUnit());
	// System.out.println("dans <> null");
	// }
	// else if(unit.getAssociatedBOC()!=null){
	// idBoc = unit.getAssociatedBOC().getIdBOC();
	// unitSup = unit;
	// System.out.println("première Unité sous un BOC : " + unit);
	// System.out.println("id BOC :" + idBoc);
	// }
	// else{
	// System.out.println("DANS else unit.getAssociatedUnit() != null && unit.getAssociatedBOC()!=null ");
	// }
	// }

	public boolean findBocExpBocDest(Transaction transaction) {

		Transaction transactionExpediteur = new Transaction();
		int idExp, idDest;
		Person personneRechercheExp = new Person();
		Person personneRechercheDes = new Person();
		Unit unitDest = new Unit();
		boolean findPersonExp = false;
		boolean findPersonDest = false;
		int k = 0;
		int m = 0;

		transactionExpediteur = appMgr
				.getTransactionExpediteurByIdTransactionDestinationReelle(
						transaction.getTransactionDestinationReelle()
								.getTransactionDestinationReelleId(), 1).get(0);
		List<TransactionDestination> listTransactionsDest = appMgr
				.getDestinationByIdTransaction(transactionExpediteur
						.getTransactionId());
		TransactionDestination transactionDest = listTransactionsDest.get(0);
		List<Expdest> listExpd = appMgr
				.getListExpDestByIdExpDest(transactionDest.getId()
						.getIdExpDest());

		// type Expediteur
		String typeExpdests = transactionExpediteur.getExpdest()
				.getTypeExpDest();

		

		// [] :Expédtiteur

		if (typeExpdests.equals("Externe")) {
			IdExpediteur = transactionExpediteur.getExpdest()
					.getExpdestexterne().getIdExpDestExterne();

		} else if (typeExpdests.equals("Interne-Unité")) {

			// []:Id Expediteur
			IdExpediteur = transactionExpediteur.getExpdest()
					.getIdExpDestLdap();

			// Unit unit=vb.getLdapOperation().getUnitById(IdExpediteur);
			// System.out.println("2019-05-16 unit : "+unit);
			// getIdBocByUnit(unit);
			idBocExpediteur = listExpd.get(0).getIdExpDestLdap();
			// idBocExpediteur=unit.getAssociatedBOC().getIdBOC();
			
		} else {
			IdExpediteur = transactionExpediteur.getExpdest()
					.getIdExpDestLdap();
			do {
				idExp = vb.getCopyLdapListUser().get(k).getId();

				if (idExp == IdExpediteur) {
					findPersonExp = true;
					personneRechercheExp = vb.getCopyLdapListUser().get(k);
				} else {
					k++;
				}

			} while (!findPersonExp && k < vb.getCopyLdapListUser().size());

			idBocExpediteur = ReturnBocAssociéeUnite(personneRechercheExp
					.getAssociatedDirection());

		}

		// [] :2019-05-16: Destinataire
		String tyeDestinataire = transactionExpediteur
				.getTransactionDestinationReelle()
				.getTransactionDestinationReelleTypeDestinataire();

		if (tyeDestinataire.equals("Externe")) {
			System.out.println("2019-05-16: Externe");

		} else if (tyeDestinataire.equals("Interne-Unité")) {

			int idUnitDes = transactionExpediteur
					.getTransactionDestinationReelle()
					.getTransactionDestinationReelleIdDestinataire();

			do {

				idDest = vb.getCopyLdapListUnit().get(m).getIdUnit();
				

				if (idDest == idUnitDes) {
					findPersonDest = true;
					unitDest = vb.getCopyLdapListUnit().get(m);
					break;
				} else {
					m++;
				}

			} while (!findPersonDest && m < vb.getCopyLdapListUnit().size());

			Unit uni = ldapOperation.getUnitById(unitDest.getIdUnit());
			getIdBocByUnit(uni);
			// [2019-06-27]
			// Unit unit = vb.getLdapOperation().getUnitById(idUserDes);
			//
			// getIdBocByUnit(unit);
			// idBocDestinataire = idBoc;
			// // idBocDestinataire=unit.getAssociatedBOC().getIdBOC();
			// System.out.println("2019-05-16 : idBocDestinataire : "
			// + idBocDestinataire);
		} else {
	

			int idUserDes = transactionExpediteur
					.getTransactionDestinationReelle()
					.getTransactionDestinationReelleIdDestinataire();

			do {

				idDest = vb.getCopyLdapListUser().get(m).getId();
				
				if (idDest == idUserDes) {
					findPersonDest = true;
					personneRechercheDes = vb.getCopyLdapListUser().get(m);
				} else {
					m++;
				}

			} while (!findPersonDest && m < vb.getCopyLdapListUser().size());

		

			getIdBocByUnit(personneRechercheDes.getAssociatedDirection());
		

		}

		

		// KHA : unité superieur sous 1er BO
		Unit uniteSuperieurDestinataire = unitSup;

		System.out.println("id Boc Destinataire :" + idBocDestinataire);
		System.out.println("id Boc Expediteur:" + idBocExpediteur);

		// : Mettre à jour Table Transaction Après exécution :Changer
		// etat de courrier Non traité -> traité

		// [] ID Boc de l'unité Connecté == ID BOC
		// Destinataire=======================================================
		// -------------------------------------------------------------------------------------

		int idBos = vb.getPerson().getAssociatedBOC().getIdBOC();

		if (idBos == idBoc) {
			return true;
		} else {

			return false;

		}

	}

	/**
	 * Cette méthode est utilisé pour vérifier si l'expéditeur est sous le BO
	 * connecté
	 */
	public boolean isBocExp(Transaction transaction) {

		Transaction transactionExpediteur = new Transaction();
		int idExp;
		Person personneRechercheExp = new Person();
		boolean findPersonExp = false;
		int k = 0;

		transactionExpediteur = appMgr
				.getTransactionExpediteurByIdTransactionDestinationReelle(
						transaction.getTransactionDestinationReelle()
								.getTransactionDestinationReelleId(), 1).get(0);
		List<TransactionDestination> listTransactionsDest = appMgr
				.getDestinationByIdTransaction(transactionExpediteur
						.getTransactionId());

		TransactionDestination transactionDest = listTransactionsDest.get(0);

		List<Expdest> listExpd = appMgr
				.getListExpDestByIdExpDest(transactionDest.getId()
						.getIdExpDest());

		// type Expediteur
		String typeExpdests = transactionExpediteur.getExpdest()
				.getTypeExpDest();

		// /////////////////////// Debut Recherche Expéditeur dans LDAP
		if (typeExpdests.equals("Externe")) {
			IdExpediteur = transactionExpediteur.getExpdest()
					.getExpdestexterne().getIdExpDestExterne();
		} else if (typeExpdests.equals("Interne-Unité")) {

			// A tester si le BO associé à cet Unité et celui responsable à
			// l'exécution
			int idUniteExpediteur = transactionExpediteur.getExpdest()
					.getIdExpDestLdap();
			Unit u = ldapOperation.getUnitById(idUniteExpediteur);
			int idBocUnite = ReturnBocAssocieeUnite(u);
			// Chercher le BO responsable à l'exécution dans transactionDest
			int boResponsableExecution = listExpd.get(0).getIdExpDestLdap();

			// si le même si non ça reste à 0
			if (idBocUnite == boResponsableExecution)
				idBocExpediteur = listExpd.get(0).getIdExpDestLdap();
		} else {
			IdExpediteur = transactionExpediteur.getExpdest()
					.getIdExpDestLdap();
			do {
				idExp = vb.getCopyLdapListUser().get(k).getId();

				if (idExp == IdExpediteur) {
					findPersonExp = true;
					personneRechercheExp = vb.getCopyLdapListUser().get(k);
				} else {
					k++;
				}
			} while (!findPersonExp && k < vb.getCopyLdapListUser().size());
			int idBocUnite = ReturnBocAssocieeUnite(personneRechercheExp
					.getAssociatedDirection());
			// Chercher le BO responsable à l'exécution dans transactionDest
			int boResponsableExecution = listExpd.get(0).getIdExpDestLdap();

			// si le même si non ça reste à 0
			if (idBocUnite == boResponsableExecution)
				idBocExpediteur = listExpd.get(0).getIdExpDestLdap();
		}
		// /////////////////////// FIN Recherche Destinataire LDAP
		// ///////////////////////

		int idBosConnecte = vb.getPerson().getAssociatedBOC().getIdBOC();
		
		if (idBosConnecte == idBocExpediteur) {
			return true;
		} else {
			return false;
		}

	}

	public int ReturnBocAssocieeUnite(Unit u) {
		/*
		 * if (u.getAssociatedBOC() != null) return
		 * u.getAssociatedBOC().getIdBOC(); else if (u.getAssociatedUnit() !=
		 * null) return ReturnBocAssocieeUnite(u.getAssociatedUnit()); else
		 * return 0;
		 */

		if (u.getAssociatedUnit() != null && u.getIdUnit() != null) {

			Unit unite = ldapOperation.getUnitById(u.getAssociatedUnit()
					.getIdUnit());
			return ReturnBocAssocieeUnite(unite);

		} else if (u.getAssociatedBOC() != null) {
			return u.getAssociatedBOC().getIdBOC();

		} else {

			System.out
					.println("DANS else unit.getAssociatedUnit() != null && unit.getAssociatedBOC()!=null ");
			return 0;
		}

	}


	Transaction creerNewTransaction(Expdest expdest, int idUtilisateur,
			String etatLibelle, String typetransactionLibelle,
			int newOrderNumber, int first, Dossier dossier,
			TransactionDestinationReelle transactionDestinationReelle) {
		Transaction newTransaction = new Transaction();

		newTransaction.setExpdest(expdest);
		newTransaction.setIdUtilisateur(idUtilisateur);

		newTransaction.setTransactionDateTransaction(new Date());

		// set Type Transaction----------------------------------------------
		Typetransaction typetransaction = appMgr.getTypeTransactionByLibelle(
				typetransactionLibelle).get(0);
		newTransaction.setTypetransaction(typetransaction);
		Etat etat = appMgr.listEtatByLibelle(etatLibelle).get(0);

		newTransaction.setEtat(etat);
		newTransaction.setTransactionSupprimer(true);
		newTransaction.setTransactionOrdre(newOrderNumber);

		newTransaction.setDossier(dossier);
		newTransaction
				.setTransactionDestinationReelle(transactionDestinationReelle);

		newTransaction.setTransactionFirst(first);

		return newTransaction;
	}

	/**
	 * Cette méthode est utilisé pour vérifier si le destinataire est sous le BO
	 * connecté
	 */
	public boolean isBocDest(Transaction transaction) {

		Transaction transactionExpediteur = new Transaction();
		int idDest;
		Person personneRechercheDes = new Person();
		boolean findPersonDest = false;
		int m = 0;

		transactionExpediteur = appMgr
				.getTransactionExpediteurByIdTransactionDestinationReelle(
						transaction.getTransactionDestinationReelle()
								.getTransactionDestinationReelleId(), 1).get(0);
		String tyeDestinataire = transactionExpediteur
				.getTransactionDestinationReelle()
				.getTransactionDestinationReelleTypeDestinataire();

		// /////////////////////// Debut Recherche Destinataire LDAP
		// ///////////////////////

		if (tyeDestinataire.equals("Externe")) {
			// System.out.println("2019-05-16: Externe");
		} else if (tyeDestinataire.equals("Interne-Unité")) {
			// Recherche de l'ID Destinataire (Dest = Unité) dans LDAP
			int idUnitDes = transactionExpediteur
					.getTransactionDestinationReelle()
					.getTransactionDestinationReelleIdDestinataire();
			// do {
			// idDest = vb.getCopyLdapListUnit().get(m).getIdUnit();
			// if (idDest == idUnitDes) {
			// findPersonDest = true;
			// unitDest = vb.getCopyLdapListUnit().get(m);
			// break;
			// } else {
			// m++;
			// }
			// } while (!findPersonDest && m < vb.getCopyLdapListUnit().size());

			Unit uni = ldapOperation.getUnitById(idUnitDes);
			idBocDestinataire = ReturnBocAssocieeUnite(uni);
			
		} else {
			// Recherche de l'ID Destinataire (Dest = Person) dans LDAP
			int idUserDes = transactionExpediteur
					.getTransactionDestinationReelle()
					.getTransactionDestinationReelleIdDestinataire();
			do {
				idDest = vb.getCopyLdapListUser().get(m).getId();
				if (idDest == idUserDes) {
					findPersonDest = true;
					personneRechercheDes = vb.getCopyLdapListUser().get(m);
				} else {
					m++;
				}
			} while (!findPersonDest && m < vb.getCopyLdapListUser().size());
			idBocDestinataire = ReturnBocAssocieeUnite(personneRechercheDes
					.getAssociatedDirection());
		}
		// /////////////////////// FIN Recherche Destinataire LDAP
		// ///////////////////////

		int idBosConnecte = vb.getPerson().getAssociatedBOC().getIdBOC();
		
		if (idBosConnecte == idBocDestinataire) {
			return true;
		} else {
			return false;
		}

	}

	
	
	// XTE - AH : Ancienne methode d'exécution Modifier avec SR
	private void executeTransactionInterne(Transaction transaction,
			CourrierInformations courrierInformations) {


		if (courrierInformations.getCourrier() == null) {
			courrierInformations.setCourrier(appMgr.getCourrierByIdCourrier(
					courrierInformations.getCourrierID()).get(0));

		}

		if (courrierInformations.getTransaction() == null) {
			courrierInformations.setTransaction(appMgr
					.getListTransactionByIdTransaction(
							courrierInformations.getTransactionID()).get(0));
		}

		setStatus1(false);
		setStatus2(false);
		int etatId = courrierInformations.getTransaction().getEtat().getEtatId();

		// Transaction transaction = new Transaction();
		// transaction = courrierInformations.getTransaction();
		Transaction newTransaction;
		List<Transaction> transactionExpediteur;
		List<Transaction> listTransaction = new ArrayList<Transaction>();
		List<Transaction> listTransactionByEtat = new ArrayList<Transaction>();

		// KHA :
		courrier = courrierInformations.getCourrier();
		// transaction=courrierInformations.getTransaction();
		vb.setCourDossConsulterInformations(courrierInformations);

		TransactionDestination transactionDestination = vb.getCourDossConsulterInformations().getTransactionDestination();
		
		
		try {

			if (transaction.getTransactionDestinationReelle() != null) {

				newTransaction = new Transaction();
				transactionExpediteur = new ArrayList<Transaction>();
				Etat etat = new Etat();
				Expdest expdest = new Expdest();
				Typetransaction typetransaction = new Typetransaction();
				TransactionDestinationId id = new TransactionDestinationId();
				TransactionDestination trDest = new TransactionDestination();

				// : Transaction By id Transaction Destinataire Reele et ordre=1
				
				transactionExpediteur = appMgr
						.getTransactionExpediteurByIdTransactionDestinationReelle(
								transaction.getTransactionDestinationReelle()
										.getTransactionDestinationReelleId(), 1);
				
				boolean expediteurExterne = false;
				if (transactionExpediteur != null
						&& transactionExpediteur.size() > 0) {
					Expdest expedest = transactionExpediteur.get(0)
							.getExpdest();
					if (expedest != null) {
						if (expedest.getExpdestexterne() != null) {
							
							expediteurExterne = true;
						}

					}
				}
				

				// :get liste
				// Transaction---------------------------------------------------------------------------
				// (Transaction Expéditeur+transaction Expéditeur après
				// execution) By id destination reelle--------------

				listTransaction = appMgr
						.getTransactionByIdTransactionDestinationReelle(transaction
								.getTransactionDestinationReelle()
								.getTransactionDestinationReelleId());

				listTransactionByEtat = appMgr
						.getTransactionByIdTransactionDestinationReelleByEtat(transaction
								.getTransactionDestinationReelle()
								.getTransactionDestinationReelleId());

				// : Variable utilisé pour comparer si BO Destinataire == BO
				// PErsonne Connecté
				// ----------------------------------------------------------------------------------------------------
				boolean destInBocConnecte = false;

				for (Transaction tra : transactionExpediteur) {
					idUserDes = tra.getTransactionDestinationReelle()
							.getTransactionDestinationReelleIdDestinataire();
					typeUserDes = tra.getTransactionDestinationReelle()
							.getTransactionDestinationReelleTypeDestinataire();
				}

				// KHA : unité superieur sous 1er BO boc De destinataire
				int idDest;
				Person personneRechercheDes = new Person();
				Unit unitRechecheDes = new Unit();
				boolean findPersonDest = false;
				boolean findUnitDest = false;

				int k = 0;

				if (typeUserDes.equals("Interne-Person")) {

					do {

						idDest = vb.getCopyLdapListUser().get(k).getId();

						if (idDest == idUserDes) {
							findPersonDest = true;
							personneRechercheDes = vb.getCopyLdapListUser()
									.get(k);
						} else {
							k++;
						}

					} while (!findPersonDest
							&& k < vb.getCopyLdapListUser().size());
					getIdBocByUnit(personneRechercheDes
							.getAssociatedDirection());

				} else {
					do {

						idDest = vb.getCopyLdapListUnit().get(k).getIdUnit();

						if (idDest == idUserDes) {
							findUnitDest = true;
							unitRechecheDes = vb.getCopyLdapListUnit().get(k);
						} else {
							k++;
						}

					} while (!findUnitDest
							&& k < vb.getCopyLdapListUnit().size());

					Unit unite = ldapOperation.getUnitById(unitRechecheDes
							.getIdUnit());

					getIdBocByUnit(unite);
				}

				int idBocDestinataire = idBoc;

				
				// KHA : unité superieur sous 1er BO
				Unit uniteSuperieurDestinataire = unitSup;

				// [] findBocExpBocDest : retourne true si boc dest et bos
				// connecté sous même BO------------------------------
				// -------------------------------------------------------------------------------------
				// destInBocConnecte = isBocDest(transaction);
				System.out.println("isBocDest(transaction) "+ isBocDest(transaction));
				System.out.println("isBocExp(transaction)"+ isBocExp(transaction));

				// [] : on execute les Courrier where son Etat = 5
				// ----------------------------------------------
				// -------------------------------------------------------------------------------------
				if (etatId == 5) {

				

					// XTE - AH : l'expéditeur et le destinataire sous le même
					// BO
					String referenceCourrierTypeNewTr = "";

					int referenceCourrierNumeroNewTr = 0;
					String referenceCourrierCompletNewTr = "";

					String referenceCourrierTypeOldTr = "";
					int referenceCourrierNumeroOldTr = 0;
					String referenceCourrierCompletOldTr = "";

					int annee = courrierInformations.getCourrier()
							.getCourrierOldDateOper();
					int year = annee;
					if (isBocDest(transaction)) {

						if (isBocExp(transaction)) {
							System.out
									.println("Le destinataire et l'expéditeur sous  BOS connecté");
							referenceCourrierTypeNewTr = "I*";

							referenceCourrierTypeOldTr = "I*";
							Integer lastId = appMgr
									.CountAllCourrierRefIByTransaction("I",
											annee);
							if (lastId != null) {
								lastId++;
							} else {

								lastId = 1;
							}
							referenceCourrierNumeroNewTr = lastId;
							referenceCourrierNumeroOldTr = lastId;

						} else {
							

							referenceCourrierTypeOldTr = transaction
									.getCourrierType();
							referenceCourrierNumeroOldTr = transaction
									.getCourrierTypeOrdre();

							if (transaction.getCourrierType().equals("A")) {
								referenceSomeA = transaction
										.getCourrierTypeOrdre();
							}
							
							referenceCourrierTypeNewTr = "A";
							referenceCourrierNumeroNewTr = referenceSomeA;

						}

						List<Variables> listVariables = appMgr
								.listVariablesByLibelle("validation_hierarchique_courrier_arrive");

						if (listVariables != null && listVariables.size() > 0) {

							Variables variable = listVariables.get(0);

							int newOrderNumber = transaction
									.getTransactionOrdre();

							newOrderNumber++;

							newTransaction = creerNewTransaction(
									transactionExpediteur.get(0).getExpdest(),
									vb.getPerson().getId(), "Traité", "Envoi",
									newOrderNumber,
									transaction.getTransactionId(),
									transaction.getDossier(),
									transaction
											.getTransactionDestinationReelle());

							// 1ére Etape : Mise à jour Dans table Courrier
							if (courrier.getCourrierType().equals("I")) {
								
								Integer lastId = appMgr
										.CountAllCourrierBOCByTransaction(
												"D",
												year,
												"boc_"
														+ String.valueOf(vb
																.getPerson()
																.getAssociatedBOC()
																.getIdBOC()),
												listIdBocMembers);
								
								
								List<Courrier> listeCourrier=appMgr.getCourrierByIdCourrier(courrierInformations.getCourrier().getIdCourrier().intValue());
								if(listeCourrier!=null && listeCourrier.size()>0)
									courrier=listeCourrier.get(0);
								courrier
										.setCourrierType("D");
								if (lastId != null) {
									courrier
											.setCourrierTypeOrdre(lastId + 1);
								} else {
									courrier
											.setCourrierTypeOrdre(1);
								}
								
								courrier
									.setCourrierReferenceCorrespondant(
											courrierInformations.getCourrier()
													.getCourrierType()
													+ courrierInformations
															.getCourrier()
															.getCourrierTypeOrdre());
						
							appMgr.update(courrier);
							courrierInformations
							.setCourrier(courrier);
								
							}

							
							

							//courrierInformations
							//		.getCourrier()
							//		.setCourrierReferenceCorrespondant(
							//				courrierInformations.getCourrier()
							//						.getCourrierType()
							//						+ courrierInformations
							//								.getCourrier()
							//								.getCourrierTypeOrdre());
						
							//appMgr.update(courrierInformations.getCourrier());

							List<Transaction> transaction2s = appMgr
									.getListTransactionByIdTransaction(transaction
											.getTransactionId());

							if (transaction2s != null
									&& transaction2s.size() > 0) {
								Transaction transaction2 = transaction2s.get(0);
								// transaction2.setCourrierReferenceCorrespondant(courrierInformations.getCourrier().getCourrierType()
								// +
								// courrierInformations.getCourrier().getCourrierTypeOrdre());

								// transaction2.setCourrierType(courrierInformations.getCourrier().getCourrierType());
								//
								// transaction2.setCourrierTypeOrdre(courrierInformations.getCourrier().getCourrierTypeOrdre());

								etat = appMgr.listEtatByLibelle("Traité")
										.get(0);
								transaction2.setEtat(etat);
								appMgr.update(transaction2);
							}

							// [] : Mettre à jour référence courrier dans
							// transaction
							newTransaction
									.setCourrierReferenceCorrespondant(newTransaction
											.getCourrierType()
											+ newTransaction
													.getCourrierTypeOrdre());

							// ///////////////////////////// UPDATE Référence
							// Transaction New /////////////////////////

							newTransaction.setCourrierDateReceptionAnnee(annee);
							newTransaction
									.setCourrierType(referenceCourrierTypeNewTr);
							newTransaction
									.setCourrierTypeOrdre(referenceCourrierNumeroNewTr);
							newTransaction
									.setCourrierReferenceCorrespondant(referenceCourrierTypeNewTr
											+ referenceCourrierNumeroNewTr);

							// ///////////////////////////// FIN UPDATE
							// Référence Transaction New
							// /////////////////////////

							appMgr.insert(newTransaction);

							// : Fin insertion dans la table Transaction
							// ===========================================================
							// -----------------------------------------------------------

							// : Début Test si Destinataire intern-Person ou
							// interne-Unité expdest------------------------

							expdest = new Expdest();

							TransactionDestinationReelle transactionDestinationReelle = appMgr
									.getTransactionDestinationReelById(transaction
											.getTransactionDestinationReelle()
											.getTransactionDestinationReelleId());

							// XTE - AH : Si la variable
							// "validation_hierarchique_courrier_arrive"= Non
							if (variable.getVaraiablesValeur().equals("Non")) {

								// [] :Type Destinataire Reelle :Interne-Person
								// Insertion Dans Expdest---
								if (transaction
										.getTransactionDestinationReelle()
										.getTransactionDestinationReelleTypeDestinataire()
										.equals("Interne-Person")) {

									expdest.setTypeExpDest("Interne-Person");
									Person personDestinationReel = vb
											.getLdapOperation()
											.getPersonalisedUserById(
													transaction
															.getTransactionDestinationReelle()
															.getTransactionDestinationReelleIdDestinataire());

									expdest.setIdExpDestLdap(personDestinationReel
											.getId());

									if (personDestinationReel.isResponsable()) {
										type = "sub_"
												+ personDestinationReel.getId();
									} else if (personDestinationReel
											.isSecretary()) {
										type = "secretary_"
												+ personDestinationReel.getId();

									} else {
										type = "agent_"
												+ personDestinationReel.getId();
									}
									trDest.setTransactionDestIdIntervenant(personDestinationReel
											.getId());
									trDest.setTransactionDestDateReponse(courrierInformations
											.getCourrier()
											.getCourrierDateReponse());
											
									
											
											
								} 
								else

								// [] :type Destinataire Reelle :Interne-Unité
								// Insertion Dans Expdest-----

								if (transaction
										.getTransactionDestinationReelle()
										.getTransactionDestinationReelleTypeDestinataire()
										.equals("Interne-Unité")) {

									expdest.setTypeExpDest("Interne-Unité");
									Unit unit = vb
											.getLdapOperation()
											.getUnitById(
													transaction
															.getTransactionDestinationReelle()
															.getTransactionDestinationReelleIdDestinataire());

									expdest.setIdExpDestLdap(unit.getIdUnit());
									type = "unit_"
											+ transaction
													.getTransactionDestinationReelle()
													.getTransactionDestinationReelleIdDestinataire();
									trDest.setTransactionDestIdIntervenant(transaction
											.getTransactionDestinationReelle()
											.getTransactionDestinationReelleIdDestinataire());

								}
								appMgr.insert(expdest);
								// : Fin Insertion Dans
								// expdest-------------------------------------------------------------------------------------------------

								// : set date de traitement de transaction
								transactionDestinationReelle
										.setTransactionDestinationReelleDateTraitement(new Date());
								appMgr.update(transactionDestinationReelle);

								// : Fin Insertion Dans
								// Transaction Dest
								// -------------------------------------------------------------------------------------------------
								id = new TransactionDestinationId();
								trDest = new TransactionDestination();
								id.setIdTransaction(newTransaction
										.getTransactionId());
								id.setIdExpDest(expdest.getIdExpDest());
								trDest.setId(id);
								trDest.setTransactionDestTypeIntervenant(type);
								trDest.setTransactionDestDateReponse(courrierInformations
										.getCourrier().getCourrierDateReponse());
										if(transactionDestination.getTransactionDestEtatReceptionPhysique()!=null){
										Etat etatNonReceptionPhysique = new Etat();
										etatNonReceptionPhysique.setEtatId(9);
										trDest.setTransactionDestEtatReceptionPhysique(etatNonReceptionPhysique);
									}
								appMgr.insert(trDest);

								// : Fin insert transactionDestination
								// -------------------------------------------------------------------------------------------------

								// update etat dans table transaction : etat5 ->
								// etat6
								for (Transaction transaction1 : listTransaction) {

									// ///////////////////////////// UPDATE
									// Référence Transaction Old
									// /////////////////////////

									transaction1
											.setCourrierDateReceptionAnnee(annee);
									transaction1
											.setCourrierType(referenceCourrierTypeOldTr);
									transaction1
											.setCourrierTypeOrdre(referenceCourrierNumeroOldTr);
									transaction1
											.setCourrierReferenceCorrespondant(referenceCourrierTypeOldTr
													+ referenceCourrierNumeroOldTr);

									// ///////////////////////////// FIN UPDATE
									// Référence Transaction Old
									// /////////////////////////

									transaction1.setEtat(etat);
									appMgr.update(transaction1);

								}

								// List<Transaction>
								// transactions=appMgr.getListTransactionByIdTransaction(transaction.getTransactionId());
								
								
								// if(transactions!=null &&
								// transactions.size()>0){
								// Transaction transaction2=transactions.get(0);
								// transaction2.setCourrierReferenceCorrespondant(courrierInformations.getCourrier().getCourrierType()
								// +courrierInformations.getCourrier().getCourrierTypeOrdre());
								// appMgr.update(transaction2);
								// }
								//

							}
							// XTE - AH : si la
							// "validation_hierarchique_courrier_arrive"= Oui
							else {
								
								// // KHA : validation hiérarchique :
								// Destinataire Suivant
								Integer idDestinataireReel = transaction
										.getTransactionDestinationReelle()
										.getTransactionDestinationReelleIdDestinataire();

								// KHA : Si destinataire reel de type Person
								if (transaction
										.getTransactionDestinationReelle()
										.getTransactionDestinationReelleTypeDestinataire()
										.equals("Interne-Person")) {

									// Person : Destinataire suivant n'est pas
									// le Destinataire reel

									if (idDestinataireReel != uniteSuperieurDestinataire
											.getResponsibleUnit().getId()) {

										etat = appMgr.listEtatByLibelle(
												"A valider").get(0);
										newTransaction.setEtat(etat);
										appMgr.update(newTransaction);
										expdest.setTypeExpDest("Interne-Person");
										expdest.setIdExpDestLdap(uniteSuperieurDestinataire
												.getResponsibleUnit().getId());
										appMgr.insert(expdest);
										id = new TransactionDestinationId();
										trDest = new TransactionDestination();

										id.setIdTransaction(newTransaction
												.getTransactionId());
										id.setIdExpDest(expdest.getIdExpDest());

										String type = "sub_"
												+ uniteSuperieurDestinataire
														.getResponsibleUnit()
														.getId();

										trDest.setTransactionDestTypeIntervenant(type);
										trDest.setTransactionDestIdIntervenant(uniteSuperieurDestinataire
												.getResponsibleUnit().getId());
										trDest.setId(id);
										if(transactionDestination.getTransactionDestEtatReceptionPhysique()!=null){
										Etat etatNonReceptionPhysique = new Etat();
										etatNonReceptionPhysique.setEtatId(9);
										trDest.setTransactionDestEtatReceptionPhysique(etatNonReceptionPhysique);
										}
										appMgr.insert(trDest);

										// : Fin insert transactionDestination
										// -------------------------------------------------------------------------------------------------

										// update etat dans table transaction
										// :etat5-> etat6

										for (Transaction transaction1 : listTransactionByEtat) {

											etat = appMgr.listEtatByLibelle(
													"Traité").get(0);
											transaction1.setEtat(etat);
											appMgr.update(transaction1);

										}

										//
										// Execution ==> Validation
										validateTransactionDestinataireSuivant(
												transaction,
												transactionDestination,
												uniteSuperieurDestinataire
														.getResponsibleUnit()
														.getId());

									} else {
										expdest.setTypeExpDest("Interne-Unité");
										expdest.setIdExpDestLdap(idDestinataireReel);
										appMgr.insert(expdest);
										id = new TransactionDestinationId();
										trDest = new TransactionDestination();
										id.setIdTransaction(newTransaction
												.getTransactionId());
										id.setIdExpDest(expdest.getIdExpDest());
										trDest.setId(id);

										String type = "sub_"
												+ idDestinataireReel;
										trDest.setTransactionDestTypeIntervenant(type);
										trDest.setTransactionDestIdIntervenant(idDestinataireReel);
										if(transactionDestination.getTransactionDestEtatReceptionPhysique()!=null){
										Etat etatNonReceptionPhysique = new Etat();
										etatNonReceptionPhysique.setEtatId(9);
										trDest.setTransactionDestEtatReceptionPhysique(etatNonReceptionPhysique);
									}
										appMgr.insert(trDest);

										// : Fin insert transactionDestination
										// -------------------------------------------------------------------------------------------------

										// update etat dans table transaction :
										// etat5-> etat6
										for (Transaction transaction1 : listTransaction) {
											transaction1.setEtat(etat);
											appMgr.update(transaction1);
											
										}
										//

										validateTransactionDestinataireFinale(
												transaction,
												transactionDestination);
									}
								}

								// KHA : Si destinataire reel de type Unit
								if (transaction
										.getTransactionDestinationReelle()
										.getTransactionDestinationReelleTypeDestinataire()
										.equals("Interne-Unité")) {

									if (idDestinataireReel != uniteSuperieurDestinataire
											.getIdUnit()) {

										// Unit : Destinataire suivant n'est
										// pasle Destinataire reel
										validateTransactionDestinataireSuivant(
												transaction,
												transactionDestination,
												uniteSuperieurDestinataire
														.getResponsibleUnit()
														.getId());
									} else {
										validateTransactionDestinataireFinale(
												transaction,
												transactionDestination);
									}
								}

							}

						}

						// : Mettre a jour la reference pour indiquer qu'il est
						// un courrier de depart
						// -------------------------------------------------------------------------------------------------

						// [] Modification le 2019-05-15
						// Integer lastId =
						// appMgr.getCourrierLastIdByTypeOrdreAndAnnee("D",
						// year);
						// System.out.println("Last Id :"+lastId);
						// courrierInformations.getCourrier().setCourrierType("D");
						// if (lastId == null || lastId == 0) {
						// courrierInformations.getCourrier().setCourrierTypeOrdre(1);
						// } else {
						// courrierInformations.getCourrier().setCourrierTypeOrdre(lastId
						// + 1);
						// }
						// courrierInformations.getCourrier()
						// .setCourrierReferenceCorrespondant(
						// courrierInformations.getCourrier()
						// .getCourrierType()
						// + courrierInformations.getCourrier()
						// .getCourrierTypeOrdre());
						// appMgr.update(courrierInformations.getCourrier());

						// : Fin Mettre a jour la reference pour indiquer qu'il
						// est
						// un courrier de depart
						// -------------------------------------------------------------------------------------------------

						// : Mettre à jour Dossier et update libelle dossier
						// Courrier_Ix->Courrier_x avec x un entier
						// -------------------------------------------------------------------------------------------------
						Dossier dossier = appMgr.getDossierByIdDossier(
								transaction.getDossier().getDossierId()).get(0);
						dossier.setDossierIntitule("Courrier_"
								+ courrierInformations.getCourrier()
										.getIdCourrier());
						appMgr.update(dossier);

						setStatus1(true);

					}
					// ///////////////////////////////Fin
					// isBocDest////////////////////////////////////////////////

					else {

						if (isBocExp(transaction)) {
							System.out
									.println("L'expéditeur seulement  sous  BOS connecté ( Le destinataire non)");

							if (transaction.getCourrierType().equals("I")) {

								Integer lastId = appMgr
										.CountAllCourrierBOCByTransaction(
												"D",
												year,
												"boc_"
														+ String.valueOf(vb
																.getPerson()
																.getAssociatedBOC()
																.getIdBOC()),
												listIdBocMembers);

								referenceCourrierTypeNewTr = "D";
								referenceCourrierTypeOldTr = "D";

								if (lastId != null) {
									lastId++;
								} else {

									lastId = 1;
								}
								referenceCourrierNumeroNewTr = lastId;
								referenceCourrierNumeroOldTr = lastId;

								courrierInformations.getCourrier()
										.setCourrierType("D");
								courrierInformations.getCourrier()
										.setCourrierTypeOrdre(lastId);

							} 
							else {
								

								referenceCourrierTypeNewTr = "D";
								referenceCourrierTypeOldTr = "D";

								referenceCourrierNumeroNewTr = transaction
										.getCourrierTypeOrdre();
								referenceCourrierNumeroOldTr = transaction
										.getCourrierTypeOrdre();
							}
						} 
						else {
							
							// Récupérer le BOC de Destinataire 
							referenceCourrierTypeNewTr = transaction.getCourrierType();
							//referenceCourrierTypeOldTr = transaction.getCourrierType();

							referenceCourrierNumeroNewTr = transaction.getCourrierTypeOrdre();
							//referenceCourrierNumeroOldTr = transaction.getCourrierTypeOrdre();
							System.out
									.println("CAS NE S'APPLIQUE PAS : Expéditeur et Destinataire ne sont pas tout les deux sous le BO connecté!!!!");
						}

						// /////////////////////////// Debut insertTransaction
						// /////////////////////////////
						System.out
								.println("///////////////////////////// Debut insertTransaction /////////////////////////////");
						etat = appMgr.listEtatByLibelle("Traité").get(0);
						newTransaction.setExpdest(transactionExpediteur.get(0)
								.getExpdest());
						newTransaction.setIdUtilisateur(vb.getPerson().getId());
						newTransaction
								.setTransactionDateTransaction(new Date());
						typetransaction = appMgr.getTypeTransactionByLibelle(
								"Envoi").get(0);
						newTransaction.setTypetransaction(typetransaction);
						newTransaction.setEtat(etat);
						newTransaction.setTransactionSupprimer(true);
						int newOrderNumber = transaction.getTransactionOrdre();
						newOrderNumber++;
						newTransaction.setTransactionOrdre(newOrderNumber);
						newTransaction.setDossier(transaction.getDossier());
						newTransaction
								.setTransactionDestinationReelle(transaction
										.getTransactionDestinationReelle());
						appMgr.insert(newTransaction);
						System.out.println("trID "
								+ newTransaction.getTransactionId());
						newTransaction.setTransactionFirst(newTransaction
								.getTransactionId());
						appMgr.update(newTransaction);
						// /////////////////////////// Fin insertTransaction
						// /////////////////////////////

						// ///////////////////////////// UPDATE Référence
						// Transaction New /////////////////////////

						newTransaction.setCourrierDateReceptionAnnee(annee);
						newTransaction
								.setCourrierType(referenceCourrierTypeNewTr);
						newTransaction
								.setCourrierTypeOrdre(referenceCourrierNumeroNewTr);
						newTransaction
								.setCourrierReferenceCorrespondant(referenceCourrierTypeNewTr
										+ referenceCourrierNumeroNewTr);
						appMgr.insert(newTransaction);
						// ///////////////////////////// FIN UPDATE Référence
						// Transaction New /////////////////////////
						// Récupérer le courrier par ID 
						List<Courrier> listeCourrier=appMgr.getCourrierByIdCourrier(courrierInformations.getCourrier().getIdCourrier().intValue());
						if(listeCourrier!=null && listeCourrier.size()>0)
							courrier=listeCourrier.get(0);
						
						courrier.setCourrierType(referenceCourrierTypeNewTr);
						courrier.setCourrierTypeOrdre(referenceCourrierNumeroNewTr);
						
						courrier.setCourrierReferenceCorrespondant(
								courrier
								.getCourrierType()
								+ courrier
										.getCourrierTypeOrdre());
						
//						courrierInformations
//								.getCourrier()
//								.setCourrierReferenceCorrespondant(
//										courrierInformations.getCourrier()
//												.getCourrierType()
//												+ courrierInformations
//														.getCourrier()
//														.getCourrierTypeOrdre());
						
//						appMgr.update(courrierInformations.getCourrier());
						appMgr.update(courrier);

						// ///////////////////////////// UPDATE Référence
						// Transaction OLD /////////////////////////
						List<Transaction> transaction2s = appMgr
								.getListTransactionByIdTransaction(transaction
										.getTransactionId());
						if (transaction2s != null && transaction2s.size() > 0) {
							Transaction transaction2 = transaction2s.get(0);

							transaction2.setCourrierDateReceptionAnnee(annee);
							transaction2
									.setCourrierType(referenceCourrierTypeOldTr);
							transaction2
									.setCourrierTypeOrdre(referenceCourrierNumeroOldTr);
							transaction2
									.setCourrierReferenceCorrespondant(referenceCourrierTypeOldTr
											+ referenceCourrierNumeroOldTr);

							appMgr.update(transaction2);
						}
						// ///////////////////////////// UPDATE Référence
						// Transaction OLD /////////////////////////

						// ****************************************************************************************************************

						vb.setTransaction(newTransaction);

						// : Début Test si Destinataire intern-Person ou
						// interne-Unité
						// expdest-------------------------------------------------------------------------------------------------
						expdest = new Expdest();
						TransactionDestinationReelle transactionDestinationReelle = appMgr
								.getTransactionDestinationReelById(transaction
										.getTransactionDestinationReelle()
										.getTransactionDestinationReelleId());

						// [] :type Destinataire Reelle :Interne-Person
						if (transaction
								.getTransactionDestinationReelle()
								.getTransactionDestinationReelleTypeDestinataire()
								.equals("Interne-Person")) {
							Person personDestinationReel = vb
									.getLdapOperation()
									.getPersonalisedUserById(
											transaction
													.getTransactionDestinationReelle()
													.getTransactionDestinationReelleIdDestinataire());

							// ******************BOS 2

							int idUserDest = personDestinationReel.getId();
							int id1;
							Person personneRecherche = new Person();
							boolean findPerson = false;
							int j = 0;
							do {
								id1 = vb.getCopyLdapListUser().get(j).getId();
								if (id1 == idUserDest) {
									findPerson = true;
									personneRecherche = vb
											.getCopyLdapListUser().get(j);
								} else {
									j++;
								}
							} while (!findPerson
									&& j < vb.getCopyLdapListUser().size());

							getIdBocByUnit(personneRecherche
									.getAssociatedDirection());
							idBocDestinataire = idBoc;

							expdest.setTypeExpDest("Interne-Boc");
							expdest.setIdExpDestLdap(idBocDestinataire);
							String typeIntervenant = "boc_"
									+ String.valueOf(idBoc);
							appMgr.insert(expdest);

							// XTE : Insertion
							// transactionDestination---------------------------------------------------------------------------------------------
							id.setIdTransaction(vb.getTransaction()
									.getTransactionId());
							id.setIdExpDest(expdest.getIdExpDest());
							trDest.setId(id);
							trDest.setTransactionDestIdIntervenant(idBoc);
							trDest.setTransactionDestTypeIntervenant(typeIntervenant);
							if(transactionDestination.getTransactionDestEtatReceptionPhysique()!=null){
										Etat etatNonReceptionPhysique = new Etat();
										etatNonReceptionPhysique.setEtatId(8);
										trDest.setTransactionDestEtatReceptionPhysique(etatNonReceptionPhysique);
									}
							appMgr.insert(trDest);

						} 
						else
						// [] :type Destinataire Reelle :Interne-Unité
						// [2019-06-27]
						if (transaction
								.getTransactionDestinationReelle()
								.getTransactionDestinationReelleTypeDestinataire()
								.equals("Interne-Unité")) {

							// expdest.setTypeExpDest("Interne-Unité");
							Unit unit = vb
									.getLdapOperation()
									.getUnitById(
											transaction
													.getTransactionDestinationReelle()
													.getTransactionDestinationReelleIdDestinataire());
							// ******************BOS 2

							int idUnitDest = unit.getIdUnit();
							int id1;
							Unit unitRecherche = new Unit();
							boolean findUnite = false;
							int j = 0;
							do {
								id1 = vb.getCopyLdapListUnit().get(j)
										.getIdUnit();
								if (id1 == idUnitDest) {
									findUnite = true;
									unitRecherche = vb.getCopyLdapListUnit()
											.get(j);
									break;
								} else {
									j++;
								}
							} while (!findUnite
									&& j < vb.getCopyLdapListUnit().size());

							Unit u = ldapOperation.getUnitById(unitRecherche
									.getIdUnit());
							System.out.println("Unité Dest : " + u);
							getIdBocByUnit(u);
							idBocDestinataire = idBoc;
							expdest.setTypeExpDest("Interne-Boc");

							expdest.setIdExpDestLdap(idBoc);
							String typeIntervenant = "boc_"
									+ String.valueOf(idBoc);
							appMgr.insert(expdest);

							id.setIdTransaction(vb.getTransaction()
									.getTransactionId());
							id.setIdExpDest(expdest.getIdExpDest());
							trDest.setId(id);
							trDest.setTransactionDestIdIntervenant(idBoc);

							trDest.setTransactionDestTypeIntervenant(typeIntervenant);
							if(transactionDestination.getTransactionDestEtatReceptionPhysique()!=null){
										Etat etatNonReceptionPhysique = new Etat();
										etatNonReceptionPhysique.setEtatId(8);
										trDest.setTransactionDestEtatReceptionPhysique(etatNonReceptionPhysique);
									}
							appMgr.insert(trDest);
							// AAAAA
						}

						// : Fin Test
						// expdest-------------------------------------------------------------------------------------------------

						// : set date de traitement de transaction
						transactionDestinationReelle
								.setTransactionDestinationReelleDateTraitement(new Date());
						appMgr.update(transactionDestinationReelle);
						appMgr.insert(expdest);

						for (Transaction transaction1 : listTransaction) {
							etat = appMgr.listEtatByLibelle("Traité").get(0);
							transaction1.setEtat(etat);
							appMgr.update(transaction1);
						}

						// Calendar cal = Calendar.getInstance();
						// cal.setTime(courrierInformations.getCourrierDateReceptionEnvoi());
						// int year = cal.get(Calendar.YEAR);

						//appMgr.update(courrierInformations.getCourrier());
						Dossier dossier = appMgr.getDossierByIdDossier(
								transaction.getDossier().getDossierId()).get(0);
						dossier.setDossierIntitule("Courrier_"
								+ courrierInformations.getCourrier()
										.getIdCourrier());
						appMgr.update(dossier);

						// ///////////////////////////////////////////////////////////////////////////////////////////
						// /////////////////////////// Transaction Ajoutée pour
						// BOC DEST/////////////////////////////
						// ///////////////////////////////////////////////////////////////////////////////////////////
						BOC bocDest = new BOC();
						if (isBocExp(transaction)|| (!isBocExp(transaction)&& !isBocDest(transaction))) {
							
							// bocs=vb.getCentralBoc().getListChildBOCsBOC();
							
							bocDest = ldapOperation
									.getBocByID(idBocDestinataire);
							
							listIdBocMembers = new ArrayList<Integer>();
							
							List<Person> listBocMembers = bocDest
									.getMembersBOC();
							for (Person person : listBocMembers) {
								listIdBocMembers.add(person.getId());
								
								if (person.isResponsableBO()) {
									responsableBocDest = person.getId();
								}
							}

							Integer lastId = appMgr
									.CountAllCourrierBOCByTransaction("A",
											year, "boc_" + idBocDestinataire,
											listIdBocMembers);
											System.out
									.println("#### $$$$  ##### idBocDestinataire  "+ idBocDestinataire);

							referenceCourrierTypeNewTr = "A";

							if (lastId != null) {
								lastId++;
							} else {

								lastId = 1;
							}
							referenceCourrierNumeroNewTr = lastId;
							System.out
									.println("AH  ====>id responsableBocDest : "
											+ responsableBocDest);
												System.out
									.println("#### $$$$  ##### lastId  "+ lastId);
							// /////////////////////////// Debut
							// insertTransaction /////////////////////////////
							etat = appMgr.listEtatByLibelle("Non traité")
									.get(0);
							Transaction newTransactionBocDest = new Transaction();
							newTransactionBocDest
									.setExpdest(transactionExpediteur.get(0)
											.getExpdest());

							if (responsableBocDest != 0)
								newTransactionBocDest
										.setIdUtilisateur(responsableBocDest);
							else
								newTransactionBocDest
										.setIdUtilisateur(listIdBocMembers
												.get(0));

							newTransactionBocDest
									.setTransactionDateTransaction(new Date());
							typetransaction = appMgr
									.getTypeTransactionByLibelle("Envoi")
									.get(0);
							newTransactionBocDest
									.setTypetransaction(typetransaction);
							newTransactionBocDest.setEtat(etat);
							newTransactionBocDest.setTransactionSupprimer(true);
							int newOrderNumberDest = transaction
									.getTransactionOrdre();
							newOrderNumberDest++;
							newTransactionBocDest
									.setTransactionOrdre(newOrderNumberDest);
							newTransactionBocDest.setDossier(transaction
									.getDossier());
							newTransactionBocDest
									.setTransactionDestinationReelle(transaction
											.getTransactionDestinationReelle());

							newTransactionBocDest
									.setCourrierDateReceptionAnnee(annee);
							newTransactionBocDest
									.setCourrierType(referenceCourrierTypeNewTr);
							newTransactionBocDest
									.setCourrierTypeOrdre(referenceCourrierNumeroNewTr);
							newTransactionBocDest
									.setCourrierReferenceCorrespondant(referenceCourrierTypeNewTr
											+ referenceCourrierNumeroNewTr);

							appMgr.insert(newTransactionBocDest);
							newTransactionBocDest
									.setTransactionFirst(newTransactionBocDest
											.getTransactionId());
							System.out
									.println("newTransactionBocDest.getTransactionId() "
											+ newTransactionBocDest
													.getTransactionId());
													
							System.out
									.println("newTransactionBocDest référence "
											+ referenceCourrierNumeroNewTr);						
							appMgr.update(newTransactionBocDest);
							// /////////////////////////// Fin insertTransaction
							// /////////////////////////////

							// : Début Test si Destinataire intern-Person ou
							// interne-Unité
							// expdest-------------------------------------------------------------------------------------------------
							expdest = new Expdest();
							transactionDestinationReelle = appMgr
									.getTransactionDestinationReelById(transaction
											.getTransactionDestinationReelle()
											.getTransactionDestinationReelleId());

							// [] :type Destinataire Reelle :Interne-Person
							if (transaction
									.getTransactionDestinationReelle()
									.getTransactionDestinationReelleTypeDestinataire()
									.equals("Interne-Person")) {
								Person personDestinationReel = vb
										.getLdapOperation()
										.getPersonalisedUserById(
												transaction
														.getTransactionDestinationReelle()
														.getTransactionDestinationReelleIdDestinataire());

								// ******************BOS 2

								int idUserDest = personDestinationReel.getId();
								int id1;
								Person personneRecherche = new Person();
								boolean findPerson = false;
								int j = 0;
								do {
									id1 = vb.getCopyLdapListUser().get(j)
											.getId();
									if (id1 == idUserDest) {
										findPerson = true;
										personneRecherche = vb
												.getCopyLdapListUser().get(j);
									} else {
										j++;
									}
								} while (!findPerson
										&& j < vb.getCopyLdapListUser().size());

								getIdBocByUnit(personneRecherche
										.getAssociatedDirection());
								idBocDestinataire = idBoc;

								expdest.setTypeExpDest("Interne-Boc");
								expdest.setIdExpDestLdap(idBocDestinataire);
								String typeIntervenant = "boc_"
										+ String.valueOf(idBoc);
								appMgr.insert(expdest);

								// XTE : Insertion
								// transactionDestination---------------------------------------------------------------------------------------------

								TransactionDestination trDestNew = new TransactionDestination();
								id.setIdTransaction(newTransactionBocDest
										.getTransactionId());
								id.setIdExpDest(expdest.getIdExpDest());
								trDestNew.setId(id);
								trDestNew
										.setTransactionDestIdIntervenant(idBoc);
								trDestNew
										.setTransactionDestTypeIntervenant(typeIntervenant);
										if(transactionDestination.getTransactionDestEtatReceptionPhysique()!=null){
										Etat etatNonReceptionPhysique = new Etat();
										etatNonReceptionPhysique.setEtatId(9);
										trDestNew.setTransactionDestEtatReceptionPhysique(etatNonReceptionPhysique);
									}
								appMgr.insert(trDestNew);

							} else
							// [] :type Destinataire Reelle :Interne-Unité
							// [2019-06-27]
							if (transaction
									.getTransactionDestinationReelle()
									.getTransactionDestinationReelleTypeDestinataire()
									.equals("Interne-Unité")) {
								
								// expdest.setTypeExpDest("Interne-Unité");
								Unit unit = vb
										.getLdapOperation()
										.getUnitById(
												transaction
														.getTransactionDestinationReelle()
														.getTransactionDestinationReelleIdDestinataire());
								// ******************BOS 2

								int idUnitDest = unit.getIdUnit();
								int id1;
								Unit unitRecherche = new Unit();
								boolean findUnite = false;
								int j = 0;
								do {
									id1 = vb.getCopyLdapListUnit().get(j)
											.getIdUnit();
									if (id1 == idUnitDest) {
										findUnite = true;
										unitRecherche = vb
												.getCopyLdapListUnit().get(j);
										break;
									} else {
										j++;
									}
								} while (!findUnite
										&& j < vb.getCopyLdapListUnit().size());

								Unit u = ldapOperation
										.getUnitById(unitRecherche.getIdUnit());
								getIdBocByUnit(u);

								expdest.setTypeExpDest("Interne-Boc");

								expdest.setIdExpDestLdap(idBoc);
								String typeIntervenant = "boc_"
										+ String.valueOf(idBoc);
								appMgr.insert(expdest);
								
								TransactionDestination trDestDest = new TransactionDestination();
								id.setIdTransaction(newTransactionBocDest
										.getTransactionId());
								id.setIdExpDest(expdest.getIdExpDest());
								trDestDest.setId(id);
								trDestDest
										.setTransactionDestIdIntervenant(idBoc);
								
								trDestDest
										.setTransactionDestTypeIntervenant(typeIntervenant);
										if(transactionDestination.getTransactionDestEtatReceptionPhysique()!=null){
										Etat etatNonReceptionPhysique = new Etat();
										etatNonReceptionPhysique.setEtatId(9);
										trDestDest.setTransactionDestEtatReceptionPhysique(etatNonReceptionPhysique);
									}
								appMgr.insert(trDestDest);
								

							}

						}
						// ///////////////////////////////////////////////////////////////////////////////////////////
						// ///////////////////////////FIN Transaction Ajoutée
						// pour BOC DEST/////////////////////////////
						// ///////////////////////////////////////////////////////////////////////////////////////////

					}
					setStatus1(true);
				}
			} else {
				System.out.println(" etat 6");
			}
		} catch (Exception e) {
			setStatus2(true);
			e.printStackTrace();
		}

	}
	
	
	
	/*
	private void executeTransactionInterne(Transaction transaction,
			CourrierInformations courrierInformations) {

		System.out.println("### Méthode executeTransactionInterne ###");

		if (courrierInformations.getCourrier() == null) {
			courrierInformations.setCourrier(appMgr.getCourrierByIdCourrier(
					courrierInformations.getCourrierID()).get(0));

		}

		if (courrierInformations.getTransaction() == null) {
			courrierInformations.setTransaction(appMgr
					.getListTransactionByIdTransaction(
							courrierInformations.getTransactionID()).get(0));
		}

		setStatus1(false);
		setStatus2(false);
		int etatId = courrierInformations.getTransaction().getEtat()
				.getEtatId();

		// Transaction transaction = new Transaction();
		// transaction = courrierInformations.getTransaction();
		Transaction newTransaction;
		List<Transaction> transactionExpediteur;
		List<Transaction> listTransaction = new ArrayList<Transaction>();
		List<Transaction> listTransactionByEtat = new ArrayList<Transaction>();

		// KHA :
		courrier = courrierInformations.getCourrier();
		// transaction=courrierInformations.getTransaction();
		vb.setCourDossConsulterInformations(courrierInformations);

		TransactionDestination transactionDestination = vb
				.getCourDossConsulterInformations().getTransactionDestination();

		try {

			if (transaction.getTransactionDestinationReelle() != null) {
				newTransaction = new Transaction();
				transactionExpediteur = new ArrayList<Transaction>();
				Etat etat = new Etat();
				Expdest expdest = new Expdest();
				Typetransaction typetransaction = new Typetransaction();
				TransactionDestinationId id = new TransactionDestinationId();
				TransactionDestination trDest = new TransactionDestination();

				// : Transaction By id Transaction Destinataire Reele et ordre=1

				transactionExpediteur = appMgr
						.getTransactionExpediteurByIdTransactionDestinationReelle(
								transaction.getTransactionDestinationReelle()
										.getTransactionDestinationReelleId(), 1);

				boolean expediteurExterne = false;
				if (transactionExpediteur != null
						&& transactionExpediteur.size() > 0) {
					Expdest expedest = transactionExpediteur.get(0)
							.getExpdest();
					if (expedest != null) {
						if (expedest.getExpdestexterne() != null) {
							System.out.println("l'expéditeur est externe");
							expediteurExterne = true;
						}

					}
				}
				// System.out.println("tr exp : "+transactionExpediteur.get(0).getExpdest());
				// SI l'expéditeur Externe

				//
				// System.out.println("2019-05-22 ID Expéditeur :"+
				// transactionExpediteur.getExpdest().getIdExpDest());
				// System.out.println("2019-05-22 Type Expéditeur :"+
				// transactionExpediteur.getExpdest().getTypeExpDest());
				// System.out.println("2019-05-22 ID Destinataire Reelle :"+
				// transactionExpediteur.getTransactionDestinationReelle().getTransactionDestinationReelleId());
				// System.out.println("2019-05-22 Type Destinataire : "+
				// transactionExpediteur.getTransactionDestinationReelle().getTransactionDestinationReelleTypeDestinataire());
				//

				// :get liste
				// Transaction---------------------------------------------------------------------------
				// (Transaction Expéditeur+transaction Expéditeur après
				// execution) By id destination reelle--------------

				listTransaction = appMgr
						.getTransactionByIdTransactionDestinationReelle(transaction
								.getTransactionDestinationReelle()
								.getTransactionDestinationReelleId());

				listTransactionByEtat = appMgr
						.getTransactionByIdTransactionDestinationReelleByEtat(transaction
								.getTransactionDestinationReelle()
								.getTransactionDestinationReelleId());

				// : Variable utilisé pour comparer si BO Destinataire == BO
				// PErsonne Connecté
				// ----------------------------------------------------------------------------------------------------
				boolean destInBocConnecte = false;

				for (Transaction tra : transactionExpediteur) {
					idUserDes = tra.getTransactionDestinationReelle()
							.getTransactionDestinationReelleIdDestinataire();
					typeUserDes = tra.getTransactionDestinationReelle()
							.getTransactionDestinationReelleTypeDestinataire();
				}

				// KHA : unité superieur sous 1er BO boc De destinataire
				int idDest;
				Person personneRechercheDes = new Person();
				Unit unitRechecheDes = new Unit();
				boolean findPersonDest = false;
				boolean findUnitDest = false;

				int k = 0;
				System.out.println(">>>>> typeUserDes :" + typeUserDes);
				System.out.println(">>>>> idUserDes :" + idUserDes);

				if (typeUserDes.equals("Interne-Person")) {
					do {
						idDest = vb.getCopyLdapListUser().get(k).getId();
						System.out.println("Do 1>><>>>>>> idDest : " + idDest);

						if (idDest == idUserDes) {
							findPersonDest = true;
							personneRechercheDes = vb.getCopyLdapListUser()
									.get(k);
						} else {
							k++;
						}

					} while (!findPersonDest
							&& k < vb.getCopyLdapListUser().size());
					getIdBocByUnit(personneRechercheDes
							.getAssociatedDirection());

				} else {
					do {
						idDest = vb.getCopyLdapListUnit().get(k).getIdUnit();
						System.out.println("Do 2>><>>>>>> idDest : " + idDest);

						if (idDest == idUserDes) {
							findUnitDest = true;
							unitRechecheDes = vb.getCopyLdapListUnit().get(k);
						} else {
							k++;
						}

					} while (!findUnitDest
							&& k < vb.getCopyLdapListUnit().size());
					System.out.println(unitRechecheDes);

					Unit unite = ldapOperation.getUnitById(unitRechecheDes
							.getIdUnit());

					getIdBocByUnit(unite);
				}

				int idBocDestinataire = idBoc;

				System.out.println("# Personne Recherche BOS :"
						+ idBocDestinataire);
				// KHA : unité superieur sous 1er BO
				Unit uniteSuperieurDestinataire = unitSup;

				// [] findBocExpBocDest : retourne true si boc dest et bos
				// connecté sous même BO------------------------------
				// -------------------------------------------------------------------------------------
				destInBocConnecte = isBocDest(transaction);

				// [] : on execute les Courrier where son Etat = 5
				// ----------------------------------------------
				// -------------------------------------------------------------------------------------
				if (etatId == 5) {

					if (expediteurExterne) {
						System.out
								.println("DANS le TEST de l'expéditeur EXTN ");

					}

					// XTE - AH : l'expéditeur et le destinataire sous le même
					// BO
					String referenceCourrierTypeNewTr = "";

					int referenceCourrierNumeroNewTr = 0;
					String referenceCourrierCompletNewTr = "";

					String referenceCourrierTypeOldTr = "";
					int referenceCourrierNumeroOldTr = 0;
					String referenceCourrierCompletOldTr = "";

					int annee = courrierInformations.getCourrier()
							.getCourrierOldDateOper();
					int year = annee;
					if (isBocDest(transaction)) {

						if (isBocExp(transaction)) {
							System.out
									.println("Le destinataire et l'expéditeur sous  BOS connecté");
							referenceCourrierTypeNewTr = "I*";

							referenceCourrierTypeOldTr = "I*";
							Integer lastId = appMgr
									.CountAllCourrierRefIByTransaction("I",
											annee);
							if (lastId != null) {
								lastId++;
							} else {

								lastId = 1;
							}
							referenceCourrierNumeroNewTr = lastId;
							referenceCourrierNumeroOldTr = lastId;
						} else {
							System.out
									.println("Le destinataire seulement sous  BOS connecté (l'expéditeur non)");
							// System.out.println("==========>>>>>>>>>>>>> transaction "+transaction.getTransactionId());
							// System.out.println("==========>>>>>>>>>>>>> transaction type "+transaction.getCourrierType());
							// System.out.println("==========>>>>>>>>>>>>> transaction "+transaction.getCourrierTypeOrdre());

							referenceCourrierTypeOldTr = transaction
									.getCourrierType();
							referenceCourrierNumeroOldTr = transaction
									.getCourrierTypeOrdre();

							if (transaction.getCourrierType().equals("A")) {
								referenceSomeA = transaction
										.getCourrierTypeOrdre();
							}
							System.out
									.println(">>>>>>>>>>>>>>>> referenceSomeA "
											+ referenceSomeA);
							referenceCourrierTypeNewTr = "A";
							referenceCourrierNumeroNewTr = referenceSomeA;

						}

						List<Variables> listVariables = appMgr
								.listVariablesByLibelle("validation_hierarchique_courrier_arrive");

						if (listVariables != null && listVariables.size() > 0) {

							Variables variable = listVariables.get(0);

							int newOrderNumber = transaction
									.getTransactionOrdre();

							newOrderNumber++;

							newTransaction = creerNewTransaction(
									transactionExpediteur.get(0).getExpdest(),
									vb.getPerson().getId(), "Traité", "Envoi",
									newOrderNumber,
									transaction.getTransactionId(),
									transaction.getDossier(),
									transaction
											.getTransactionDestinationReelle());

							// 1ére Etape : Mise à jour Dans table Courrier
							if (courrier.getCourrierType().equals("I")) {
								System.out
										.println("AH =====> Mise à jour courrier");
								Integer lastId = appMgr
										.CountAllCourrierBOCByTransaction(
												"D",
												year,
												"boc_"
														+ String.valueOf(vb
																.getPerson()
																.getAssociatedBOC()
																.getIdBOC()),
												listIdBocMembers);
								courrierInformations.getCourrier()
										.setCourrierType("D");
								if (lastId != null) {
									courrierInformations.getCourrier()
											.setCourrierTypeOrdre(lastId + 1);
								} else {
									courrierInformations.getCourrier()
											.setCourrierTypeOrdre(1);
								}
							}

							// update Ref Courrier dans table courrier

							courrierInformations
									.getCourrier()
									.setCourrierReferenceCorrespondant(
											courrierInformations.getCourrier()
													.getCourrierType()
													+ courrierInformations
															.getCourrier()
															.getCourrierTypeOrdre());
							appMgr.update(courrierInformations.getCourrier());

							List<Transaction> transaction2s = appMgr
									.getListTransactionByIdTransaction(transaction
											.getTransactionId());

							if (transaction2s != null
									&& transaction2s.size() > 0) {
								Transaction transaction2 = transaction2s.get(0);
								// transaction2.setCourrierReferenceCorrespondant(courrierInformations.getCourrier().getCourrierType()
								// +
								// courrierInformations.getCourrier().getCourrierTypeOrdre());

								// transaction2.setCourrierType(courrierInformations.getCourrier().getCourrierType());
								//
								// transaction2.setCourrierTypeOrdre(courrierInformations.getCourrier().getCourrierTypeOrdre());

								etat = appMgr.listEtatByLibelle("Traité")
										.get(0);
								transaction2.setEtat(etat);
								appMgr.update(transaction2);
							}

							// [] : Mettre à jour référence courrier dans
							// transaction
							newTransaction
									.setCourrierReferenceCorrespondant(newTransaction
											.getCourrierType()
											+ newTransaction
													.getCourrierTypeOrdre());

							// ///////////////////////////// UPDATE Référence
							// Transaction New /////////////////////////

							newTransaction.setCourrierDateReceptionAnnee(annee);
							newTransaction
									.setCourrierType(referenceCourrierTypeNewTr);
							newTransaction
									.setCourrierTypeOrdre(referenceCourrierNumeroNewTr);
							newTransaction
									.setCourrierReferenceCorrespondant(referenceCourrierTypeNewTr
											+ referenceCourrierNumeroNewTr);

							// ///////////////////////////// FIN UPDATE
							// Référence Transaction New
							// /////////////////////////

							appMgr.insert(newTransaction);

							// : Fin insertion dans la table Transaction
							// ===========================================================
							// -----------------------------------------------------------

							// : Début Test si Destinataire intern-Person ou
							// interne-Unité expdest------------------------

							expdest = new Expdest();

							TransactionDestinationReelle transactionDestinationReelle = appMgr
									.getTransactionDestinationReelById(transaction
											.getTransactionDestinationReelle()
											.getTransactionDestinationReelleId());

							// XTE - AH : Si la variable
							// "validation_hierarchique_courrier_arrive"= Non
							if (variable.getVaraiablesValeur().equals("Non")) {

								// [] :Type Destinataire Reelle :Interne-Person
								// Insertion Dans Expdest---
								if (transaction
										.getTransactionDestinationReelle()
										.getTransactionDestinationReelleTypeDestinataire()
										.equals("Interne-Person")) {

									expdest.setTypeExpDest("Interne-Person");
									Person personDestinationReel = vb
											.getLdapOperation()
											.getPersonalisedUserById(
													transaction
															.getTransactionDestinationReelle()
															.getTransactionDestinationReelleIdDestinataire());

									expdest.setIdExpDestLdap(personDestinationReel
											.getId());

									if (personDestinationReel.isResponsable()) {
										type = "sub_"
												+ personDestinationReel.getId();
									} else if (personDestinationReel
											.isSecretary()) {
										type = "secretary_"
												+ personDestinationReel.getId();

									} else {
										type = "agent_"
												+ personDestinationReel.getId();
									}
									trDest.setTransactionDestIdIntervenant(personDestinationReel
											.getId());

								} else

								// [] :type Destinataire Reelle :Interne-Unité
								// Insertion Dans Expdest-----

								if (transaction
										.getTransactionDestinationReelle()
										.getTransactionDestinationReelleTypeDestinataire()
										.equals("Interne-Unité")) {

									expdest.setTypeExpDest("Interne-Unité");
									Unit unit = vb
											.getLdapOperation()
											.getUnitById(
													transaction
															.getTransactionDestinationReelle()
															.getTransactionDestinationReelleIdDestinataire());

									expdest.setIdExpDestLdap(unit.getIdUnit());
									type = "unit_"
											+ transaction
													.getTransactionDestinationReelle()
													.getTransactionDestinationReelleIdDestinataire();
									trDest.setTransactionDestIdIntervenant(transaction
											.getTransactionDestinationReelle()
											.getTransactionDestinationReelleIdDestinataire());

								}
								appMgr.insert(expdest);
								// : Fin Insertion Dans
								// expdest-------------------------------------------------------------------------------------------------

								// : set date de traitement de transaction
								transactionDestinationReelle
										.setTransactionDestinationReelleDateTraitement(new Date());
								appMgr.update(transactionDestinationReelle);

								// : Fin Insertion Dans
								// Transaction Dest
								// -------------------------------------------------------------------------------------------------
								id = new TransactionDestinationId();
								trDest = new TransactionDestination();
								id.setIdTransaction(newTransaction
										.getTransactionId());
								id.setIdExpDest(expdest.getIdExpDest());
								trDest.setId(id);
								trDest.setTransactionDestTypeIntervenant(type);

								appMgr.insert(trDest);

								// : Fin insert transactionDestination
								// -------------------------------------------------------------------------------------------------

								// update etat dans table transaction : etat5 ->
								// etat6
								for (Transaction transaction1 : listTransaction) {

									// ///////////////////////////// UPDATE
									// Référence Transaction Old
									// /////////////////////////

									transaction1
											.setCourrierDateReceptionAnnee(annee);
									transaction1
											.setCourrierType(referenceCourrierTypeOldTr);
									transaction1
											.setCourrierTypeOrdre(referenceCourrierNumeroOldTr);
									transaction1
											.setCourrierReferenceCorrespondant(referenceCourrierTypeOldTr
													+ referenceCourrierNumeroOldTr);

									// ///////////////////////////// FIN UPDATE
									// Référence Transaction Old
									// /////////////////////////

									transaction1.setEtat(etat);
									appMgr.update(transaction1);

								}

								// List<Transaction>
								// transactions=appMgr.getListTransactionByIdTransaction(transaction.getTransactionId());
								// System.out.println("2019-05-31 : "+transactions.size());
								// for(Transaction t:transactions)
								// {
								// System.out.println("====== 2019-05-31 =======");
								// System.out.println(t.getTransactionId());
								// System.out.println("=====================");
								// }
								// if(transactions!=null &&
								// transactions.size()>0){
								// Transaction transaction2=transactions.get(0);
								// System.out.println("2019-05-25 : Type Courrier "+courrierInformations.getCourrier().getCourrierType());
								// System.out.println("2019-05-25:  Type Ordre : "+courrierInformations.getCourrier().getCourrierTypeOrdre());
								// transaction2.setCourrierReferenceCorrespondant(courrierInformations.getCourrier().getCourrierType()
								// +courrierInformations.getCourrier().getCourrierTypeOrdre());
								// appMgr.update(transaction2);
								// }
								//

							}
							// XTE - AH : si la
							// "validation_hierarchique_courrier_arrive"= Oui
							else {
								System.out
										.println("########### Validation #######################");
								// // KHA : validation hiérarchique :
								// Destinataire Suivant
								Integer idDestinataireReel = transaction
										.getTransactionDestinationReelle()
										.getTransactionDestinationReelleIdDestinataire();

								// KHA : Si destinataire reel de type Person
								if (transaction
										.getTransactionDestinationReelle()
										.getTransactionDestinationReelleTypeDestinataire()
										.equals("Interne-Person")) {

									// Person : Destinataire suivant n'est pas
									// le Destinataire reel

									if (idDestinataireReel != uniteSuperieurDestinataire
											.getResponsibleUnit().getId()) {

										etat = appMgr.listEtatByLibelle(
												"A valider").get(0);
										newTransaction.setEtat(etat);
										appMgr.update(newTransaction);
										expdest.setTypeExpDest("Interne-Person");
										expdest.setIdExpDestLdap(uniteSuperieurDestinataire
												.getResponsibleUnit().getId());
										appMgr.insert(expdest);
										id = new TransactionDestinationId();
										trDest = new TransactionDestination();

										id.setIdTransaction(newTransaction
												.getTransactionId());
										id.setIdExpDest(expdest.getIdExpDest());

										String type = "sub_"
												+ uniteSuperieurDestinataire
														.getResponsibleUnit()
														.getId();

										trDest.setTransactionDestTypeIntervenant(type);
										trDest.setTransactionDestIdIntervenant(uniteSuperieurDestinataire
												.getResponsibleUnit().getId());
										trDest.setId(id);

										appMgr.insert(trDest);

										// : Fin insert transactionDestination
										// -------------------------------------------------------------------------------------------------

										// update etat dans table transaction
										// :etat5-> etat6

										for (Transaction transaction1 : listTransactionByEtat) {

											etat = appMgr.listEtatByLibelle(
													"Traité").get(0);
											transaction1.setEtat(etat);
											appMgr.update(transaction1);

										}

										//
										// Execution ==> Validation
										validateTransactionDestinataireSuivant(
												transaction,
												transactionDestination,
												uniteSuperieurDestinataire
														.getResponsibleUnit()
														.getId());

									} else {
										expdest.setTypeExpDest("Interne-Unité");
										expdest.setIdExpDestLdap(idDestinataireReel);
										appMgr.insert(expdest);
										id = new TransactionDestinationId();
										trDest = new TransactionDestination();
										id.setIdTransaction(newTransaction
												.getTransactionId());
										id.setIdExpDest(expdest.getIdExpDest());
										trDest.setId(id);

										String type = "sub_"
												+ idDestinataireReel;
										trDest.setTransactionDestTypeIntervenant(type);
										trDest.setTransactionDestIdIntervenant(idDestinataireReel);

										appMgr.insert(trDest);

										// : Fin insert transactionDestination
										// -------------------------------------------------------------------------------------------------

										// update etat dans table transaction :
										// etat5-> etat6
										// for (Transaction transaction1 :
										// listTransaction) {
										// System.out.println("Id transaction : "+transaction1.getTransactionId());
										// System.out.println("etat transaction : "+transaction1.getEtat().getEtatLibelle());
										// transaction1.setEtat(etat);
										// appMgr.update(transaction1);
										// System.out.println("### Insertionstion : update Transaction ");
										// }
										//

										validateTransactionDestinataireFinale(
												transaction,
												transactionDestination);
									}
								}

								// KHA : Si destinataire reel de type Unit
								if (transaction
										.getTransactionDestinationReelle()
										.getTransactionDestinationReelleTypeDestinataire()
										.equals("Interne-Unité")) {

									if (idDestinataireReel != uniteSuperieurDestinataire
											.getIdUnit()) {

										// Unit : Destinataire suivant n'est
										// pasle Destinataire reel
										validateTransactionDestinataireSuivant(
												transaction,
												transactionDestination,
												uniteSuperieurDestinataire
														.getResponsibleUnit()
														.getId());
									} else {
										validateTransactionDestinataireFinale(
												transaction,
												transactionDestination);
									}
								}

							}

						}

						// : Mettre a jour la reference pour indiquer qu'il est
						// un courrier de depart
						// -------------------------------------------------------------------------------------------------

						// [] Modification le 2019-05-15
						// Integer lastId =
						// appMgr.getCourrierLastIdByTypeOrdreAndAnnee("D",
						// year);
						// System.out.println("Last Id :"+lastId);
						// courrierInformations.getCourrier().setCourrierType("D");
						// if (lastId == null || lastId == 0) {
						// courrierInformations.getCourrier().setCourrierTypeOrdre(1);
						// } else {
						// courrierInformations.getCourrier().setCourrierTypeOrdre(lastId
						// + 1);
						// }
						// courrierInformations.getCourrier()
						// .setCourrierReferenceCorrespondant(
						// courrierInformations.getCourrier()
						// .getCourrierType()
						// + courrierInformations.getCourrier()
						// .getCourrierTypeOrdre());
						// appMgr.update(courrierInformations.getCourrier());

						// : Fin Mettre a jour la reference pour indiquer qu'il
						// est
						// un courrier de depart
						// -------------------------------------------------------------------------------------------------

						// : Mettre à jour Dossier et update libelle dossier
						// Courrier_Ix->Courrier_x avec x un entier
						// -------------------------------------------------------------------------------------------------
						Dossier dossier = appMgr.getDossierByIdDossier(
								transaction.getDossier().getDossierId()).get(0);
						dossier.setDossierIntitule("Courrier_"
								+ courrierInformations.getCourrier()
										.getIdCourrier());
						appMgr.update(dossier);

						setStatus1(true);

					}
					// ///////////////////////////////Fin
					// isBocDest////////////////////////////////////////////////

					else {

						if (isBocExp(transaction)) {
							System.out
									.println("L'expéditeur seulement  sous  BOS connecté ( Le destinataire non)");

							if (transaction.getCourrierType().equals("I")) {

								Integer lastId = appMgr
										.CountAllCourrierBOCByTransaction(
												"D",
												year,
												"boc_"
														+ String.valueOf(vb
																.getPerson()
																.getAssociatedBOC()
																.getIdBOC()),
												listIdBocMembers);

								referenceCourrierTypeNewTr = "D";
								referenceCourrierTypeOldTr = "D";

								if (lastId != null) {
									lastId++;
								} else {

									lastId = 1;
								}
								referenceCourrierNumeroNewTr = lastId;
								referenceCourrierNumeroOldTr = lastId;

								courrierInformations.getCourrier()
										.setCourrierType("D");
								courrierInformations.getCourrier()
										.setCourrierTypeOrdre(lastId);

							} else {
								System.out.println("Le courrier de D ");

								referenceCourrierTypeNewTr = "D";
								referenceCourrierTypeOldTr = "D";

								referenceCourrierNumeroNewTr = transaction
										.getCourrierTypeOrdre();
								referenceCourrierNumeroOldTr = transaction
										.getCourrierTypeOrdre();
							}
						} else {
							System.out
									.println("CAS NE S'APPLIQUE PAS : Expéditeur et Destinataire ne sont pas tout les deux sous le BO connecté!!!!");

						}

						// /////////////////////////// Debut insertTransaction
						// /////////////////////////////
						etat = appMgr.listEtatByLibelle("Non traité").get(0);
						newTransaction.setExpdest(transactionExpediteur.get(0)
								.getExpdest());
						newTransaction.setIdUtilisateur(vb.getPerson().getId());
						newTransaction
								.setTransactionDateTransaction(new Date());
						typetransaction = appMgr.getTypeTransactionByLibelle(
								"Envoi").get(0);
						newTransaction.setTypetransaction(typetransaction);
						newTransaction.setEtat(etat);
						newTransaction.setTransactionSupprimer(true);
						int newOrderNumber = transaction.getTransactionOrdre();
						newOrderNumber++;
						newTransaction.setTransactionOrdre(newOrderNumber);
						newTransaction.setDossier(transaction.getDossier());
						newTransaction
								.setTransactionDestinationReelle(transaction
										.getTransactionDestinationReelle());
						appMgr.insert(newTransaction);
						newTransaction.setTransactionFirst(newTransaction
								.getTransactionId());
						appMgr.update(newTransaction);
						// /////////////////////////// Fin insertTransaction
						// /////////////////////////////

						// ///////////////////////////// UPDATE Référence
						// Transaction New /////////////////////////

						newTransaction.setCourrierDateReceptionAnnee(annee);
						newTransaction
								.setCourrierType(referenceCourrierTypeNewTr);
						newTransaction
								.setCourrierTypeOrdre(referenceCourrierNumeroNewTr);
						newTransaction
								.setCourrierReferenceCorrespondant(referenceCourrierTypeNewTr
										+ referenceCourrierNumeroNewTr);
						appMgr.insert(newTransaction);
						// ///////////////////////////// FIN UPDATE Référence
						// Transaction New /////////////////////////

						courrierInformations
								.getCourrier()
								.setCourrierReferenceCorrespondant(
										courrierInformations.getCourrier()
												.getCourrierType()
												+ courrierInformations
														.getCourrier()
														.getCourrierTypeOrdre());
						appMgr.update(courrierInformations.getCourrier());

						// ///////////////////////////// UPDATE Référence
						// Transaction OLD /////////////////////////
						List<Transaction> transaction2s = appMgr
								.getListTransactionByIdTransaction(transaction
										.getTransactionId());
						if (transaction2s != null && transaction2s.size() > 0) {
							Transaction transaction2 = transaction2s.get(0);

							transaction2.setCourrierDateReceptionAnnee(annee);
							transaction2
									.setCourrierType(referenceCourrierTypeOldTr);
							transaction2
									.setCourrierTypeOrdre(referenceCourrierNumeroOldTr);
							transaction2
									.setCourrierReferenceCorrespondant(referenceCourrierTypeOldTr
											+ referenceCourrierNumeroOldTr);

							appMgr.update(transaction2);
						}
						// ///////////////////////////// UPDATE Référence
						// Transaction OLD /////////////////////////

						// ****************************************************************************************************************

						vb.setTransaction(newTransaction);

						// : Début Test si Destinataire intern-Person ou
						// interne-Unité
						// expdest-------------------------------------------------------------------------------------------------
						expdest = new Expdest();
						TransactionDestinationReelle transactionDestinationReelle = appMgr
								.getTransactionDestinationReelById(transaction
										.getTransactionDestinationReelle()
										.getTransactionDestinationReelleId());

						// [] :type Destinataire Reelle :Interne-Person
						if (transaction
								.getTransactionDestinationReelle()
								.getTransactionDestinationReelleTypeDestinataire()
								.equals("Interne-Person")) {
							Person personDestinationReel = vb
									.getLdapOperation()
									.getPersonalisedUserById(
											transaction
													.getTransactionDestinationReelle()
													.getTransactionDestinationReelleIdDestinataire());

							// ******************BOS 2

							int idUserDest = personDestinationReel.getId();
							int id1;
							Person personneRecherche = new Person();
							boolean findPerson = false;
							int j = 0;
							do {
								id1 = vb.getCopyLdapListUser().get(j).getId();
								if (id1 == idUserDest) {
									findPerson = true;
									personneRecherche = vb
											.getCopyLdapListUser().get(j);
								} else {
									j++;
								}
							} while (!findPerson
									&& j < vb.getCopyLdapListUser().size());

							getIdBocByUnit(personneRecherche
									.getAssociatedDirection());
							idBocDestinataire = idBoc;

							expdest.setTypeExpDest("Interne-Boc");
							expdest.setIdExpDestLdap(idBocDestinataire);
							String typeIntervenant = "boc_"
									+ String.valueOf(idBoc);
							appMgr.insert(expdest);

							// XTE : Insertion
							// transactionDestination---------------------------------------------------------------------------------------------
							id.setIdTransaction(vb.getTransaction()
									.getTransactionId());
							id.setIdExpDest(expdest.getIdExpDest());
							trDest.setId(id);
							trDest.setTransactionDestIdIntervenant(idBoc);
							trDest.setTransactionDestTypeIntervenant(typeIntervenant);
							appMgr.insert(trDest);

						} else
						// [] :type Destinataire Reelle :Interne-Unité
						// [2019-06-27]
						if (transaction
								.getTransactionDestinationReelle()
								.getTransactionDestinationReelleTypeDestinataire()
								.equals("Interne-Unité")) {

							// expdest.setTypeExpDest("Interne-Unité");
							Unit unit = vb
									.getLdapOperation()
									.getUnitById(
											transaction
													.getTransactionDestinationReelle()
													.getTransactionDestinationReelleIdDestinataire());
							// ******************BOS 2

							int idUnitDest = unit.getIdUnit();
							int id1;
							Unit unitRecherche = new Unit();
							boolean findUnite = false;
							int j = 0;
							do {
								id1 = vb.getCopyLdapListUnit().get(j)
										.getIdUnit();
								if (id1 == idUnitDest) {
									findUnite = true;
									unitRecherche = vb.getCopyLdapListUnit()
											.get(j);
									break;
								} else {
									j++;
								}
							} while (!findUnite
									&& j < vb.getCopyLdapListUnit().size());

							Unit u = ldapOperation.getUnitById(unitRecherche
									.getIdUnit());
							getIdBocByUnit(u);

							expdest.setTypeExpDest("Interne-Boc");

							expdest.setIdExpDestLdap(idBoc);
							String typeIntervenant = "boc_"
									+ String.valueOf(idBoc);
							appMgr.insert(expdest);

							id.setIdTransaction(vb.getTransaction()
									.getTransactionId());
							id.setIdExpDest(expdest.getIdExpDest());
							trDest.setId(id);
							trDest.setTransactionDestIdIntervenant(idBoc);

							trDest.setTransactionDestTypeIntervenant(typeIntervenant);
							appMgr.insert(trDest);
						}

						// : Fin Test
						// expdest-------------------------------------------------------------------------------------------------

						// : set date de traitement de transaction
						transactionDestinationReelle
								.setTransactionDestinationReelleDateTraitement(new Date());
						appMgr.update(transactionDestinationReelle);
						appMgr.insert(expdest);

						for (Transaction transaction1 : listTransaction) {
							etat = appMgr.listEtatByLibelle("Traité").get(0);
							transaction1.setEtat(etat);
							appMgr.update(transaction1);
						}

						// Calendar cal = Calendar.getInstance();
						// cal.setTime(courrierInformations.getCourrierDateReceptionEnvoi());
						// int year = cal.get(Calendar.YEAR);

						appMgr.update(courrierInformations.getCourrier());
						Dossier dossier = appMgr.getDossierByIdDossier(
								transaction.getDossier().getDossierId()).get(0);
						dossier.setDossierIntitule("Courrier_"
								+ courrierInformations.getCourrier()
										.getIdCourrier());
						appMgr.update(dossier);

						// ///////////////////////////////////////////////////////////////////////////////////////////
						// /////////////////////////// Transaction Ajoutée pour
						// BOC DEST/////////////////////////////
						// ///////////////////////////////////////////////////////////////////////////////////////////
						BOC bocDest = new BOC();
						if (isBocExp(transaction)) {
							System.out
									.println("AH ==> DANS !isBocDest(transaction) && isBocExp(transaction)");
							List<BOC> bocs = vb.getCentralBoc()
									.getListChildBOCsBOC();

							for (BOC b : bocs) {
								if (b.getIdBOC() == idBocDestinataire) {
									bocDest = b;
									break;
								}
							}
							listIdBocMembers = new ArrayList<Integer>();
							int responsableBocDest = 0;
							List<Person> listBocMembers = bocDest
									.getMembersBOC();
							for (Person person : listBocMembers) {
								listIdBocMembers.add(person.getId());
								if (person.isResponsableBO()) {
									responsableBocDest = person.getId();
								}
							}

							Integer lastId = appMgr
									.CountAllCourrierBOCByTransaction("A",
											year, "boc_" + idBocDestinataire,
											listIdBocMembers);

							referenceCourrierTypeNewTr = "A";

							if (lastId != null) {
								lastId++;
							} else {

								lastId = 1;
							}
							referenceCourrierNumeroNewTr = lastId;
							System.out
									.println("AH  ====>id responsableBocDest : "
											+ responsableBocDest);
							// /////////////////////////// Debut
							// insertTransaction /////////////////////////////
							etat = appMgr.listEtatByLibelle("Non traité")
									.get(0);
							Transaction newTransactionBocDest = new Transaction();
							newTransactionBocDest
									.setExpdest(transactionExpediteur.get(0)
											.getExpdest());
							newTransactionBocDest
									.setIdUtilisateur(responsableBocDest);
							newTransactionBocDest
									.setTransactionDateTransaction(new Date());
							typetransaction = appMgr
									.getTypeTransactionByLibelle("Envoi")
									.get(0);
							newTransactionBocDest
									.setTypetransaction(typetransaction);
							newTransactionBocDest.setEtat(etat);
							newTransactionBocDest.setTransactionSupprimer(true);
							int newOrderNumberDest = transaction
									.getTransactionOrdre();
							newOrderNumberDest++;
							newTransactionBocDest
									.setTransactionOrdre(newOrderNumberDest);
							newTransactionBocDest.setDossier(transaction
									.getDossier());
							newTransactionBocDest
									.setTransactionDestinationReelle(transaction
											.getTransactionDestinationReelle());

							newTransactionBocDest
									.setCourrierDateReceptionAnnee(annee);
							newTransactionBocDest
									.setCourrierType(referenceCourrierTypeNewTr);
							newTransactionBocDest
									.setCourrierTypeOrdre(referenceCourrierNumeroNewTr);
							newTransactionBocDest
									.setCourrierReferenceCorrespondant(referenceCourrierTypeNewTr
											+ referenceCourrierNumeroNewTr);

							appMgr.insert(newTransactionBocDest);
							newTransactionBocDest
									.setTransactionFirst(newTransactionBocDest
											.getTransactionId());
							appMgr.update(newTransactionBocDest);
							// /////////////////////////// Fin insertTransaction
							// /////////////////////////////

							// : Début Test si Destinataire intern-Person ou
							// interne-Unité
							// expdest-------------------------------------------------------------------------------------------------
							expdest = new Expdest();
							transactionDestinationReelle = appMgr
									.getTransactionDestinationReelById(transaction
											.getTransactionDestinationReelle()
											.getTransactionDestinationReelleId());

							// [] :type Destinataire Reelle :Interne-Person
							if (transaction
									.getTransactionDestinationReelle()
									.getTransactionDestinationReelleTypeDestinataire()
									.equals("Interne-Person")) {
								Person personDestinationReel = vb
										.getLdapOperation()
										.getPersonalisedUserById(
												transaction
														.getTransactionDestinationReelle()
														.getTransactionDestinationReelleIdDestinataire());

								// ******************BOS 2

								int idUserDest = personDestinationReel.getId();
								int id1;
								Person personneRecherche = new Person();
								boolean findPerson = false;
								int j = 0;
								do {
									id1 = vb.getCopyLdapListUser().get(j)
											.getId();
									if (id1 == idUserDest) {
										findPerson = true;
										personneRecherche = vb
												.getCopyLdapListUser().get(j);
									} else {
										j++;
									}
								} while (!findPerson
										&& j < vb.getCopyLdapListUser().size());

								getIdBocByUnit(personneRecherche
										.getAssociatedDirection());
								idBocDestinataire = idBoc;

								expdest.setTypeExpDest("Interne-Boc");
								expdest.setIdExpDestLdap(idBocDestinataire);
								String typeIntervenant = "boc_"
										+ String.valueOf(idBoc);
								appMgr.insert(expdest);

								// XTE : Insertion
								// transactionDestination---------------------------------------------------------------------------------------------

								TransactionDestination trDestNew = new TransactionDestination();
								id.setIdTransaction(newTransactionBocDest
										.getTransactionId());
								id.setIdExpDest(expdest.getIdExpDest());
								trDestNew.setId(id);
								trDestNew
										.setTransactionDestIdIntervenant(idBoc);
								trDestNew
										.setTransactionDestTypeIntervenant(typeIntervenant);
								appMgr.insert(trDestNew);

							} else
							// [] :type Destinataire Reelle :Interne-Unité
							// [2019-06-27]
							if (transaction
									.getTransactionDestinationReelle()
									.getTransactionDestinationReelleTypeDestinataire()
									.equals("Interne-Unité")) {

								// expdest.setTypeExpDest("Interne-Unité");
								Unit unit = vb
										.getLdapOperation()
										.getUnitById(
												transaction
														.getTransactionDestinationReelle()
														.getTransactionDestinationReelleIdDestinataire());
								// ******************BOS 2

								int idUnitDest = unit.getIdUnit();
								int id1;
								Unit unitRecherche = new Unit();
								boolean findUnite = false;
								int j = 0;
								do {
									id1 = vb.getCopyLdapListUnit().get(j)
											.getIdUnit();
									if (id1 == idUnitDest) {
										findUnite = true;
										unitRecherche = vb
												.getCopyLdapListUnit().get(j);
										break;
									} else {
										j++;
									}
								} while (!findUnite
										&& j < vb.getCopyLdapListUnit().size());

								Unit u = ldapOperation
										.getUnitById(unitRecherche.getIdUnit());
								getIdBocByUnit(u);

								expdest.setTypeExpDest("Interne-Boc");

								expdest.setIdExpDestLdap(idBoc);
								String typeIntervenant = "boc_"
										+ String.valueOf(idBoc);
								appMgr.insert(expdest);

								id.setIdTransaction(vb.getTransaction()
										.getTransactionId());
								id.setIdExpDest(expdest.getIdExpDest());
								trDest.setId(id);
								trDest.setTransactionDestIdIntervenant(idBoc);

								trDest.setTransactionDestTypeIntervenant(typeIntervenant);
								appMgr.insert(trDest);
							}

						}
						// ///////////////////////////////////////////////////////////////////////////////////////////
						// ///////////////////////////FIN Transaction Ajoutée
						// pour BOC DEST/////////////////////////////
						// ///////////////////////////////////////////////////////////////////////////////////////////

					}
					setStatus1(true);
				}
			} else {
				System.out.println(" etat 6");
			}
		} catch (Exception e) {
			setStatus2(true);
			e.printStackTrace();
		}

	}
*/
	public Date getDateCourrier() {
		return dateCourrier;
	}

	public void setDateCourrier(Date dateCourrier) {
		this.dateCourrier = dateCourrier;
	}

	public int getIdBocExpediteur() {
		return idBocExpediteur;
	}

	public void setIdBocExpediteur(int idBocExpediteur) {
		this.idBocExpediteur = idBocExpediteur;
	}

	public int getIdExpediteur() {
		return IdExpediteur;
	}

	public void setIdExpediteur(int idExpediteur) {
		IdExpediteur = idExpediteur;
	}

	public void setIdBocDestinataire(int idBocDestinataire) {
		this.idBocDestinataire = idBocDestinataire;
	}

	public int getIdBocDestinataire() {
		return idBocDestinataire;
	}

	public void setDestinationReel(Person destinationReel) {
		this.destinationReel = destinationReel;
	}

	public Person getDestinationReel() {
		return destinationReel;
	}

	public String getTypeUserDes() {
		return typeUserDes;
	}

	public void setTypeUserDes(String typeUserDes) {
		this.typeUserDes = typeUserDes;
	}

	public String getTexteTypeCourrier() {
		return texteTypeCourrier;
	}

	public void setTexteTypeCourrier(String texteTypeCourrier) {
		this.texteTypeCourrier = texteTypeCourrier;
	}

	public void setStyleMessage(String styleMessage) {
		this.styleMessage = styleMessage;
	}

	public String getStyleMessage() {
		return styleMessage;
	}

	public void setUserInput(String userInput) {
		this.userInput = userInput;
	}

	public String getUserInput() {
		return userInput;
	}

	public void setVariableCourrie(Integer variableCourrie) {
		
		this.variableCourrie = variableCourrie;
	}

	public Integer getVariableCourrie() {
		

		return variableCourrie;
	}

	public void setVariabledeTest2(String variabledeTest2) {
		this.variabledeTest2 = variabledeTest2;
	}

	public String getVariabledeTest2() {
		return variabledeTest2;
	}

	public void setCodeUniqueCourrier(String codeUniqueCourrier) {
		this.codeUniqueCourrier = codeUniqueCourrier;
	}

	public String getCodeUniqueCourrier() {
		return codeUniqueCourrier;
	}

	public void method() {
		System.out.println("methode ");
		Map<String, String> map = FacesContext.getCurrentInstance()
				.getExternalContext().getRequestParameterMap();
		String name1 = (String) map.get("name1");
		String name2 = (String) map.get("name2");
		

	}

	public void setMyStrings() {
		

		Map<String, String> requestParamMap = FacesContext.getCurrentInstance()
				.getExternalContext().getRequestParameterMap();

		String string1 = requestParamMap.get("string1"); // Hello
		String string2 = requestParamMap.get("string2"); // World
		

	}

	// Code de Test
	public void action() {

		
		String value = FacesContext.getCurrentInstance().getExternalContext()
				.getRequestParameterMap().get("hidden1");
		
		List<Courrier> listCourrier = appMgr.getCourrierByIdCourrier(Integer
				.valueOf(value));
		if (listCourrier != null) {
			Courrier courrier = listCourrier.get(0);
			vb.setCourrier(courrier);
			status1 = true;
			
		}
		String value2 = FacesContext.getCurrentInstance().getExternalContext()
				.getRequestParameterMap().get("hidden2");
		
		vb.setCopyExpReelNom(value2);

		String value8 = FacesContext.getCurrentInstance().getExternalContext()
		.getRequestParameterMap().get("hidden8");
		vb.setCodeUniqueCourrier(value8);
		String value3 = FacesContext.getCurrentInstance().getExternalContext()
				.getRequestParameterMap().get("hidden3");
		
		vb.setDestinataireReel(value3);
	
		String value4 = FacesContext.getCurrentInstance().getExternalContext()
				.getRequestParameterMap().get("hidden4");
		List<Transaction> listTransaction = appMgr
				.getListTransactionByIdTransaction(Integer.valueOf(value4));
		if (listTransaction != null) {
			Transaction tr = listTransaction.get(0);
			

			vb.setTransaction(tr);
		}

		String value5 = FacesContext.getCurrentInstance().getExternalContext()
				.getRequestParameterMap().get("hidden5");
		String value6 = FacesContext.getCurrentInstance().getExternalContext()
				.getRequestParameterMap().get("hidden6");
		String value7 = FacesContext.getCurrentInstance().getExternalContext()
				.getRequestParameterMap().get("hidden7");

		

		ListeDestinatairesModel destR = new ListeDestinatairesModel();
		destinatairesAvecAnnotations = new ArrayList<ListeDestinatairesModel>();

		destR.setDestinataireId(Integer.valueOf(value5));
		destR.setDestinataireName(value6);
		// destR.setAnnotations(value7);

		// /lioste des annotations
		List<Annotation> l = new ArrayList<Annotation>();
		// String value0 = FacesContext.getCurrentInstance().
		// getExternalContext().getRequestParameterMap().get("hidden0");
		

		List<CourrierDossier> listCourrierDossier = appMgr
				.getCourrierDossierByIdCourrier(Integer.valueOf(value));
		if (listCourrierDossier != null) {
			CourrierDossier cd = listCourrierDossier.get(0);
			int value0 = cd.getId().getDossierId();
			

			if (appMgr.listeAnnotationParDestinataireEtTransactionReell(
					Integer.valueOf(value5), value0) != null) {
				
				l = appMgr.listeAnnotationParDestinataireEtTransactionReell(
						Integer.valueOf(value5), value0);
			} else {

				l = appMgr.listeAnnotationParDestinataireEtTransactionExpDest(
						Integer.valueOf(value5), value0);
				
			}

			if (l != null) {
				List<String> listAnnotationDest = new ArrayList<String>();
				for (Annotation a : l) {
					
					listAnnotationDest.add(String.valueOf(a.getAnnotationId()));
					
					// []
					ta = appMgr.getTransactionByIdAnnotation(
							a.getAnnotationId()).get(0);
					// tr=appMgr.getListTransactionByIdTransaction(ta.getId().getIdTransaction()).get(0);
				}
				destR.setListeAnnotations(listAnnotationDest);
				// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());
			}
			

			destinatairesAvecAnnotations.add(destR);
			vb.setListeDestinataire(destinatairesAvecAnnotations);

		}

		setHidden1(value);
		vb.setAfficheLienLiees(false);
		// return "start";
	}

	public String getHidden1() {
		

		return hidden1;
	}

	public void setHidden1(String hidden1) {
		

		this.hidden1 = hidden1;
	}

	public String getHidden2() {
		
		return hidden2;
	}

	public void setHidden2(String hidden2) {
		

		this.hidden2 = hidden2;
	}

	public List<CourrierInformations> getListCourrier() {
		return listCourrier;
	}

	public void setListCourrier(List<CourrierInformations> listCourrier) {
		this.listCourrier = listCourrier;
	}

	public boolean isReceptionphysiqueNonLivre() {
		return receptionphysiqueNonLivre;
	}

	public void setReceptionphysiqueNonLivre(boolean receptionphysiqueNonLivre) {
		this.receptionphysiqueNonLivre = receptionphysiqueNonLivre;
	}

	public boolean isExisteBOSansMembres() {
		return existeBOSansMembres;
	}

	public void setExisteBOSansMembres(boolean existeBOSansMembres) {
		this.existeBOSansMembres = existeBOSansMembres;
	}


	public void setEtatReceptionPhysique(Boolean etatReceptionPhysique) {
		this.etatReceptionPhysique = etatReceptionPhysique;
	}

	public Boolean getEtatReceptionPhysique() {
		return etatReceptionPhysique;
	}


	public void setCourrierPointer(boolean courrierPointer) {
		this.courrierPointer = courrierPointer;
	}

	public boolean isCourrierPointer() {
		return courrierPointer;
	}
	public boolean isDisbledBontonConsultation() {
		return disbledBontonConsultation;
	}

	public void setDisbledBontonConsultation(boolean disbledBontonConsultation) {
		this.disbledBontonConsultation = disbledBontonConsultation;
	}

	
	

}