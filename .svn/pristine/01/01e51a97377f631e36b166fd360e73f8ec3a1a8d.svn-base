package xtensus.beans.common.GBO;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;

import org.hibernate.ejb.criteria.expression.function.SubstringFunction;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import xtensus.beans.common.ListeDestinatairesModel;
import xtensus.beans.common.VariableGlobale;
import xtensus.beans.utils.CourrierInformations;
import xtensus.entity.Annotation;
import xtensus.entity.AoConsultation;
import xtensus.entity.Expdest;
import xtensus.entity.Expdestexterne;
import xtensus.entity.Pm;
import xtensus.entity.Pp;
import xtensus.entity.Transaction;
import xtensus.entity.TransactionDestination;
import xtensus.entity.Variables;
import xtensus.ldap.model.BOC;
import xtensus.ldap.model.ItemSelected;
import xtensus.ldap.model.Person;
import xtensus.ldap.model.Unit;
import xtensus.services.ApplicationManager;


@Component
@Scope("request")
	public class AoConsultationConsultationBean {

	private ApplicationManager appMgr;
	private AoConsultation aoConsultation;
	private int nombreCourrier;
	private DataModel listCourrierAoConsultationDM;
	private CourrierInformations courrierInformations;
	private List<CourrierInformations> listeCourriers;
	String	dateHeur;
	
@SuppressWarnings("unused")
	
	private long records = 0;
	@Autowired
	private VariableGlobale vb;
	private String dateHeurLimite;
	private String dateHeurComm;
	private String dateHeurProl;
	
	
	public AoConsultationConsultationBean() {

	}
	@Autowired
	public AoConsultationConsultationBean(
			@Qualifier("applicationManager") ApplicationManager appMgr) {

		this.appMgr = appMgr;
		aoConsultation = new AoConsultation();
		listCourrierAoConsultationDM = new ListDataModel();
	}

	@PostConstruct
	public void Initialize() {
		listCourrierAoConsultationDM = new ListDataModel();
		aoConsultation = new AoConsultation();
		try {
			aoConsultation = vb.getAoConsultation();
			///////////////KBS 19-08-2019///////////////////
			dateHeurLimite =aoConsultation.getAoConsultationDateLimiteOffre().toString().substring(0,10) + " à "
			+ aoConsultation.getAoConsultationDateLimiteOffre().toString().substring(11);
			dateHeurComm =aoConsultation.getAoConsultationDateSeanceCommission().toString().substring(0,10) + " à "
			+ aoConsultation.getAoConsultationDateSeanceCommission().toString().substring(11);
			dateHeurProl =aoConsultation.getAoConsultationDelaisProlongation().toString().substring(0,10) + " à "
			+ aoConsultation.getAoConsultationDelaisProlongation().toString().substring(11);
			////////////////////////////////////////////////////////////////
			listeCourriers = appMgr.findCourrierEnvoyerBOCWithCriterionAO(aoConsultation.getAoConsultationId(),true, 0, 10, " ");

			for (CourrierInformations courrierInformations : listeCourriers) {
					try {
				searchExpediteurDestinataire(courrierInformations);
					System.out.println("L : " + courrierInformations.getCourrierID() + " du  "
				+ courrierInformations.getCourrierExpediteur() + " à "
				+ courrierInformations.getCourrierDestinataireReelle());
				} catch (Exception e) {
			e.printStackTrace();
					System.out.println("######CAUSED BY : "	+ courrierInformations.getCourrierReference());
					
			continue;
			}
				}
			nombreCourrier = listeCourriers.size();
			
			listCourrierAoConsultationDM.setWrappedData(listeCourriers);
				
		} 
		
		catch (Exception e) {		
			e.printStackTrace();
		}
	}
	

	public void searchExpediteurDestinataire(
			CourrierInformations courrierInformations) throws Exception {
		System.out.println("AH : DANS searchExpediteurDestinataire ");
		// kha =========
		courrierInformations.setCourrier(appMgr.getCourrierByIdCourrier(
				courrierInformations.getCourrierID()).get(0));
		// ======
		System.out.println(" courrier id = "
				+ courrierInformations.getCourrier().getNature().getNatureId());
		// AH :
		 ArrayList<ListeDestinatairesModel> destinatairesAvecAnnotations = new
		 ArrayList<ListeDestinatairesModel>();
		 ArrayList<ItemSelected> listSelectedItem = new ArrayList<ItemSelected>();

		List<Object> listSelectedObject = new ArrayList<Object>();
		List<Person> listSelectedPerson = new ArrayList<Person>();
		List<Pp> listSelectetdPP = new ArrayList<Pp>();
		List<Pm> listSelectetdPM = new ArrayList<Pm>();
		List<Unit> listSelectetdUnit = new ArrayList<Unit>();
		List<BOC> listSelectetdBoc = new ArrayList<BOC>();

		Integer etatID = courrierInformations.getEtatID();
		String expType;
		Integer expTypeUser;
		Integer expLdap;
		String expNom;
		String expPrenom;
		if (courrierInformations.getCourrierOldNum() == null) {
			expType = courrierInformations.getExpType();
			expTypeUser = courrierInformations.getExpTypeUser();
			expLdap = courrierInformations.getExpLdap();
			expNom = courrierInformations.getExpNom();
			expPrenom = courrierInformations.getExpPrenom();
		} else {
			expType = courrierInformations.getExpTypeOld();
			expTypeUser = courrierInformations.getExpTypeUserOld();
			expLdap = courrierInformations.getExpLdapOld();
			expNom = courrierInformations.getExpNomOld();
			expPrenom = courrierInformations.getExpPrenomOld();
		}
		// expediteur reel
		String expediteur = "";
		if (vb.getPerson().isBoc()) {
			if (vb.getPerson().isResponsableBO()) {
				System.out.println(" is responsable BO");
			} else if (vb.getPerson().isAgentBO()) {
				System.out.println(" is AGENT BO");
			}
		}
	
		Variables variableExecution = appMgr.listVariablesByLibelle(
				"execution_courrier_par_tous_types_membre_bo").get(0);

		System.out.println("Type Expiditeur:" + expType);
		if (expType.equals("Interne-Person")) {
			System.out.println(" DANS execute Interne-Person");
			if (expLdap.equals(vb.getPerson().getId())) {
				courrierInformations.setCourrierRecu(0);
			}

			// JS: Pas de Passage par DG
			
			/***
			 * test pour que boc execute un courrier
			 */
			System.out.println("courrierInformations.getTransactionOrdre :"
					+ courrierInformations.getTransactionOrdre());
			System.out.println("etat :" + etatID);

			// KHA : Seulement le responsable BO peut exécuter
			if (variableExecution.getVaraiablesValeur().equals("Non")) {
				if (vb.getPerson().getAssociatedBOC() != null
						&& courrierInformations.getTransactionOrdre() == null
						&& etatID.equals(5)) {
					courrierInformations.setCourrierAValider(1);
				} else

					System.out
							.println(" //[JS]: test pour que boc execute un courrier de destination interne-Person avec ordre de transaction != null");
				

				if (vb.getPerson().getAssociatedBOC() != null
						&& vb.getPerson().isResponsableBO()
						&& courrierInformations.getTransactionOrdre() != null
						&& etatID.equals(5)) {
					System.out.println("JS-->courrier Interne à executer ");
					System.out.println("hello I'm Here");
					courrierInformations.setCourrierAValider(1);

				}
			}
			// KHA : touls les Membres(Agent/Responsable) de BO peuvent exécuter
			else {
				if (vb.getPerson().getAssociatedBOC() != null
						&& courrierInformations.getTransactionOrdre() != null
						&& etatID.equals(5)) {
					System.out.println("JS-->courrier Interne à executer ");
					courrierInformations.setCourrierAValider(1);

				}

			}
			// }
			Person person = vb.getHashMapAllUser().get(expLdap);
			expediteur = person.getCn();
		} else if (expType.equals("Interne-Unité")) {
			System.out.println(" DANS execute Interne-Unité");
			if (vb.getPerson().isResponsable()
					&& expLdap.equals(vb.getPerson().getAssociatedDirection()
							.getIdUnit())) {
				courrierInformations.setCourrierRecu(0);
			}
			// hidden par KHA //if
			// (courrierAriverToDG.getVaraiablesValeur().equals("Non")) {
			/***
			 * test pour que boc execute un courrier
			 */

			if (variableExecution.getVaraiablesValeur().equals("Non")) {

				if (vb.getPerson().getAssociatedBOC() != null
						&& courrierInformations.getTransactionOrdre() == null
						&& etatID.equals(5)) {
					courrierInformations.setCourrierAValider(1);

				} else
					System.out
							.println(" //[JS]: test pour que boc execute un courrier de destination interne-unité avec ordre de transaction != null");

				
				if (vb.getPerson().getAssociatedBOC() != null
						&& vb.getPerson().isResponsableBO()
						&& courrierInformations.getTransactionOrdre() != null
						&& etatID.equals(5)) {
					courrierInformations.setCourrierAValider(1);
				}

			} else if (vb.getPerson().getAssociatedBOC() != null
					&& courrierInformations.getTransactionOrdre() != null
					&& etatID.equals(5)) {
				courrierInformations.setCourrierAValider(1);

			}
			// }
			Unit unit = vb.getHashMapUnit().get(expLdap);
			expediteur = unit.getNameUnit();
		} else if (expType.equals("Interne-Boc")) {
			expediteur = vb.getCentralBoc().getNameBOC();
			// if (courrierAriverToDG.getVaraiablesValeur().equals("Non")) {
			/***
			 * test pour que boc execute un courrier
			 */

			System.out.println(" DANS execute Interne-Boc");
			if (variableExecution.getVaraiablesValeur().equals("Non")) {
				if (vb.getPerson().getAssociatedBOC() != null
						&& courrierInformations.getTransactionOrdre() == null
						&& etatID.equals(5)) {
					courrierInformations.setCourrierAValider(1);

				} else if (vb.getPerson().getAssociatedBOC() != null
						&& vb.getPerson().isResponsableBO()
						&& courrierInformations.getTransactionOrdre() != null
						&& etatID.equals(5)) {
					courrierInformations.setCourrierAValider(1);
				}
			} else if (vb.getPerson().getAssociatedBOC() != null
					&& courrierInformations.getTransactionOrdre() != null
					&& etatID.equals(5)) {
				courrierInformations.setCourrierAValider(1);

			}

			// }
		} else if (expType.equals("Externe")) {

			System.out.println(" DANS execute Externe");
			
			if (variableExecution.getVaraiablesValeur().equals("Non")) {
				if (vb.getPerson().getAssociatedBOC() != null
						&& courrierInformations.getTransactionOrdre() == null
						&& etatID.equals(5)) {
					courrierInformations.setCourrierAValider(1);
				} else if (vb.getPerson().getAssociatedBOC() != null
						&& vb.getPerson().isResponsableBO()
						&& courrierInformations.getTransactionOrdre() != null
						&& etatID.equals(5)) {
					courrierInformations.setCourrierAValider(1);
				}
			} else if (vb.getPerson().getAssociatedBOC() != null
					&& courrierInformations.getTransactionOrdre() != null
					&& etatID.equals(5)) {
				courrierInformations.setCourrierAValider(1);

			}
			// }
			// provisoire .. juste pour activer l'execution des courrier arrivé
			// pour le BOCT
			// C* pour que le bouton executer soit activé pour les courriers
			// d'arrivé
			if (expTypeUser == 1) {
				expediteur = expNom + " " + expPrenom + " (PP)";
			} else {
				expediteur = expNom + " (PM)";
			}
		}
		courrierInformations.setCourrierExpediteur(expediteur);
		// remplissage de l'objet TransactionDest pour l'execution du BOC ou la
		// validation des responsable
		List<TransactionDestination> listTransactionDestination = appMgr
				.getListTransactionDestinationByIdTransaction(courrierInformations
						.getTransactionID());// valeur ancien
												// #firstTransaction.getTransactionId()#

		if (!listTransactionDestination.isEmpty()) {
			courrierInformations
					.setTransactionDestination(listTransactionDestination
							.get(listTransactionDestination.size() - 1));
		}
		if ((etatID.equals(2) || etatID.equals(10))
				&& !vb.getPerson().isBoc()
				&& !courrierInformations.getIdUtilisateur().equals(
						vb.getPerson().getId())) {

			courrierInformations.setCourrierAValider(1);
		}
		// pour activer l'execution des courrier qui suit un workflow pour le
		// boct et juste la premiere execution
		if (vb.getPerson().isBoc()
				&& courrierInformations.getCourrierCircuit().equals("workflow")) {
			if (etatID.equals(10)
					&& courrierInformations.getTransactionOrdre().equals(1)) {
				courrierInformations.setCourrierAValider(1);
			}
		}
		// pour activer l'execution des courrier qui suit un workflow pour le
		// boct et juste la premiere execution
		if (!courrierInformations.getIdUtilisateur().equals(
				vb.getPerson().getId())) {
			courrierInformations.setCourrierRecu(1);
		}
		// detinataire reel *
		StringBuilder destinataire = new StringBuilder("");
		String unitName;
		// AH
		ListeDestinatairesModel destR;

		List<Transaction> allTransactions = appMgr
				.getTransactionByIdDossier(courrierInformations.getDossierID());
		courrierInformations.setCourrierAllTransactions(allTransactions);
		Transaction firstTransaction = allTransactions.get(allTransactions
				.size() - 1);
		Expdest expdestExpediteurREEL = appMgr.getListExpDestByIdExpDest(
				firstTransaction.getExpdest().getIdExpDest()).get(0);
		courrierInformations.setExpDest(expdestExpediteurREEL);
		if (courrierInformations.getDestReelList() != null) {
			// AH
			destR = new ListeDestinatairesModel();
			List<String> destReelList = new ArrayList<String>(
					Arrays.asList(courrierInformations.getDestReelList().split(
							"\\|", -1)));
			System.out.println(destReelList);
			System.out.println(" destReelList size  = " + destReelList.size());
			for (int i = 0; i < destReelList.size(); i++) {
				List<String> destReelElement = new ArrayList<String>(
						Arrays.asList(destReelList.get(i).split(";", -1)));
				System.out.println("liste dest Reel Element :"
						+ destReelElement.toString());
				

				Integer idExpDest = 0;
				if (!destReelElement.get(1).equals("")) {
					idExpDest = Integer.valueOf(destReelElement.get(1));
				}
				String type = destReelElement.get(2);
				Integer ldap = 0;
				if (!destReelElement.get(3).equals("")) {
					ldap = Integer.valueOf(destReelElement.get(3));
				}
				String nom = destReelElement.get(4);
				String prenom = destReelElement.get(5);
				Integer typeUser = 0;
				if (!destReelElement.get(6).equals("")) {
					typeUser = Integer.valueOf(destReelElement.get(6));
				}
				Integer idDestReelLdap = 0;
				System.out.println("#### :" + destReelElement.get(7));
				if (!destReelElement.get(7).equals("")) {
					idDestReelLdap = Integer.valueOf(destReelElement.get(7));
					System.out.println("dans if :" + idDestReelLdap);
				}
				String destReelType = destReelElement.get(8);
				System.out.println("### destReelType ###  :" + destReelType);
				System.out.println("###  idDestReelLdap ###  :"
						+ idDestReelLdap);
				if (idDestReelLdap != 0) {
					// JS : workflow
					// ----------------------------------------------------------------------------------------------------

					if (courrierInformations.getCourrierCircuit().equals(
							"workflow")) {
						try {
							Unit unitDestinataireReel = vb.getHashMapUnit()
									.get(idDestReelLdap);
							unitName = unitDestinataireReel.getNameUnit();

							System.out
									.println("==============1===============");
							ItemSelected itemSelected = new ItemSelected();
							itemSelected.setItemSelectedId(idDestReelLdap);
							itemSelected.setItemSelectedName(unitName);
							itemSelected
									.setSelectedObject(unitDestinataireReel);
							listSelectedItem.add(itemSelected);
							//
							Object object = (Object) unitDestinataireReel;
							listSelectedObject.add(object);
							listSelectetdUnit.add(unitDestinataireReel);

						} catch (Exception e) {
							unitName = "Inconnue";
							e.printStackTrace();
						}
						destinataire.append(" / ");
						destinataire.append(unitName);

						break;
					} else {
						if (destReelType.equals("Interne-Unité")) {
							System.out
									.println("### Type de destination Réel est Interne-Unité ###");
							Unit unit = vb.getHashMapUnit().get(idDestReelLdap);
							System.out.println("unité :"
									+ unit.getShortNameUnit());
							if (!destinataire.toString().contains(
									unit.getNameUnit())) {
								destinataire.append(" / ");

								System.out
										.println("Ajout Unité dans liste des destinataires");
								destinataire.append(unit.getNameUnit());

								destR = new ListeDestinatairesModel();
								System.out.println("idDestReelLdap :"
										+ idDestReelLdap);
								destR.setDestinataireId(idDestReelLdap);
								destR.setDestinataireName(unit.getNameUnit());
								System.out.println("AH AJOUT "
										+ unit.getNameUnit());
								System.out
										.println("============== affecter annotations unit 1 ===============");

								// List<Annotation> l =
								// appMgr.listeAnnotationParDestinataireEtTransaction(idDestReelLdap,courrierInformations.getDossierID());
								List<Annotation> l = new ArrayList<Annotation>();
								if (appMgr
										.listeAnnotationParDestinataireEtTransactionReell(
												idDestReelLdap,
												courrierInformations
														.getDossierID()) != null) {
									System.out
											.println(" KHA===> Destinataire reel enregistre dans table transactionDestinationRelle");
									l = appMgr
											.listeAnnotationParDestinataireEtTransactionReell(
													idDestReelLdap,
													courrierInformations
															.getDossierID());
								} else {

									l = appMgr
											.listeAnnotationParDestinataireEtTransactionExpDest(
													idDestReelLdap,
													courrierInformations
															.getDossierID());
									System.out
											.println(" KHA===> Destinataire reel enregistre dans table expdest");
								}
								if (l != null) {
									List<String> listAnnotationDest = new ArrayList<String>();
									for (Annotation a : l) {

										listAnnotationDest.add(String.valueOf(a
												.getAnnotationId()));
										System.out
												.println("listAnnotationDest = "
														+ listAnnotationDest);
									}
									destR.setListeAnnotations(listAnnotationDest);
								}
								System.out.println("destR.ListeAnnotations = "
										+ destR.getListeAnnotations());

								System.out
										.println("============== Fin : affecter annotations  unit 1===============");

								destinatairesAvecAnnotations.add(destR);

								System.out
										.println("==============2===============");
								ItemSelected itemSelected = new ItemSelected();
								itemSelected.setItemSelectedId(idDestReelLdap);
								itemSelected.setItemSelectedName(unit
										.getNameUnit());
								listSelectedItem.add(itemSelected);

								Object object = (Object) unit;
								listSelectedObject.add(object);
								listSelectetdUnit.add(unit);
								System.out
										.println("============== ===============");

							}
						} else if (destReelType.equals("Interne-Person")) {

							Person person = vb.getHashMapAllUser().get(
									idDestReelLdap);
							System.out.println("Interne-Person");
							System.out.println("JS : Person ### :"
									+ person.getNom());
							if (!destinataire.toString().contains(
									person.getCn())) {
								destinataire.append(" / ");

								System.out
										.println("Ajout Personne dans liste destinataires");
								System.out.println("Cn Person :"
										+ person.getCn());
								destinataire.append(person.getCn());

								System.out
										.println("########## destR ##############");
								destR = new ListeDestinatairesModel();
								destR.setDestinataireId(idDestReelLdap);
								destR.setDestinataireName(person.getCn());

								
								List<Annotation> l = new ArrayList<Annotation>();
								if (appMgr
										.listeAnnotationParDestinataireEtTransactionReell(
												idDestReelLdap,
												courrierInformations
														.getDossierID()) != null) {
									System.out
											.println(" KHA :Person Dans  listeAnnotationParDestinataireEtTransactionReell");
									l = appMgr
											.listeAnnotationParDestinataireEtTransactionReell(
													idDestReelLdap,
													courrierInformations
															.getDossierID());
								} else {
									System.out
											.println(" KHA :Person Dans  listeAnnotationParDestinataireEtTransactionExpDest");
									l = appMgr
											.listeAnnotationParDestinataireEtTransactionExpDest(
													idDestReelLdap,
													courrierInformations
															.getDossierID());

								}
								if (l != null) {
									List<String> listAnnotationDest = new ArrayList<String>();
									for (Annotation a : l) {

										listAnnotationDest.add(String.valueOf(a
												.getAnnotationId()));
										System.out
												.println("listAnnotationDest = "
														+ listAnnotationDest);
									}
									destR.setListeAnnotations(listAnnotationDest);
								}
								System.out.println("destR.ListeAnnotations = "
										+ destR.getListeAnnotations());

								System.out
										.println("============== Fin : affecter annotations Person===============");
								System.out
										.println("AH AJOUT " + person.getCn());
								destinatairesAvecAnnotations.add(destR);
								System.out
										.println("==============3===============");
								ItemSelected itemSelected = new ItemSelected();
								itemSelected.setItemSelectedId(idDestReelLdap);
								itemSelected
										.setItemSelectedName(person.getCn());
								listSelectedItem.add(itemSelected);
								Object object = (Object) person;
								listSelectedObject.add(object);
								listSelectedPerson.add(person);

								System.out
										.println("============== ===============");
							}
						} else if (destReelType.equals("Externe")) {
							System.out.println("### Externe");
							

							if (vb.getPerson().isBoc() && etatID.equals(5)) {
								System.out
										.println("KHA : avalider si vb.getPerson().isBoc() && etatID.equals(5)");

								if (variableExecution.getVaraiablesValeur()
										.equals("Non")) {
									if (vb.getPerson().isResponsableBO()) {

										courrierInformations
												.setCourrierAValider(1);
									}
								} else {
									System.out.println(" ");
									courrierInformations.setCourrierAValider(1);
								}
							}
							System.out.println("idDestReelLdap :"
									+ idDestReelLdap);
							Expdestexterne destReelExterne = appMgr
									.getExpediteurById(idDestReelLdap).get(0);
							if (destReelExterne.getTypeutilisateur()
									.getTypeUtilisateurId().equals(1)) {
								String dest = destReelExterne
										.getExpDestExternePrenom()
										+ " "
										+ destReelExterne
												.getExpDestExterneNom();
								System.out.println("dest :" + dest);
								if (!destinataire.toString().contains(dest)) {
									destinataire.append(" / ");
									destinataire.append(dest);
									destR = new ListeDestinatairesModel();
									destR.setDestinataireId(idDestReelLdap);
									destR.setDestinataireName(dest);
									System.out
											.println("type1 AH AJOUT " + dest);
									System.out
											.println("============== affecter annotations Externe ===============");

									List<Annotation> l = appMgr
											.listeAnnotationParDestinataireEtTransactionReell(
													idDestReelLdap,
													courrierInformations
															.getDossierID());

									if (l != null) {
										List<String> listAnnotationDest = new ArrayList<String>();
										for (Annotation a : l) {

											listAnnotationDest
													.add(String.valueOf(a
															.getAnnotationId()));
											System.out
													.println("listAnnotationDest = "
															+ listAnnotationDest);
										}
										destR.setListeAnnotations(listAnnotationDest);
									}
									System.out
											.println("destR.ListeAnnotations = "
													+ destR.getListeAnnotations());

									System.out
											.println("============== Fin : affecter annotations Externe===============");
									destinatairesAvecAnnotations.add(destR);

									System.out
											.println("==============4===============");
									ItemSelected itemSelected = new ItemSelected();
									itemSelected
											.setItemSelectedId(idDestReelLdap);
									itemSelected.setItemSelectedName(dest);
									listSelectedItem.add(itemSelected);

									System.out
											.println("============== ===============");
								}
							} else if (destReelExterne.getTypeutilisateur()
									.getTypeUtilisateurId().equals(2)) {
								String dest = destReelExterne
										.getExpDestExterneNom();
								if (!destinataire.toString().contains(dest)) {
									destinataire.append(" / ");
									destinataire.append(destReelExterne
											.getExpDestExterneNom());
									// KHA ajouté 08-02-2019
									destR = new ListeDestinatairesModel();
									destR.setDestinataireId(idDestReelLdap);
									destR.setDestinataireName(dest);
									System.out
											.println("type2 AH AJOUT " + dest);

									System.out
											.println("============== affecter annotations destReelExterne ===============");
									System.out.println("idDestReelLdap= "
											+ idDestReelLdap);
									System.out.println("Dossier id ="
											+ courrierInformations
													.getDossierID());
									List<Annotation> l = appMgr
											.listeAnnotationParDestinataireEtTransactionReell(
													idDestReelLdap,
													courrierInformations
															.getDossierID());
									System.out.println("KHA===> l size =  "
											+ l.size());
									if (l != null) {
										List<String> listAnnotationDest = new ArrayList<String>();
										for (Annotation a : l) {

											listAnnotationDest
													.add(String.valueOf(a
															.getAnnotationId()));
											System.out
													.println("listAnnotationDest = "
															+ listAnnotationDest);
										}
										destR.setListeAnnotations(listAnnotationDest);
									}
									System.out
											.println("destR.ListeAnnotations = "
													+ destR.getListeAnnotations());

									System.out
											.println("============== Fin : affecter annotations destReelExterne===============");

									destinatairesAvecAnnotations.add(destR);

									System.out
											.println("==============5===============");
									ItemSelected itemSelected = new ItemSelected();
									itemSelected
											.setItemSelectedId(idDestReelLdap);
									itemSelected.setItemSelectedName(dest);
									listSelectedItem.add(itemSelected);
									System.out
											.println("============== ===============");
								}
							}
						} else {
							destinataire.append("--------");
						}
					}
				} else {
					// courrier qui n'a pas des étaps de validation
					System.out.println("JS-->size listTransactionDestination"
							+ listTransactionDestination.size());
					if (!listTransactionDestination.isEmpty()) {
						for (TransactionDestination transactionDestination : listTransactionDestination) {
							System.out.println("JS-->idExpDest" + idExpDest);
							System.out
									.println("JS-->TransactionDestination.getID.getIDExpdest :"
											+ transactionDestination.getId()
													.getIdExpDest());
							
							if (type.equals("Interne-Person")) {
								System.out
										.println("JS==> Courrier qui n'as pas des téapes de validation (Interne-Person)");
								System.out.println("LDAP :" + ldap);
								if (ldap.equals(vb.getPerson().getId())) {
									courrierInformations.setCourrierRecu(1);
								}
								courrierInformations
										.setTransactionDestination(transactionDestination);
								// destinataire = new StringBuilder(" / ");

								Person person = vb.getHashMapAllUser()
										.get(ldap);
								System.out.println(" person.getCn() = "
										+ person.getCn());
								if (!destinataire.toString().contains(
										person.getCn())) {
									destinataire.append(" / ");
									destinataire.append(person.getCn());
									// KHA - ajouté 08-02-2019
									destR = new ListeDestinatairesModel();
									destR.setDestinataireId(ldap);
									destR.setDestinataireName(person.getCn());
									System.out
											.println("============== affecter annotations Person 2===============");

									// List<Annotation> l =
									// appMgr.listeAnnotationParDestinataireEtTransaction(ldap,courrierInformations.getDossierID());
									List<Annotation> l = new ArrayList<Annotation>();
									if (appMgr
											.listeAnnotationParDestinataireEtTransactionReell(
													ldap, courrierInformations
															.getDossierID()) != null) {
										System.out
												.println(" KHA :Person2 Dans  listeAnnotationParDestinataireEtTransactionReell");
										l = appMgr
												.listeAnnotationParDestinataireEtTransactionReell(
														idDestReelLdap,
														courrierInformations
																.getDossierID());
									} else {

										l = appMgr
												.listeAnnotationParDestinataireEtTransactionExpDest(
														ldap,
														courrierInformations
																.getDossierID());
										System.out
												.println(" KHA :Person2 Dans  listeAnnotationParDestinataireEtTransactionExpDest");
									}
									if (l != null) {
										List<String> listAnnotationDest = new ArrayList<String>();
										for (Annotation a : l) {

											listAnnotationDest
													.add(String.valueOf(a
															.getAnnotationId()));
											System.out
													.println("listAnnotationDest = "
															+ listAnnotationDest);
										}
										destR.setListeAnnotations(listAnnotationDest);
									}
									System.out
											.println("destR.ListeAnnotations = "
													+ destR.getListeAnnotations());

									System.out
											.println("============== Fin : affecter annotations Person 2===============");

									destinatairesAvecAnnotations.add(destR);

									System.out
											.println("==============6===============");
									ItemSelected itemSelected = new ItemSelected();
									itemSelected.setItemSelectedId(ldap);
									itemSelected.setItemSelectedName(person
											.getCn());
									listSelectedItem.add(itemSelected);
									Object object = (Object) person;
									listSelectedObject.add(object);
									listSelectedPerson.add(person);
									System.out
											.println("============== ===============");

								}
							} else if (type.equals("Interne-Unité")) {
								if (vb.getPerson().isResponsable()
										&& ldap.equals(vb.getPerson()
												.getAssociatedDirection()
												.getIdUnit())) {
									courrierInformations.setCourrierRecu(1);
								}
								courrierInformations
										.setTransactionDestination(transactionDestination);
								// destinataire = new StringBuilder(" / ");
								Unit unit = vb.getHashMapUnit().get(ldap);
								if (!destinataire.toString().contains(
										unit.getNameUnit())) {
									destinataire.append(" / ");
									destinataire.append(unit.getNameUnit());
									// KHA - ajouté 08-02-2019
									destR = new ListeDestinatairesModel();
									destR.setDestinataireId(ldap);
									destR.setDestinataireName(unit
											.getNameUnit());
									System.out
											.println("============== affecter annotations  unit 2===============");

									// List<Annotation> l =
									// appMgr.listeAnnotationParDestinataireEtTransaction(ldap,courrierInformations.getDossierID());
									List<Annotation> l = new ArrayList<Annotation>();
									if (appMgr
											.listeAnnotationParDestinataireEtTransactionReell(
													ldap, courrierInformations
															.getDossierID()) != null) {
										System.out
												.println(" KHA :unit2 Dans  listeAnnotationParDestinataireEtTransactionReell");

										System.out
												.println(" 2 KHA===> Destinataire reel enregistre dans table transactionDestinationRelle");
										l = appMgr
												.listeAnnotationParDestinataireEtTransactionReell(
														idDestReelLdap,
														courrierInformations
																.getDossierID());
									} else {
										System.out
												.println(" KHA :unit2 Dans  listeAnnotationParDestinataireEtTransactionExpDest");

										l = appMgr
												.listeAnnotationParDestinataireEtTransactionExpDest(
														ldap,
														courrierInformations
																.getDossierID());
										System.out
												.println(" 2 KHA===> Destinataire reel enregistre dans table expdest");
									}
									if (l != null) {
										List<String> listAnnotationDest = new ArrayList<String>();
										for (Annotation a : l) {

											listAnnotationDest
													.add(String.valueOf(a
															.getAnnotationId()));
											System.out
													.println("listAnnotationDest = "
															+ listAnnotationDest);
										}
										destR.setListeAnnotations(listAnnotationDest);
									}
									System.out
											.println("destR.ListeAnnotations = "
													+ destR.getListeAnnotations());

									System.out
											.println("============== Fin : affecter annotations unit 2===============");

									destinatairesAvecAnnotations.add(destR);

									System.out
											.println("==============7===============");
									ItemSelected itemSelected = new ItemSelected();

									itemSelected.setItemSelectedId(ldap);
									itemSelected.setItemSelectedName(unit
											.getNameUnit());
									listSelectedItem.add(itemSelected);
									Object object = (Object) unit;
									listSelectedObject.add(object);
									listSelectetdUnit.add(unit);
									System.out
											.println("============== ===============");

									// break;
								}
								

							} else if (type.equals("Interne-Boc")) {
								if (vb.getPerson().isBoc()) {
									courrierInformations.setCourrierRecu(1);
									courrierInformations
											.setTransactionDestination(transactionDestination);
								}
								// KHA - modifié 08-02-2019
								if (!destinataire.toString().contains(
										vb.getCentralBoc().getNameBOC())) {
									destinataire.append(" / ");
									destinataire.append(vb.getCentralBoc()
											.getNameBOC());
									destR = new ListeDestinatairesModel();
									destR.setDestinataireId(ldap);
									destR.setDestinataireName(vb
											.getCentralBoc().getNameBOC());
									System.out
											.println("============== affecter annotations  intern boc===============");

									// List<Annotation> l =
									// appMgr.listeAnnotationParDestinataireEtTransaction(ldap,courrierInformations.getDossierID());
									List<Annotation> l = new ArrayList<Annotation>();
									if (appMgr
											.listeAnnotationParDestinataireEtTransactionReell(
													ldap, courrierInformations
															.getDossierID()) != null) {
										System.out
												.println(" 2 KHA===> Destinataire reel enregistre dans table transactionDestinationRelle");
										l = appMgr
												.listeAnnotationParDestinataireEtTransactionReell(
														idDestReelLdap,
														courrierInformations
																.getDossierID());
									} else {

										l = appMgr
												.listeAnnotationParDestinataireEtTransactionExpDest(
														ldap,
														courrierInformations
																.getDossierID());
										System.out
												.println(" 2 KHA===> Destinataire reel enregistre dans table expdest");
									}
									if (l != null) {
										List<String> listAnnotationDest = new ArrayList<String>();
										for (Annotation a : l) {

											listAnnotationDest
													.add(String.valueOf(a
															.getAnnotationId()));
											System.out
													.println("listAnnotationDest = "
															+ listAnnotationDest);
										}
										destR.setListeAnnotations(listAnnotationDest);
									}
									
									destinatairesAvecAnnotations.add(destR);

									System.out
											.println("==============8===============");
									ItemSelected itemSelected = new ItemSelected();
									itemSelected.setItemSelectedId(ldap);
									itemSelected.setItemSelectedName(vb
											.getCentralBoc().getNameBOC());
									listSelectedItem.add(itemSelected);

									System.out
											.println("============== ===============");
								}

							} else if (type.equals("Externe")) {
								if (typeUser.equals(1)) {
									if (!destinataire.toString().contains(
											nom + " " + prenom + " (PP)")) {
										destinataire.append(" / ");
										destinataire.append(nom + " " + prenom
												+ " (PP)");
										// KHA - ajouté 08-02-2019
										destR = new ListeDestinatairesModel();
										destR.setDestinataireId(ldap);
										destR.setDestinataireName(nom + " "
												+ prenom + " (PP)");
										System.out
												.println("============== affecter annotations  externe PP===============");

										List<Annotation> l = appMgr
												.listeAnnotationParDestinataireEtTransactionReell(
														ldap,
														courrierInformations
																.getDossierID());

										if (l != null) {
											List<String> listAnnotationDest = new ArrayList<String>();
											for (Annotation a : l) {

												listAnnotationDest
														.add(String.valueOf(a
																.getAnnotationId()));
												System.out
														.println("listAnnotationDest = "
																+ listAnnotationDest);
											}
											destR.setListeAnnotations(listAnnotationDest);
										}
									
										destinatairesAvecAnnotations.add(destR);

										System.out
												.println("==============9===============");
										ItemSelected itemSelected = new ItemSelected();
										itemSelected.setItemSelectedId(ldap);
										itemSelected.setItemSelectedName(nom
												+ " " + prenom);
										listSelectedItem.add(itemSelected);
										Pp pp = (Pp) appMgr
												.getPPByReferenceExpediteur(
														ldap).get(0);
										Object object = (Object) pp;
										listSelectedObject.add(object);
										listSelectetdPP.add(pp);

										System.out
												.println("============== ===============");

									}
								} else {
									if (!destinataire.toString().contains(
											nom + " (PM)")) {

										destinataire.append(" / ");
										destinataire.append(nom + " (PM)");
										// KHA - ajouté 08-02-2019
										destR = new ListeDestinatairesModel();
										destR.setDestinataireId(ldap);
										destR.setDestinataireName(nom + " (PM)");
										System.out
												.println("============== affecter annotations  externe PM===============");

										List<Annotation> l = appMgr
												.listeAnnotationParDestinataireEtTransactionReell(
														ldap,
														courrierInformations
																.getDossierID());

										if (l != null) {
											List<String> listAnnotationDest = new ArrayList<String>();
											for (Annotation a : l) {

												listAnnotationDest
														.add(String.valueOf(a
																.getAnnotationId()));
												System.out
														.println("listAnnotationDest = "
																+ listAnnotationDest);
											}
											destR.setListeAnnotations(listAnnotationDest);
										}
										System.out
												.println("destR.ListeAnnotations = "
														+ destR.getListeAnnotations());

										System.out
												.println("============== Fin : affecter annotations externe PM===============");

										destinatairesAvecAnnotations.add(destR);
										System.out
												.println("==============10===============");
										ItemSelected itemSelected = new ItemSelected();
										itemSelected.setItemSelectedId(ldap);
										itemSelected.setItemSelectedName(nom
												+ " " + prenom);
										listSelectedItem.add(itemSelected);
										Pm pm = (Pm) appMgr
												.getPMByReferenceExpediteur(
														ldap).get(0);
										Object object = (Object) pm;
										listSelectedObject.add(object);
										listSelectetdPM.add(pm);
										System.out
												.println("============== ===============");

									}
								}
							}
						
						}
					}
					if (courrierInformations.getCourrierRecu() == 1
							&& (etatID.equals(10) || etatID.equals(2))) {

						courrierInformations.setCourrierAValider(1);
					} 
//					
					if (vb.getPerson().getAssociatedBOC() != null
							&& courrierInformations.getCourrierRecu() == 1
							&& etatID.equals(5) && etatID.equals(2)) {
						courrierInformations.setCourrierAValider(1);
					}
				}
				// KHA =========
				courrierInformations.setListSelectedItemDest(listSelectedItem);
				courrierInformations.setListSelectedObject(listSelectedObject);

				courrierInformations.setListSelectedPerson(listSelectedPerson);
				courrierInformations.setListSelectetdUnit(listSelectetdUnit);
				courrierInformations.setListSelectetdBoc(listSelectetdBoc);
				// ========
				// ========
			}

		}

		destinataire.delete(0, 3);
		System.out.println("Destinataiiiiire :" + destinataire.toString());
		courrierInformations.setCourrierDestinataireReelle(destinataire
				.toString());
		
		courrierInformations
				.setListeDestinatairesAvecAnnotations(destinatairesAvecAnnotations);
	
	}
	
	@SuppressWarnings("unchecked")
	public long getRecords() {

		return (listCourrierAoConsultationDM != null && listCourrierAoConsultationDM.getWrappedData() != null) ? ((List<CourrierInformations>) listCourrierAoConsultationDM
				.getWrappedData()).size() : 0;
	}
			
	/**
	 * Getter and Setter
	 */

	public AoConsultation getAoConsultation() {
		return aoConsultation;
	}

	public void setAoConsultation(AoConsultation aoConsultation) {
		this.aoConsultation = aoConsultation;
	}

	public VariableGlobale getVb() {
		return vb;
	}
	public void setVb(VariableGlobale vb) {
		this.vb = vb;
	}
	public long getNombreCourrier() {
		return nombreCourrier;
	}
	public void setNombreCourrier(int nombreCourrier) {
		this.nombreCourrier = nombreCourrier;
	}

	public DataModel getListCourrierAoConsultationDM() {
		return listCourrierAoConsultationDM;
	}
	public void setListCourrierAoConsultationDM(
			DataModel listCourrierAoConsultationDM) {
		this.listCourrierAoConsultationDM = listCourrierAoConsultationDM;
	}
	public CourrierInformations getCourrierInformations() {
		return courrierInformations;
	}
	public void setCourrierInformations(CourrierInformations courrierInformations) {
		this.courrierInformations = courrierInformations;
	}
	public List<CourrierInformations> getListeCourriers() {
		return listeCourriers;
	}
	public void setListeCourriers(List<CourrierInformations> listeCourriers) {
		this.listeCourriers = listeCourriers;
	}
	public void setRecords(long records) {
		this.records = records;
	}
	public String getDateHeur() {
		return dateHeur;
	}
	public void setDateHeur(String dateHeur) {
		this.dateHeur = dateHeur;
	}
	public String getDateHeurLimite() {
		return dateHeurLimite;
	}
	public void setDateHeurLimite(String dateHeurLimite) {
		this.dateHeurLimite = dateHeurLimite;
	}
	public String getDateHeurComm() {
		return dateHeurComm;
	}
	public void setDateHeurComm(String dateHeurComm) {
		this.dateHeurComm = dateHeurComm;
	}
	public String getDateHeurProl() {
		return dateHeurProl;
	}
	public void setDateHeurProl(String dateHeurProl) {
		this.dateHeurProl = dateHeurProl;
	}


}
