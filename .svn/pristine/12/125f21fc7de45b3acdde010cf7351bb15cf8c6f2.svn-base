package xtensus.beans.common.GBO;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import xtensus.beans.common.VariableGlobale;
import xtensus.beans.utils.CourrierInformations;
import xtensus.entity.Courrier;
import xtensus.entity.Etat;
import xtensus.entity.Transaction;
import xtensus.ldap.model.Person;
import xtensus.ldap.model.Unit;
import xtensus.services.ApplicationManager;


@Component
@Scope("request")
	public class ValisePointageCourrierBean {

	private ApplicationManager appMgr;
	private int nombreCourrier;
	private int nombreCourrierAffectes;
	private DataModel listeCourriersAffectesAValiseDM;
	private DataModel listeCourriersPointesValiseDM;
	private String libelleEtat;
    private CourrierInformations cv;
	private CourrierInformations valiseCourriers;
	private List<CourrierInformations> listeCourriersAffectesAValise;
	private List<CourrierInformations> listeCourriersPointesAValise;
	private Transaction	tr;
	private boolean status;
	private boolean status1;
	private CourrierInformations courriersParValise;
	private List<Integer> listIdBocMembers;
	private List<Integer> listIdsSousUnit;
	private List<Integer> listIdsSubordonne;


@SuppressWarnings("unused")
	
	private long records = 0;
	@Autowired
	private VariableGlobale vb;
	@Autowired
    private CourrierConsultationJourBean courrierConsultationRecentBean;

	private long records2=0;
	private Date courrierDatePointage;
	private HashMap<String, Object> filterMap;
	private String sortField;
	private boolean descending;
	private Date dateDebut;
	private Date dateFin;
	private String consultationCourrierSecretaire;
	private String consultationCourrierSubordonne;
	private String consultationCourrierSousUnite;
	private int idUser;
	private String type;
	private String type1;
	private String typeSecretaire;
	private boolean dernierPointage;
	private Courrier courrier;
	public ValisePointageCourrierBean() {

	}
	@Autowired
	public ValisePointageCourrierBean(
			@Qualifier("applicationManager") ApplicationManager appMgr) {

		this.appMgr = appMgr;
		listeCourriersAffectesAValiseDM = new ListDataModel();
		listeCourriersPointesValiseDM= new ListDataModel();
		valiseCourriers=new CourrierInformations();
		courriersParValise=new CourrierInformations();
		listeCourriersPointesAValise=new ArrayList<CourrierInformations>();
		listeCourriersAffectesAValise=new ArrayList<CourrierInformations>();
		tr=new Transaction();
		cv=new CourrierInformations();
		courrierDatePointage= new Date();
	}

	@PostConstruct
	public void Initialize() {
		valiseCourriers = new CourrierInformations();
		listeCourriersAffectesAValiseDM = new ListDataModel();
		listeCourriersPointesValiseDM= new ListDataModel();
		courriersParValise=new CourrierInformations();
		listeCourriersPointesAValise=new ArrayList<CourrierInformations>();
		listeCourriersAffectesAValise=new ArrayList<CourrierInformations>();
		tr=new Transaction();
		cv=new CourrierInformations();
		
		try {
			
			valiseCourriers = vb.getCourrierInformations();
			System.out.println("2019-06-20 : "+valiseCourriers);
	 	   System.out.println("2019-06-20 "+valiseCourriers.getCourrier().getIdCourrier());
	 	//**
			// XTE : consultation courrier secretaire
			consultationCourrierSecretaire = appMgr.listVariablesById(3).get(0)
					.getVaraiablesValeur();
			// XTE : consultation courier subordonne
			consultationCourrierSubordonne = appMgr.listVariablesById(4).get(0)
					.getVaraiablesValeur();
			// XTE : consultation courier sous unitee
			consultationCourrierSousUnite = appMgr.listVariablesById(5).get(0)
					.getVaraiablesValeur();
			// identify connected user
			idUser = vb.getPerson().getId();
			type = "";
			type1 = "";
			if (vb.getPerson().isBoc()) {
				listIdBocMembers = new ArrayList<Integer>();
				List<Person> listBocMembers = vb.getPerson().getAssociatedBOC()
						.getMembersBOC();
				for (Person person : listBocMembers) {
					System.out.println("ID PErsonne :" + person.getId());
					System.out.println("Nom Personne :" + person.getNom()
							+ "   Prenom Personne :" + person);
					listIdBocMembers.add(person.getId());
				}
				type = "boc_" + vb.getPerson().getAssociatedBOC().getIdBOC();
				type1 = "";
			} else if (vb.getPerson().isResponsable()) {
				type = "unit_"
						+ vb.getPerson().getAssociatedDirection().getIdUnit();
				type1 = "sub_" + idUser;
				// NEW

				for (Unit unit : vb.getPerson().getAssociatedDirection()
						.getListUnitsChildUnit()) {
					
					listIdsSousUnit.add(unit.getIdUnit());
					 
					try {
						listIdsSubordonne
								.add(unit.getResponsibleUnit().getId());
						
					} catch (Exception e) {
						System.out.println("#Sub-Unit without Responsible");
					}

				}
				// FIn NEW
				try {
					typeSecretaire = "secretary_"
							+ vb.getPerson().getAssociatedDirection()
									.getSecretaryUnit().getId();
					
				} catch (NullPointerException e) {
					consultationCourrierSecretaire = "Non";
				}

			} else if (vb.getPerson().isSecretary()) {
				type = "secretary_" + idUser;
				type1 = "unit_"
						+ vb.getPerson().getAssociatedDirection().getIdUnit();
			} else if (vb.getPerson().isAgent()) {
				type = "agent_" + idUser;
				type1 = "";
			}
	 	//********* Début *******************//
			Calendar calendar = Calendar.getInstance();
			calendar.set(Calendar.DAY_OF_MONTH, 1);
			calendar.set(Calendar.HOUR_OF_DAY, 0);
			calendar.set(Calendar.MINUTE, 0);
			calendar.set(Calendar.SECOND, 0);
			calendar.set(Calendar.MILLISECOND, 0);
			dateDebut = calendar.getTime();
			
			//********* Fin *********************//
			calendar.set(Calendar.HOUR_OF_DAY, 23);
			calendar.set(Calendar.MINUTE, 59);
			calendar.set(Calendar.SECOND, 59);
			calendar.set(Calendar.MILLISECOND, 999);
			dateFin = calendar.getTime();
	 	   	listeCourriersAffectesAValise = appMgr.findCourrierEnvoyerBOCByCriteria(
					filterMap, sortField, descending, 88, dateDebut,
					dateFin, type, type1, listIdBocMembers,
					"Tout les courriers", "tous",
					0, 10, "T", false, vb.getDbType(),valiseCourriers.getCourrier().getIdCourrier(),0,0);
			System.out.println("################taille liste Courriers Affectes : "+listeCourriersAffectesAValise.size());
			
			
			
			
			for (CourrierInformations courrierInformations : listeCourriersAffectesAValise) {
				try {
					courrierConsultationRecentBean.searchExpediteurDestinataire(courrierInformations);
					System.out.println("L : "
							+ courrierInformations.getCourrierID()
							+ " du  "
							+ courrierInformations.getCourrierExpediteur()
							+ " à "
							+ courrierInformations
									.getCourrierDestinataireReelle());
				} catch (Exception e) {
					e.printStackTrace();
					System.out.println("######CAUSED BY : "
							+ courrierInformations.getCourrierReference());

					continue;
				}
			}
			nombreCourrierAffectes=listeCourriersAffectesAValise.size();
			listeCourriersAffectesAValiseDM.setWrappedData(listeCourriersAffectesAValise);

			listeCourriersPointesAValise = appMgr.findCourrierEnvoyerBOCByCriteria(
					filterMap, sortField, descending, 10, dateDebut,
					dateFin, type, type1, listIdBocMembers,
					"Tout les courriers", "tous",
					0, 10, "T", false, vb.getDbType(),valiseCourriers.getCourrier().getIdCourrier(),0,0);
			System.out.println("###################taille liste Courriers Non Affectées : "+listeCourriersPointesAValise.size());
			for (CourrierInformations courrierInformations : listeCourriersPointesAValise) {
				try {
					courrierConsultationRecentBean.searchExpediteurDestinataire(courrierInformations);
					System.out.println("L : "
							+ courrierInformations.getCourrierID()
							+ " du  "
							+ courrierInformations.getCourrierExpediteur()
							+ " à "
							+ courrierInformations
									.getCourrierDestinataireReelle());
				} catch (Exception e) {
					e.printStackTrace();
					System.out.println("######CAUSED BY : "
							+ courrierInformations.getCourrierReference());

					continue;
				}
			}
			nombreCourrier = listeCourriersPointesAValise.size();
			
			listeCourriersPointesValiseDM.setWrappedData(listeCourriersPointesAValise);
				
			int refTransaction = valiseCourriers.getTransactionID();
			System.out.println("ref transaction : "+refTransaction);
			List<Transaction> transaction=appMgr.getListTransactionByIdTransaction(refTransaction);
			if (transaction != null)
			{
				tr = transaction.get(0);
				
			}
			System.out.println("/////////////////transaction" + tr.getEtat().getEtatId());
			libelleEtat = tr.getEtat().getEtatLibelle();
			System.out.println("/////////////////libelleEtat" + libelleEtat);
					}  
		
		catch (Exception e) {		
			e.printStackTrace();
		}
	}
	
	
		public void move() {
		
		System.out.println(" Pointage valise Fonction MOVE ");
		
			CourrierInformations courrierInfo = new CourrierInformations();
			try {
				courrierInfo = (CourrierInformations) listeCourriersAffectesAValiseDM.getRowData();
				listeCourriersAffectesAValise.remove(courrierInfo);
				listeCourriersPointesAValise.add(0, courrierInfo);
				System.out.println("#########listeCourriersPointesAValise  ===  "  + listeCourriersPointesAValise.size());
				listeCourriersPointesValiseDM.setWrappedData(listeCourriersPointesAValise);
				listeCourriersAffectesAValiseDM.setWrappedData(listeCourriersAffectesAValise);
				nombreCourrier=listeCourriersPointesAValise.size();
				nombreCourrierAffectes= listeCourriersAffectesAValise.size();
			} catch (Exception e) {
				e.printStackTrace();
				System.out.println("*******ErreurDeSelection*******");
				
			}

		
			
	}
		
		public void remove(){
			System.out.println(" Pointage valise Fonction REMOVE ");
			
			CourrierInformations courrierInfo = new CourrierInformations();
				try {
					System.out.println("########### listeCourriersPointesValiseDM.size() ===  "  + listeCourriersPointesAValise.size());
					courrierInfo = (CourrierInformations) listeCourriersPointesValiseDM.getRowData();
					System.out.println(" Pointage valise Fonction REMOVE dans try ");
					System.out.println("#################courrierInfo   ===  " + courrierInfo);
					listeCourriersPointesAValise.remove(courrierInfo);
					System.out.println("########### listeCourriersPointesValiseDM.size()après remove ===  "  + listeCourriersPointesAValise.size());
					listeCourriersAffectesAValise.add(0, courrierInfo);
					System.out.println("########### listeCourriersAffectesAValise.size()après remove ===  "  + listeCourriersAffectesAValise.size());
					listeCourriersAffectesAValiseDM.setWrappedData(listeCourriersAffectesAValise);
					listeCourriersPointesValiseDM.setWrappedData(listeCourriersPointesAValise);
					nombreCourrier=listeCourriersPointesAValise.size();
					nombreCourrierAffectes= listeCourriersAffectesAValise.size();

				} catch (Exception e) {
					System.out.println("*******ErreurDeSelection*******");
				}
			
			
		}
		
		
		public void confirmerFinPointage(){
			courrierDatePointage = new Date();
			dernierPointage=false;
			
			try {
				Courrier v = valiseCourriers.getCourrier();
				System.out.println("######## v id == "+ v.getIdCourrier());
				courrier = (Courrier) appMgr.getCourrierByIdCourrier(v.getIdCourrier()).get(0);
				valiseCourriers.setDatePointage(courrier.getCourrierDateReponse());
				System.out.println("###### listeCourriersAffectesAValise.size() == " + listeCourriersAffectesAValise.size());
				if(listeCourriersAffectesAValise!= null && listeCourriersAffectesAValise.size()==0)
				{
					System.out.println("Fin Pointage");
					dernierPointage=true;
					courrier.setCourrierDatePointage(courrierDatePointage);
					appMgr.update(courrier);
				}
			} catch (Exception e) {
						e.printStackTrace();
				}
			}		
		
		
		public void affecter(){
			System.out.println("##############Dans Pointer#############");
			status=false;
			status1=false;
			try {
				
				courrierDatePointage = new Date();
				System.out.println("###########courrierDatePointage################" + courrierDatePointage);
				//suppression des données existantes
				Courrier courrier=new Courrier();
				System.out.println("##########listeCourriersPointesAValise === " + listeCourriersPointesAValise.size());
			if(listeCourriersPointesAValise != null && listeCourriersPointesAValise.size()>0 ){
			for(CourrierInformations donnee :listeCourriersPointesAValise){
				System.out.println("########## donnee == " + donnee);
				System.out.println("##########donnee.getIDCourrier  ===  " + donnee.getCourrierID());	
				//Courrier c=donnee.getCourrier();
				System.out.println("########  courrier  == " + courrier);
				courrier= appMgr.getCourrierByIdCourrier(donnee.getCourrierID()).get(0);
					System.out.println(courrier);
					courrier.setCourrierDatePointage(courrierDatePointage);
					appMgr.update(courrier);
					System.out.println("#########courrierDatePointage  ===  " + courrier.getCourrierDatePointage());	
					}
				Courrier valise = appMgr.getCourrierByIdCourrier(valiseCourriers.getCourrierID()).get(0);
				valise.setCourrierDatePointage(courrierDatePointage);
				appMgr.update(valise);
				setStatus(true);
				System.out.println("#############status  ==  " + status);
				}
		
			System.out.println("############# succès de pointage");
			
			if(listeCourriersAffectesAValise != null && listeCourriersAffectesAValise.size()>0 ){
				for(CourrierInformations donnee :listeCourriersAffectesAValise){
						
					Courrier c=donnee.getCourrier();
					System.out.println("###### c.getIdCourrier() == " + c.getIdCourrier());
					
					courrier=(Courrier) appMgr.getCourrierByIdCourrier(c.getIdCourrier()).get(0);
					System.out.println(donnee);
					System.out.println("###### c.getIdCourrier() == " + c.getIdCourrier());
					courrier.setCourrierDatePointage(null);
					appMgr.update(courrier);
					System.out.println("#########courrierDatePointage  ===  " + courrier.getCourrierDatePointage());	
						} 	
					
					setStatus(true);
					System.out.println("#############status  ==  " + status);}
			
			if(dernierPointage){
				System.out.println("Modification de l'état de la valise");
				valiseCourriers = vb.getCourrierInformations();

				Etat etatTransmise = new Etat();
				etatTransmise.setEtatId(14);
				List<Transaction> transactions = appMgr
						.getListTransactionByIdTransaction(valiseCourriers.getTransactionID());
				if (transactions != null && transactions.size() > 0) {
					Transaction transaction = transactions.get(0);
					transaction.setEtat(etatTransmise);
					try {
						appMgr.update(transaction);
					} catch (Exception e) {
						e.printStackTrace();
					}

				}
			}
			
			
			
				System.out.println("############# succès de pontage");
				
		}
			catch (Exception e) {
						e.printStackTrace();
					}	
			
		
				
		}
	
	
	
	@SuppressWarnings("unchecked")
	public long getRecords() {

		return (listeCourriersPointesValiseDM != null && listeCourriersPointesValiseDM.getWrappedData() != null) ? ((List<CourrierInformations>) listeCourriersPointesValiseDM
				.getWrappedData()).size() : 0;
	}
			
	/**
	 * Getter and Setter
	 */


	public VariableGlobale getVb() {
		return vb;
	}
	public void setVb(VariableGlobale vb) {
		this.vb = vb;
	}
	public long getNombreCourrier() {
		return nombreCourrier;
	}
	public void setNombreCourrier(int nombreCourrier) {
		this.nombreCourrier = nombreCourrier;
	}

	public void setRecords(long records) {
		this.records = records;
	}
	public void setValiseCourriers(CourrierInformations valiseCourriers) {
		this.valiseCourriers = valiseCourriers;
	}
	public CourrierInformations getValiseCourriers() {
		return valiseCourriers;
	}
	public void setCourriersParValise(CourrierInformations courriersParValise) {
		this.courriersParValise = courriersParValise;
	}
	public CourrierInformations getCourriersParValise() {
		return courriersParValise;
	}
	
	public DataModel getListeCourriersPointesValiseDM() {
		return listeCourriersPointesValiseDM;
	}
	public void setListeCourriersPointesValiseDM(
			DataModel listeCourriersPointesValiseDM) {
		this.listeCourriersPointesValiseDM = listeCourriersPointesValiseDM;
	}
	public List<CourrierInformations> getListeCourriersPointesAValise() {
		return listeCourriersPointesAValise;
	}
	public void setListeCourriersPointesAValise(
			List<CourrierInformations> listeCourriersPointesAValise) {
		this.listeCourriersPointesAValise = listeCourriersPointesAValise;
	}
	public void setListeCourriersAffectesAValise(
			List<CourrierInformations> listeCourriersAffectesAValise) {
		this.listeCourriersAffectesAValise = listeCourriersAffectesAValise;
	}
	public List<CourrierInformations> getListeCourriersAffectesAValise() {
		return listeCourriersAffectesAValise;
	}
	public DataModel getListeCourriersAffectesAValiseDM() {
		return listeCourriersAffectesAValiseDM;
	}
	public void setListeCourriersAffectesAValiseDM(
			DataModel listeCourriersAffectesAValiseDM) {
		this.listeCourriersAffectesAValiseDM = listeCourriersAffectesAValiseDM;
	}

	public Transaction getTr() {
		return tr;
	}
	public void setTr(Transaction tr) {
		this.tr = tr;
	}

	public String getLibelleEtat() {
		return libelleEtat;
	}
	public void setLibelleEtat(String libelleEtat) {
		this.libelleEtat = libelleEtat;
	}
	public void setNombreCourrierAffectes(int nombreCourrierAffectes) {
		this.nombreCourrierAffectes = nombreCourrierAffectes;
	}
	public int getNombreCourrierAffectes() {
		return nombreCourrierAffectes;
	}
	public void setCv(CourrierInformations cv) {
		this.cv = cv;
	}
	public CourrierInformations getCv() {
		return cv;
	}
	public void setRecords2(long records2) {
		this.records2 = records2;
	}
	@SuppressWarnings("unchecked")
	public long getRecords2() {
		if (listeCourriersAffectesAValiseDM != null && listeCourriersAffectesAValiseDM.getWrappedData() != null)
			records2 = ((List<CourrierInformations>) listeCourriersAffectesAValiseDM.getWrappedData()).size();
			
		else
			records2 = 0;
		return records2;
	}
	public void setStatus(boolean status) {
		this.status = status;
	}
	public boolean isStatus() {
		return status;
	}
	public void setStatus1(boolean status1) {
		this.status1 = status1;
	}
	public boolean isStatus1() {
		return status1;
	}
	public Date getCourrierDatePointage() {
		return courrierDatePointage;
	}
	public void setCourrierDatePointage(Date courrierDatePointage) {
		this.courrierDatePointage = courrierDatePointage;
	}
	public List<Integer> getListIdBocMembers() {
		return listIdBocMembers;
	}
	public void setListIdBocMembers(List<Integer> listIdBocMembers) {
		this.listIdBocMembers = listIdBocMembers;
	}
	public List<Integer> getListIdsSousUnit() {
		return listIdsSousUnit;
	}
	public void setListIdsSousUnit(List<Integer> listIdsSousUnit) {
		this.listIdsSousUnit = listIdsSousUnit;
	}
	public List<Integer> getListIdsSubordonne() {
		return listIdsSubordonne;
	}
	public void setListIdsSubordonne(List<Integer> listIdsSubordonne) {
		this.listIdsSubordonne = listIdsSubordonne;
	}
	public HashMap<String, Object> getFilterMap() {
		return filterMap;
	}
	public void setFilterMap(HashMap<String, Object> filterMap) {
		this.filterMap = filterMap;
	}
	public String getSortField() {
		return sortField;
	}
	public void setSortField(String sortField) {
		this.sortField = sortField;
	}
	public boolean isDescending() {
		return descending;
	}
	public void setDescending(boolean descending) {
		this.descending = descending;
	}
	public Date getDateDebut() {
		return dateDebut;
	}
	public void setDateDebut(Date dateDebut) {
		this.dateDebut = dateDebut;
	}
	public Date getDateFin() {
		return dateFin;
	}
	public void setDateFin(Date dateFin) {
		this.dateFin = dateFin;
	}
	public String getConsultationCourrierSecretaire() {
		return consultationCourrierSecretaire;
	}
	public void setConsultationCourrierSecretaire(
			String consultationCourrierSecretaire) {
		this.consultationCourrierSecretaire = consultationCourrierSecretaire;
	}
	public String getConsultationCourrierSubordonne() {
		return consultationCourrierSubordonne;
	}
	public void setConsultationCourrierSubordonne(
			String consultationCourrierSubordonne) {
		this.consultationCourrierSubordonne = consultationCourrierSubordonne;
	}
	public String getConsultationCourrierSousUnite() {
		return consultationCourrierSousUnite;
	}
	public void setConsultationCourrierSousUnite(
			String consultationCourrierSousUnite) {
		this.consultationCourrierSousUnite = consultationCourrierSousUnite;
	}
	public int getIdUser() {
		return idUser;
	}
	public void setIdUser(int idUser) {
		this.idUser = idUser;
	}
	public String getType() {
		return type;
	}
	public void setType(String type) {
		this.type = type;
	}
	public String getType1() {
		return type1;
	}
	public void setType1(String type1) {
		this.type1 = type1;
	}
	public String getTypeSecretaire() {
		return typeSecretaire;
	}
	public void setTypeSecretaire(String typeSecretaire) {
		this.typeSecretaire = typeSecretaire;
	}
	public CourrierConsultationJourBean getCourrierConsultationRecentBean() {
		return courrierConsultationRecentBean;
	}
	public void setCourrierConsultationRecentBean(
			CourrierConsultationJourBean courrierConsultationRecentBean) {
		this.courrierConsultationRecentBean = courrierConsultationRecentBean;
	}
	public boolean isDernierPointage() {
		return dernierPointage;
	}
	public void setDernierPointage(boolean dernierPointage) {
		this.dernierPointage = dernierPointage;
	}


}
