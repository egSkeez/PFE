package xtensus.beans.common.GBO;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;

import org.ajax4jsf.model.DataVisitor;
import org.ajax4jsf.model.Range;
import org.ajax4jsf.model.SequenceRange;
import org.ajax4jsf.model.SerializableDataModel;
import org.richfaces.model.FilterField;
import org.richfaces.model.Modifiable;
import org.richfaces.model.SortField2;

import xtensus.beans.utils.CourrierDossierListe;
import xtensus.beans.utils.CourrierInformations;

public class DossierCourrierConsulterDataModel extends SerializableDataModel implements Modifiable {
	/**
	 * 
	 */
	private static final long serialVersionUID = -2591737499228714275L;
	private Integer currentPk;
	private Map<Integer, CourrierDossierListe> wrappedData = new HashMap<Integer, CourrierDossierListe>();
	private List<Integer> wrappedKeys = null;
	private Integer rowCount;
	private Integer rowIndex;
	private Integer oldFirstRow = 3;
	private SequenceRange firstRange;
	private Integer firstPage;
	private boolean scrollerWalkVisit;

	// Beans
	private DossierCourrierConsulterBean dossierCourrierConsulter;

	// Filtre recherche
	private String typeCourrierValidationAnnee;
	private Boolean checkedTypeCourrierValidation;
	private String transmissionCourrier;
	private String typeCourrierTraitement;
	private String categorieCourrier;
	private String typeCourrier;
	private String courrierRubrique;

	private boolean moreChoicesAnnee;
	private boolean showExecuteAllButtonAnnee;
	private boolean hideExecuteAllButtonAnnee;
	private boolean hideExecuteAllButton;

	// For filter and Sort
	private String sortField;
	private boolean descending;
	private HashMap<String, Object> filterMap = new HashMap<String, Object>();

	// for calling walk Restrictions
	private boolean walkVisited;
	private boolean countVisited;

	@PostConstruct
	public void init() {
		typeCourrierValidationAnnee = "";
		transmissionCourrier = "Tout les courriers";
		typeCourrierTraitement = "tous";
		categorieCourrier = "T";
		typeCourrier = "Tous";
		courrierRubrique = "6";
		moreChoicesAnnee = false;
		checkedTypeCourrierValidation = false;
		firstPage = 1;
	}

	/**
	 * This method never called from framework. (non-Javadoc)
	 * 
	 * @see org.ajax4jsf.model.ExtendedDataModel#getRowKey()
	 */
	@Override
	public Object getRowKey() {
		return currentPk;
	}

	/**
	 * This method normally called by Visitor before request Data Row.
	 */
	@Override
	public void setRowKey(Object key) {
		this.currentPk = (Integer) key;
	}

	/**
	 * This is main part of Visitor pattern. Method called by framework many
	 * times during request processing.
	 */
	@Override
	public void walk(FacesContext context, DataVisitor visitor, Range range, Object argument) throws IOException {
		System.out.println("IN CRannee WALK");
/*		UIComponent comp = FacesContext.getCurrentInstance().getViewRoot().findComponent("frmCourrierAncien:data1");
		if (comp != null) {
			System.out.println("comp = " + comp.getId());
		} else {
			System.out.println("comp is null");
		}*/
		int firstRow = 0;
		int numberOfRows = 0;
		if (firstRange == null) {
			firstRange = (SequenceRange) range;
		}
		if (scrollerWalkVisit) {
			firstRow = firstRange.getFirstRow();
			numberOfRows = firstRange.getRows();
			range = firstRange;
			firstPage = 1;
		} else {
			firstRow = ((SequenceRange) range).getFirstRow();
			numberOfRows = ((SequenceRange) range).getRows();
		}
		// if (walkVisited == false || firstRow != oldFirstRow || (walkVisited == true && firstRow == 0)) {
		if (walkVisited == false || firstRow != oldFirstRow) {
			System.out.println("IN Annee WALK true");
			walkVisited = true;
			try {
				oldFirstRow = firstRow;
				wrappedKeys = new ArrayList<Integer>();
				for (CourrierDossierListe item : dossierCourrierConsulter.getListCourrier(filterMap,
						sortField, descending, typeCourrier, categorieCourrier, transmissionCourrier,
						typeCourrierTraitement, typeCourrierValidationAnnee, firstRow, numberOfRows, false,
						courrierRubrique)) {
					wrappedKeys.add(item.getCourrier().getIdCourrier());
					wrappedData.put(item.getCourrier().getIdCourrier(), item);
					visitor.process(context, item.getCourrier().getIdCourrier(), argument);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * This method must return actual data rows count from the Data Provider. It
	 * is used by pagination control to determine total number of data items.
	 */

	@Override
	public int getRowCount() {
		if (rowCount == null || countVisited == false) {
			try {
				countVisited = true;
				// if (rowCount == null) {
				if (checkedTypeCourrierValidation) {
					typeCourrierValidationAnnee = "Avalider";
				} else {
					typeCourrierValidationAnnee = "";
				}
				rowCount = courrierConsultation.getCountCourrier("annee", filterMap, transmissionCourrier,
						typeCourrierTraitement, typeCourrier, typeCourrierValidationAnnee, categorieCourrier,
						courrierRubrique, false).intValue();
				// System.out.println("rowcount--Annee--- : " + rowCount);
				// }
				return rowCount;
			} catch (Exception e) {
				e.printStackTrace();
				return 0;
			}
		} else {
			return rowCount;
		}
	}

	@Override
	public void modify(List<FilterField> filterFields, List<SortField2> sortFields) {
		filterMap.clear();
		walkVisited = false;
	}

	@Override
	public CourrierDossierListe getRowData() {
		if (currentPk == null) {
			return null;
		} else {
			CourrierDossierListe ret = wrappedData.get(currentPk);
			if (ret == null) {
				wrappedData.put(currentPk, ret);
				return ret;
			} else {
				return ret;
			}
		}
	}

	/**
	 * Unused rudiment from old JSF staff.
	 */
	@Override
	public int getRowIndex() {
		if (rowIndex == null) {
			return 0;
		}
		return rowIndex;
	}

	/**
	 * Unused rudiment from old JSF staff.
	 */
	@Override
	public Object getWrappedData() {
		throw new UnsupportedOperationException();
	}

	/**
	 * Never called by framework.
	 */
	@Override
	public boolean isRowAvailable() {
		if (currentPk == null) {
			return false;
		} else {
			// return getDataProvider().hasAuctionItemByPk(currentPk);
			return true;
		}
	}

	/**
	 * Unused rudiment from old JSF staff.
	 */
	@Override
	public void setRowIndex(int rowIndex) {
		this.rowIndex = rowIndex;
		// throw new UnsupportedOperationException();
	}

	/**
	 * Unused rudiment from old JSF staff.
	 */
	@Override
	public void setWrappedData(Object data) {
		throw new UnsupportedOperationException();
	}

	/**
	 * This method suppose to produce SerializableDataModel that will be
	 * serialized into View State and used on a post-back. In current
	 * implementation we just mark current model as serialized. In more
	 * complicated cases we may need to transform data to actually serialized
	 * form.
	 */
	public SerializableDataModel getSerializableModel(Range range) {
		if (wrappedKeys != null) {
			return this;
		} else {
			return null;
		}
	}

	/**
	 * This is helper method that is called by framework after model update. In
	 * must delegate actual database update to Data Provider.
	 */
	@Override
	public void update() {
		System.out.println("UPDATE CALL , SO change my Implementation");
	}

	public void permitionWalkVisit(ActionEvent evt) {
		walkVisited = false;
		countVisited = false;
		scrollerWalkVisit = true;
	}

	public void permitionWalkScroller(ActionEvent evt) {
		scrollerWalkVisit = false;
	}

	public void permitionWalk() {
		walkVisited = false;
	}

	// Geeters & Setters ....
	public String getTypeCourrierValidationAnnee() {
		return typeCourrierValidationAnnee;
	}

	public void setTypeCourrierValidationAnnee(String typeCourrierValidationAnnee) {
		this.typeCourrierValidationAnnee = typeCourrierValidationAnnee;
	}

	public String getTransmissionCourrier() {
		return transmissionCourrier;
	}

	public void setTransmissionCourrier(String transmissionCourrier) {
		this.transmissionCourrier = transmissionCourrier;
	}

	public String getTypeCourrierTraitement() {
		return typeCourrierTraitement;
	}

	public void setTypeCourrierTraitement(String typeCourrierTraitement) {
		this.typeCourrierTraitement = typeCourrierTraitement;
	}

	public String getTypeCourrier() {
		return typeCourrier;
	}

	public void setTypeCourrierAnnee(String typeCourrier) {
		this.typeCourrier = typeCourrier;
	}

	public boolean isMoreChoicesAnnee() {
		return moreChoicesAnnee;
	}

	public void setMoreChoicesAnnee(boolean moreChoicesAnnee) {
		this.moreChoicesAnnee = moreChoicesAnnee;
	}

	public boolean isShowExecuteAllButtonAnnee() {
		return showExecuteAllButtonAnnee;
	}

	public void setShowExecuteAllButtonAnnee(boolean showExecuteAllButtonAnnee) {
		this.showExecuteAllButtonAnnee = showExecuteAllButtonAnnee;
	}

	public boolean isHideExecuteAllButtonAnnee() {
		return hideExecuteAllButtonAnnee;
	}

	public void setHideExecuteAllButtonAnnee(boolean hideExecuteAllButtonAnnee) {
		this.hideExecuteAllButtonAnnee = hideExecuteAllButtonAnnee;
	}

	public boolean isHideExecuteAllButton() {
		return hideExecuteAllButton;
	}

	public void setHideExecuteAllButton(boolean hideExecuteAllButton) {
		this.hideExecuteAllButton = hideExecuteAllButton;
	}

	public String getCategorieCourrier() {
		return categorieCourrier;
	}

	public void setCategorieCourrier(String categorieCourrier) {
		this.categorieCourrier = categorieCourrier;
	}

	public Boolean getCheckedTypeCourrierValidation() {
		return checkedTypeCourrierValidation;
	}

	public void setCheckedTypeCourrierValidation(Boolean checkedTypeCourrierValidation) {
		this.checkedTypeCourrierValidation = checkedTypeCourrierValidation;
	}

	public String getCourrierRubrique() {
		return courrierRubrique;
	}

	public void setCourrierRubrique(String courrierRubrique) {
		this.courrierRubrique = courrierRubrique;
	}

	public Integer getFirstPage() {
		return firstPage;
	}

	public void setFirstPage(Integer firstPage) {
		this.firstPage = firstPage;
	}
}