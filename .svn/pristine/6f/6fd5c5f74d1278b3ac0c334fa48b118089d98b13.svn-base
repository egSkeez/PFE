package xtensus.beans.common.GBO;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.annotation.PostConstruct;
import javax.faces.model.SelectItem;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.NoSuchProviderException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Scope;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Component;

import xtensus.MethdesGeneriques.MethodesGenerique;
import xtensus.beans.common.EmailUtil;
import xtensus.beans.common.Ged;
import xtensus.beans.common.LanguageManagerBean;
import xtensus.beans.common.ListeDestinatairesModel;
import xtensus.beans.common.VariableGlobale;
import xtensus.beans.common.VariableGlobaleNotification;
import xtensus.beans.utils.CourrierInformations;
import xtensus.beans.utils.Informations;
import xtensus.beans.utils.NotificationListAddress;
import xtensus.dao.utils.DMSConnexionImplement;
import xtensus.entity.Annotation;
import xtensus.entity.Courrier;
import xtensus.entity.CourrierDossier;
import xtensus.entity.CourrierLiens;
import xtensus.entity.Document;
import xtensus.entity.Dossier;
import xtensus.entity.Etat;
import xtensus.entity.Expdest;
import xtensus.entity.Expdestexterne;
import xtensus.entity.Lienscourriers;
import xtensus.entity.Pm;
import xtensus.entity.Pp;
import xtensus.entity.Transaction;
import xtensus.entity.TransactionAnnotation;
import xtensus.entity.TransactionAnnotationId;
import xtensus.entity.TransactionDestination;
import xtensus.entity.TransactionDestinationId;
import xtensus.entity.TransactionDestinationReelle;
import xtensus.entity.Transmission;
import xtensus.entity.Typetransaction;
import xtensus.entity.Variables;
import xtensus.entity.Workflow;
import xtensus.ldap.business.LdapOperation;
import xtensus.ldap.model.BOC;
import xtensus.ldap.model.ItemSelected;
import xtensus.ldap.model.Person;
import xtensus.ldap.model.Unit;
import xtensus.services.ApplicationManager;
import xtensus.workflow.beans.JBPMAccessProcessBean;
import xtensus.workflow.handlers.TraitementEtapeSuivant;

@Component
@Scope("request")
public class CourrierConsultationJourBean {

	// General
	private ApplicationManager appMgr;
	@Autowired
	private VariableGlobale vb;
	@Autowired
	private LanguageManagerBean lm;
	@Autowired
	private MessageSource messageSource;
	private String message;
	private LdapOperation ldapOperation;
	@Autowired
	private VariableGlobaleNotification vbn;

	// Interface fonctionnement
	private boolean showTab;
	private boolean bocOption;
	private boolean userOption;
	private boolean status1;
	private boolean status2;

	// donnees
	private List<Transmission> listTr;
	private Variables varConsultationCourrierSecretaire;
	private Variables varConsultationCourrierSubordonne;
	private Variables varConsultationCourrierSousUnite;
	private List<CourrierInformations> listCourrierJour;
	private List<CourrierInformations> lstCourrierJour;
	private CourrierInformations selectedCourrier;
	private Courrier courrier;
	private Informations info1, info2, info3;
	private List<Informations> listInfo;
	private CourrierInformations courrierInformations;
	private Transaction newTransaction;
	private int idBoc;
	private int idUserDes;
	private String typeUserDes;
	private Unit unitSup;
	private int year;
	private int IdExpediteur;
	// new
	private Integer idUser;
	private String type;
	private String type1;
	private String typeSecretaire;
	private Integer typeTransmission;
	// private Integer stateTraitement;
	private Date dateDebut;
	private Date dateFin;
	private List<Integer> listIdsSousUnit;
	private List<Integer> listIdsSubordonne;
	private String consultationCourrierSecretaire;
	private String consultationCourrierSubordonne;
	private String consultationCourrierSousUnite;
	private Long countCourrier;
	private Long countCourrierRecu;
	private Long countCourrierEnvoyer;
	private Variables courrierAriverToDG;
	private boolean showResponsableResponse;
	private List<Integer> listIdBocMembers;
	private int idBocExpediteur;
	private int idBocDestinataire;
	// AH : ajouter pour récupérer la liste des Destinataires avec leurs
	// Annotations
	private List<ListeDestinatairesModel> destinatairesAvecAnnotations;
	// KHA
	private List<ListeDestinatairesModel> destinataireRepondre;
	// KHA - 25-03-2019
	private List<ItemSelected> listSelectedItem;
	private int referenceSomeA;
	// [JS]
	private boolean receptionphysiqueNonLivre;
	private int flagueCloture;
	private int flagInterne;
	private List<Variables> var;
	private String codeUniqueCourrier = "";
	private String cupSRV;
	Transaction newTransactionBocDest;
	int responsableBocDest = 0;
	private boolean executer = true;
	private boolean existeBOSansMembres;	
	private Boolean etatReceptionPhysique;
	private boolean courrierPointer=false;
	// 2019-11-25
	private HashMap<String, Object> filterMap = new HashMap<String, Object>();
   private List<CourrierInformations> listCourriersLiees ;
	private String sortField;
	private String typeCourrier;
	private boolean descending;
	private List<CourrierInformations> listCourriersInformationsAffecte;
	private int lastIndex;
	private boolean disbledBontonConsultation=false;
	//JS: 2020-03-16
	private String align;
	private TransactionDestination transactionDestination2;
	private String selectedItemsTr;	
	private boolean showModificationButton;
	ArrayList<SelectItem> selectItemsTr2 = new ArrayList<SelectItem>();
	public CourrierConsultationJourBean() {

	}

	@Autowired
	public CourrierConsultationJourBean(
			@Qualifier("applicationManager") ApplicationManager appMgr) {
		this.appMgr = appMgr;
		// ldapOperation = new LdapOperation();
		listCourrierJour = new ArrayList<CourrierInformations>();
		listInfo = new ArrayList<Informations>();
		info1 = new Informations();
		info2 = new Informations();
		info3 = new Informations();
		listIdsSousUnit = new ArrayList<Integer>();
		listIdsSubordonne = new ArrayList<Integer>();
		newTransactionBocDest = new Transaction();
		listCourriersInformationsAffecte = new ArrayList<CourrierInformations>();
		System.out.println("CourrierConsultationJourBean");
		listCourriersLiees=new ArrayList<CourrierInformations>();
	}

	@PostConstruct
	public void Initialize() {
		try {

			// KHA - 25-03-2019
			listSelectedItem = new ArrayList<ItemSelected>();
			destinataireRepondre = new ArrayList<ListeDestinatairesModel>();
			// SM
			etatReceptionPhysique = false;
			courrierPointer=false;
			ldapOperation = vb.getLdapOperation();
			// C*
			courrierAriverToDG = appMgr.listVariablesById(13).get(0);
			// C*
			listTr = appMgr.getList(Transmission.class);
			setShowTab(true);
			setBocOption(false);
			setUserOption(true);
			if (vb.getPerson() != null) {
				if (vb.getPerson().isBoc()) {
					setShowTab(false);
					setBocOption(true);
					setUserOption(false);
				}
			}
			//|JS] : 2020-03-16
			if (vb.getLocale().equals("ar")) {
				align = "right";
			} else {
				align = "left";
			}
			
			
			varConsultationCourrierSecretaire = appMgr.listVariablesById(3)
					.get(0);
			varConsultationCourrierSubordonne = appMgr.listVariablesById(4)
					.get(0);
			varConsultationCourrierSousUnite = appMgr.listVariablesById(5).get(
					0);
			if(!vb.getPerson().isBoc() && vb.getPerson().isResponsable()){
			consultationCourrierSecretaire = varConsultationCourrierSecretaire
					.getVaraiablesValeur();
			consultationCourrierSubordonne = varConsultationCourrierSubordonne
					.getVaraiablesValeur();
			System.out
					.println("----------kha : consultationCourrierSubordonne = "
							+ consultationCourrierSubordonne);
			consultationCourrierSousUnite = varConsultationCourrierSousUnite
					.getVaraiablesValeur();
			}else{
				
							consultationCourrierSecretaire ="Non";
								consultationCourrierSubordonne ="Non";
								consultationCourrierSousUnite="Non";
			}
			// identify connected user
			idUser = vb.getPerson().getId();
			type = "";
			type1 = "";
			if (vb.getPerson().isBoc()) {
				listIdBocMembers = new ArrayList<Integer>();
				List<Person> listBocMembers = vb.getPerson().getAssociatedBOC()
						.getMembersBOC();
				for (Person person : listBocMembers) {
					listIdBocMembers.add(person.getId());
				}
				type = "boc_" + vb.getPerson().getAssociatedBOC().getIdBOC();
				type1 = "";
			} else if (vb.getPerson().isResponsable()) {

				System.out.println("responsable ");
				type = "unit_"
						+ vb.getPerson().getAssociatedDirection().getIdUnit();
				type1 = "sub_" + idUser;
				// NEW
				System.out
						.println("vb.getPerson().getAssociatedDirection()===>"
								+ vb.getPerson().getAssociatedDirection());
				System.out
						.println("vb.getPerson().getAssociatedDirection().getListUnitsChildUnit()===>"
								+ vb.getPerson().getAssociatedDirection()
										.getListUnitsChildUnit());

				if (consultationCourrierSousUnite.equals("Non")) {
					consultationCourrierSousUnite = "Non";
					consultationCourrierSubordonne = "Non";
				} else {
					System.out.println("dans else");			
					for (Unit unit : vb.getPerson().getAssociatedDirection()
							.getListUnitsChildUnit()) {
						System.out.println("dans for 1 ###");
						if (consultationCourrierSousUnite.equals("Oui")) {
							listIdsSousUnit.add(unit.getIdUnit());
						}
						if (consultationCourrierSubordonne.equals("Oui")) {
							try {
								listIdsSubordonne.add(unit.getResponsibleUnit()
										.getId());
							} catch (Exception e) {
								System.out
										.println("#Sub-Unit without Responsible");
							}
						}
					}
					
				}

				// Liste des directions de sous BO
				System.out.println("### 1 ###"
						+ vb.getPerson().getAssociatedDirection()
								.getListBOChildUnit());
				if (consultationCourrierSousUnite.equals("Non")) {
					consultationCourrierSousUnite = "Non";
					consultationCourrierSubordonne = "Non";
				} else {
					for (BOC boc : vb.getPerson().getAssociatedDirection()
							.getListBOChildUnit()) {
						System.out.println("Boc name :" + boc.getNameBOC());
						List<Unit> listUnites = boc.getListDirectionsChildBOC();
						System.out.println("listUnites sous Boc  :"
								+ listUnites.size());

						for (Unit unite : listUnites) {
							System.out.println("unite ==========>"
									+ unite.getIdUnit());
							System.out
									.println("consultationCourrierSousUnite :"
											+ consultationCourrierSousUnite);
							if (consultationCourrierSousUnite.equals("Oui")) {
								System.out.println("Id unité : "
										+ unite.getIdUnit());
								listIdsSousUnit.add(unite.getIdUnit());
							}
							if (consultationCourrierSubordonne.equals("Oui")) {
								try {
									listIdsSubordonne.add(unite
											.getResponsibleUnit().getId());
								} catch (Exception e) {
									System.out
											.println("#Sub-Unit without Responsible");
								}
							}
						}

						}					

				}

				// FIn NEW
				
				if (consultationCourrierSecretaire.equals("Oui")) {
					try {
						if (vb.getPerson().getAssociatedDirection() != null
								&& vb.getPerson().getAssociatedDirection()
										.getSecretaryUnit() != null) {
							typeSecretaire = "secretary_"
									+ vb.getPerson().getAssociatedDirection()
											.getSecretaryUnit().getId();
						} else {
							consultationCourrierSecretaire = "Non";
						}
					} catch (NullPointerException e) {
						e.printStackTrace();
						consultationCourrierSecretaire = "Non";
					}
				}
			} else if (vb.getPerson().isSecretary()) {
				type = "secretary_" + idUser;
				type1 = "unit_"
						+ vb.getPerson().getAssociatedDirection().getIdUnit();
			} else if (vb.getPerson().isAgent()) {
				type = "agent_" + idUser;
				type1 = "";
			}
			// fin identify connected user
			typeTransmission = 0;
			// stateTraitement = 0;

			Calendar calendar = Calendar.getInstance();
			calendar.set(Calendar.HOUR_OF_DAY, 0);
			calendar.set(Calendar.MINUTE, 0);
			calendar.set(Calendar.SECOND, 0);
			calendar.set(Calendar.MILLISECOND, 0);
			dateDebut = calendar.getTime();
			System.out.println("*****dateDebut**** : " + dateDebut);

			Calendar calendar1 = Calendar.getInstance();
			// calendar1.add(Calendar.DATE, 1);
			calendar1.set(Calendar.HOUR_OF_DAY, 23);
			calendar1.set(Calendar.MINUTE, 59);
			calendar1.set(Calendar.SECOND, 59);
			calendar1.set(Calendar.MILLISECOND, 999);
			dateFin = calendar1.getTime();

			System.out.println("*****dateFin**** : " + dateFin);

			// for Rapport
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public List<CourrierInformations> searchListCourrier(
			HashMap<String, Object> filterMap, String sortField,
			boolean descending, String typeCourrierJour,
			String categorieCourrierJour, String transmissionCourrierJour,
			String typeCourrierTraitementJour,
			String typeCourrierValidationJour, Integer firstIndex,
			Integer maxResult, boolean forRapport, String courrierRubriqueJour) {
		try {
			flagInterne = vb.getFlagInterne();
			flagueCloture = vb.getFlagCloture();
			System.out.println("searchListCourrier int flagInterne  === "
					+ vb.getFlagInterne());
			System.out.println("searchListCourrier vb.getFlagCloture()  === "
					+ vb.getFlagCloture());
			lstCourrierJour = new ArrayList<CourrierInformations>();
			String sousTitreDeJour = "";
			// lstCourrierRecuJour = new ArrayList<CourrierInformations>();
			if (vb.getPerson().isBoc()) {

				// Etat etat = appMgr.listEtatByRef(6).get(0);

				vb.setTransmissionCourrierJourForRapport(transmissionCourrierJour);
				vb.setTypeCourrierTraitementJourForRapport(typeCourrierTraitementJour);
				vb.setCategorieCourrierJourForRapport(categorieCourrierJour);
				// 2014-10-09 commented caused by request changes
				// System.out.println("transmissionCourrierJour ="
				// + transmissionCourrierJour);
				// System.out.println("*****transmissionCourrierJour**** : "
				// + transmissionCourrierJour);

				// ---------------KHA : Sous Titre Rapport : ajouté le
				// 19-03-2019-------
				// System.out.println(" KHA : 0 : si connectee 	BOC ");
				if ((transmissionCourrierJour.equals("Tout les courriers") || transmissionCourrierJour
						.equals("Tous les courriers"))
						&& typeCourrierTraitementJour.equals("tous")
						&& categorieCourrierJour.equals("T")) {
					sousTitreDeJour = "Tous";
				} else {
					String result = "";
					if (!transmissionCourrierJour.equals("Tout les courriers")) {
						if (!transmissionCourrierJour
								.equals("Tous les courriers")) {
							result = getTypeTransmissionListeCourriers(transmissionCourrierJour)
									+ " -";
						}
					}
					if (!typeCourrierTraitementJour.equals("tous")) {
						result = result
								+ getTypeTraitememtListeCourriers(typeCourrierTraitementJour)
								+ " -";
					}
					if (!categorieCourrierJour.equals("T")) {
						result = result
								+ getCategorieListeCourriers(categorieCourrierJour);

					}
					// System.out.println("result = " + result);

					if (result.endsWith(" -")) {
						sousTitreDeJour = result.substring(0,
								result.length() - 2);
					} else
						sousTitreDeJour = result;
					// System.out.println("===========================");
					// System.out.println("sousTitreDeJour = " +
					// sousTitreDeJour);

				}
				vb.setSousTitreRapportBoc(sousTitreDeJour);
				// System.out.println("KHA SousTitreRapportBoc = "
				// + vb.getSousTitreRapportBoc());
				// ----------------------- FIN : KHA

				// liste courrier envoyee par BOCT

				lstCourrierJour = appMgr.findCourrierEnvoyerBOCByCriteria(
						filterMap, sortField, descending, 5, dateDebut,
						dateFin, type, type1, listIdBocMembers,
						transmissionCourrierJour, typeCourrierTraitementJour,
						firstIndex, maxResult, categorieCourrierJour,
						forRapport, vb.getDbType(), null, flagueCloture,
						flagInterne);
				// 2014-10-09 commented caused by request changes
				long startTime = System.currentTimeMillis();
				for (CourrierInformations courrierInformations : lstCourrierJour) {
					try {
						searchExpediteurDestinataire(courrierInformations);
					} catch (Exception e) {

						e.printStackTrace();
						System.out.println("######CAUSED BY : "
								+ courrierInformations.getCourrierReference());
						continue;
					}
					// if(categorieCourrierJour.equals("D") &&
					// courrierInformations.getCourrierRecu() == 1){
					// listToRemove.add(courrierInformations);
					// lstCourrierEnvoyerJour.remove(courrierInformations);
					// }
				}
				System.out.println("list courrier jour dure BOCT : "
						+ (System.currentTimeMillis() - startTime));

				// for (CourrierInformations courrierInformations :
				// listToRemove) {
				// lstCourrierEnvoyerJour.remove(courrierInformations);
				// }

			} else {

				// int countRecu = getCountCourrierRecu().intValue();
				// int countEnvoi = getCountCourrierEnvoyer().intValue();
				// int max = maxResult / 2;
				// int firstRecu = firstIndex;
				// int firstEnvoi = firstIndex;
				// int numberOfRowsRecu = maxResult;
				// int numberOfRowsEnvoyer = maxResult;
				// if (typeCourrierJour.equals("Tous") &&
				// !vb.getPerson().isBoc()
				// && (countRecu > max || countEnvoi > max)) {
				// if ((countRecu > max && countEnvoi > max)) {
				// if (firstIndex != 0) {
				// firstRecu = firstIndex / 2;
				// firstEnvoi = firstIndex / 2;
				// }
				// numberOfRowsRecu = max;
				// numberOfRowsEnvoyer = max;
				// } else if (countRecu > max && countEnvoi <= max) {
				// if (firstIndex != 0) {
				// firstRecu = (firstIndex / 2) + 2;
				// firstEnvoi = 0;
				// numberOfRowsEnvoyer = 0;
				// numberOfRowsRecu = maxResult;
				// } else {
				// firstEnvoi = 0;
				// numberOfRowsEnvoyer = countEnvoi;
				// numberOfRowsRecu = maxResult - numberOfRowsEnvoyer;
				// }
				//
				// } else if (countEnvoi > max && countRecu <= max) {
				// if (firstIndex != 0) {
				// firstEnvoi = (firstIndex / 2) + 2;
				// firstRecu = 0;
				// numberOfRowsRecu = 0;
				// numberOfRowsEnvoyer = maxResult;
				// } else {
				// firstRecu = 0;
				// numberOfRowsRecu = countRecu;
				// numberOfRowsEnvoyer = maxResult - numberOfRowsRecu;
				// }
				// }
				// }
				Integer courrierRubriqueJourId = Integer
						.valueOf(courrierRubriqueJour);

				vb.setTypeCourrierJourForRapport(typeCourrierJour);
				vb.setTypeCourrierValidationJourForRapport(typeCourrierValidationJour);
				vb.setCourrierRubriqueJour(courrierRubriqueJour);

				// ------------------------ KHA : SOUS TITRE autre BOC
				// --------------------

				System.out
						.println(" KHA : 1: si connectee est un responsable ");
				if (vb.getPerson().isResponsable()) {
					// --------- 1: si connectee est un responsable
					System.out.println("");
					if (typeCourrierJour.equals("Tous")
							&& courrierRubriqueJour.equals("1")) {
						sousTitreDeJour = "Tous";

					} else {
						String result = "";
						if (!typeCourrierJour.equals("Tous")) {
							System.out.println("typeCourrierJour ===========> "+typeCourrierJour);
							result = getTypeCourrierListeCourriers(typeCourrierJour)
									+ " -";
						}
						if (!courrierRubriqueJour.equals("1")) {
							System.out.println("courrierRubriqueJourId ===>"+courrierRubriqueJourId);
							result = result
									+ getRubriqueListeCourriers(courrierRubriqueJourId);
						}

						System.out.println("courrierRubriqueJour =====2020=======> "+courrierRubriqueJour);
						System.out.println("result = " + result);

						if (result.endsWith(" -")) {
							sousTitreDeJour = result.substring(0,
									result.length() - 2);
						} else {
							sousTitreDeJour = result;
						}
						System.out.println("===========================");
						System.out.println("sousTitreDeJour = "
								+ sousTitreDeJour);
						System.out.println("===========================");
						vb.setSousTitreRapportResponsable(sousTitreDeJour);
						System.out.println("SousTitreRapportResponsable = "
								+ vb.getSousTitreRapportResponsable());
					}

				} else {
					// --------- 2: si connectee est un Secretaire ou Agent
					sousTitreDeJour = getTypeCourrierListeCourriers(typeCourrierJour);
					vb.setSousTitreRapportSecAgent(sousTitreDeJour);
					System.out.println("SousTitreRapportSecAgent = "
							+ vb.getSousTitreRapportSecAgent());
				}

				// ----------------------------FIN :
				// KHA--------------------------------------------

				// if (typeCourrierJour.equals("Tous")
				// || typeCourrierJour.equals("Envoyes")) {
				// 2014-10-09 commented caused by request changes
				// if (!typeCourrierValidationJour.equals("Avalider")) {
				long startTime = System.currentTimeMillis();
				lstCourrierJour = appMgr.findCourrierEnvoyerANDRecuByCriteria(
						vb.getPerson().isResponsable(), listIdsSousUnit,
						listIdsSubordonne, filterMap, sortField, descending,
						consultationCourrierSecretaire,
						consultationCourrierSubordonne,
						consultationCourrierSousUnite, 5, dateDebut, dateFin,
						type, type1, typeSecretaire, idUser, typeTransmission,
						typeCourrierValidationJour, firstIndex, maxResult,
						forRapport, courrierRubriqueJourId, typeCourrierJour,
						vb.getDbType(), null, flagueCloture, flagInterne);
				System.out.println("list courrier jour dure RESPONSIBLE : "
						+ (System.currentTimeMillis() - startTime));
				// 2014-10-09 commented caused by request changes
				for (CourrierInformations courrierInformations : lstCourrierJour) {
					try {

						searchExpediteurDestinataire(courrierInformations);
					} catch (Exception e) {
						e.printStackTrace();
						System.out.println("######CAUSED BY : "
								+ courrierInformations.getCourrierReference());
						continue;
					}

				}
				System.out
						.println("list courrier jour dure RESPONSIBLE with Exp & Dest : "
								+ (System.currentTimeMillis() - startTime));
				// } else {
				// lstCourrierEnvoyerJour = new
				// ArrayList<CourrierInformations>();
				// }
				// }
				// if (typeCourrierJour.equals("Tous")
				// || typeCourrierJour.equals("Recu")) {
				// // 2014-10-10 commented caused by request changes
				// lstTrDestinationRecuJour = appMgr
				// .findCourrierRecuByCriteria(vb.getPerson()
				// .isResponsable(), listIdsSousUnit,
				// listIdsSubordonne, filterMap, sortField,
				// descending, consultationCourrierSecretaire,
				// consultationCourrierSubordonne,
				// consultationCourrierSousUnite, 1,
				// dateDebut, dateFin, type, type1,
				// typeSecretaire, idUser, typeTransmission,
				// typeCourrierValidationJour, firstRecu,
				// numberOfRowsRecu, forRapport,
				// courrierRubriqueJourId);
				// // 2014-10-10 commented caused by request changes
				// for (TransactionDestination transactionDestination :
				// lstTrDestinationRecuJour) {
				// lstCourrierRecuJour
				// .add(searchExpediteurDestinataireAndExplodeDataTransactionDestination(transactionDestination));
				// }
				//
				// }
			}
			// if(init == true){
			// listCourrierJour.addAll(lstCourrierEnvoyerJour);
			// listCourrierJour.addAll(lstCourrierRecuJour);
			// }else{
			listCourrierJour.clear();
			listCourrierJour.addAll(lstCourrierJour);
			// if (vb.getPerson().isBoc()) {
			// listCourrierJour.addAll(lstCourrierEnvoyerJour);
			// } else {
			// if (typeCourrierJour.equals("Tous")) {
			// listCourrierJour.addAll(lstCourrierEnvoyerJour);
			// listCourrierJour.addAll(lstCourrierRecuJour);
			// } else if (typeCourrierJour.equals("Recu")) {
			// listCourrierJour.addAll(lstCourrierRecuJour);
			// } else {
			// listCourrierJour.addAll(lstCourrierEnvoyerJour);
			// }
			// }

			return listCourrierJour;
			// }
			// DM
			// listCourrierJourDM.setWrappedData(listCourrierJour);
			// listCourrierDM.setWrappedData(listCourrier);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	public void searchExpediteurDestinataire(
			CourrierInformations courrierInformations) throws Exception {
		System.out.println("AH : DANS searchExpediteurDestinataire ");

		destinatairesAvecAnnotations = new ArrayList<ListeDestinatairesModel>();
		listSelectedItem = new ArrayList<ItemSelected>();
		List<Object> listSelectedObject = new ArrayList<Object>();
		List<Person> listSelectedPerson = new ArrayList<Person>();
		List<Pp> listSelectetdPP = new ArrayList<Pp>();
		List<Pm> listSelectetdPM = new ArrayList<Pm>();
		List<Unit> listSelectetdUnit = new ArrayList<Unit>();
		List<BOC> listSelectetdBoc = new ArrayList<BOC>();

		// ***********************************************************************
		// --------------------------------------MM----------------------------
		// Test
		// var=appMgr.getListVariableByLibelle();
		// 11
		// var = appMgr
		// .listVariablesByLibelle("code_courrier_unique_personnalisable");
		//
		// codeUniqueCourrier = var.get(0).getVaraiablesValeur();
		// codeUniqueCourrier = codeUniqueCourrier.replace("[ID]", vb
		// .getCourrier().getCourrierReferenceCorrespondant() + "");
		//
		// codeUniqueCourrier = codeUniqueCourrier.replace("[Annee]",
		// new Date().getYear() + 1900 + "");
		// codeUniqueCourrier = codeUniqueCourrier.replace("[Mois]",
		// new Date().getMonth() + 1 + "");
		// XTE : Si le courrier est ajouté par un non Boc, il aura le type à
		// NULL--------------------------------------------------
		// if (vb.getCourrier().getCourrierType() != null) {
		// codeUniqueCourrier = codeUniqueCourrier.replace("[Sens]", vb
		// .getCourrier().getCourrierType());
		// } else {
		// codeUniqueCourrier = codeUniqueCourrier.replace("[Sens]", "I");
		// }
		// System.out.println("courrier type = "
		// + vb.getCourrier().getCourrierType());
		// codeUniqueCourrier = codeUniqueCourrier.replace("[SRV]", cupSRV);
		// KHA====
		// vb.setCourrierCodeUnique(codeUniqueCourrier);
		// ====
		// [ID][Annee][Mois]//[SRV]/[Sens]/
		// ***********************************************************************
		// --------------------------------------MM----------------------------
		// Test
		// get transaction destinataire by id transaction
		System.out
				.println("id : tr " + courrierInformations.getTransactionID());

		List<TransactionDestination> listDestinataires = appMgr
				.getDestinationByIdTransaction(courrierInformations
						.getTransactionID());
		if (listDestinataires != null && listDestinataires.size() > 0) {
			TransactionDestination BocSuivant = listDestinataires.get(0);
			Integer etatID = courrierInformations.getEtatID();
			String expType;
			Integer expTypeUser;
			Integer expLdap;
			String expNom;
			String expPrenom;
			String expediteurReel="";
			if (courrierInformations.getCourrierOldNum() == null) {
				expType = courrierInformations.getExpType();
				expTypeUser = courrierInformations.getExpTypeUser();
				expLdap = courrierInformations.getExpLdap();
				expNom = courrierInformations.getExpNom();
				expPrenom = courrierInformations.getExpPrenom();
			} else {
				expType = courrierInformations.getExpTypeOld();
				expTypeUser = courrierInformations.getExpTypeUserOld();
				expLdap = courrierInformations.getExpLdapOld();
				expNom = courrierInformations.getExpNomOld();
				expPrenom = courrierInformations.getExpPrenomOld();
			}
			// expediteur reel
			String expediteur = "";

			// Ajouté le 2019-06-09
			String destinataireExpediteur = "";
			Variables variableExecution = appMgr.listVariablesByLibelle(
					"execution_courrier_par_tous_types_membre_bo").get(0);

			Transaction transaction = appMgr.getListTransactionByIdTransaction(courrierInformations.getTransactionID()).get(0);

			courrierInformations.setTransaction(transaction);

			// //set Courrier dans Courrier Information
			// courrierInformations.setCourrier(appMgr.getCourrierByIdCourrier(
			// courrierInformations.getCourrierID()).get(0));

			// 2019-11-25 :Enveloppe : set mode transmission dans courrier
			// informations
			System.out.println("courrier id  "+ courrierInformations.getCourrierID());
			courrierInformations.setTransmission(appMgr.getCourrierByIdCourrier(courrierInformations.getCourrierID()).get(0).getTransmission());
			System.out.println("expType====================>" + expType);

			if (expType.equals("Interne-Person")) {
				if (expLdap.equals(vb.getPerson().getId())) {
					courrierInformations.setCourrierRecu(0);
				}
				if (courrierAriverToDG.getVaraiablesValeur().equals("Non")) {
					/***
					 * test pour que boc execute un courrier
					 */
					if (vb.getPerson().getAssociatedBOC() != null
							&& courrierInformations.getTransactionOrdre() == null
							&& etatID.equals(5)) {
						courrierInformations.setCourrierAValider(1);

					}
				}

				// KHA : Seulement le responsable BO peut exécuter
				if (variableExecution.getVaraiablesValeur().equals("Non")) {
					if (vb.getPerson().getAssociatedBOC() != null
							&& courrierInformations.getTransactionOrdre() == null
							&& etatID.equals(5)) {

						courrierInformations.setCourrierAValider(1);
					} else

					// []: test pour que boc execute un courrier de destination
					// interne-Person avec ordre de transaction != null

					// KHA : ajouté le test si le connectee est resp BO
					if (vb.getPerson().getAssociatedBOC() != null
							&& vb.getPerson().isResponsableBO()
							&& courrierInformations.getTransactionOrdre() != null
							&& etatID.equals(5)) {

						courrierInformations.setCourrierAValider(1);

					}
				}
				// KHA : touls les Membres(Agent/Responsable) de BO peuvent
				// exécuter
				else {
					// []ajouter condition where BOC connecté a le meme id que
					// le
					// boc qui sera executer courrier
					if (vb.getPerson().getAssociatedBOC() != null
							&& courrierInformations.getTransactionOrdre() != null
							&& etatID.equals(5)
							&& vb.getPerson().getAssociatedBOC().getIdBOC() == BocSuivant
									.getTransactionDestIdIntervenant()) {

						courrierInformations.setCourrierAValider(1);

					}

				}

				Person person = vb.getHashMapAllUser().get(expLdap);

				Person p = vb.getLdapOperation().getPersonalisedUserById(
						person.getId());

				if (p.isResponsable() || p.isAgent() || p.isSecretary()) {

					destinataireExpediteur = p.getAssociatedDirection()
							.getShortNameUnit();
				}

				if (p.getAssociatedBOC() != null) {

					destinataireExpediteur = "BOC";

				}
				expediteur = person.getCn();

			} 
			else if (expType.equals("Interne-Unité")) {
				System.out.println("vb.getPerson() " + vb.getPerson());
				System.out.println("expLdap : " + expLdap);

				if (vb.getPerson().isResponsable()
						&& !vb.getPerson().isBoc()
						&& expLdap.equals(vb.getPerson()
								.getAssociatedDirection().getIdUnit())) {
					System.out.println("idUnité connecté: "+vb.getPerson()
							.getAssociatedDirection().getIdUnit());
					courrierInformations.setCourrierRecu(0);
				}

				/***
				 * test pour que boc execute un courrier
				 */
				if (courrierAriverToDG.getVaraiablesValeur().equals("Non")) {

					if (vb.getPerson().getAssociatedBOC() != null
							&& courrierInformations.getTransactionOrdre() == null
							&& etatID.equals(5)) {
						courrierInformations.setCourrierAValider(1);

					}
				}

				/***
				 * test pour que boc execute un courrier
				 */
				if (variableExecution.getVaraiablesValeur().equals("Non")) {

					if (vb.getPerson().getAssociatedBOC() != null
							&& courrierInformations.getTransactionOrdre() == null
							&& etatID.equals(5)) {
						courrierInformations.setCourrierAValider(1);

					} else

					// KHA : ajouté le test si le connectee est resp BO
					if (vb.getPerson().getAssociatedBOC() != null
							&& vb.getPerson().isResponsableBO()
							&& courrierInformations.getTransactionOrdre() != null
							&& etatID.equals(5)) {
						courrierInformations.setCourrierAValider(1);
					}

				}
				// //[JS-2019-10-02] Ajouté condition Is Responsable pour que
				// bouton executer ne s'affiche au niveau BOCT
				else if (vb.getPerson().getAssociatedBOC() != null
						&& courrierInformations.getTransactionOrdre() != null
						&& etatID.equals(5)) {
					courrierInformations.setCourrierAValider(1);
					// 2019-11-25 : Enveloppe => Masquer bouton execution
					// lorsque type transmission enveloppe
					System.out.println(courrierInformations.getTransmission()
							.getTransmissionId() == 10);
					System.out.println("Courrier ============> "+courrierInformations.getCourrierID());
					
					
				
					if (courrierInformations.getTransmission().getTransmissionId()==11) {
						// Enveloppe : Caché bouton execution
						courrierInformations.setCourrierAValider(0);
						System.out.println("Affiche bouton Execute 1 : "
								+ courrierInformations.getCourrierAValider());
					}
					
					if(courrierInformations.getTransmission().getTransmissionId()==9){
						
						//AH : c'est pour le blocage de l'exécution pour BO expéditeur pour les courrier avec MT "Valise"
						
						List<Transaction> tousTransactions = appMgr.getTransactionByIdDossier(courrierInformations.getDossierID());
						Transaction premiereTransaction = tousTransactions.get(tousTransactions.size() - 1);
							List<TransactionDestination> transactionDestinataires = appMgr.getListTransactionDestinationByIdTransaction(premiereTransaction.getTransactionId());
						if(transactionDestinataires!=null && transactionDestinataires.size()>0){
						int idBOExp=transactionDestinataires.get(0).getTransactionDestIdIntervenant();
						if(vb.getPerson().getAssociatedBOC().getIdBOC()==idBOExp)
							courrierInformations.setCourrierAValider(0);
						}	
						
						
					}
					
					
					
					
					List<CourrierLiens> list = appMgr.getCourrierLiensByCourrierId(courrierInformations.getCourrierID());

					for(CourrierLiens liensCourrier:list){
						int courrierLien=liensCourrier.getId().getLiensCourrier();
						System.out.println("Courrier Lien ===========> "+courrierLien);
						List<Lienscourriers> list2 = appMgr.getCourrierL(courrierLien);
						System.out.println("list2=========>"+list2.size());
						
						
					}
//					if(courrierInformations.getTransmission()
//							.getTransmissionId() == 10  && list.size()!=0){
//						disbledBontonConsultation=true;
//						courrierInformations.setCourrierAValider(0);
//						courrierInformations.setDisbledBontonConsultation(disbledBontonConsultation);
//					}
					

				}

				Unit unit = vb.getHashMapUnit().get(expLdap);
				System.out.println("Unité::"+unit);
				destinataireExpediteur = unit.getShortNameUnit();

				expediteur = unit.getNameUnit();
				System.out.println("expediteur::"+expediteur);
			}
			else if (expType.equals("Interne-Boc")) {
				expediteur = vb.getCentralBoc().getNameBOC();
				/***
				 * test pour que boc execute un courrier
				 */
				if (courrierAriverToDG.getVaraiablesValeur().equals("Non")) {

					if (vb.getPerson().getAssociatedBOC() != null
							&& courrierInformations.getTransactionOrdre() == null
							&& etatID.equals(5)) {
						courrierInformations.setCourrierAValider(1);

					}
				}
				/***
				 * test pour que boc execute un courrier
				 */

				System.out.println(" DANS execute Interne-Boc");
				if (variableExecution.getVaraiablesValeur().equals("Non")) {
					if (vb.getPerson().getAssociatedBOC() != null
							&& courrierInformations.getTransactionOrdre() == null
							&& etatID.equals(5)) {
						courrierInformations.setCourrierAValider(1);

					}

					else if (vb.getPerson().getAssociatedBOC() != null
							&& vb.getPerson().isResponsableBO()
							&& courrierInformations.getTransactionOrdre() != null
							&& etatID.equals(5)) {
						courrierInformations.setCourrierAValider(1);
					}
				} else if (vb.getPerson().getAssociatedBOC() != null
						&& courrierInformations.getTransactionOrdre() != null
						&& etatID.equals(5)) {
					courrierInformations.setCourrierAValider(1);

				}

			} 
			else if (expType.equals("Externe")) {

				// C* pour que le bouton executer soit activé pour les courriers
				// d'arrivé
				// provisoire .. juste pour activer l'execution des courrier
				// arrivé
				// pour le BOCT
				if (courrierAriverToDG.getVaraiablesValeur().equals("Non")) {

					if (vb.getPerson().getAssociatedBOC() != null
							&& courrierInformations.getTransactionOrdre() == null
							&& etatID.equals(5)) {
						courrierInformations.setCourrierAValider(1);

					}
				}

				if (variableExecution.getVaraiablesValeur().equals("Non")) {
					if (vb.getPerson().getAssociatedBOC() != null
							&& courrierInformations.getTransactionOrdre() == null
							&& etatID.equals(5)) {
						courrierInformations.setCourrierAValider(1);
					} else if (vb.getPerson().getAssociatedBOC() != null
							&& vb.getPerson().isResponsableBO()
							&& courrierInformations.getTransactionOrdre() != null
							&& etatID.equals(5)) {
						courrierInformations.setCourrierAValider(1);
					}
				} else if (vb.getPerson().getAssociatedBOC() != null
						&& courrierInformations.getTransactionOrdre() != null
						&& etatID.equals(5)) {
					courrierInformations.setCourrierAValider(1);

				}
				// provisoire .. juste pour activer l'execution des courrier
				// arrivé
				// pour le BOCT
				// C* pour que le bouton executer soit activé pour les courriers
				// d'arrivé
				List<Transaction> allTransactions = appMgr
				.getTransactionByIdDossier(courrierInformations
						.getDossierID());
	

		courrierInformations.setCourrierAllTransactions(allTransactions);

		Transaction firstTransaction = allTransactions.get(allTransactions
				.size() - 1);
				if(courrierInformations.getCourrierAllTransactions()!=null && courrierInformations.getCourrierAllTransactions().size()>0)
				{ List<Transaction> tousTR = courrierInformations.getCourrierAllTransactions();
				System.out.println(firstTransaction.getTransactionId());
				if(firstTransaction.getExpdest().getTypeExpDest().equals("Externe")){
					expTypeUser=firstTransaction.getExpdest().getExpdestexterne().getTypeutilisateur().getTypeUtilisateurId();
					System.out.println("expTypeUser  "+expTypeUser);
					expediteur=firstTransaction.getExpdest().getExpdestexterne().getExpDestExterneNom();
					if(expTypeUser == 1)
						expediteur=expediteur+ " "+firstTransaction.getExpdest().getExpdestexterne().getExpDestExternePrenom()+" (PP)";
					else 
						expediteur=expediteur+ " (PM)";
					destinataireExpediteur = "EXT";
				}
					
				}
//				if (expTypeUser != null && expTypeUser == 1) {
//					expediteur = expNom + " " + expPrenom + " (PP)";
//					destinataireExpediteur = "EXT";
//
//				} else {
//					expediteur = expNom + " (PM)";
//					
//					destinataireExpediteur = "EXT";
//
//				}
				expediteurReel=expediteur;
			}
			
			courrierInformations.setCourrierExpediteur(expediteur);

			System.out.println("courrierInformations.setCourrierExpediteur" +courrierInformations.getCourrierExpediteur());
			// [JS] 2019-10-09 Format Référence [SRV]-[Annee]/[Mois]-[ID]
//			var = appMgr
//					.listVariablesByLibelle("code_courrier_unique_personnalisable");
//			codeUniqueCourrier = "";
//			codeUniqueCourrier = var.get(0).getVaraiablesValeur();
////			System.out.println("codeUniqueCourrier ========> :"
////					+ codeUniqueCourrier);
////			System.out
////					.println("transaction.getCourrierReferenceCorrespondant()  =====> :"
////							+ transaction.getCourrierReferenceCorrespondant());
////			System.out.println("transaction.getCourrierType() =====> :"
////					+ transaction.getCourrierType());
//
//						
//			
//			codeUniqueCourrier = codeUniqueCourrier.replace("[ID]",
//					transaction.getCourrierReferenceCorrespondant() + "");
//
//			codeUniqueCourrier = codeUniqueCourrier.replace("[Annee]",
//					new Date().getYear() + 1900 + "");
//			codeUniqueCourrier = codeUniqueCourrier.replace("[Mois]",
//					new Date().getMonth() + 1 + "");
//			// XTE : Si le courrier est ajouté par un non Boc, il aura le type à
//			// NULL--------------------------------------------------
//			if (transaction.getCourrierType() != null) {
//				codeUniqueCourrier = codeUniqueCourrier.replace("[Sens]",
//						transaction.getCourrierType());
//
//			} else {
//				codeUniqueCourrier = codeUniqueCourrier.replace("[Sens]", "I");
//			}
//
//			codeUniqueCourrier = codeUniqueCourrier.replace("[SRV]",
//					destinataireExpediteur);

//			System.out.println("########### ID ########## "
//					+ courrierInformations.getTransaction().getTransactionId());
			
		
			
//			if ((!vb.getPerson().isBoc() && courrierInformations
//					.getTransaction().getEtat().getEtatId() != 5)
//					|| (vb.getPerson().isBoc())) {
//				// System.out.println("c'est l'ajout de la ref de BO");
//
//				int idUtilisateurTransaction = courrierInformations.getTransaction().getIdUtilisateur();
//				// System.out.println(">>>>>>>> idUtilisateurTransaction  "+idUtilisateurTransaction);
//
//				// Si le courrier est ajouté par autre que BO
//
//				boolean personeTrouve = false;
//
//				List<BOC> listeBOS = vb.getListTousBos();
//				for (BOC b : listeBOS) {
//					// System.out.println("DANS "+b.getShortNameBOC());
//					List<Person> listeMembres = b.getMembersBOC();
//					for (Person p : listeMembres) {
//						// System.out.println("MEMBRE ID "+p.getId());
//						if (p.getId() == idUtilisateurTransaction) {
//							codeUniqueCourrier = codeUniqueCourrier + " - "
//									+ b.getShortNameBOC();
//							personeTrouve = true;
//							break;
//						}
//					}
//				}
//				if (!personeTrouve) {
//					// récupérer le BO de la direction de cette utilisateur
//					Person person = new Person();
//					boolean findUser = false;
//					for (int i = 0; i < vb.getCopyLdapListAllUser().size(); i++) {
//						int j = 0;
//
//						do {
//							if (vb.getCopyLdapListUser().get(j).getId() == idUtilisateurTransaction) {
//								person = vb.getCopyLdapListUser().get(j);
//								findUser = true;
//							} else {
//								j++;
//							}
//						} while (!findUser
//								&& j < vb.getCopyLdapListUser().size());
//
//					}
//					if (findUser) {
//						// chercher le BO de l'unité du personne trouvé
//						Unit u = person.getAssociatedDirection();
//						// System.out.println(u);
//						if (u.getAssociatedBOC() != null) {
//							codeUniqueCourrier = codeUniqueCourrier + " - "
//									+ u.getAssociatedBOC().getShortNameBOC();
//						}
//
//					}
//
//				}
//
//			}
			
			boolean connecteIsBoc=vb.getPerson().isBoc();
			Integer courrierEtat = courrierInformations.getTransaction().getEtat().getEtatId();
			List<BOC> listeBOS = vb.getListTousBos();
			List<Person> listTousUtilisateur = vb.getCopyLdapListUser();
			
			String anneeCourrier = "";
			String moisCourier="";
			List<Courrier> listCourriers = appMgr.listCourrierByIdTransaction(transaction.getTransactionId());
			if(listCourriers!=null && listCourriers.size()>0){
				Courrier courrierConsulte = listCourriers.get(0);
				anneeCourrier=courrierConsulte.getCourrierOldDateOper().toString();
				moisCourier=courrierConsulte.getCourrierDateReceptionMois().toString();
			}
			
			int idUtilisateurTransaction = courrierInformations.getTransaction().getIdUtilisateur();
			
			
			codeUniqueCourrier=MethodesGenerique.generationCodeUniqueCourrier(vb.getPerson(),appMgr, transaction,anneeCourrier,moisCourier, destinataireExpediteur, connecteIsBoc, courrierEtat, listeBOS, listTousUtilisateur,idUtilisateurTransaction);
			
			courrierInformations.setCourrierDestinataireReelleDirection(codeUniqueCourrier);
			vb.setCodeUniqueCourrier(courrierInformations.getCourrierDestinataireReelleDirection());
			
			// remplissage de l'objet TransactionDest pour l'execution du BOC ou
			// la
			// validation des responsables
			System.out.println("###########courrierInformations.getTransactionID :: "+ courrierInformations.getTransactionID());
			List<TransactionDestination> listTransactionDestination = appMgr.getListTransactionDestinationByIdTransaction(courrierInformations.getTransactionID());
			System.out.println("listTransactionDestination="
					+ listTransactionDestination.size()); // #firstTransaction.getTransactionId()#
			if (!listTransactionDestination.isEmpty()) {
				// C'est la dernière transactionDEST
				courrierInformations.setTransactionDestination(listTransactionDestination
								.get(listTransactionDestination.size() - 1));
			}
			if ((etatID.equals(2) || etatID.equals(10))
					&& !vb.getPerson().isBoc()
					&& !courrierInformations.getIdUtilisateur().equals(
							vb.getPerson().getId())) {
				courrierInformations.setCourrierAValider(1);

			}
			// pour activer l'execution des courriers qui suit un workflow pour
			// le
			// boct et juste la premiere execution
			if (vb.getPerson().isBoc()
					&& courrierInformations.getCourrierCircuit().equals(
							"workflow")) {
				if (etatID.equals(10)
						&& courrierInformations.getTransactionOrdre().equals(1)) {
					courrierInformations.setCourrierAValider(1);
					System.out.println("executer 3 controle");
				}
			}
			// Pour activer l'execution des courrier qui suit un workflow pour
			// le
			// boct et juste la premiere execution
			if (!courrierInformations.getIdUtilisateur().equals(
					vb.getPerson().getId())) {
				System.out.println("set Courrier 1");
				courrierInformations.setCourrierRecu(1);
			}

			// detinataire reel *
			StringBuilder destinataire = new StringBuilder("");
			StringBuilder destinataireCourrierReference = new StringBuilder("");

			String unitName;

			ListeDestinatairesModel destR;
			// KHA : destinataires reel dans le cas de modification
			
			
			
			/************************************************************/
			List<Transaction> allTransactions = appMgr.getTransactionByIdDossier(courrierInformations.getDossierID());
			courrierInformations.setCourrierAllTransactions(allTransactions);

			List<Transaction> allTransactionsByEtat = appMgr.getTransactionByIdDossierByEtat(courrierInformations
					.getDossierID());
		courrierInformations
			.setCourrierAllTransactionsByEtat(allTransactionsByEtat);

	Transaction firstTransaction = allTransactions.get(allTransactions
			.size() - 1);
	System.out.println("111 ID Expéditeur Réel"+firstTransaction.getExpdest().getIdExpDest());
			Expdest expdestExpediteurREEL = appMgr.getListExpDestByIdExpDest(
					firstTransaction.getExpdest().getIdExpDest()).get(0);
			courrierInformations.setExpDest(expdestExpediteurREEL);
		
			if(expdestExpediteurREEL.getTypeExpDest().equals("Interne-Unité")){
				System.out.println(">>>>>>Interne-Unité : "+expdestExpediteurREEL.getIdExpDestLdap());
							
				
				Unit u=ldapOperation.getUnitById(expdestExpediteurREEL.getIdExpDestLdap());
				//Unit u=ldapOperation.getUnitById(stringId);
				System.out.println("U :: "+u);
				expediteurReel=u.getNameUnit();
			}
			else if(expdestExpediteurREEL.getTypeExpDest().equals("Interne-Person")){
				Person p=vb.getLdapOperation().getPersonalisedUserById(
						expdestExpediteurREEL.getIdExpDestLdap());
				expediteurReel=p.getPrenom()+ " "+p.getNom();
			}
			
			System.out.println("expediteurReel  :: "+expediteurReel);
			courrierInformations.setCourrierExpediteur(expediteurReel);
			
			if (courrierInformations.getDestReelList() != null) {
				

				destR = new ListeDestinatairesModel();
				List<String> destReelList = new ArrayList<String>(
						Arrays.asList(courrierInformations.getDestReelList()
								.split("\\|", -1)));
//				String listTest ="44;48;Interne-Boc;2;;;;18000000;Interne-Unité|45;49;Interne-Boc;2;;;;30000000;Interne-Unité|46;50;Interne-Boc;5;;;;30000000;Interne-Unité|47;51;Interne-Boc;5;;;;30000000;Interne-Unité|48;52;Interne-Boc;4;;;;18000000;Interne-Unité|49;53;Interne-Boc;4;;;;18000000;Interne-Unité|50;54;Interne-Boc;4;;;;18000000;Interne-Unité|51;55;Interne-Boc;4;;;;18000000;Interne-Unité|52;56;Interne-Boc;4;;;;18000000;Interne-Unité|53;57;Interne-Boc;4;;;;18000000;Interne-Unité|54;58;Interne-Unité;30000000;;;;30000000;Interne-Unité|55;59;Interne-Unité;30000000;;;;30000000;Interne-Unité|56;60;Interne-Unité;30000000;;;;30000000;Interne-Unité|57;61;Interne-Boc;4;;;;18000000;Interne-Unité|62;66;Interne-Boc;5;;;;30000000;Interne-Unité|64;68;Interne-Boc;5;;;;30000000;Interne-Unité|66;70;Interne-Boc;5;;;;30000000;Interne-Unité|55;59;Interne-Unité;30000000;;;;30000000;Interne-Unité|54;58;Interne-Unité;30000000;;;;30000000;Interne-Unité|52;56;Interne-Boc;4;;;;18000000;Interne-Unité|47;51;Interne-Boc;5;;;;30000000;Interne-Unité|50;54;Interne-Boc;4;;;;18000000;Interne-Unité|53;57;Interne-Boc;4;;;;18000000;Interne-Unité|65;69;Interne-Boc;5;;;;30000000;Interne-Unité|49;53;Interne-Boc;4;;;;18000000;Interne-Unité|63;67;Interne-Boc;5;;;;30000000;Interne-Unité|61;65;Interne-Boc;5;;;;30000000;Interne-Unité|60;64;Interne-Unité;18000000;;;;18000000;Interne-Unité|59;63;Interne-Unité;18000000;;;;18000000;Interne-Unité|58;62;Interne-Boc;4;;;;18000000;Interne-Unité|51;55;Interne-Boc;4;;;;18000000;Interne-Unité|67;71;Interne-Unité;18000000;;;;18000000;Interne-Unité";
//				if(courrierInformations.getDossierID()==4)
//					destReelList= new ArrayList<String>(
//							Arrays.asList(listTest
//									.split("\\|", -1)));
				System.out.println("destReelList.size()  :  "
						+ destReelList.size());
				// destReelElement.get(3);
				// Integer ldap = 0;
				/*
				 * if (destReelList.size()>0){
				 * 
				 * List<String> destReelElement1 = new ArrayList<String>(
				 * Arrays.asList(destReelList.get(0).split(";", -1)));
				 * if(!destReelElement1.get(3).equals("")) {
				 * 
				 * Integer ldap2 = Integer.valueOf(destReelElement1.get(3)); BOC
				 * b=ldapOperation.getBocByID(ldap2);
				 * System.out.println("Le Boc Intervenant "+b); String
				 * shortNameBOC = b.getShortNameBOC();
				 * codeUniqueCourrier=shortNameBOC+" - "+codeUniqueCourrier;
				 * courrierInformations
				 * .setCourrierDestinataireReelleDirection(codeUniqueCourrier);
				 * System
				 * .out.println("la nouvelle reference est "+codeUniqueCourrier
				 * ); }
				 */
				for (int i = 0; i < destReelList.size(); i++) {
					
					
					List<String> destReelElement = new ArrayList<String>(
							Arrays.asList(destReelList.get(i).split(";", -1)));
					System.out.println("destReelElement  " + destReelElement);
					//if(destReelElement.size()>=8){
					Integer idExpDest = 0;

					if (!destReelElement.get(1).equals("")) {
						idExpDest = Integer.valueOf(destReelElement.get(1));

					}

					String type = destReelElement.get(2);
					Integer ldap = 0;
					if (!destReelElement.get(3).equals("")) {
						ldap = Integer.valueOf(destReelElement.get(3));
					}

					String nom = destReelElement.get(4);
					String prenom = destReelElement.get(5);
					Integer typeUser = 0;
					if (!destReelElement.get(6).equals("")) {
						typeUser = Integer.valueOf(destReelElement.get(6));
					}
					Integer idDestReelLdap = 0;
					if (!destReelElement.get(7).equals("")) {
						idDestReelLdap = Integer
								.valueOf(destReelElement.get(7));
					}
					
					String destReelType = destReelElement.get(8);
					 String ref ="";
					 int idTRans = Integer.parseInt(destReelElement.get(0));
						List<Transaction> listTrans = appMgr.getListTransactionByIdTransaction(idTRans);
						if(listTrans!=null && listTrans.size()>0){
							ref = "["+listTrans.get(0).getCourrierReferenceCorrespondant()+"]";
							//System.out.println("(1)ref (du destReelElement.get(0)) ::"+  ref);
						}
//						System.out.println("REF ================> "+ref);
//						System.out.println("destReelType  "+destReelType);
//						System.out.println(idDestReelLdap.intValue()==0);
//						System.out.println(destReelType.equals("Interne-Unité"));
						if ((vb.isSonede()&& idDestReelLdap==0 && destReelType.equals("Interne-Unité"))||idDestReelLdap != 0) {
						
						
						if (courrierInformations.getCourrierCircuit().equals(
								"workflow")) {
							try {
								Unit unitDestinataireReel = vb.getHashMapUnit()
										.get(idDestReelLdap);
								unitName = unitDestinataireReel.getNameUnit();

								ItemSelected itemSelected = new ItemSelected();
								itemSelected.setItemSelectedId(idDestReelLdap);
								itemSelected.setItemSelectedName(unitName);
								itemSelected
										.setSelectedObject(unitDestinataireReel);
								listSelectedItem.add(itemSelected);

								Object object = (Object) unitDestinataireReel;
								listSelectedObject.add(object);
								listSelectetdUnit.add(unitDestinataireReel);

							} catch (Exception e) {
								unitName = "Inconnue";
								e.printStackTrace();
							}
							destinataire.append(" / ");

							destinataire.append(unitName);

							break;
						} 
						else {
							
							if (destReelType.equals("Interne-Unité")) {

								System.out
										.println("### Type de destination Réel est Interne-Unité ### "+idDestReelLdap);
								Unit unit = vb.getHashMapUnit().get(
										idDestReelLdap);
								
								if (!destinataire.toString().contains(unit.getNameUnit())) {
									
									destinataire.append(" / ");
									
									destinataire.append(unit.getNameUnit());

									// [JS] :Référence de Courrier pour chaque
									// destinataire
									destinataireCourrierReference.append(unit
											.getNameUnit());
									
									List<Transaction> listTransaction = appMgr
											.getReferenceCourrierByDestinataire(idDestReelLdap);
									// retourne la dernière transaction avec le dest réelle id =idDestReelLdap 		
//										System.out.println("(2)ref  "+	listTransaction
//													.get(0)
//												.getCourrierReferenceCorrespondant());
											
									destinataireCourrierReference
											.append(" [")
											.append(listTransaction
													.get(0)
													.getCourrierReferenceCorrespondant())
											.append("]");
//									destinataireCourrierReference
//											.append("<br/>");


									destR = new ListeDestinatairesModel();
									System.out.println("idDestReelLdap :"
											+ idDestReelLdap);
									destR.setDestinataireId(idDestReelLdap);
									destR.setDestinataireName(unit
											.getNameUnit());
//									System.out.println("AH AJOUT "+ unit.getNameUnit());
//									System.out
//											.println("============== affecter annotations unit 1 ===============");

									// List<Annotation> l =
									// appMgr.listeAnnotationParDestinataireEtTransaction(idDestReelLdap,courrierInformations.getDossierID());
									List<Annotation> listeAnnotationParDestinataire = new ArrayList<Annotation>();

									if (appMgr
											.listeAnnotationParDestinataireEtTransactionReell(
													idDestReelLdap,
													courrierInformations
															.getDossierID()) != null) {
										
										listeAnnotationParDestinataire = appMgr
												.listeAnnotationParDestinataireEtTransactionReell(
														idDestReelLdap,
														courrierInformations
																.getDossierID());
										
										
									} else {
										listeAnnotationParDestinataire = appMgr
												.listeAnnotationParDestinataireEtTransactionExpDest(
														idDestReelLdap,
														courrierInformations
																.getDossierID());
									}
									String otherAnnotation="";
									if (listeAnnotationParDestinataire != null) {
										List<String> listAnnotationDest = new ArrayList<String>();
										for (Annotation a : listeAnnotationParDestinataire) {

											listAnnotationDest.add(String.valueOf(a.getAnnotationId()));
//											System.out.println("listAnnotationDest = "+ listAnnotationDest);
											
											TransactionAnnotation ta = appMgr
													.getTransactionByIdAnnotation(a.getAnnotationId())
													.get(0);
											destR.setChooseAnnotationType("tous");
											//Récupérer la transaction de l'annotaion
											if(a.getAnnotationId().intValue()==10){
											 Transaction tr = listTransaction.get(0);
											 otherAnnotation=tr.getTransactionCommentaireAnnotation();
											 //System.out.println("####### otherAnnotation "+otherAnnotation);
											 destR.setOtherAnnotation(otherAnnotation);
											 destR.setChooseAnnotationType("autre");
											 }
										}
										destR.setListeAnnotations(listAnnotationDest);
										
										// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());
									}
								
									System.out
											.println("destR.ListeAnnotations = "
													+ destR.getListeAnnotations());

									
									destinatairesAvecAnnotations.add(destR);

									
									ItemSelected itemSelected = new ItemSelected();
									itemSelected
											.setItemSelectedId(idDestReelLdap);
									itemSelected.setItemSelectedName(unit
											.getNameUnit());
									listSelectedItem.add(itemSelected);

									Object object = (Object) unit;
									listSelectedObject.add(object);
									listSelectetdUnit.add(unit);
								

								}

							} 
							else if (destReelType.equals("Interne-Person")) {

//								System.out
//										.println("2019-06-09 idDestReelLdap : "
//												+ idDestReelLdap);
								Person person = vb.getHashMapAllUser().get(
										idDestReelLdap);
								System.out.println("Interne-Person");
								System.out.println(" : Person ### :"
										+ person.getNom());
								if (!destinataire.toString().contains(
										person.getCn())) {

									destinataire.append(" / ");
									System.out
											.println("Ajout Personne dans liste destinataires");
									System.out.println("Cn Person :"
											+ person.getCn());
									destinataire.append(person.getCn());

									// [JS] :Référence de Courrier pour chaque
									// destinataire
									destinataireCourrierReference.append(person
											.getCn());
									List<Transaction> listTransaction = appMgr
											.getReferenceCourrierByDestinataire(idDestReelLdap);
									if (listTransaction != null
											&& listTransaction.size() > 0)
										destinataireCourrierReference
												.append(" [")
												.append(listTransaction
														.get(0)
														.getCourrierReferenceCorrespondant())
												.append("]");
//									destinataireCourrierReference
//											.append("<br/>");
									System.out
											.println("2019-06-2019 Destinataire + Référence : "
													+ destinataireCourrierReference
															.toString());

									System.out
											.println("########## destR ##############");
									destR = new ListeDestinatairesModel();
									destR.setDestinataireId(idDestReelLdap);
									destR.setDestinataireName(person.getCn());

									System.out
											.println("============== affecter annotations Person ===============");

									// ajouté le 16-04-2019 : pour séparer les
									// destinataires enregistrés dans table
									// transactionDestinataireReel et dans table
									// expdest

									// List<Annotation> l =
									// appMgr.listeAnnotationParDestinataireEtTransaction(idDestReelLdap,courrierInformations.getDossierID());
									List<Annotation> l = new ArrayList<Annotation>();
									if (appMgr
											.listeAnnotationParDestinataireEtTransactionReell(
													idDestReelLdap,
													courrierInformations
															.getDossierID()) != null) {
										l = appMgr
												.listeAnnotationParDestinataireEtTransactionReell(
														idDestReelLdap,
														courrierInformations
																.getDossierID());
									} else {
										l = appMgr
												.listeAnnotationParDestinataireEtTransactionExpDest(
														idDestReelLdap,
														courrierInformations
																.getDossierID());

									}
									if (l != null) {
										List<String> listAnnotationDest = new ArrayList<String>();
										List<String> listRefCourrierDest = new ArrayList<String>();
										for (Annotation a : l) {

											listAnnotationDest
													.add(String.valueOf(a
															.getAnnotationId()));
											System.out
													.println("listAnnotationDest = "
															+ listAnnotationDest);
											// []
											TransactionAnnotation ta = appMgr
													.getTransactionByIdAnnotation(
															a.getAnnotationId())
													.get(0);
											Transaction tr = appMgr
													.getListTransactionByIdTransaction(
															ta.getId()
																	.getIdTransaction())
													.get(0);
										}
										destR.setListeAnnotations(listAnnotationDest);
										// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());

									}
									

									
									destinatairesAvecAnnotations.add(destR);
									
									ItemSelected itemSelected = new ItemSelected();
									itemSelected
											.setItemSelectedId(idDestReelLdap);
									itemSelected.setItemSelectedName(person
											.getCn());
									listSelectedItem.add(itemSelected);
									Object object = (Object) person;
									listSelectedObject.add(object);
									listSelectedPerson.add(person);

									
								}

							} 
							else if (destReelType.equals("Externe")) {

								if (vb.getPerson().isBoc() && !etatID.equals(6)) {
									courrierInformations.setCourrierAValider(1);

								}
								Expdestexterne destReelExterne = appMgr
										.getExpediteurById(idDestReelLdap).get(
												0);
								if (destReelExterne.getTypeutilisateur()
										.getTypeUtilisateurId().equals(1)) {
									String dest = destReelExterne
											.getExpDestExternePrenom()
											+ " "
											+ destReelExterne
													.getExpDestExterneNom();
									if (!destinataire.toString().contains(dest)) {
										destinataire.append(" / ");
										destinataire.append(dest);
										destR = new ListeDestinatairesModel();
										destR.setDestinataireId(idDestReelLdap);
										destR.setDestinataireName(dest);

										destinataireCourrierReference.append(dest);
										List<Transaction> listTransaction = appMgr
										.getReferenceCourrierByDestinataire(idDestReelLdap);
										if (listTransaction != null
										&& listTransaction.size() > 0)
											destinataireCourrierReference
											.append(" [")
											.append(listTransaction
													.get(0)
													.getCourrierReferenceCorrespondant())
											.append("]");
										
										System.out
										.println("2019-06-2019 Destinataire + Référence : "
												+ destinataireCourrierReference
														.toString());
										
										destinatairesAvecAnnotations.add(destR);
										System.out.println("3 - destR : "
												+ destR);
										ItemSelected itemSelected = new ItemSelected();
										itemSelected
												.setItemSelectedId(idDestReelLdap);
										itemSelected.setItemSelectedName(dest);
										listSelectedItem.add(itemSelected);

									}

								} else if (destReelExterne.getTypeutilisateur()
										.getTypeUtilisateurId().equals(2)) {
									String dest = destReelExterne
											.getExpDestExterneNom();
									if (!destinataire.toString().contains(dest)) {
										destinataire.append(" / ");
										destinataire.append(destReelExterne
												.getExpDestExterneNom());
										destR = new ListeDestinatairesModel();
										destR.setDestinataireId(idDestReelLdap);
										destR.setDestinataireName(dest);
										destinataireCourrierReference.append(dest);
										List<Transaction> listTransaction = appMgr
										.getReferenceCourrierByDestinataire(idDestReelLdap);
										if (listTransaction != null
										&& listTransaction.size() > 0)
											destinataireCourrierReference
											.append(" [")
											.append(listTransaction
													.get(0)
													.getCourrierReferenceCorrespondant())
											.append("]");
										
										System.out
										.println("2019-06-2019 Destinataire + Référence : "
												+ destinataireCourrierReference
														.toString());
										destinatairesAvecAnnotations.add(destR);
										System.out.println("4 - destR : "
												+ destR);
										ItemSelected itemSelected = new ItemSelected();
										itemSelected
												.setItemSelectedId(idDestReelLdap);
										itemSelected.setItemSelectedName(dest);
										listSelectedItem.add(itemSelected);

									}

								}
							} else {
								destinataire.append("--------");
							}
						}

					}
					else {
						
						if (!listTransactionDestination.isEmpty()) {
							for (TransactionDestination transactionDestination : listTransactionDestination) {
								
								//if (idExpDest.equals(transactionDestination.getId().getIdExpDest())) {
//									
									if (type.equals("Interne-Person")) {
							
										courrierInformations.setCourrierRecu(1);
										courrierInformations
												.setTransactionDestination(transactionDestination);

										Person person = vb.getHashMapAllUser()
												.get(ldap);
										if (!destinataire.toString().contains(person.getCn())) {
											destinataire.append(" / ");
											destinataire.append(person.getCn());
											destR = new ListeDestinatairesModel();
											destR.setDestinataireId(ldap);
											destR.setDestinataireName(person
													.getCn());
											destinatairesAvecAnnotations
													.add(destR);
											System.out.println("5 - destR : "+ destR);
											// break;

											ItemSelected itemSelected = new ItemSelected();
											itemSelected
													.setItemSelectedId(ldap);
											itemSelected
													.setItemSelectedName(person
															.getCn());
											listSelectedItem.add(itemSelected);

											Object object = (Object) person;
											listSelectedObject.add(object);
											listSelectedPerson.add(person);
											
										}

									} 
									else if (type.equals("Interne-Unité")) {
								

										/**
										 * [JS] Enlever le test qui est unitile
										 * (ldap.equals(vb.getPerson().
										 * getAssociatedDirection().getIdUnit())
										 * Ldap= id destinataire comparé avec
										 * l'id de l'unité personne conecté ce
										 * qui destinataire ne s'affiche pas au
										 * niveau liste courrier *
										 * **/

										// if (vb.getPerson().isResponsable()) {
										System.out.println("set Courrier 1");

										// courrierInformations.setCourrierRecu(1);
										courrierInformations
												.setTransactionDestination(transactionDestination);

										Unit unit = vb.getHashMapUnit().get(
												ldap);
												
										if (!destinataire.toString().contains(
												unit.getNameUnit())) {
											destinataire.append(" / ");
											destinataire.append(unit
													.getNameUnit());
													destinataireCourrierReference.append(unit
											.getNameUnit());
											
											List<Transaction> listTransaction = appMgr
											.getReferenceCourrierByDestinataire(ldap);
//											System.out.println("(3) Ref :: "+	listTransaction
//													.get(0)
//												.getCourrierReferenceCorrespondant());
									if (listTransaction != null
											&& listTransaction.size() > 0){
										destinataireCourrierReference
												.append(" [")
												.append(listTransaction
														.get(0)
														.getCourrierReferenceCorrespondant())
												.append("]");}
												else{
//													System.out
//											.println("2019-06-2019 NULL NULL");
												}
//									destinataireCourrierReference
//											.append("<br/>");
									System.out
											.println("2019-06-2019 Destinataire + Référence : "
													+ destinataireCourrierReference
															.toString());
											
											destR = new ListeDestinatairesModel();
											destR.setDestinataireId(ldap);
											destR.setDestinataireName(unit
													.getNameUnit());
											//destinatairesAvecAnnotations
											//		.add(destR);
											
											ItemSelected itemSelected = new ItemSelected();
											itemSelected
													.setItemSelectedId(ldap);
											itemSelected
													.setItemSelectedName(unit
															.getNameUnit());
											listSelectedItem.add(itemSelected);

											Object object = (Object) unit;
											listSelectedObject.add(object);
											listSelectetdUnit.add(unit);

											// break;
											// }
											
																					
												List<Annotation> listeAnnotationParDestinataire = new ArrayList<Annotation>();

									if (appMgr
											.listeAnnotationParDestinataireEtTransactionReell(
													ldap,
													courrierInformations
															.getDossierID()) != null) {
										
										listeAnnotationParDestinataire = appMgr
												.listeAnnotationParDestinataireEtTransactionReell(
														ldap,
														courrierInformations
																.getDossierID());
										
									} else {
										listeAnnotationParDestinataire = appMgr
												.listeAnnotationParDestinataireEtTransactionExpDest(
														ldap,
														courrierInformations
																.getDossierID());
									}
									String otherAnnotation="";
									if (listeAnnotationParDestinataire != null) {
										List<String> listAnnotationDest = new ArrayList<String>();
										for (Annotation a : listeAnnotationParDestinataire) {

											listAnnotationDest.add(String.valueOf(a.getAnnotationId()));
											
											
											TransactionAnnotation ta = appMgr
													.getTransactionByIdAnnotation(a.getAnnotationId())
													.get(0);
											destR.setChooseAnnotationType("tous");
											//Récupérer la transaction de l'annotaion
//											if(a.getAnnotationId().intValue()==10){
//											 Transaction tr = listTransaction.get(0);
//											 otherAnnotation=tr.getTransactionCommentaireAnnotation();
//											 System.out.println("####### otherAnnotation "+otherAnnotation);
//											 destR.setOtherAnnotation(otherAnnotation);
//											 destR.setChooseAnnotationType("autre");
//											 }
										}
										destR.setListeAnnotations(listAnnotationDest);
										System.out.println("6 - destR : "
												+ destR);
										// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());
									}
											
											
											destinatairesAvecAnnotations
													.add(destR);

										}

									} 
									else if (type.equals("Interne-Boc")) {

										if (vb.getPerson().isBoc()) {
											courrierInformations
													.setCourrierRecu(1);
											courrierInformations
													.setTransactionDestination(transactionDestination);
										}
										if (!destinataire.toString()
												.contains(
														vb.getCentralBoc()
																.getNameBOC())) {
											destinataire.append(" / ");
											destinataire.append(vb
													.getCentralBoc()
													.getNameBOC());
											destR = new ListeDestinatairesModel();
											destR.setDestinataireId(ldap);
											destR.setDestinataireName(vb
													.getCentralBoc()
													.getNameBOC());
											destinatairesAvecAnnotations
													.add(destR);
											System.out.println("7 - destR : "
													+ destR);
											ItemSelected itemSelected = new ItemSelected();
											itemSelected
													.setItemSelectedId(ldap);
											itemSelected.setItemSelectedName(vb
													.getCentralBoc()
													.getNameBOC());
											listSelectedItem.add(itemSelected);

										}
									}
									else if (type.equals("Externe")) {

										if (typeUser.equals(1)) {
											if (!destinataire.toString()
													.contains(
															nom + " " + prenom
																	+ " (PP)")) {
												destinataire.append(" / ");
												destinataire.append(nom + " "
														+ prenom + " (PP)");
												destR = new ListeDestinatairesModel();
												destR.setDestinataireId(ldap);
												destR.setDestinataireName(nom
														+ " " + prenom
														+ " (PP)");
												destinatairesAvecAnnotations
														.add(destR);
												System.out
														.println("8 - destR : "
																+ destR);
												ItemSelected itemSelected = new ItemSelected();
												itemSelected
														.setItemSelectedId(ldap);
												itemSelected
														.setItemSelectedName(nom
																+ " " + prenom);
												listSelectedItem
														.add(itemSelected);

											}
										} else {
											if (!destinataire.toString()
													.contains(nom + " (PM)")) {
												destinataire.append(" / ");
												destinataire.append(nom
														+ " (PM)");
												destR = new ListeDestinatairesModel();
												destR.setDestinataireId(ldap);
												destR.setDestinataireName(nom
														+ " (PM)");
												destinatairesAvecAnnotations
														.add(destR);

												System.out
														.println("9 - destR : "
																+ destR);
												ItemSelected itemSelected = new ItemSelected();
												itemSelected
														.setItemSelectedId(ldap);
												itemSelected
														.setItemSelectedName(nom
																+ " " + prenom);
												listSelectedItem
														.add(itemSelected);

											}
										}
									}
								//}
							}
						}
						if (courrierInformations.getCourrierRecu() == 1
								&& (etatID.equals(10) || etatID.equals(2))) {
							courrierInformations.setCourrierAValider(1);
							System.out.println("executer 5 controle");
						} 
						else {
							// provisoire .. juste pour activer l'execution des
							// courrier arrivé pour le BOCT
							if (courrierAriverToDG.getVaraiablesValeur()
									.equals("Non")) {
								if (!vb.getPerson().isBoc()) {
									courrierInformations.setCourrierAValider(0);
									System.out
											.println("Non executer 1 controle");
								}
							}
							// provisoire .. juste pour activer l'execution des
							// courrier arrivé pour le BOCT
						}
						if (vb.getPerson().getAssociatedBOC() != null
								&& courrierInformations.getCourrierRecu() == 1
								&& etatID.equals(5) && etatID.equals(2)) {
							courrierInformations.setCourrierAValider(1);
						}
					}
					
					// KHA =========
					courrierInformations
							.setListSelectedItemDest(listSelectedItem);
					courrierInformations
							.setListSelectedObject(listSelectedObject);
					courrierInformations
							.setListSelectedPerson(listSelectedPerson);
					courrierInformations
							.setListSelectetdUnit(listSelectetdUnit);
					courrierInformations.setListSelectetdBoc(listSelectetdBoc);
						//System.out.println("-------------->"+destinataireCourrierReference);
					//}
				
				}
			}
			destinataire.delete(0, 3);
			System.out.println("%% destinataire  " + destinataire);
			courrierInformations.setCourrierDestinataireReelle(destinataire.toString());
			courrierInformations
					.setListeDestinatairesAvecAnnotations(destinatairesAvecAnnotations);
			
			courrierInformations
				.setReferenceDestinataireReelle(destinataireCourrierReference
						.toString());
			
			//****************************************** 2019-12-09 ***********************************//
			
			/***
			 * test pour que bouton réception physique s'affiche 
			 */
			/***
			 * test pour que bouton réception physique s'affiche 
			 */
			Expdest cupExpDest;
			cupExpDest = new Expdest();
			
			cupExpDest = appMgr.getListExpDestByIdExpDest(transaction.getExpdest().getIdExpDest()).get(0);	
	
			CourrierDossier courrierDossier1 = appMgr.getCourrierDossierByIdCourrier(courrierInformations.getCourrierID()).get(0);
			int refdossier = courrierDossier1.getId().getDossierId();

			Transaction transactionn = new Transaction();
			List<Transaction> listTr = appMgr.getTransactionByIdDossier(refdossier);
			lastIndex=listTr.size();
			transactionn=listTr.get(lastIndex-1);
			int idEditeur=transactionn.getIdUtilisateur();
			//JS : 2020-03-16==========================================
			if(vb.getPerson().isBoc()){
				List<ListeDestinatairesModel> list = courrierInformations.getListeDestinatairesAvecAnnotations();
				List<Integer> listeIdDest = new ArrayList<Integer>();
				System.out.println("list===============> "+list.size());
				Courrier courrier=appMgr.getCourrierByIdCourrier(courrierInformations.getCourrierID()).get(0);
				for (ListeDestinatairesModel d : list) {
					int idDest = 0;
					// KHA reception physique
					if (vb.getPerson().isResponsable() && !vb.getPerson().isBoc()) {
//						System.out.println(" personne connectee responsable");
//						System.out.println("Vb.getPerson ===============> "+vb.getPerson());
//						System.out.println("vb.getPerson().getAssociatedDirection().getIdUnit()===>"+vb.getPerson().getAssociatedDirection().getIdUnit());
//						System.out.println("d.getDestinataireId()=================================> "+d.getDestinataireId());
						if (vb.getPerson().getAssociatedDirection().getIdUnit() == d
								.getDestinataireId()) {
							idDest = vb.getPerson().getId();
						} else {
							System.out
									.println(" personne connectee n'est pas responsable");
							idDest = d.getDestinataireId();
						}
					}else{
					System.out.println("heloo");
						
					}
					listeIdDest.add(idDest);
				}
				if((!listIdBocMembers.contains(idEditeur))
						|| listeIdDest.contains(vb.getPerson().getId()) || courrierInformations.getTransaction().getEtat().getEtatId()==6 
						){
					showModificationButton=false;
					      System.out.println("courrier==> "+courrier);
						if(courrier.getTransmission().getTransmissionId()==11){
							showModificationButton=true;
						}
				}else{
					showModificationButton=true;
				}
				
				if(courrier.getIdcourrierFK()!=null){
					// AH : C'est le cas que le courrier est affecté à une valise pas de modifiaction
					showModificationButton=false;
				}
				courrierInformations.setShowModificationButton(showModificationButton);
			}
			
			//JS : 2020-03-16==========================================
			
//TR =9 10 11???
//			System.out.println(courrierInformations.getTransmission().getTransmissionId()==10);
//			System.out.println(vb.getPerson().isBoc());
//			System.out.println(vb.getPerson().getId()==idEditeur);
				if(courrierInformations.getTransmission().getTransmissionId()==10){
					disbledBontonConsultation=false;
					//si mode enveloppe à ne pas exécuter
					courrierInformations.setCourrierAValider(0);
						if(vb.getPerson().isBoc() && vb.getPerson().getId()!=idEditeur){
						//à ne pas consulter et à ne pas exécuter
							disbledBontonConsultation=true;
							}
				courrierInformations.setDisbledBontonConsultation(disbledBontonConsultation);
				
			}
				
//			System.out.println("Id Editeur ====>"+idEditeur);	
			
			List<ListeDestinatairesModel> list = destinatairesAvecAnnotations;
			List<Integer> listeIdDest = new ArrayList<Integer>();
			for (ListeDestinatairesModel d : list) {
				int idDest = 0;
				// KHA reception physique
				if (vb.getPerson().isResponsable() && !vb.getPerson().isBoc()) {
					if (vb.getPerson().getAssociatedDirection().getIdUnit() == d
							.getDestinataireId()) {
						idDest = vb.getPerson().getId();
					} else {
						System.out
								.println(" personne connectee n'est pas responsable");
						idDest = d.getDestinataireId();
					}
				}else{
				System.out.println("heloo");
					
				}
				listeIdDest.add(idDest);
				//
			}
			
			
			
			
			// récuperer liste des memebres de bureau d'ordre connecté
			List<Integer> listeIdMembresBOc=new ArrayList<Integer>();
			if(vb.getPerson().isBoc()){
			List<Person> listMembresBoc = vb.getPerson().getAssociatedBOC().getMembersBOC();
			for(Person membres:listMembresBoc){

				listeIdMembresBOc.add(membres.getId());
			}
			}
			//****************************
			
//			System.out.println("===============================reception physique =========================================");

			
			Courrier courrier=appMgr.getCourrierByIdCourrier(courrierInformations.getCourrierID()).get(0);	
//			System.out.println("Courrier Dans Liste ===> : "+courrier.getIdCourrier());
//			System.out.println("Courrier Avec Document physique  ===> : "+courrier.getCourrierAvecDocumentPhysique());
			if (courrier.getCourrierAvecDocumentPhysique() != null
					&& courrier.getCourrierAvecDocumentPhysique() == true ) {
				
				/* si Le personne connecté est un responsable et qui est l'éditeur  : bouton reception physique ne s'affiche pas**/
				if (vb.getPerson().isResponsable()  && !vb.getPerson().isBoc()) {
					if (cupExpDest.getIdExpDestLdap() != null
							&& vb.getPerson().getAssociatedDirection()
									.getIdUnit() == cupExpDest
									.getIdExpDestLdap()){
						System.out
								.println("si l'expediteur est l'editeur de courrier");
					etatReceptionPhysique = false;
//					System.out.println("###1");
					}else if(listeIdDest.contains(vb.getPerson().getId())){
//						System.out.println("###22");
//						System.out
//						.println("Destinataire Finale");
						etatReceptionPhysique = true;
						if(appMgr.getListCourrierAvecReceptionPhysiqueByEtat(courrier.getIdCourrier(),transaction.getTransactionId()).size() !=0 ){
							System.out.println("### Reception  physique Validé ### ");
							etatReceptionPhysique = false;
							
						}
						
					}

				}	
						
				
					//is BOC et n'est pas l'editeur de courrier DONC FAIT LE VALIDATION HEARCHQIUE		
				
				else if ((vb.getPerson().isBoc() && !listeIdMembresBOc.contains(idEditeur))
						|| listeIdDest.contains(vb.getPerson().getId())
						|| vb.getPerson().getId() == cupExpDest
								.getIdExpDestLdap()){
					// si le connectee est l'expediteur, le destinataire reel ou le
				// BO
				etatReceptionPhysique = true;
//				System.out.println("###2");
				if(appMgr.getListCourrierAvecReceptionPhysiqueByEtat(courrier.getIdCourrier(),transaction.getTransactionId()).size() !=0 || transaction.getEtat().getEtatId()==6){
//					System.out.println("### Reception  physique Validé ### ");
					etatReceptionPhysique = false;
					
				}
				
			

				}
				
			}
			
			
//			Courrier cr=appMgr.getCourrierByIdCourrier(courrierInformations.getCourrierID()).get(0);				
			
			if(courrier.getCourrierAvecDocumentPhysique() != null
					&& courrier.getCourrierAvecDocumentPhysique() != true){
//				System.out.println("KHA ===> reception physique : non ");
				etatReceptionPhysique = false;
//				System.out.println("###4");


			}
	
			courrierInformations.setCourrierAvecDocumentPhysique(etatReceptionPhysique);
			
			
		

			// [JS] :
			
			if ((courrierInformations.getTransactionDateConsultation() == null && courrierInformations
					.getCourrierRecu() != 1)
					|| (courrierInformations.getTransactionDestination()
							.getTransactionDestDateConsultation() == null && courrierInformations
							.getCourrierRecu() == 1)) {
//				System.out.println("Style CSS ");
				courrierInformations
						.setStyle("tableau_liste_courrier_non_consulte_gras");
			}
			else{
				courrierInformations
				.setStyle("tableau_liste_courrier_consulte");
			}
			
			
			
		}
	}

	// }

	
	//[JS] : 2020-03-16
    public void valider(){
    	System.out.println("############ Methode Valider #####################");
    	status1=false;
    	status2=false;
    	try{
    	     	
    	
    			Etat etat = new Etat();
    			etat = appMgr.listEtatByRef(8).get(0);
    			TransactionDestination transactionDestination = vb.getTransactionDestination();
//    			System.out.println("ID transaction des ====> "+transactionDestination2.getId().getIdTransaction());
//    			System.out.println("ID expdest des ====> "+transactionDestination2.getId().getIdExpDest());
    			
    			System.out.println("Commentaire=======> "+transactionDestination2.getTransactionDestCommentaireReceptionPhysique());
    			System.out.println("Date Récépion physique===> "+transactionDestination2.getTransactionDestDateReceptionPhysique());

    			transactionDestination.setTransactionDestEtatReceptionPhysique(etat);
    			transactionDestination.setTransactionDestDateReceptionPhysique(transactionDestination2.getTransactionDestDateReceptionPhysique());
    			transactionDestination.setTransactionDestCommentaireReceptionPhysique(transactionDestination2.getTransactionDestCommentaireReceptionPhysique());
    			System.out.println("resultat ===> "+transactionDestination.getTransactionDestCommentaireReceptionPhysique());
    		appMgr.update(transactionDestination);
    		 status1=true;    		
    		System.out.println("*****************validee avec succes*****************");
     	}catch(Exception e){

    		System.out.println(e);
    		e.printStackTrace();
    		System.out.println("*****************validee failed*****************");
    		status2=true;

    	}

    	
    }
    
    
    public void updateModeTr() {
		try {
			System.out.println("{{{{{{{{{{{{{{{{{{{{{{{ updateb  }}}}}}}}}}}}}}}}}}}}}}}}");
			courrierInformations=vb.getCourrierInformations();
			System.out.println("courrierInformations==================> "+courrierInformations);
		Courrier courrier=appMgr.getCourrierByIdCourrier(courrierInformations.getCourrierID()).get(0);
		System.out.println("courrier==> "+courrier.getTransmission().getTransmissionId());
		courrier.setTransmission(appMgr.getTransmissionById(
				Integer.valueOf(selectedItemsTr)).get(0));
	
			appMgr.update(courrier);
			status1=true;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			status2=true;
			e.printStackTrace();
		}
	}
	
	
	public void getSelectionRowJour() {
		try {
//			System.out.println("======================> getSelectionRowJour");

			vb.setSelectedListCourrier("CRjour");
			vb.setDestinataireReel("");
			vb.setPremiereEntreeTransfert(1);

			Transaction transaction = new Transaction();
			CourrierInformations consulterInformations = selectedCourrier;		
//				System.out.println("XXXXXXX "+consulterInformations.getReferenceDestinataireReelle());
			vb.setCodeUniqueCourrier(consulterInformations
					.getCourrierDestinataireReelleDirection());

			if (consulterInformations.getCourrier() == null) {
				consulterInformations.setCourrier(appMgr
						.getCourrierByIdCourrier(
								consulterInformations.getCourrierID()).get(0));
			}
			if (consulterInformations.getTransaction() == null) {
				consulterInformations.setTransaction(appMgr
						.getListTransactionByIdTransaction(
								consulterInformations.getTransactionID())
						.get(0));
			}

			if (consulterInformations.getListSelectedObject() != null) {
				vb.setCopyListSelectedObject(consulterInformations
						.getListSelectedObject());
				vb.setCopyListSelectedObjectExp(consulterInformations
						.getListSelectedObject());
				System.out.println("CopyListSelectedObjectExp size = "
						+ vb.getCopyListSelectedObjectExp().size());
			}
			if (consulterInformations.getListSelectedPerson() != null) {
				vb.setCopyListSelectedPerson(consulterInformations
						.getListSelectedPerson());
				System.out.println("CopyListSelectedPerson size = "
						+ vb.getCopyListSelectedPerson().size());
			}
			if (consulterInformations.getListSelectetdUnit() != null) {
				vb.setCopyListSelectedUnit(consulterInformations
						.getListSelectetdUnit());
				System.out.println("CopyListSelectedUnit size = "
						+ vb.getCopyListSelectedUnit().size());
				System.out.println("vb.getCopyListSelectedUnit() "
						+ vb.getCopyListSelectedUnit());
			}
			if (consulterInformations.getListSelectetdBoc() != null) {
				vb.setCopyListSelectedBoc(consulterInformations
						.getListSelectetdBoc());
				System.out.println("CopyListSelectedBoc size = "
						+ vb.getCopyListSelectedBoc().size());
			}

			vb.setCourDossConsulterInformations(consulterInformations);
			// a commenté si on a renversé l'ancienne liste de courriers
			consulterInformations.setCourrier(appMgr.getCourrierByIdCourrier(
					consulterInformations.getCourrierID()).get(0));
			courrier = consulterInformations.getCourrier();

			vb.setCourrier(courrier);
			transaction = appMgr.getListTransactionByIdTransaction(
					consulterInformations.getTransactionID()).get(0);
			List<TransactionDestination> listTransactionDestination = appMgr
					.getListTransactionDestinationByIdTransaction(consulterInformations
							.getTransactionID());// valeur ancien
													// #firstTransaction.getTransactionId()#

			if (!listTransactionDestination.isEmpty()) {
				vb.setTransactionDestination(listTransactionDestination
						.get(listTransactionDestination.size() - 1));// 2015-02-27
				consulterInformations
						.setTransactionDestination(listTransactionDestination
								.get(listTransactionDestination.size() - 1));

			}
//			System.out.println("AAAAAAAAAAAAAAAAAA "+listTransactionDestination.size());
			

			if (vb.getPerson().isBoc()) {
				if (consulterInformations.getCourrierDestinataireReelle()
						.contains("(PP)")
						|| consulterInformations
								.getCourrierDestinataireReelle().contains(
										"(PM)")) {
					vb.setShowMonitoringButtonForDest(false);
				} else {
					vb.setShowMonitoringButtonForDest(true);
				}
				try {
					if (transaction.getIdUtilisateur() != vb.getPerson()
							.getId()
							|| listCourrierJour.contains(consulterInformations)) {

//						System.out
//								.println("transaction.getIdUtilisateur ============>"
//										+ transaction.getIdUtilisateur());
//						System.out
//								.println("vb.getPerson().getId() ============>"
//										+ vb.getPerson().getId());

						if (transaction.getIdUtilisateur() != vb.getPerson()
								.getId()) {

							TransactionDestination transactionDestination = new TransactionDestination();

							transactionDestination = consulterInformations
									.getTransactionDestination();
							if (transactionDestination
									.getTransactionDestDateConsultation() == null) {
								transactionDestination
										.setTransactionDestDateConsultation(new Date());
								appMgr.update(transactionDestination);
							}
							vb.setTransactionDestination(transactionDestination);
						} else {
							if (transaction.getTransactionDateConsultation() == null) {

								transaction
										.setTransactionDateConsultation(new Date());
								appMgr.update(transaction);
							}
							// ajouté lors #// C *# pour que la date de
							// consultation des courriers arrivé par le boct
							// soit enregistré
							TransactionDestination transactionDestination = consulterInformations
									.getTransactionDestination();

							Expdest expdest = appMgr.getListExpDestByIdExpDest(
									transactionDestination.getId()
											.getIdExpDest()).get(0);

							/*
							 * Commenter le 2019-10-09 Ce code fait le mise à
							 * jour dans table transactionDes même avec le
							 * destinataire consulte le courrier exemple : BOCT
							 * envoie courrier de DG vers Externe ,BOCT consulte
							 * Courrier ,le courrier s'affiche consulté à DG
							 */

							// if (vb.getPerson().isBoc()
							// && expdest.getTypeExpDest().equals(
							// "Interne-Boc")) {
							//
							//
							// if (transactionDestination
							// .getTransactionDestDateConsultation() == null) {
							//
							// transactionDestination
							// .setTransactionDestDateConsultation(new Date());
							//
							// appMgr.update(transactionDestination);
							// }
							// }
							vb.setTransactionDestination(transactionDestination);
						}
					} else {
						if (transaction.getTransactionDateConsultation() == null) {
							transaction
									.setTransactionDateConsultation(new Date());
							appMgr.update(transaction);
						}
					}
				} catch (NullPointerException e) {
					e.printStackTrace();
				}
			} 
			else {

				if (consulterInformations.getCourrierRecu() == 1
						&& consulterInformations.getTransactionDestination()
								.getTransactionDestDateConsultation() == null) {
					System.out
							.println("Mise à jour dans table transaction dest");
					TransactionDestination transactionDestination = new TransactionDestination();
					transactionDestination = consulterInformations
							.getTransactionDestination();
//					System.out
//							.println("transactionDestination===>"
//									+ transactionDestination.getId()
//											.getIdTransaction());
					transactionDestination
							.setTransactionDestDateConsultation(new Date());
					appMgr.update(transactionDestination);
					vb.setTransactionDestination(transactionDestination);
					// chargement variable log & notification
					chargementNotification(consulterInformations);
				}

				else if (transaction.getIdUtilisateur() == vb.getPerson()
						.getId()
						&& transaction.getTransactionDateConsultation() == null) {
					transaction.setTransactionDateConsultation(new Date());
					appMgr.update(transaction);
				}
			}

			vb.setCopyDestNom(consulterInformations.getCourrierDestinataireReelle());

			vb.setCopyExpNom(consulterInformations.getCourrierExpediteur());
			vb.setCopyCourrierCommentaire(consulterInformations.getCourrierCommentaire());
			vb.setCopyOtherDest(consulterInformations
					.getCourrierAutreDestinataires());
			vb.setTransaction(transaction);
			// ** expediteur reel
			vb.setCopyExpReelNom(consulterInformations.getCourrierExpediteur());
			// ** destinataire reel
//consulterInformations.getCourrierDestinataireReelle();
vb.setDestinataireReel(consulterInformations.getReferenceDestinataireReelle());
//			System.out.println("RRRRRRR "+consulterInformations.getReferenceDestinataireReelle());
			
			
			
			vb.setDestinataireReel(consulterInformations.getReferenceDestinataireReelle());
			
			vb.setCourrierInformations(consulterInformations);

			vb.setReferenceDestinataireReel(consulterInformations.getReferenceDestinataireReelle());

			vb.setListeDestinataire(consulterInformations.getListeDestinatairesAvecAnnotations());

			// ** expediteur reel

			// Vider les listes des detinatires avant de transferer le courrier
			// pour ne pas garder le destinataire de l'ancien courrier
			vb.setCopyListSelectedUnit(new ArrayList<Unit>());
			vb.setCopyListSelectedPerson(new ArrayList<Person>());
			vb.setCopyListPP(new ArrayList<Pp>());
			vb.setCopyListPM(new ArrayList<Pm>());
//			System.out.println("vb.getCopyListSelectedUnit()=====> "+ vb.getCopyListSelectedUnit());

			List<TransactionAnnotation> annotations = new ArrayList<TransactionAnnotation>();
			annotations = appMgr.getAnnotationByIdTransaction(consulterInformations
							.getTransactionID());

			int lastIndex;
			int refAnnotation;
			String result = "";
			for (TransactionAnnotation ta : annotations) {

				refAnnotation = ta.getId().getIdAnnotation();
				result += appMgr.getAnnotationByIdAnotation(refAnnotation)
						.get(0).getAnnotationLibelle()
						+ " / ";

			}
			if (!result.equals("")) {
				lastIndex = result.lastIndexOf("/");
				result = result.substring(0, lastIndex);
			}
			vb.setCopyAnnotationResult(result);
			
			
			/*
			 * LogClass logClass = new LogClass(); logClass.addTrack(
			 * 
			 * 
			 * "consultation", "Evénement de log de consultation du courrier " +
			 * courrier.getIdCourrier() + "-" +
			 * courrier.getCourrierReferenceCorrespondant(), vb.getPerson(),
			 * "INFO", appMgr);
			 */

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void getSelectionRowJourForValidate() {
		try {
			vb.setSelectedListCourrier("CRjour");
			Transaction transaction = new Transaction();
			CourrierInformations courrierInformations = selectedCourrier;
			if (courrierInformations.getCourrier() == null) {
				courrierInformations.setCourrier(appMgr
						.getCourrierByIdCourrier(
								courrierInformations.getCourrierID()).get(0));
			}
			if (courrierInformations.getTransaction() == null) {
				courrierInformations
						.setTransaction(appMgr
								.getListTransactionByIdTransaction(
										courrierInformations.getTransactionID())
								.get(0));
			}
			vb.setCourDossConsulterInformations(courrierInformations);
			// a commenter si on a renversé l'ancienne liste de courriers
			courrier = courrierInformations.getCourrier();
			vb.setCourrier(courrier);
			transaction = courrierInformations.getTransaction();

			switch (courrierInformations.getCourrierRecu()) {
			case 1:
				TransactionDestination transactionDestination = courrierInformations
						.getTransactionDestination();
				vb.setTransactionDestination(transactionDestination);
				if (courrierInformations.getTransactionDestination()
						.getTransactionDestDateConsultation() == null) {
					transactionDestination
							.setTransactionDestDateConsultation(new Date());
					appMgr.update(transactionDestination);
				}

				break;

			case 0:
				if (transaction.getTransactionDateConsultation() == null) {
					transaction.setTransactionDateConsultation(new Date());
					appMgr.update(transaction);
				}
				break;
			}
			// ** expediteur reel
			vb.setCopyExpReelNom(courrierInformations.getCourrierExpediteur());
			// ** destinataire reel
			vb.setDestinataireReel(courrierInformations
					.getCourrierDestinataireReelle());

			// **
			// int refDossier = transaction.getDossier().getDossierId();
			// List<Transaction> listTransaction = appMgr
			// .getTransactionByIdDossier(refDossier);
			// Transaction firstTransaction =
			// listTransaction.get(listTransaction
			// .size() - 1);
			// Expdest expDest;
			// expDest = firstTransaction.getExpdest();
			// if (expDest.getTypeExpDest().equals("Interne-Person")) {
			// vb.setCopyExpReelNom(ldapOperation.getCnById(
			// ldapOperation.CONTEXT_USER, "uid",
			// expDest.getIdExpDestLdap()));
			// } else if (expDest.getTypeExpDest().equals("Interne-Unité")) {
			//
			// vb.setCopyExpReelNom(ldapOperation.getUnitById(
			// expDest.getIdExpDestLdap()).getShortNameUnit());
			//
			// } else if (expDest.getTypeExpDest().equals("Interne-Boc")) {
			// vb.setCopyExpReelNom(ldapOperation.getBocById(
			// expDest.getIdExpDestLdap()).getNameUnit());
			// } else if (expDest.getTypeExpDest().equals("Externe")) {
			// if (expDest.getExpdestexterne().getTypeutilisateur()
			// .getTypeUtilisateurLibelle().equals("PP")) {
			// vb.setCopyExpReelNom(expDest.getExpdestexterne()
			// .getExpDestExterneNom()
			// + " "
			// + expDest.getExpdestexterne()
			// .getExpDestExternePrenom() + " (PP)");
			// } else {
			// vb.setCopyExpReelNom(expDest.getExpdestexterne()
			// .getExpDestExterneNom() + " (PM)");
			// }
			// }
			// **
			// if (consulterInformations.getTransaction()
			// .getTransactionDestinationReelle() != null) {
			// TransactionDestinationReelle transactionDestinationReelle = new
			// TransactionDestinationReelle();
			// transactionDestinationReelle = consulterInformations
			// .getTransaction().getTransactionDestinationReelle();
			// Expdest expDest = new Expdest();
			// Transaction transaction1 = new Transaction();
			// transaction1 = appMgr
			// .getTransactionByIdTransactionAndFirstOrder(
			// transactionDestinationReelle
			// .getTransactionDestinationReelleId(),
			// 1).get(0);
			// expDest = transaction1.getExpdest();
			// if (expDest.getTypeExpDest().equals("Interne-Person")) {
			// vb.setCopyExpReelNom(ldapOperation.getCnById(
			// ldapOperation.CONTEXT_USER, "uid",
			// expDest.getIdExpDestLdap()));
			// } else if (expDest.getTypeExpDest().equals("Interne-Unité")) {
			// vb.setCopyExpReelNom(ldapOperation.getCnById(
			// ldapOperation.CONTEXT_UNIT, "departmentNumber",
			// expDest.getIdExpDestLdap()));
			// }
			// } else {
			// vb.setCopyExpReelNom(vb.getCopyExpNom());
			// }
			// **
			vb.setCopyDestNom(courrierInformations
					.getCourrierDestinataireReelle());
			vb.setCopyExpNom(courrierInformations.getCourrierExpediteur());
			// **
			// vb.setCopyCourrierCommentaire(consulterInformations.getCourrierCommentaire());
			vb.setCopyCourrierCommentaire(courrierInformations
					.getCourrierCommentaire());
			vb.setCopyOtherDest(courrierInformations
					.getCourrierAutreDestinataires());
			vb.setTransaction(transaction);

			vb.setListeDestinataire(courrierInformations
					.getListeDestinatairesAvecAnnotations());

			// destinataire reel
			// C*
			// if(transaction.getTransactionDestinationReelle() != null){
			// TransactionDestinationReelle transactionDestinationReelle =
			// appMgr.getTransactionDestinationReelById(transaction.getTransactionDestinationReelle().getTransactionDestinationReelleId());
			// if(transactionDestinationReelle != null){
			// if (courrier.getCourrierCircuit().equals("workflow")) {
			// Unit unitDestinataireReel =
			// ldapOperation.getUnitById(transactionDestinationReelle.getTransactionDestinationReelleIdDestinataire());
			// vb.setDestinataireReel(unitDestinataireReel.getNameUnit());
			// }else{
			// if(transactionDestinationReelle.getTransactionDestinationReelleTypeDestinataire().equals("Interne-Unité")){
			// Unit unit = vb.getHashMapUnit().get(
			// transactionDestinationReelle.getTransactionDestinationReelleIdDestinataire());
			// vb.setDestinataireReel(unit.getNameUnit());
			// }else
			// if(transactionDestinationReelle.getTransactionDestinationReelleTypeDestinataire().equals("Interne-Person")){
			// Person person = vb.getHashMapAllUser().get(
			// transactionDestinationReelle.getTransactionDestinationReelleIdDestinataire());
			// vb.setDestinataireReel(person.getCn());
			// }else
			// if(transactionDestinationReelle.getTransactionDestinationReelleTypeDestinataire().equals("Externe")){
			// Expdestexterne destReelExterne =
			// appMgr.getExpediteurById(transactionDestinationReelle.getTransactionDestinationReelleIdDestinataire()).get(0);
			// if(destReelExterne.getTypeutilisateur().equals(1)){
			// vb.setDestinataireReel(destReelExterne.getExpDestExternePrenom()
			// + " " + destReelExterne.getExpDestExterneNom());
			// }else if (destReelExterne.getTypeutilisateur().equals(2)) {
			// vb.setDestinataireReel(destReelExterne.getExpDestExterneNom());
			// }
			// }else{
			// vb.setDestinataireReel("--------------------------------");
			// }
			// }
			// }
			// }else{
			// vb.setDestinataireReel(vb.getCopyDestNom());
			// }
			// C*
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void getSelectionRowJourForResponse() {
		try {
			vb.setSelectedListCourrier("CRjour");
			Transaction transaction = new Transaction();
			CourrierInformations courrierInformations = selectedCourrier;
			if (courrierInformations.getCourrier() == null) {
				courrierInformations.setCourrier(appMgr
						.getCourrierByIdCourrier(
								courrierInformations.getCourrierID()).get(0));
			}
			if (courrierInformations.getTransaction() == null) {
				courrierInformations
						.setTransaction(appMgr
								.getListTransactionByIdTransaction(
										courrierInformations.getTransactionID())
								.get(0));
			}
			courrier = courrierInformations.getCourrier();
			vb.setCourDossConsulterInformations(courrierInformations);
			// a commenté si on a renversé l'ancienne liste de courriers
			vb.setCourrier(courrier);
			transaction = courrierInformations.getTransaction();
			// if (lstCourrierRecuJour.contains(courrierInformations)
			// && courrierInformations.getTransactionDestination()
			// .getTransactionDestDateConsultation() == null) {
			// TransactionDestination transactionDestination = new
			// TransactionDestination();
			// transactionDestination = courrierInformations
			// .getTransactionDestination();
			// transactionDestination
			// .setTransactionDestDateConsultation(new Date());
			// appMgr.update(transactionDestination);
			// vb.setTransactionDestination(transactionDestination);
			// } else if (lstCourrierEnvoyerJour.contains(courrierInformations)
			// && transaction.getTransactionDateConsultation() == null) {
			// transaction.setTransactionDateConsultation(new Date());
			// appMgr.update(transaction);
			// }
			switch (courrierInformations.getCourrierRecu()) {
			case 1:
				if (courrierInformations.getTransactionDestination()
						.getTransactionDestDateConsultation() == null) {
					TransactionDestination transactionDestination = courrierInformations
							.getTransactionDestination();
					transactionDestination
							.setTransactionDestDateConsultation(new Date());
					appMgr.update(transactionDestination);

				}
				break;

			case 0:
				if (transaction.getTransactionDateConsultation() == null) {
					transaction.setTransactionDateConsultation(new Date());
					appMgr.update(transaction);
				}
				break;
			}
			if (courrierInformations.getCourrierExpediteurObjet() instanceof Person) {
				Person person = new Person();
				person = (Person) courrierInformations
						.getCourrierExpediteurObjet();
				vb.setCopyListSelectedPerson(new ArrayList<Person>());
				vb.getCopyListSelectedPerson().add(
						ldapOperation.getPersonalisedUserById(person.getId()));
				vb.setDestNom(person.getCn());
			} else if (courrierInformations.getCourrierExpediteurObjet() instanceof Unit) {
				Unit unit = new Unit();
				unit = (Unit) courrierInformations.getCourrierExpediteurObjet();
				vb.setCopyListSelectedUnit(new ArrayList<Unit>());
				vb.getCopyListSelectedUnit().add(unit);
				vb.setDestNom(unit.getNameUnit());
			}
			vb.setCopyDestNom(courrierInformations
					.getCourrierDestinataireReelle());
			vb.setCopyExpNom(courrierInformations.getCourrierExpediteur());
			vb.setCopyCourrierCommentaire(courrierInformations
					.getCourrierCommentaire());
			vb.setToReplay(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void repondre() {
		try {
			destinataireRepondre= new ArrayList<ListeDestinatairesModel>();
			vb.setSelectedListCourrier("CRjour");
			Transaction transaction = new Transaction();
			CourrierInformations courrierInformations = selectedCourrier;
			if (courrierInformations.getCourrier() == null) {
				courrierInformations.setCourrier(appMgr
						.getCourrierByIdCourrier(
								courrierInformations.getCourrierID()).get(0));
			}
			if (courrierInformations.getTransaction() == null) {
				courrierInformations
						.setTransaction(appMgr
								.getListTransactionByIdTransaction(
										courrierInformations.getTransactionID())
								.get(0));
			}
			vb.setCopyListSelectedObject(courrierInformations
					.getListSelectedObject());
			courrier = courrierInformations.getCourrier();
			vb.setCourDossConsulterInformations(courrierInformations);
			// a commenté si on a renversé l'ancienne liste de courriers
			vb.setCourrier(courrier);
			transaction = courrierInformations.getTransaction();

			switch (courrierInformations.getCourrierRecu()) {
			case 1:
				if (courrierInformations.getTransactionDestination()
						.getTransactionDestDateConsultation() == null) {
					TransactionDestination transactionDestination = courrierInformations
							.getTransactionDestination();
					transactionDestination
							.setTransactionDestDateConsultation(new Date());

					appMgr.update(transactionDestination);

				}
				break;

			case 0:
				if (transaction.getTransactionDateConsultation() == null) {
					transaction.setTransactionDateConsultation(new Date());
					appMgr.update(transaction);
				}
				break;
			}

			vb.setCopyDestNom(courrierInformations
					.getCourrierDestinataireReelle());
			vb.setCopyExpNom(courrierInformations.getCourrierExpediteur());
			vb.setCopyCourrierCommentaire(courrierInformations
					.getCourrierCommentaire());
			vb.setToReplay(true);

			// C* seach the real expediteur :
			if (courrierInformations.getCourrierAllTransactions() == null) {
				List<Transaction> allTransactions = appMgr
						.getTransactionByIdDossier(transaction.getDossier()
								.getDossierId());
				courrierInformations
						.setCourrierAllTransactions(allTransactions);
			}
			Transaction firstTransaction = courrierInformations
					.getCourrierAllTransactions().get(
							courrierInformations.getCourrierAllTransactions()
									.size() - 1);
			Expdest realExpediteur = appMgr.getListExpDestByIdExpDest(
					firstTransaction.getExpdest().getIdExpDest()).get(0);
			courrierInformations.setExpDest(realExpediteur);
			if (realExpediteur.getTypeExpDest().equals("Interne-Person")) {
				Person person = ldapOperation
						.getPersonalisedUserById(courrierInformations
								.getExpDest().getIdExpDestLdap());
				vb.getCopyListSelectedPerson().add(person);
				vb.setDestNom(person.getCn());
				// *** kha- ajoute 11-02-2019
				vb.setDestinataireId(person.getId());
				ListeDestinatairesModel dest = new ListeDestinatairesModel();
				dest.setDestinataireId(person.getId());
				dest.setDestinataireName(person.getCn());
				destinataireRepondre.add(dest);
				vb.setListeDestinataire(destinataireRepondre);
				// ***
			} else if (realExpediteur.getTypeExpDest().equals("Interne-Unité")) {
				Unit unit = vb.getHashMapUnit().get(
						courrierInformations.getExpDest().getIdExpDestLdap());

				vb.getCopyListSelectedUnit().add(unit);
				vb.setDestNom(unit.getNameUnit());
				// *** kha- ajoute 11-02-2019
				vb.setDestinataireId(unit.getIdUnit());
				ListeDestinatairesModel dest = new ListeDestinatairesModel();
				dest.setDestinataireId(unit.getIdUnit());
				dest.setDestinataireName(unit.getNameUnit());

				destinataireRepondre.add(dest);
				vb.setListeDestinataire(destinataireRepondre);
				// ****
				// }
				// else if
				// (realExpediteur.getTypeExpDest().equals("Interne-Boc")) {
				// expediteur.append(vb.getCentralBoc().getNameBOC());

			} else if (realExpediteur.getTypeExpDest().equals("Externe")) {
				Expdestexterne realExpediteurExterne = appMgr
						.getExpediteurById(
								realExpediteur.getExpdestexterne()
										.getIdExpDestExterne()).get(0);
				if (realExpediteurExterne.getTypeutilisateur()
						.getTypeUtilisateurLibelle().equals("PP")) {
					Pp pp = appMgr.getPPByReferenceExpediteur(
							realExpediteurExterne.getIdExpDestExterne()).get(0);

					pp.setExpdestexterne(realExpediteurExterne);
					vb.getCopyListPP().add(pp);
					vb.setDestNom(realExpediteurExterne.getExpDestExterneNom()
							+ " "
							+ realExpediteurExterne.getExpDestExternePrenom());
					// *** kha- ajoute 11-02-2019
					vb.setDestinataireId(pp.getExpdestexterne()
							.getIdExpDestExterne());
					ListeDestinatairesModel dest = new ListeDestinatairesModel();
					dest.setDestinataireId(pp.getExpdestexterne()
							.getIdExpDestExterne());
					dest.setDestinataireName(pp.getExpdestexterne()
							.getExpDestExterneNom());

					destinataireRepondre.add(dest);
					vb.setListeDestinataire(destinataireRepondre);
					// /****
				} else {
					Pm pm = appMgr.getPMByReferenceExpediteur(
							realExpediteurExterne.getIdExpDestExterne()).get(0);

					pm.setExpdestexterne(realExpediteurExterne);
					// pm.setExpdestexterne(expdestexterne)
					vb.getCopyListPM().add(pm);
					vb.setDestNom(realExpediteur.getExpdestexterne()
							.getExpDestExterneNom());
					// *** kha- ajoute 11-02-2019
					vb.setDestinataireId(pm.getExpdestexterne()
							.getIdExpDestExterne());
					ListeDestinatairesModel dest = new ListeDestinatairesModel();
					dest.setDestinataireId(pm.getExpdestexterne()
							.getIdExpDestExterne());
					dest.setDestinataireName(pm.getExpdestexterne()
							.getExpDestExterneNom());
					destinataireRepondre.add(dest);
					vb.setListeDestinataire(destinataireRepondre);
					// ****
				}
			}
			for (ListeDestinatairesModel d : destinataireRepondre) {
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public List<CourrierInformations> courriersLiees(CourrierInformations ci){
		
		int IdCourrier = ci.getCourrierID();
		
		// [JS] : Liste des Courriers Affectées
		List<CourrierInformations> courriersInformationsAffectes = new ArrayList<CourrierInformations>();
		type = "";
		type1 = "";
		if (vb.getPerson().isBoc()) {
			type = "boc_" + vb.getPerson().getAssociatedBOC().getIdBOC();
			type1 = "";
		} else if (vb.getPerson().isResponsable()) {
			type = "unit_"
					+ vb.getPerson().getAssociatedDirection().getIdUnit();
			type1 = "sub_" + idUser;
			// NEW

			for (Unit unit : vb.getPerson().getAssociatedDirection()
					.getListUnitsChildUnit()) {
				
				listIdsSousUnit.add(unit.getIdUnit());
				 
				try {
					listIdsSubordonne
							.add(unit.getResponsibleUnit().getId());
					
				} catch (Exception e) {
					System.out.println("#Sub-Unit without Responsible");
					e.printStackTrace();
				}

			}
			// FIn NEW
			try {
				if(vb.getPerson().getAssociatedDirection()!=null && vb.getPerson().getAssociatedDirection()
						.getSecretaryUnit()!=null ){
					
				
				typeSecretaire = "secretary_"
						+ vb.getPerson().getAssociatedDirection()
								.getSecretaryUnit().getId();
				}
				else{
					consultationCourrierSecretaire = "Non";
					System.out.println("PAS DE Secretaire");
				}
				
			} catch (NullPointerException e) {
				e.printStackTrace();
				consultationCourrierSecretaire = "Non";
			}

		} else if (vb.getPerson().isSecretary()) {
			type = "secretary_" + idUser;
			type1 = "unit_"
					+ vb.getPerson().getAssociatedDirection().getIdUnit();
		} else if (vb.getPerson().isAgent()) {
			type = "agent_" + idUser;
			type1 = "";
		}
		// fin identify connected user
		
		System.out.println("consultationCourrierSecretaire "+consultationCourrierSecretaire);
		courriersInformationsAffectes = appMgr
				.findCourrierEnvoyerANDRecuByCriteria(vb.getPerson()
						.isResponsable(), listIdsSousUnit, listIdsSubordonne,
						filterMap, sortField, descending,
						consultationCourrierSecretaire,
						consultationCourrierSubordonne,
						consultationCourrierSousUnite, 13, dateDebut, dateFin,
						type, type1, typeSecretaire, idUser, typeTransmission,
						"", 0, 10, false, 6, "Tous", vb.getDbType(),
						IdCourrier, 0, 0);
		System.out.println("Courriers Liées Affectées Pour l'enveloppe :  "	+ courriersInformationsAffectes.size());
		for (CourrierInformations courrierInformations : courriersInformationsAffectes) {
			try {
				searchExpediteurDestinataire(courrierInformations);

			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		listCourriersInformationsAffecte=new ArrayList<CourrierInformations>();
		listCourriersInformationsAffecte.addAll(courriersInformationsAffectes);
	
		
		return listCourriersInformationsAffecte;
		
	}

	public void executeCourrierElementaire(Transaction tr,
			TransactionDestinationReelle destinataionReel,
			CourrierInformations ci) {
	
		validateTransactionToDestinationReel(tr, destinataionReel);
		
		listCourriersInformationsAffecte=new ArrayList<CourrierInformations>();
		listCourriersInformationsAffecte=courriersLiees(ci);
	 System.out.println("listCourriersInformationsAffecte "+listCourriersInformationsAffecte.size());
		for (CourrierInformations cr : listCourriersInformationsAffecte) {
			System.out.println("1### ID Courrier "+cr.getCourrierID());
			System.out.println("2### ID transaction "+cr.getTransaction().getTransactionId());
			Courrier crrr=appMgr.getCourrierByIdCourrier(cr.getCourrierID()).get(0);
			System.out.println("3### transmission "+crrr.getTransmission().getTransmissionLibelle());

			
			validateTransactionToDestinationReel(cr.getTransaction(), cr
					.getTransaction().getTransactionDestinationReelle());
	
		}

	}

	/**
	 * 
	 * XTE - AH : Methode appelée lors de clic sur le bouton Exécuter dans la
	 * liste des Courrier d'aujourd'hui
	 * 
	 **/
	public void executeJour() {
		Courrier courrier = new Courrier();
		BOC bocDest = new BOC();
		courrierInformations = selectedCourrier;
		System.out.println("courrierInformations :" + courrierInformations);

		/*------------------------------------------------------------
		 * Vérifier est ce que le bureau d'ordre connecté est l'éditeur de courrier 
		 */
		List<Integer> listeIdMembresBOc = new ArrayList<Integer>();
		int idEditeur;
//		System.out.println("******************************************");
//		System.out.println("courrier.getIdCourrier() "+ courrier.getIdCourrier());
		CourrierDossier courrierDossier1 = appMgr
				.getCourrierDossierByIdCourrier(
						courrierInformations.getCourrierID()).get(0);
		int refdossier = courrierDossier1.getId().getDossierId();
		Transaction transactionn = new Transaction();
		List<Transaction> listTr = appMgr.getTransactionByIdDossier(refdossier);
		lastIndex = listTr.size();
		transactionn = listTr.get(lastIndex - 1);
		idEditeur = transactionn.getIdUtilisateur();
//		System.out.println("Id Editeur ====>" + idEditeur);
//
//		System.out.println("****************************************");
		List<Person> listMembresBoc = vb.getPerson().getAssociatedBOC()
				.getMembersBOC();
		for (Person membres : listMembresBoc) {
			listeIdMembresBOc.add(membres.getId());
		}

		// ######################################################################################################
		// parcourir la liste des transaction et vérifier si existe des BO sans
		// Membres
		existeBOSansMembres = false;

		for (Transaction transaction : courrierInformations
				.getCourrierAllTransactions()) {
			System.out.println("(1) :: transaction en cours "+transaction.getTransactionId());
			List<Transaction> transactionExpediteur;
			transactionExpediteur = new ArrayList<Transaction>();
			transactionExpediteur = appMgr
					.getTransactionExpediteurByIdTransactionDestinationReelle(
							transaction.getTransactionDestinationReelle()
									.getTransactionDestinationReelleId(), 1);
			for (Transaction tra : transactionExpediteur) {
				
				System.out.println("( 2 ) :: transactionExpediteur :: "+tra.getTransactionId());
				idUserDes = tra.getTransactionDestinationReelle()
						.getTransactionDestinationReelleIdDestinataire();
				typeUserDes = tra.getTransactionDestinationReelle()
						.getTransactionDestinationReelleTypeDestinataire();
			}
			int idDest;
			Unit unitRechecheDes = new Unit();
			boolean findPersonDest = false;
			boolean findUnitDest = false;
			Person personneRechercheDes = new Person();
			int k = 0;
			if (typeUserDes.equals("Interne-Person")
					|| typeUserDes.equals("Interne-Unité")) {
				if (typeUserDes.equals("Interne-Person")) {

					do {

						idDest = vb.getCopyLdapListUser().get(k).getId();

						if (idDest == idUserDes) {
							findPersonDest = true;
							personneRechercheDes = vb.getCopyLdapListUser()
									.get(k);
						} else {
							k++;
						}

					} while (!findPersonDest
							&& k < vb.getCopyLdapListUser().size());
					getIdBocByUnit(personneRechercheDes
							.getAssociatedDirection());

				} else if (typeUserDes.equals("Interne-Unité")) {
					do {

						idDest = vb.getCopyLdapListUnit().get(k).getIdUnit();

						if (idDest == idUserDes) {
							findUnitDest = true;
							unitRechecheDes = vb.getCopyLdapListUnit().get(k);
						} else {
							k++;
						}

					} while (!findUnitDest
							&& k < vb.getCopyLdapListUnit().size());

					Unit unite = ldapOperation.getUnitById(unitRechecheDes
							.getIdUnit());

					getIdBocByUnit(unite);
				}
				int idBocDestinataire = idBoc;
				
				bocDest = ldapOperation.getBocByID(idBocDestinataire);
				listIdBocMembers = new ArrayList<Integer>();

				List<Person> listBocMembers = bocDest.getMembersBOC();
				if (listBocMembers != null && listBocMembers.size() > 0) {
					// BO avec Membres
				} else {
					// Le BO Dest n'a pas des Membres
					existeBOSansMembres = true;
					break;
				}

				System.out.println("bocDest.getNameBOC() "
						+ bocDest.getNameBOC());

			} else if (typeUserDes.equals("Externe")) {
				existeBOSansMembres = false;
			}

		}
//		System.out.println("existeBOSansMembres ==========> "
//				+ existeBOSansMembres);

		// ######################################################################################################

		if (!existeBOSansMembres) {
			receptionphysiqueNonLivre = false;
			// [JS] Ajouté le 2019-07-30
			List<TransactionDestination> listTransactionDest = appMgr
					.getDestinationByIdTransaction(courrierInformations
							.getTransaction().getTransactionId());
//			System.out.println("size listTransactionDest : "
//					+ listTransactionDest.size());
			if (listTransactionDest != null && listTransactionDest.size() > 0) {
				System.out.println("listTransactionDest Expedest :: "+listTransactionDest.get(0).getId().getIdExpDest());
				TransactionDestination trDest = listTransactionDest.get(0);
				List<Courrier> listeCourriers = appMgr.getCourrierByIdCourrier(courrierInformations.getCourrierID());
				if (listeCourriers != null && listeCourriers.size() > 0) {
					Courrier cr = listeCourriers.get(0);
				
					if (trDest.getTransactionDestEtatReceptionPhysique() != null) {
						if (cr.getCourrierAvecDocumentPhysique() == true
								&& !listeIdMembresBOc.contains(idEditeur)
								&& trDest
										.getTransactionDestEtatReceptionPhysique()
										.getEtatId() == 9) {
							System.out
									.println("Erreur vous devez receptionner le document avant ");
							receptionphysiqueNonLivre = true;
						}

					} 
					else {
						// soit pas de reception physique soit avec l'état 8
						// receptionné

						// Fin JS
//						System.out.println("[receptionphysiqueNonLivre] : "
//								+ receptionphysiqueNonLivre);
					}
					
					//******************************************************************************************
					
					if(vb.getPerson().isBoc() ){
						idBoc=vb.getPerson().getAssociatedBOC().getIdBOC();
					}
					
					
					
//					System.out.println("=========================== Pointer Courrier Avant d'executer ===============");
//					System.out.println("ID boc "+idBoc);
//					System.out.println("bocDest.getIdBOC() "+bocDest.getIdBOC());
					//BO DEstinataire va faire le pointage 
					if(bocDest.getIdBOC()==idBoc){
					 
//						 System.out.println("Courrier "+courrierInformations.getCourrierID());
						 courrier=appMgr.getCourrierByIdCourrier(courrierInformations.getCourrierID()).get(0);
//						 System.out.println("Courrier "+courrier.getIdCourrier());
						   //Si courrier est affecté à une valise
						 if (courrier.getIdcourrierFK() != null){							 
							 
							 Courrier crValise = appMgr.getCourrierByIdCourrier(courrier.getIdcourrierFK().getIdCourrier()).get(0);
						  	 List<CourrierDossier> dossiers=appMgr.getCourrierDossierByIdCourrier(crValise.getIdCourrier());
							Dossier dossier= appMgr.getDossierByIdDossier(dossiers.get(0).getId().getDossierId()).get(0);
							  List<Transaction> transactions=appMgr.getTransactionByIdDossier(dossier.getDossierId());
							 if(transactions != null && transactions.size()>0){
								  Transaction tr=transactions.get(0);
							 //Si courrier a type de transmission  valise et n'est pas encore Pointé
								  if(courrier.getTransmission().getTransmissionId()==9 && courrier.getCourrierDatePointage() == null && tr.getEtat().getEtatId()==12  ){
							   						 courrierPointer=true;
									  }								
							 }
							   
						   }
						 
					 }
				
				
//					System.out.println("courrierPointer==============> "+courrierPointer);
			
									
					//****************************************************************************************************************
					

					if (!receptionphysiqueNonLivre && !courrierPointer) {

						if (courrierInformations.getCourrier() == null) {
							courrierInformations.setCourrier(appMgr
									.getCourrierByIdCourrier(
											courrierInformations
													.getCourrierID()).get(0));
						}
						courrier = courrierInformations.getCourrier();
						Etat etat = new Etat();
						etat = appMgr.listEtatByRef(
								courrierInformations.getEtatID()).get(0);
						if (etat.getEtatLibelle().equals("Faire suivre")) {
							String circuitCourrier = courrier
									.getCourrierCircuit();
							if (circuitCourrier.equals("workflow")) {
								int refNature = courrier.getNature()
										.getNatureId();
								int etatActuelle = courrier
										.getCourrierEtatActuelleWorkflow();
								Workflow workflow = new Workflow();
								int nb = appMgr.listWorkflowByIdNature(
										refNature).size();
								if (nb != 0) {
									/********* WorkFlow Request ********/
									workflow = appMgr.listWorkflowByIdNature(
											refNature).get(0);
									String processId = workflow
											.getWorkflowTitre();
									int idLastNode = workflow
											.getWorkflowIdLastNode();
									if (etatActuelle == idLastNode) {
										if (courrierInformations
												.getTransaction() == null) {
											courrierInformations
													.setTransaction(appMgr
															.getListTransactionByIdTransaction(
																	courrierInformations
																			.getTransactionID())
															.get(0));
										}
										validerFinProcessus(courrierInformations
												.getTransaction());
									} else {
										if (courrierInformations
												.getTransaction() == null) {
											courrierInformations
													.setTransaction(appMgr
															.getListTransactionByIdTransaction(
																	courrierInformations
																			.getTransactionID())
															.get(0));
										}
										TraitementEtapeSuivant etapeSuivant = new TraitementEtapeSuivant();
										JBPMAccessProcessBean jbpmAccessProcessBean = new JBPMAccessProcessBean();
										etapeSuivant = jbpmAccessProcessBean
												.startProcessTraitementCourrier(
														processId, etatActuelle);
										List<TransactionDestination> listTrDest = appMgr
												.getListTransactionDestinationByIdTransaction(courrierInformations
														.getTransactionID());
										validateWorkflow(etapeSuivant,
												courrierInformations
														.getTransaction(),
												listTrDest.get(listTrDest
														.size() - 1), courrier);
									}
								}
							}
						}
						else {
							// XTE -AH : Parcourir la liste des destinataires/ liste de ALL transactions
							// Parcourir la liste des transaction où il est editeur ou intervenent 
							
							
							for (Transaction transaction : courrierInformations
									.getCourrierAllTransactions()) {
								System.out.println("#### 1 ID TR ####"+ transaction.getTransactionId());

								TransactionDestinationReelle destinataionReel = appMgr
										.getTransactionDestinationReelById(transaction
												.getTransactionDestinationReelle()
												.getTransactionDestinationReelleId());
								// XTE - AH : Si le destinataire n'est pas
								// externe
								if (destinataionReel != null) {
									if (!destinataionReel
											.getTransactionDestinationReelleTypeDestinataire()
											.equals("Externe")) {
																		
											
											listCourriersLiees = courriersLiees(courrierInformations);
//											System.out.println("listCourriersLiees "+listCourriersLiees.size());
											if(listCourriersLiees != null && listCourriersLiees.size()>0){

											
//											System.out
//													.println("transaction==>"
//															+ transaction
//																	.getTransactionId());
//											System.out
//													.println("destinataionReel==>"
//															+ destinataionReel
//																	.getTransactionDestinationReelleId());
											executeCourrierElementaire(
													transaction,
													destinataionReel,
													courrierInformations);
											}
 
										else {

											// c'est un courrier d'arrivé depuis
											// l'exterieur (PP ou
											// PM) vers l'interne, donc il faut
											// l'executer pour que
											// le courrier s'entre dans le
											// circuit de
											// validation
											// hierarchique
											// ( validation hierarchique depend
											// de la
											// variable de
											// parametrage
											// #passage_hierarchique_courrier_arrive_apres_directeur_generale#
											validateTransactionToDestinationReel(transaction,destinataionReel);
											// if(destinataionReel.getTransactionDestinationReelleResponsableReponse()!=
											// null){
											// validateTransactionToDestinationReel(selectedCourrier.getTransaction(),
											// destinataionReel);
											// }else{
											// setShowResponsableResponse(true);
											// }
										}
									}
									// XTE - AH : Si le destinataire est externe
									else {
										// c'est un courrier d'un personne ou
										// unité
										// interne vers
										// l'exterieur, juste il faut l'executer
										// pour ajouter la
										// transaction de depart d'un courrier
										executeOneTransaction(courrierInformations);
										break;
									}
								}
							}

						}
					} else {
						System.out
								.println("Le courrier n'est pas encore réceptionné ");
					}
				}
			}
		}
	}

	public  Integer findIdDestinataireSuivant(Integer idDestinataireReel,
			Integer idConnectedPerson, Boolean destinataireReelIsPerson,
			boolean passageDGEN, Person generalDirector) {
		System.out.println("DAN  ::: findIdDestinataireSuivant  ::::");
		System.out.println("destinataireReelIsPerson ::"
				+ destinataireReelIsPerson);

		Person person;
		if (destinataireReelIsPerson) {
			person = ldapOperation.getPersonalisedUserById(idDestinataireReel);
		} else {
			Unit unit = ldapOperation.getUnitById(idDestinataireReel);
			person = ldapOperation.getPersonalisedUserById(unit
					.getResponsibleUnit().getId());
		}

		System.out.println("person  #### " + person);
		Unit superiorUnit;
		if (person.isResponsable()) {
			Unit u = ldapOperation.getUnitById(person.getAssociatedDirection()
					.getIdUnit());
			// superiorUnit =
			// person.getAssociatedDirection().getAssociatedUnit();
			superiorUnit = u.getAssociatedUnit();
		} else {
			superiorUnit = person.getAssociatedDirection();
		}
		System.out.println("##### superiorUnit  #### " + superiorUnit);
		if (passageDGEN) {
			if (superiorUnit.getResponsibleUnit().getId() != idConnectedPerson) {
				System.out.println(superiorUnit.getResponsibleUnit().getId());
				return findIdDestinataireSuivant(superiorUnit
						.getResponsibleUnit().getId(), idConnectedPerson, true,
						passageDGEN, generalDirector);
			}
		} else {

			if (superiorUnit != null
					&& superiorUnit.getResponsibleUnit().getId() != idConnectedPerson
					&& superiorUnit.getResponsibleUnit().getId() != generalDirector
							.getId()) {
				System.out.println(">>>>>>>AH "
						+ superiorUnit.getResponsibleUnit().getId());
				return findIdDestinataireSuivant(superiorUnit
						.getResponsibleUnit().getId(), idConnectedPerson, true,
						passageDGEN, generalDirector);
			}

		}

		System.out.println("#########################");
		return person.getId();
	}

	public  void validateTransactionToDestinationReel(Transaction transaction,
			TransactionDestinationReelle trDestinationReelle) {
		try {

			Variables variable = appMgr.listVariablesByLibelle("validation_hierarchique_courrier_arrive").get(0);
			Variables variableToDGEN = appMgr.listVariablesByLibelle("envoie_courrier_arrive_directeur_generale").get(0);
			boolean passageDGEN = false;
			Person generalDirector = null;
			Unit generalDirectorUnit = null;
			// XET - AH : Si nous avons
			// envoie_courrier_arrive_directeur_generale= Oui
			if (variableToDGEN.getVaraiablesValeur().equals("Oui")) {
				passageDGEN = true;
				// special pour le BOC dans le cas ou la vlalidation ne passe
				// pas par le DGEN pour la fonction #findIdDestinataireSuivant#
				generalDirectorUnit = ldapOperation.getUnitById(0);
				generalDirector = generalDirectorUnit.getResponsibleUnit();
				// special pour le BOC dans le cas ou la vlalidation ne passe
				// pas par le DGEN pour la fonction #findIdDestinataireSuivant#
			}
			// XET - AH : Si nous avons
			// envoie_courrier_arrive_directeur_generale= Oui
			else {
				// special pour le BOC dans le cas ou la vlalidation ne passe
				// pas par le DGEN pour la fonction #findIdDestinataireSuivant#
				generalDirectorUnit = ldapOperation.getUnitById(0);
				generalDirector = generalDirectorUnit.getResponsibleUnit();
				// special pour le BOC dans le cas ou la vlalidation ne passe
				// pas par le DGEN pour la fonction #findIdDestinataireSuivant#
			}
			status1 = false;
			status2 = false;
			TransactionDestination transactionDestination = selectedCourrier.getTransactionDestination();
			transactionDestination = appMgr.getDestinationByIdTransaction(transactionDestination.getId().getIdTransaction()).get(0);
			// XET - AH Si nous avons une validation hiérarchique arrivé
			if (variable.getVaraiablesValeur().equals("Oui")) {
//				System.out.println("AH >>>>> validation_hierarchique_courrier_arrive == Oui");
				// si le courrier à D et l'expéditeur et le destinataire ne sont pas sou le même BO
				
				Integer idDestinataireReel = trDestinationReelle.getTransactionDestinationReelleIdDestinataire();
//				System.out.println("AH >>>>> idDestinataireReel "+ idDestinataireReel);
				
				if( transaction.getCourrierType().equals("D"))	{
					if(isBocExp(transaction))
					executeTransactionInterne(transaction, courrierInformations);
				}
							
				
				// Vérifier si le destinataire réelle sous le même BO qui
				// exécute
				// Si "OUI"
				else if (transaction.getCourrierType().equals("I")) {
					System.out
							.println("##### La Ref est I c'est une première exécution d'un courrier ajouté par Direction");
					executeTransactionInterne(transaction, courrierInformations);
				} else {
					System.out.println("##### Ce n'est un Courrier interne "+ transaction.getCourrierType());

					// Si "NON" : passer le courrier au BO suivant
					if (trDestinationReelle.getTransactionDestinationReelleTypeDestinataire().equals("Interne-Person")) {
						// Le destinaite est Person
						System.out.println("Le destinaite réel est Person");
						if (idDestinataireReel != generalDirector.getId()) {
							System.out.println("idDestinataireReel != generalDirector.getId()");
							Integer idDestinataireSuivant = findIdDestinataireSuivant(idDestinataireReel, vb.getPerson().getId(),true, passageDGEN, generalDirector);
							// XTE - AH : si le destinataire suivant est le
							// destinataire final
							if (idDestinataireSuivant.equals(idDestinataireReel)) {
								System.out.println("##### Au dest Finale ");
								validateTransactionDestinataireFinale(transaction, transactionDestination);
							} else {
								System.out.println("#####  !au dest Finale ");
								validateTransactionDestinataireSuivant(transaction, transactionDestination,idDestinataireSuivant);
							}
						} else {
							System.out.println("Dans l'unite DG");
							validateTransactionDestinataireFinale(transaction,
									transactionDestination);
						}
					}
					else if (trDestinationReelle
							.getTransactionDestinationReelleTypeDestinataire()
							.equals("Interne-Unité")) {
						System.out.println("#####  Le destinaite réel est UNITE");
						if (idDestinataireReel != generalDirectorUnit
								.getIdUnit()) {
							System.out.println("#####  Ce n'est pas la DG");
							Integer idDestinataireSuivant = findIdDestinataireSuivant(
									idDestinataireReel, vb.getPerson().getId(),
									false, passageDGEN, generalDirector);

							Unit unit = ldapOperation
									.getUnitById(idDestinataireReel);
							System.out
.println(">>>>>> idDestinataireSuivant :: "
											+ idDestinataireSuivant);
							System.out
									.println(">>>>>> unit.getResponsibleUnit().getId() "
											+ unit.getResponsibleUnit().getId());
							if (idDestinataireSuivant.equals(unit
									.getResponsibleUnit().getId())) {
								System.out
										.println("#####  aller à : validateTransactionDestinataireFinale ");
								validateTransactionDestinataireFinale(
										transaction, transactionDestination);
							} else {
								System.out
										.println("#####  aller à : validateTransactionDestinataireSuivant ");
								validateTransactionDestinataireSuivant(
										transaction, transactionDestination,
										idDestinataireSuivant);
							}
						} else {
							System.out
									.println("#####  Dans else de idDestinataireReel != generalDirectorUnit.getIdUnit()");
							validateTransactionDestinataireFinale(transaction,
									transactionDestination);
						}
					}
				}
			}
			else {
				System.out.println("-->Variable Passage par DG :"+ variableToDGEN.getVaraiablesValeur());
				System.out.println("-->Variable Passage héarchique :"+ variable.getVaraiablesValeur());
				System.out.println("Valeur de la variable executé :"+ vb.isExecute());
				if (vb.isExecute()) {
					System.out.println("DANS vb.isExecute()");
					validateTransactionDestinataireFinale(transaction,
							transactionDestination);
				} 
				else {
					System.out
							.println(">>>>>>>>> Méthode d'execution un courrier interne par BO "+transaction.getTransactionId());
					// [] Methode qui permet d'execute un courrier de
					// destination interne par BO
					executeTransactionInterne(transaction, courrierInformations);
				}
			}
			try {
				if (transactionDestination != null) {
					transactionDestination.getId();
					// AAA

					if (transactionDestination
							.getTransactionDestDateTransfert() == null) {
						transactionDestination
								.setTransactionDestDateTransfert(new Date());
					}
					if (transactionDestination
							.getTransactionDestDateConsultation() == null) {
						transactionDestination
								.setTransactionDestDateConsultation(new Date());
					}
					appMgr.update(transactionDestination);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			status1 = true;
		} catch (Exception e) {
			status2 = true;
			e.printStackTrace();
		}
	}

	public  void validateTransactionDestinataireSuivant(
			Transaction transaction,
			TransactionDestination transactionDestination,
			Integer idDestinataireSuivant) throws Exception {
		List<TransactionAnnotation> transactionAnnotation = appMgr
				.getAnnotationByIdTransaction(transaction.getTransactionId());
		newTransaction = new Transaction();
		System.out
				.println("DANS validateTransactionDestinataireSuivant ID TR : "
						+ transaction.getTransactionId());
		transaction = appMgr.getListTransactionByIdTransaction(transaction.getTransactionId()).get(0);
		
		System.out.println("isBocDest(transaction) "+ isBocDest(transaction));
		System.out.println("isBocExp(transaction)"+ isBocExp(transaction));
		
		
		String courrierRef="";
		courrier = courrierInformations.getCourrier();
		courrierRef=courrier.getCourrierType();
		Etat etat = new Etat();
		Expdest expdest = new Expdest();
		Typetransaction typetransaction = new Typetransaction();
		TransactionDestinationId id = new TransactionDestinationId();
		TransactionDestination trDest = new TransactionDestination();
		etat = appMgr.listEtatByRef(4).get(0);
		transaction.setEtat(etat);
		if (transaction.getTransactionOrdre() == null) {
			transaction.setTransactionOrdre(1);
		}
		appMgr.update(transaction);
		
		
		expdest.setTypeExpDest(transaction.getExpdest().getTypeExpDest());
		expdest.setIdExpDestLdap(transaction.getExpdest().getIdExpDestLdap());
		appMgr.insert(expdest);
		
		System.out.println(">>>>>>>>>>>>>>> 1) expdest "+ expdest.getIdExpDest());
	
		
		
		newTransaction.setTransactionTypeIntervenant("sub_"+ vb.getPerson().getId());
		// newTransaction.setTransactionCommentaire(commentaireTransaction);
		newTransaction.setExpdest(expdest);
		newTransaction.setIdUtilisateur(vb.getPerson().getId());
		newTransaction.setTransactionDateTransaction(new Date());
		typetransaction = appMgr.getTypeTransactionByLibelle("Envoi").get(0);
		newTransaction.setTypetransaction(typetransaction);
		etat = appMgr.listEtatByRef(2).get(0);
		newTransaction.setEtat(etat);
		newTransaction.setTransactionSupprimer(true);
		int ordreTransaction = transaction.getTransactionOrdre();
		newTransaction.setTransactionOrdre(++ordreTransaction);
		newTransaction.setDossier(transaction.getDossier());
		newTransaction.setTransactionDestinationReelle(transaction
				.getTransactionDestinationReelle());
		newTransaction.setTransactionFirst(transaction.getTransactionId());
		System.out.println("#### Pour newTransaction transaction.getCourrierType()  "+transaction.getCourrierType());
		//if(courrierRef.equals("D"))
		
	if(isBocDest(transaction) && !isBocExp(transaction)){
		
		//La référenece reste comme elle est 
		newTransaction.setCourrierType("A");
		
	
				
	}	
else{
	System.out.println(" ============> C'est dans le esle ");
}	
	
		
		newTransaction.setCourrierTypeOrdre(transaction.getCourrierTypeOrdre());
		newTransaction.setCourrierDateReceptionAnnee(transaction
				.getCourrierDateReceptionAnnee());
			newTransaction.setCourrierReferenceCorrespondant(newTransaction.getCourrierType()+transaction.getCourrierTypeOrdre());
		appMgr.insert(newTransaction);
		System.out.println("$$$$$$$$$$$$$$ newTransaction inseré :"+newTransaction);
		Expdest expdestSuivant = new Expdest();

		expdestSuivant.setTypeExpDest("Interne-Person");
		expdestSuivant.setIdExpDestLdap(idDestinataireSuivant);
		appMgr.insert(expdestSuivant);
		System.out.println(">>>>>>>>>>>>>>>2)  expdest "+ expdestSuivant.getIdExpDest());
		String type = "sub_" + idDestinataireSuivant;
		id = new TransactionDestinationId();
		trDest = new TransactionDestination();
		id.setIdTransaction(newTransaction.getTransactionId());
		id.setIdExpDest(expdestSuivant.getIdExpDest());
		System.out.println("type::::: " + type);
		trDest.setTransactionDestTypeIntervenant(type);
		trDest.setTransactionDestIdIntervenant(idDestinataireSuivant);
		trDest.setId(id);
		trDest.setTransactionDestDateReponse(transactionDestination.getTransactionDestDateReponse());
		appMgr.insert(trDest);
		TransactionAnnotationId cI = new TransactionAnnotationId();
		TransactionAnnotation cA = new TransactionAnnotation();
		for (TransactionAnnotation tr : transactionAnnotation) {
			cI.setIdAnnotation(tr.getId().getIdAnnotation());
			cI.setIdTransaction(newTransaction.getTransactionId());
			cA.setId(cI);
			appMgr.insert(cA);
			cA = new TransactionAnnotation();
			cI = new TransactionAnnotationId();
		}
	}

	public  void validateTransactionDestinataireFinale(Transaction transaction,
			TransactionDestination transactionDestination) throws Exception {
		List<TransactionAnnotation> transactionAnnotation = appMgr
				.getAnnotationByIdTransaction(transaction.getTransactionId());
		newTransaction = new Transaction();
		transaction = appMgr.getListTransactionByIdTransaction(
				transaction.getTransactionId()).get(0);
		Etat etat = new Etat();
		Expdest expdest = new Expdest();
		Typetransaction typetransaction = new Typetransaction();
		TransactionDestinationId id = new TransactionDestinationId();
		TransactionDestination trDest = new TransactionDestination();
		etat = appMgr.listEtatByRef(6).get(0);

		transaction.setEtat(etat);
		// transaction.setTransactionDateReponse(new Date());
		if (transaction.getTransactionOrdre() == null) {
			transaction.setTransactionOrdre(1);
		}
		Calendar cal = Calendar.getInstance();
		cal.setTime(courrierInformations.getCourrierDateReceptionEnvoi());
		int year = cal.get(Calendar.YEAR);
		vb.setTransaction(transaction);
		System.out.println(">>>>>>>>>>>>>>> transaction " + transaction);
		appMgr.update(transaction);
		expdest.setTypeExpDest("Interne-Person");
		expdest.setIdExpDestLdap(vb.getPerson().getId());
		appMgr.insert(expdest);
		// newTransaction.setTransactionTypeIntervenant("sub_"
		// + vb.getPerson().getId());
		newTransaction.setExpdest(expdest);
		newTransaction.setIdUtilisateur(vb.getPerson().getId());
		newTransaction.setTransactionDateTransaction(new Date());
		typetransaction = appMgr.getTypeTransactionByLibelle("Envoi").get(0);
		newTransaction.setTypetransaction(typetransaction);
		etat = appMgr.listEtatByRef(2).get(0);
		newTransaction.setEtat(etat);
		newTransaction.setTransactionSupprimer(true);
		int ordreTransaction = transaction.getTransactionOrdre();
		newTransaction.setTransactionOrdre(++ordreTransaction);
		newTransaction.setDossier(transaction.getDossier());
		newTransaction.setTransactionDestinationReelle(transaction
				.getTransactionDestinationReelle());
		newTransaction.setTransactionFirst(transaction.getTransactionId());
		newTransaction.setCourrierType(transaction.getCourrierType());
		newTransaction.setCourrierTypeOrdre(transaction.getCourrierTypeOrdre());
		newTransaction.setCourrierDateReceptionAnnee(transaction
				.getCourrierDateReceptionAnnee());
		newTransaction.setCourrierReferenceCorrespondant(transaction
				.getCourrierReferenceCorrespondant());
		appMgr.insert(newTransaction);
		String type = "";
		Expdest expdestFinal = new Expdest();
		if (transaction.getTransactionDestinationReelle()
				.getTransactionDestinationReelleTypeDestinataire()
				.equals("Interne-Person")) {
			Person personDestinationReel = ldapOperation
					.getPersonalisedUserById(transaction
							.getTransactionDestinationReelle()
							.getTransactionDestinationReelleIdDestinataire());
			expdestFinal.setTypeExpDest("Interne-Person");
			expdestFinal.setIdExpDestLdap(transaction
					.getTransactionDestinationReelle()
					.getTransactionDestinationReelleIdDestinataire());
			if (personDestinationReel.isResponsable()) {
				type = "sub_" + personDestinationReel.getId();
			} else if (personDestinationReel.isSecretary()) {
				type = "secretary_" + personDestinationReel.getId();
			} else {
				type = "agent_" + personDestinationReel.getId();
			}
		} else if (transaction.getTransactionDestinationReelle()
				.getTransactionDestinationReelleTypeDestinataire()
				.equals("Interne-Unité")) {
			expdestFinal.setTypeExpDest("Interne-Unité");
			expdestFinal.setIdExpDestLdap(transaction
					.getTransactionDestinationReelle()
					.getTransactionDestinationReelleIdDestinataire());
			type = "unit_"
					+ transaction.getTransactionDestinationReelle()
							.getTransactionDestinationReelleIdDestinataire();
		}
		appMgr.insert(expdestFinal);
		id = new TransactionDestinationId();
		trDest = new TransactionDestination();
		id.setIdTransaction(newTransaction.getTransactionId());
		id.setIdExpDest(expdestFinal.getIdExpDest());
		trDest.setTransactionDestTypeIntervenant(type);
		trDest.setId(id);
		trDest.setTransactionDestDateReponse(transactionDestination
				.getTransactionDestDateReponse());
		appMgr.insert(trDest);
		TransactionAnnotationId cI = new TransactionAnnotationId();
		TransactionAnnotation cA = new TransactionAnnotation();
		for (TransactionAnnotation tr : transactionAnnotation) {
			cI.setIdAnnotation(tr.getId().getIdAnnotation());
			cI.setIdTransaction(newTransaction.getTransactionId());
			cA.setId(cI);
			appMgr.insert(cA);
			cA = new TransactionAnnotation();
			cI = new TransactionAnnotationId();
		}
	}

	/**
	 * 
	 * XTE - AH : Méthode appelée si nous avons une exécution d'un courrier avec
	 * le destinataire est "Externe"
	 * 
	 **/
	public  void executeOneTransaction(CourrierInformations courrierInformations) {
		if (courrierInformations.getCourrier() == null) {
			courrierInformations.setCourrier(appMgr.getCourrierByIdCourrier(
					courrierInformations.getCourrierID()).get(0));
		}
		if (courrierInformations.getTransaction() == null) {
			courrierInformations.setTransaction(appMgr
					.getListTransactionByIdTransaction(
							courrierInformations.getTransactionID()).get(0));
		}
		setStatus1(false);
		setStatus2(false);
		Transaction transaction = new Transaction();
		transaction = courrierInformations.getTransaction();
		Transaction newTransaction;
		Transaction transactionExpediteur;
		List<Transaction> listTransaction = new ArrayList<Transaction>();
		try {
			if (transaction.getTransactionDestinationReelle() != null) {
				newTransaction = new Transaction();
				transactionExpediteur = new Transaction();

				transactionExpediteur = appMgr
						.getTransactionExpediteurByIdTransactionDestinationReelle(
								transaction.getTransactionDestinationReelle()
										.getTransactionDestinationReelleId(), 1)
						.get(0);

				listTransaction = appMgr
						.getTransactionByIdTransactionDestinationReelle(transaction
								.getTransactionDestinationReelle()
								.getTransactionDestinationReelleId());
				Etat etat = new Etat();
				Expdest expdest = new Expdest();
				Typetransaction typetransaction = new Typetransaction();
				TransactionDestinationId id = new TransactionDestinationId();
				TransactionDestination trDest = new TransactionDestination();
				etat = appMgr.listEtatByLibelle("Traité").get(0);
				newTransaction.setExpdest(transactionExpediteur.getExpdest());
				newTransaction.setIdUtilisateur(vb.getPerson().getId());
				newTransaction.setTransactionDateTransaction(new Date());
				typetransaction = appMgr.getTypeTransactionByLibelle("Envoi")
						.get(0);
				newTransaction.setTypetransaction(typetransaction);
				newTransaction.setEtat(etat);
				newTransaction.setTransactionSupprimer(true);
				int newOrderNumber = transaction.getTransactionOrdre();
				newOrderNumber++;
				newTransaction.setTransactionOrdre(newOrderNumber);
				newTransaction.setDossier(transaction.getDossier());
				newTransaction.setTransactionDestinationReelle(transaction
						.getTransactionDestinationReelle());
				newTransaction.setTransactionFirst(transaction
						.getTransactionId());

				appMgr.insert(newTransaction);

				expdest = new Expdest();
				Expdestexterne expDestExterne = new Expdestexterne();
				TransactionDestinationReelle transactionDestinationReelle = appMgr
						.getTransactionDestinationReelById(transaction
								.getTransactionDestinationReelle()
								.getTransactionDestinationReelleId());
				expdest.setTypeExpDest("Externe");
				expDestExterne = appMgr
						.getExpediteurById(
								transactionDestinationReelle
										.getTransactionDestinationReelleIdDestinataire())
						.get(0);
				expdest.setExpdestexterne(expDestExterne);
				vb.setExpdestexterneNotif(expDestExterne);
				transactionDestinationReelle
						.setTransactionDestinationReelleDateTraitement(new Date());
				appMgr.update(transactionDestinationReelle);
				appMgr.insert(expdest);

				id = new TransactionDestinationId();
				trDest = new TransactionDestination();
				id.setIdTransaction(newTransaction.getTransactionId());
				id.setIdExpDest(expdest.getIdExpDest());
				trDest.setTransactionDestTypeIntervenant(type);
				trDest.setId(id);
				appMgr.insert(trDest);

				List<TransactionAnnotation> transactionAnnotation = new ArrayList<TransactionAnnotation>();
				transactionAnnotation = appMgr
						.getAnnotationByIdTransaction(transaction
								.getTransactionId());
				TransactionAnnotationId cI = new TransactionAnnotationId();
				TransactionAnnotation cA = new TransactionAnnotation();
				for (TransactionAnnotation tr : transactionAnnotation) {
					cI.setIdAnnotation(tr.getId().getIdAnnotation());
					cI.setIdTransaction(newTransaction.getTransactionId());
					cA.setId(cI);
					appMgr.insert(cA);
					cA = new TransactionAnnotation();
					cI = new TransactionAnnotationId();
				}

				for (Transaction transaction1 : listTransaction) {
					transaction1.setEtat(etat);
					appMgr.update(transaction1);
				}
				Date dateCourrier = courrierInformations.getCourrier()
						.getCourrierDateReception();
				year = dateCourrier.getYear() + 1900;

				System.out.println("year   " + year);
				System.out.println("Boc  "
						+ "boc_"
						+ String.valueOf(vb.getPerson().getAssociatedBOC()
								.getIdBOC()));

				if (courrierInformations.getCourrier().getCourrierType()
						.equals("I")) {

					Integer lastId2 = appMgr.CountAllCourrierBOCByTransaction(transaction.getDossier().getDossierId(),
							"D",
							year,
							"boc_"
									+ String.valueOf(vb.getPerson()
											.getAssociatedBOC().getIdBOC()),
							listIdBocMembers);
					courrierInformations.getCourrier().setCourrierType("D");

					if (lastId2 != null) {
						courrierInformations.getCourrier()
								.setCourrierTypeOrdre(lastId2 + 1);

					} else {
						courrierInformations.getCourrier()
								.setCourrierTypeOrdre(1);
					}

					courrierInformations.getCourrier()
							.setCourrierReferenceCorrespondant(
									courrierInformations.getCourrier()
											.getCourrierType()
											+ courrierInformations
													.getCourrier()
													.getCourrierTypeOrdre());
					appMgr.update(courrierInformations.getCourrier());
					// XTE - AH : Dans le cas ou le courrier est I màj la ref du
					// Courrier dans la transaction
					List<Transaction> transactions = appMgr
							.getListTransactionByIdTransaction(transaction
									.getTransactionId());
					if (transactions != null && transactions.size() > 0) {
						transaction = transactions.get(0);

						transaction
								.setCourrierReferenceCorrespondant(courrierInformations
										.getCourrier()
										.getCourrierReferenceCorrespondant());

						transaction.setCourrierType(courrierInformations
								.getCourrier().getCourrierType());
						transaction.setCourrierTypeOrdre(courrierInformations
								.getCourrier().getCourrierTypeOrdre());
						appMgr.update(transaction);
					}

				}

				// /////////////////////////////////////////
				// courrierInformations.getCourrier().setCourrierReferenceCorrespondant("D"+courrierInformations.getCourrier().getIdCourrier());

				// XTE - AH : Mettre à jour la reference dans la dernière
				// transaction ajoutée
				newTransaction.setCourrierTypeOrdre(courrierInformations
						.getCourrier().getCourrierTypeOrdre());

				newTransaction.setCourrierType(courrierInformations
						.getCourrier().getCourrierType());
				newTransaction.setCourrierDateReceptionAnnee(transaction
						.getCourrierDateReceptionAnnee());
				newTransaction
						.setCourrierReferenceCorrespondant(courrierInformations
								.getCourrier()
								.getCourrierReferenceCorrespondant());
				appMgr.update(newTransaction);

				Dossier dossier = appMgr.getDossierByIdDossier(
						transaction.getDossier().getDossierId()).get(0);
				dossier.setDossierIntitule("Courrier_"
						+ courrierInformations.getCourrier().getIdCourrier());
				appMgr.update(dossier);
				// mettre a jour la reference pour indiquer qu'il est un
				// courrier de depart
				// mettre a jour la colonne #courrierDateReponseSysteme# pour
				// indiquer que le courrier originale a été repondu
				// trouvez le courrier original
				List<Lienscourriers> liensCourriers = appMgr
						.getListCourrierLiensByIdCourrier(courrierInformations
								.getCourrier().getIdCourrier());
				if (!liensCourriers.isEmpty()) {
					List<Integer> listIdLien = new ArrayList<Integer>();
					for (Lienscourriers liens : liensCourriers) {
						listIdLien.add(liens.getLiensCourrier());
					}
					CourrierLiens courrierLiens = appMgr
							.getCourrierLienByListIdLienAndTypeLien(listIdLien,
									1);
					if (courrierLiens != null) {
						Courrier courrierOriginal = appMgr
								.getCourrierByIdCourrier(
										courrierLiens.getId().getIdCourrier())
								.get(0);
						courrierOriginal
								.setCourrierDateReponseSysteme(new Date());
						appMgr.update(courrierOriginal);
					}
				}
				// trouver le courrier original
				// mettre a jour la colonne #courrierDateReponseSysteme# pour
				// indiquer que le courrier originale a été repondu
				// inséré la date de traitement

				TransactionDestination trDestinationInter = courrierInformations
						.getTransactionDestination();
				List<TransactionDestination> listTrDestination = appMgr
						.getDestinationByIdTransaction(courrierInformations
								.getTransaction().getTransactionId());
				if (listTrDestination != null && listTrDestination.size() > 0) {
					TransactionDestination trDestination = listTrDestination
							.get(0);

					if (trDestination.getTransactionDestDateTransfert() == null) {

						trDestination
								.setTransactionDestDateTransfert(new Date());
						appMgr.update(trDestination);
					}
					// inséré la date de traitement
					// inséré la date de consultation
					// [JS] : set Date De Consultation lors de consultation de
					// courrier et non pas au niveau execution
					// if (trDestination.getTransactionDestDateConsultation() ==
					// null) {
					// trDestination
					// .setTransactionDestDateConsultation(new Date());
					// appMgr.update(trDestination);
					// }
				}
				// inséré la date de consultation
			}
			setStatus1(true);
			
			//Si le mode de transmission Mail envoier un mail au destinataire.
			if(courrierInformations.getCourrier().getTransmission().getTransmissionId()==4)
			{
				
//				vb.getExpdestexterneNotif();
//				System.out.println("ID de l'expéditeur à notifier "+vb.getExpdestexterneNotif().getIdExpDestExterne());
//				System.out.println("ID de l'expéditeur à notifier "+vb.getExpdestexterneNotif().getExpDestExterneMail());
			if(vb.getExpdestexterneNotif().getExpDestExterneMail()!=null && vb.getExpdestexterneNotif().getExpDestExterneMail().length()>0){
//				envoyerMailNotificationDestinataireExterne(courrierInformations.getCourrier().getCourrierObjet(),courrierInformations.getCourrier().getCourrierCommentaire(),vb.getExpdestexterneNotif().getExpDestExterneMail());
				List<String> listD= new ArrayList<String>();
				String adresseDestinataire=vb.getExpdestexterneNotif().getExpDestExterneMail();
				listD.add(adresseDestinataire);
				sendEmailSSLWithAttachemnt(courrierInformations.getCourrier().getCourrierObjet(),courrierInformations.getCourrier().getCourrierCommentaire(),listD,courrierInformations.getCourrier().getIdCourrier());
			}
			}
			
		} catch (Exception e) {
			setStatus2(true);
			e.printStackTrace();
		}
	}

	
	
	private EmailUtil emailUtil;
	public void envoyerMailNotificationDestinataireExterne(String objet,String templateNotificationTexteDestinataire, String adresseDestinataire) {
		emailUtil = new EmailUtil();
		System.out.println("DANS envoyerMailNotificationDestinataireExterne");
		try {
//			ExternalContext jsfContext = FacesContext.getCurrentInstance()
//					.getExternalContext();
//			ServletContext servletContext = (ServletContext) jsfContext
//					.getContext();
//			String webContentRoot = servletContext.getRealPath("/");
//			String pathConfigFile = webContentRoot
//					+ "\\WEB-INF\\MailFax\\mailCentral.properties";
//			Properties props = new Properties();
//			props.load(new FileInputStream(pathConfigFile));

			String nomExpediteur = "SONEDE";

//			String mailExpediteur = props.getProperty("mail.session.user");

			// InitialzeNotificationDestinataire();

			ArrayList<NotificationListAddress> listMailNomDestinataire = new ArrayList<NotificationListAddress>();

			String SubjectNotification = objet;

			NotificationListAddress notificationNomDestinataire = new NotificationListAddress();

//			notificationNomDestinataire
//					.setMailDestinataire("projet.minefid@xtensus.net");
			notificationNomDestinataire
			.setMailDestinataire(adresseDestinataire);
			notificationNomDestinataire.setNomDestinataire("SONEDE");
			listMailNomDestinataire.add(notificationNomDestinataire);
			

			// Message messageDest = new Message();
			// messageDest.setNotification(notificationDestinataire);
			// messageDest.setIdUser(98);
			// messageDest
			// .setMessageTexte(templateNotificationTexteDestinataire);
			templateNotificationTexteDestinataire="Bonjour, <br/><br/>"+templateNotificationTexteDestinataire+"<br/><br/>Bonne réception.<br/>";
			try {
				String mailExpediteur = "";
				System.out.println("Envoie d'un mail");
				emailUtil.sendEmailSSL(SubjectNotification,
						templateNotificationTexteDestinataire,
						listMailNomDestinataire, nomExpediteur, mailExpediteur);
				System.out.println("Envoie effectué avec succes");
			} catch (NoSuchProviderException e) {
				e.printStackTrace();
				System.err
						.println("Pas de transport disponible pour ce protocole");
				System.err.println(e);
			} catch (AddressException e) {
				e.printStackTrace();
				System.err.println("Adresse invalide");
				System.err.println(e);
			} catch (MessagingException e) {
				e.printStackTrace();
				System.err.println("Erreur dans le message mail");
				System.err.println(e);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	

	@Autowired
	private Ged ged;
	public void sendEmailSSLWithAttachemnt(String subject, String content,
			List<String> listDestinataire,int idCourrier) throws AddressException,
			MessagingException {
		emailUtil = new EmailUtil();
		try {
			//AH : Paramètres Alfresco
		Resource rsrcAlf = new ClassPathResource("/paramAlfresco.properties");
	
		String pathConfigFileAlf = rsrcAlf.getFile().getAbsolutePath();
		Properties propsAlf = new Properties();
		
			propsAlf.load(new FileInputStream(pathConfigFileAlf));
		
		String URL = propsAlf.getProperty("alfresco.Url");
		String namingConfigFilePath = vb.getNamingConfigFilePath();
		String login = propsAlf.getProperty("alfresco.login");
		String mdp = propsAlf.getProperty("alfresco.password");
		vb.setDmsAccessLayer(DMSConnexionImplement.getConnexionGed(login,
				mdp, URL, namingConfigFilePath));} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		} catch (IOException e1) {
		
			e1.printStackTrace();
		}
		
		try {
			// récupérer la listedes document de courrier
			List<Document> documents = appMgr.listDocumentByIdDocumentAndDeleteFlagAndCatgDoc(idCourrier, true, 1);
			Document document= new Document();
			InputStream inputStream = null;
			String docName="";
			List<InputStream> listInputStreams= new ArrayList<InputStream>();
			List<String> listeNomDocument= new ArrayList<String>();
			List<String> listeNomExtension =new ArrayList<String>();
			if(documents!= null && documents.size()>0)
			{
				for(int i=0;i<documents.size();i++){
					document=documents.get(i);
					
					 inputStream = ged.readDocument(document).getInputStream();
					 listInputStreams.add(inputStream);
					 System.out.println("Nom Fichier : "+ged.readDocument(document).getName());
					 String documentNom = document.getDocumentNom();
				
					 String extention=document.getDocumentType();//ged.getMimeType(document.getDocumentType());
					 System.out.println("extention  ::  "+extention);
					 listeNomExtension.add(extention);
					 listeNomDocument.add(documentNom);
				}
			}
			emailUtil.sendEmailSSLWithAttachemnt(subject, content, listDestinataire,listInputStreams,listeNomDocument,listeNomExtension);
			Resource rsrc = new ClassPathResource("../MailFax/mail.properties");
			String pathConfigFile = rsrc.getFile().getAbsolutePath();
		
//		// authentification
//		Session session = Session.getDefaultInstance(props,
//				new javax.mail.Authenticator() {
//					protected PasswordAuthentication getPasswordAuthentication() {
//						return new PasswordAuthentication(getProp()
//								.getProperty("mail.session.user"), getProp()
//								.getProperty("mail.session.pass"));
//					}
//				});
		// construct message
//		for (String to : listDestinataire) {
//			Message message = new MimeMessage(session);
//			message.setRecipients(Message.RecipientType.TO,
//					InternetAddress.parse(to));
//			message.setSubject(subject + " - " + new Date());
//			// Create the message part
//			BodyPart messageBodyPart = new MimeBodyPart();
//			// Fill the message
//			messageBodyPart.setContent(content, "text/html");
//			// Create a multipar message
//			Multipart multipart = new MimeMultipart();
//			// Set text message part
//			multipart.addBodyPart(messageBodyPart);
//			// Part two is attachment
//			messageBodyPart = new MimeBodyPart();
//			String filename = pathConfigFile;
//			DataSource source = new FileDataSource(filename);
//			messageBodyPart.setDataHandler(new DataHandler(source));
//			messageBodyPart.setFileName(filename);
//			multipart.addBodyPart(messageBodyPart);
//			// Send the complete message parts
//			message.setContent(multipart);
//			// send email
//			Transport.send(message);
//		}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void validerFinProcessus(Transaction transaction) {
		setStatus1(false);
		setStatus2(false);
		try {
			Etat etat = new Etat();
			etat = appMgr.listEtatByLibelle("Validé").get(0);
			transaction.setEtat(etat);
			transaction.setTransactionDateReponse(new Date());
			appMgr.update(transaction);
			setStatus1(true);
		} catch (Exception e) {
			setStatus2(true);
			e.printStackTrace();
		}
	}

	public void validateWorkflow(TraitementEtapeSuivant etapeSuivant,
			Transaction transaction,
			TransactionDestination transactionDestination, Courrier courrier) {
		setStatus1(false);
		setStatus2(false);
		try {
			if (transactionDestination != null) {
				if (transactionDestination.getTransactionDestDateConsultation() == null) {
					transactionDestination
							.setTransactionDestDateConsultation(new Date());
				}
			}
			transactionDestination.setTransactionDestDateTransfert(new Date());
			appMgr.update(transactionDestination);
			newTransaction = new Transaction();
			Etat etat = new Etat();
			Expdest expdest = new Expdest();
			Typetransaction typetransaction = new Typetransaction();
			TransactionDestinationId id = new TransactionDestinationId();
			TransactionDestination trDest = new TransactionDestination();
			etat = appMgr.listEtatByLibelle("Validé").get(0);
			transaction.setEtat(etat);
			transaction.setTransactionDateReponse(new Date());
			appMgr.update(transaction);
			/**************************************************************/
			expdest.setTypeExpDest("Interne-Person");
			expdest.setIdExpDestLdap(vb.getPerson().getId());
			appMgr.insert(expdest);
			if (vb.getPerson().isResponsable()) {
				newTransaction.setTransactionTypeIntervenant("sub_"
						+ String.valueOf(vb.getPerson().getId()));
			} else if (vb.getPerson().isSecretary()) {
				newTransaction.setTransactionTypeIntervenant("secretary_"
						+ String.valueOf(vb.getPerson().getId()));
			}
			newTransaction.setExpdest(expdest);
			newTransaction.setIdUtilisateur(vb.getPerson().getId());
			newTransaction.setTransactionDateTransaction(new Date());
			typetransaction = appMgr.getTypeTransactionByLibelle("Envoi")
					.get(0);
			newTransaction.setTypetransaction(typetransaction);
			// Faire suivre
			etat = appMgr.listEtatByLibelle("Faire suivre").get(0);
			newTransaction.setEtat(etat);
			newTransaction.setTransactionSupprimer(true);
			int newOrderNumber = transaction.getTransactionOrdre();
			newOrderNumber++;
			newTransaction.setTransactionOrdre(newOrderNumber);
			newTransaction.setDossier(transaction.getDossier());
			// C * // dupliquer le destinataire reel du workflow au niveau de la
			// nouvelle transaction
			newTransaction.setTransactionDestinationReelle(transaction
					.getTransactionDestinationReelle());
			// C * // dupliquer le destinataire reel du workflow au niveau de la
			// nouvelle transaction
			newTransaction.setTransactionFirst(transaction.getTransactionId());
			appMgr.insert(newTransaction);

			/********** Workflow **********/

			long resultat = etapeSuivant.getIdNodeSuivante();
			int etatActuelle = (int) resultat;
			courrier.setCourrierEtatActuelleWorkflow(etatActuelle);
			appMgr.update(courrier);

			String result = "";
			Unit u = new Unit();
			String unite = etapeSuivant.getEtatSuivant();
			// Unite
			u = ldapOperation.getUnitByShortName(unite);

			/*
			 * Person pr = new Person(); // Person pr = u.getResponsibleUnit();
			 * // Envoi Responsable result = result + pr.getCn() + " / ";
			 * expdest = new Expdest(); id = new TransactionDestinationId();
			 * trDest = new TransactionDestination();
			 * expdest.setTypeExpDest("Interne-Person");
			 * expdest.setIdExpDestLdap(pr.getId()); appMgr.insert(expdest);
			 * id.setIdTransaction(newTransaction.getTransactionId());
			 * id.setIdExpDest(expdest.getIdExpDest()); trDest.setId(id);
			 * trDest.setTransactionDestTypeIntervenant("sub_" +
			 * String.valueOf(pr.getId()));
			 * trDest.setTransactionDestDateReponse(
			 * transactionDestination.getTransactionDestDateReponse());
			 * appMgr.insert(trDest);
			 */
			// Envoi Unité
			result = result + u.getNameUnit() + " / ";
			expdest = new Expdest();
			id = new TransactionDestinationId();
			trDest = new TransactionDestination();
			if (unite.equals("BOC")) {
				if (vb.getPerson().getAssociatedDirection() != null) {
					getIdBocByUnit(vb.getPerson().getAssociatedDirection());
				} else {
					idBoc = vb.getPerson().getAssociatedBOC().getIdBOC();
				}
				expdest.setTypeExpDest("Interne-Boc");
				expdest.setIdExpDestLdap(idBoc);
				appMgr.insert(expdest);
				id.setIdTransaction(newTransaction.getTransactionId());
				id.setIdExpDest(expdest.getIdExpDest());
				trDest.setId(id);
				trDest.setTransactionDestTypeIntervenant("boc_" + idBoc);
			} else {
				expdest.setTypeExpDest("Interne-Unité");
				expdest.setIdExpDestLdap(u.getIdUnit());
				appMgr.insert(expdest);
				id.setIdTransaction(newTransaction.getTransactionId());
				id.setIdExpDest(expdest.getIdExpDest());
				trDest.setId(id);
				trDest.setTransactionDestTypeIntervenant("unit_"
						+ String.valueOf(u.getIdUnit()));
			}
			appMgr.insert(trDest);

			TransactionAnnotationId cI = new TransactionAnnotationId();
			TransactionAnnotation cA = new TransactionAnnotation();
			List<TransactionAnnotation> transactionAnnotation = new ArrayList<TransactionAnnotation>();
			transactionAnnotation = appMgr
					.getAnnotationByIdTransaction(transaction
							.getTransactionId());
			for (TransactionAnnotation tr : transactionAnnotation) {
				cI.setIdAnnotation(tr.getId().getIdAnnotation());
				cI.setIdTransaction(newTransaction.getTransactionId());
				cA.setId(cI);
				appMgr.insert(cA);
				cA = new TransactionAnnotation();
				cI = new TransactionAnnotationId();
			}
			setStatus1(true);

		} catch (Exception e) {
			setStatus2(true);
			e.printStackTrace();
		}
	}

	private void getIdBocByUnit(Unit unit) {

		if (unit.getAssociatedUnit() != null && unit.getIdUnit() != null) {
			// [JS]:2019-10-03
			Unit u = ldapOperation.getUnitById(unit.getAssociatedUnit()
					.getIdUnit());
			getIdBocByUnit(u);

		} else if (unit.getAssociatedBOC() != null) {
			idBoc = unit.getAssociatedBOC().getIdBOC();
			unitSup = unit;
//			System.out.println("première Unité sous un BOC : " + unit);
//			System.out.println("id BOC :" + idBoc);
		} else {
			System.out
					.println("DANS else unit.getAssociatedUnit() != null && unit.getAssociatedBOC()!=null ");
			// if(unit.getNameUnit().equals("Direction Générale 3"))
			// idBoc =4;
			// if(unit.getNameUnit().equals("Direction Générale 1"))
			// idBoc =2;
			// if(unit.getNameUnit().equals("Direction Générale 2"))
			// idBoc =3;

		}
	}

	// *** Log && Notification ***//
	public void chargementNotification(
			CourrierInformations consulterInformations) {

		// Transaction transaction = new Transaction();
		// transaction = consulterInformations.getTransaction();
		// *** Log && Notification ***//
		vbn.setEvenementNomVariableNotif("event_consult_courrier_notif");
		vbn.setNotificationNomVariablAdmin("consult_courrier_admin");
		vbn.setNotificationNomVariableDestinataire("consult_courrier_dest");
		vbn.setEvenementNomVariableLog("event_consult_courrier_log");
		vbn.setNomExpediteur("Administrator");
		vbn.setMailExpediteur("xtexte2@gmail.com");
		// ***Fin Log & notification***//
		List<Person> listPersonDest = new ArrayList<Person>();

		if (consulterInformations.getCourrier() == null) {
			consulterInformations.setCourrier(appMgr.getCourrierByIdCourrier(
					consulterInformations.getCourrierID()).get(0));
		}
		if (consulterInformations.getTransaction() == null) {
			consulterInformations.setTransaction(appMgr
					.getListTransactionByIdTransaction(
							consulterInformations.getTransactionID()).get(0));
		}
		String expdest = consulterInformations.getCourrierExpediteur();
		Courrier courrierConsult = new Courrier();
		courrierConsult = consulterInformations.getCourrier();

		Date dateSystem = new Date();
		SimpleDateFormat formaterDate = null;
		formaterDate = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");

		String infoCourrier = "La réference de ce courrier est : "
				+ courrierConsult.getCourrierReferenceCorrespondant();

		vbn.setInfo(infoCourrier);
		vbn.setNomClass(CourrierAjoutBean.class.getName());
		vbn.setTypeLog("INFO");
		Person p = new Person();
		p = ldapOperation.getUserByName(expdest);
		listPersonDest.add(p);

		// Chargement Hard Codé de les elements à remplir dans la classe
		// informations
		info1.setVar("#p");
		info1.setContenu(vb.getPerson().getNom());
		info2.setVar("#I");
		info2.setContenu(infoCourrier);
		info3.setVar("#d");
		info3.setContenu(formaterDate.format(dateSystem));
		listInfo.add(info1);
		listInfo.add(info2);
		listInfo.add(info3);
		vbn.setListInformations(listInfo);
		vbn.setTypeObject("TEST");
		vbn.setCopyListSelectedPersonNotif(listPersonDest);
		vbn.setPerson(vb.getPerson());
	}

	public Long getCountCourrier(HashMap<String, Object> filterMap,
			String transmissionCourrierJour, String typeCourrierTraitementJour,
			String typeCourrierJour, String typeCourrierValidationJour,
			String categorieCourrierJour, String courrierRubriqueJour,
			boolean forTotal) {
		Long countCourrier = 0L;

		// if (categorieCourrierJour.equals("T")) {
		// countCourrier =
		// appMgr.CountAllCourrierBOCByCriteria(filterMap, 1,
		// dateDebut, dateFin, typeSecretaire, type1, idUser,
		// transmissionCourrierJour, typeCourrierTraitementJour, "");
		// countCourrierEnvoyer = appMgr.CountAllCourrierBOCByCriteria(
		// filterMap, 1, dateDebut, dateFin, type, type1, idUser,
		// transmissionCourrierJour, typeCourrierTraitementJour,
		// "D");
		// countCourrierRecu = appMgr.CountAllCourrierBOCByCriteria(
		// filterMap, 1, dateDebut, dateFin, type, type1, idUser,
		// transmissionCourrierJour, typeCourrierTraitementJour,
		// "A");
		// countCourrier = countCourrierEnvoyer + countCourrierRecu;
		// countCourrier = countCourrierEnvoyer =
		// appMgr.CountAllCourrierBOCByCriteria(
		// filterMap, 1, dateDebut, dateFin, type, type1, idUser,
		// transmissionCourrierJour, typeCourrierTraitementJour,
		// "T");
		// } else {
		if (vb.getPerson().isBoc()) {
			countCourrier = appMgr.CountAllCourrierBOCByCriteria(filterMap, 15,
					dateDebut, dateFin, type, type1, listIdBocMembers,
					transmissionCourrierJour, typeCourrierTraitementJour,
					categorieCourrierJour);
			// }
		} else {
			countCourrier = CountCourrier(filterMap, 14, dateDebut, dateFin,
					type, type1, idUser, typeTransmission,
					typeCourrierValidationJour, typeCourrierJour,
					courrierRubriqueJour, forTotal);
		}

		return countCourrier;
	}

	public Long CountCourrier(HashMap<String, Object> filterMap,
			int jourOrAutre, Date dateDebut, Date dateFin, String type,
			String type1, Integer idUser, Integer typeTransmission,
			String stateTraitement, String typeCourrierJour,
			String courrierRubriqueJour, boolean forTotal) {

		// if(typeCourrierJour.equals("Envoyes") ||
		// typeCourrierJour.equals("Tous")){
		// if(!stateTraitement.equals("Avalider")){
		// countCourrierEnvoyer = appMgr.CountAllCourrierEnvoyerByCriteria(vb
		// .getPerson().isResponsable(), listIdsSousUnit,
		// listIdsSubordonne, filterMap, consultationCourrierSecretaire,
		// consultationCourrierSubordonne, consultationCourrierSousUnite,
		// jourOrAutre, dateDebut, dateFin, type, type1, typeSecretaire,
		// idUser, typeTransmission, stateTraitement,
		// courrierRubriqueJourId, forTotal);
		// }else{
		// countCourrierEnvoyer = 0L;
		// }
		// }
		// countCourrierRecu = appMgr.CountAllCourrierRecuByCriteria(vb
		// .getPerson().isResponsable(), listIdsSousUnit,
		// listIdsSubordonne, filterMap, consultationCourrierSecretaire,
		// consultationCourrierSubordonne, consultationCourrierSousUnite,
		// jourOrAutre, dateDebut, dateFin, type, type1, typeSecretaire,
		// idUser, typeTransmission, stateTraitement,
		// courrierRubriqueJourId, forTotal);
		// if (typeCourrierJour.equals("Recu")) {
		// return countCourrierRecu;
		// } else if (typeCourrierJour.equals("Envoyes")) {
		// return countCourrierEnvoyer;
		// } else {
		// return countCourrierEnvoyer + countCourrierRecu;
		// }
		Integer courrierRubriqueJourId = Integer.valueOf(courrierRubriqueJour);
		countCourrier = appMgr.CountAllCourrierEnvoyerANDRecuByCriteria(vb
				.getPerson().isResponsable(), listIdsSousUnit,
				listIdsSubordonne, filterMap, consultationCourrierSecretaire,
				consultationCourrierSubordonne, consultationCourrierSousUnite,
				jourOrAutre, dateDebut, dateFin, type, type1, typeSecretaire,
				idUser, typeTransmission, stateTraitement,
				courrierRubriqueJourId, forTotal, typeCourrierJour);
		return countCourrier;
	}

	// ---------------------- KHA : sous titre rapport------------
	public String getCategorieListeCourriers(String s) {
		String categorieListeCourriers = "";
		if (s.equals("T")) {
			categorieListeCourriers = "Tous";

		} else if (s.equals("A")) {
			categorieListeCourriers = "Arrivé";
		} else if (s.equals("D")) {
			categorieListeCourriers = "Départ";
		}
		return categorieListeCourriers;

	}

	public String getTypeTraitememtListeCourriers(String s) {
		String typeTraitememtListeCourriers = "";
		if (s.equals("tous")) {
			typeTraitememtListeCourriers = "Tous";

		} else if (s.equals("traite")) {
			typeTraitememtListeCourriers = "Traité";
		} else if (s.equals("nonTraite")) {
			typeTraitememtListeCourriers = "Non Traité";
		}
		return typeTraitememtListeCourriers;

	}

	public String getTypeTransmissionListeCourriers(String s) {
		String typeTransmissionListeCourriers = "";
		if (s.equals("Tous les courriers") || s.equals("Tout les courriers")) {
			typeTransmissionListeCourriers = "Tous";

		} else {
			typeTransmissionListeCourriers = appMgr
					.getTransmissionById(Integer.valueOf(s)).get(0)
					.getTransmissionLibelle();
		}

		return typeTransmissionListeCourriers;

	}

	// ------------------------ KHA : SOUS TITRE autre BOC --------------------
	public String getTypeCourrierListeCourriers(String s) {
		String typeCourriers = "";
		if (s.equals("Tous")) {
			typeCourriers = "Tous";

		} else if (s.equals("Recu")) {
			typeCourriers = "Reçus";
		} else if (s.equals("Envoyes")) {
			typeCourriers = "Envoyés";
		}

		return typeCourriers;
	}

	public String getRubriqueListeCourriers(int courrierRubriqueId) {
		String RubriqueCourriers = "";
		switch (courrierRubriqueId) {
		case 1:
			RubriqueCourriers = "Tous";
			break;
		case 2:
			RubriqueCourriers = "Mes Courriers";
			break;
		case 3:
			RubriqueCourriers = "Mon Unité";
			break;
		case 4:
			RubriqueCourriers = "De mes Subordonnées";
			break;
		case 5:
			RubriqueCourriers = "De ma Secretaire ";
			break;
		case 6:
			RubriqueCourriers = "De mes Sous Unités";
			break;

		default:
			break;
		}
		return RubriqueCourriers;
	}

	// --------------------------------

	// * Getters selectItems
	// SM : Optimisation pour la liste des modes de transmission affichées sous
	// la forme de bouton radio
	public List<SelectItem> getSelectItemsTr() {
		String libelle;
		String id;
		List<SelectItem> selectItemsTr = new ArrayList<SelectItem>();

		selectItemsTr.add(new SelectItem(messageSource.getMessage(
				"toutCourrier", new Object[] {}, lm.createLocal())));
		/*
		 * OLD for (int j = 0; j < listTr.size(); j++) { if
		 * (vb.getLocale().equals("ar")) { libelle =
		 * listTr.get(j).getTransmissionLibelleAr(); } else { libelle =
		 * listTr.get(j).getTransmissionLibelle(); } selectItemsTr.add(new
		 * SelectItem(id,libelle));
		 * 
		 * }
		 */
		for (Transmission item : listTr) {
			if (vb.getLocale().equals("ar")) {
				libelle = item.getTransmissionLibelleAr();
			} else {
				libelle = item.getTransmissionLibelle();
			}
			id = item.getTransmissionId().toString();
			selectItemsTr.add(new SelectItem(id, libelle));
		}

		// selectItemsTr.add(new
		// SelectItem(messageSource.getMessage("AutreLabel",
		// new Object[] {}, lm.createLocal())));

		return selectItemsTr;
	}

	public CourrierInformations getSelectedCourrier() {
		return selectedCourrier;
	}

	public void setSelectedCourrier(CourrierInformations selectedCourrier) {
		this.selectedCourrier = selectedCourrier;
	}

	public Courrier getCourrier() {
		return courrier;
	}

	public void setCourrier(Courrier courrier) {
		this.courrier = courrier;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public String getMessage() {
		return message;
	}

	public void setShowTab(boolean showTab) {
		this.showTab = showTab;
	}

	public boolean isShowTab() {
		return showTab;
	}

	public void setBocOption(boolean bocOption) {
		this.bocOption = bocOption;
	}

	public boolean isBocOption() {
		return bocOption;
	}

	public void setUserOption(boolean userOption) {
		this.userOption = userOption;
	}

	public boolean isUserOption() {
		return userOption;
	}

	public void setStatus1(boolean status1) {
		this.status1 = status1;
	}

	public boolean isStatus1() {
		return status1;
	}

	public void setStatus2(boolean status2) {
		this.status2 = status2;
	}

	public boolean isStatus2() {
		return status2;
	}

	public VariableGlobale getVb() {
		return vb;
	}

	public void setVb(VariableGlobale vb) {
		this.vb = vb;
	}

	public String getConsultationCourrierSecretaire() {
		return consultationCourrierSecretaire;
	}

	public void setConsultationCourrierSecretaire(
			String consultationCourrierSecretaire) {
		this.consultationCourrierSecretaire = consultationCourrierSecretaire;
	}

	public String getConsultationCourrierSubordonne() {
		return consultationCourrierSubordonne;
	}

	public void setConsultationCourrierSubordonne(
			String consultationCourrierSubordonne) {
		this.consultationCourrierSubordonne = consultationCourrierSubordonne;
	}

	public String getConsultationCourrierSousUnite() {
		return consultationCourrierSousUnite;
	}

	public void setConsultationCourrierSousUnite(
			String consultationCourrierSousUnite) {
		this.consultationCourrierSousUnite = consultationCourrierSousUnite;
	}

	public Long getCountCourrierRecu() {
		return countCourrierRecu;
	}

	public void setCountCourrierRecu(Long countCourrierRecu) {
		this.countCourrierRecu = countCourrierRecu;
	}

	public Long getCountCourrierEnvoyer() {
		return countCourrierEnvoyer;
	}

	public void setCountCourrierEnvoyer(Long countCourrierEnvoyer) {
		this.countCourrierEnvoyer = countCourrierEnvoyer;
	}

	public Long getCountCourrier() {
		return countCourrier;
	}

	public void setCountCourrier(Long countCourrier) {
		this.countCourrier = countCourrier;
	}

	public void setShowResponsableResponse(boolean showResponsableResponse) {
		this.showResponsableResponse = showResponsableResponse;
	}

	public boolean getShowResponsableResponse() {
		return showResponsableResponse;
	}

	public List<ListeDestinatairesModel> getDestinatairesAvecAnnotations() {
		return destinatairesAvecAnnotations;
	}

	public void setDestinatairesAvecAnnotations(
			List<ListeDestinatairesModel> destinatairesAvecAnnotations) {
		this.destinatairesAvecAnnotations = destinatairesAvecAnnotations;
	}

	public List<ListeDestinatairesModel> getDestinataireRepondre() {
		return destinataireRepondre;
	}

	public void setDestinataireRepondre(
			List<ListeDestinatairesModel> destinataireRepondre) {
		this.destinataireRepondre = destinataireRepondre;
	}

	public List<ItemSelected> getListSelectedItem() {
		return listSelectedItem;
	}

	public void setListSelectedItem(List<ItemSelected> listSelectedItem) {
		this.listSelectedItem = listSelectedItem;
	}

	
	
	
	
	
	
	public CourrierInformations getCourrierInformations() {
		return courrierInformations;
	}

	public void setCourrierInformations(CourrierInformations courrierInformations) {
		this.courrierInformations = courrierInformations;
	}

	/**
	 * Cette méthode est utilisé pour vérifier si le destinataire est sous le BO
	 * connecté
	 */
	public boolean isBocDest(Transaction transaction) {

		Transaction transactionExpediteur = new Transaction();
		int idDest;
		Person personneRechercheDes = new Person();
		boolean findPersonDest = false;
		int m = 0;

		transactionExpediteur = appMgr
				.getTransactionExpediteurByIdTransactionDestinationReelle(
						transaction.getTransactionDestinationReelle()
								.getTransactionDestinationReelleId(), 1).get(0);
		String tyeDestinataire = transactionExpediteur
				.getTransactionDestinationReelle()
				.getTransactionDestinationReelleTypeDestinataire();

		// /////////////////////// Debut Recherche Destinataire LDAP
		// ///////////////////////

		if (tyeDestinataire.equals("Externe")) {
			// System.out.println("2019-05-16: Externe");
		} else if (tyeDestinataire.equals("Interne-Unité")) {
			// Recherche de l'ID Destinataire (Dest = Unité) dans LDAP
			int idUnitDes = transactionExpediteur
					.getTransactionDestinationReelle()
					.getTransactionDestinationReelleIdDestinataire();
			// do {
			// idDest = vb.getCopyLdapListUnit().get(m).getIdUnit();
			// if (idDest == idUnitDes) {
			// findPersonDest = true;
			// unitDest = vb.getCopyLdapListUnit().get(m);
			// break;
			// } else {
			// m++;
			// }
			// } while (!findPersonDest && m < vb.getCopyLdapListUnit().size());

			Unit uni = ldapOperation.getUnitById(idUnitDes);
			System.out.println(">>>>>>>>>>>>>>>>>>> uni" + uni);
			idBocDestinataire = ReturnBocAssocieeUnite(uni);
			// FFFF
		} else {
			// Recherche de l'ID Destinataire (Dest = Person) dans LDAP
			int idUserDes = transactionExpediteur
					.getTransactionDestinationReelle()
					.getTransactionDestinationReelleIdDestinataire();
			do {
				idDest = vb.getCopyLdapListUser().get(m).getId();
				if (idDest == idUserDes) {
					findPersonDest = true;
					personneRechercheDes = vb.getCopyLdapListUser().get(m);
				} else {
					m++;
				}
			} while (!findPersonDest && m < vb.getCopyLdapListUser().size());
			idBocDestinataire = ReturnBocAssocieeUnite(personneRechercheDes
					.getAssociatedDirection());
		}
		// /////////////////////// FIN Recherche Destinataire LDAP
		// ///////////////////////

		int idBosConnecte = vb.getPerson().getAssociatedBOC().getIdBOC();
		System.out.println("idBosConnecte  " + idBosConnecte
				+ " && idBocDestinataire " + idBocDestinataire);
		if (idBosConnecte == idBocDestinataire) {
			// System.out.println("idBos == idBocDestinataire");
			return true;
		} else {
			// System.out.println("idBos <> idBocDestinataire");
			return false;
		}

	}

	/**
	 * Cette méthode est utilisé pour vérifier si l'expéditeur est sous le BO
	 * connecté
	 */
	public boolean isBocExp(Transaction transaction) {

		Transaction transactionExpediteur = new Transaction();
		int idExp;
		Person personneRechercheExp = new Person();
		boolean findPersonExp = false;
		int k = 0;

		transactionExpediteur = appMgr
				.getTransactionExpediteurByIdTransactionDestinationReelle(
						transaction.getTransactionDestinationReelle()
								.getTransactionDestinationReelleId(), 1).get(0);
		System.out.println("$$$ " + transactionExpediteur);
		List<TransactionDestination> listTransactionsDest = appMgr
				.getDestinationByIdTransaction(transactionExpediteur
						.getTransactionId());

		TransactionDestination transactionDest = listTransactionsDest.get(0);

		List<Expdest> listExpd = appMgr
				.getListExpDestByIdExpDest(transactionDest.getId()
						.getIdExpDest());

		// type Expediteur
		String typeExpdests = transactionExpediteur.getExpdest()
				.getTypeExpDest();

		// /////////////////////// Debut Recherche Expéditeur dans LDAP
		if (typeExpdests.equals("Externe")) {
			// System.out.println("l'expéditeur est externe");
			IdExpediteur = transactionExpediteur.getExpdest()
					.getExpdestexterne().getIdExpDestExterne();
		} else if (typeExpdests.equals("Interne-Unité")) {

			// A tester si le BO associé à cet Unité et celui responsable à
			// l'exécution
			int idUniteExpediteur = transactionExpediteur.getExpdest()
					.getIdExpDestLdap();
			
			Unit u = ldapOperation.getUnitById(idUniteExpediteur);
//			Unit u =new Unit();
//			if(vb.isSonede()){
//				
//				String stringId=codeUniteString(idUniteExpediteur);
//				u = ldapOperation.getUnitById(stringId);
//			}else{
//				u = ldapOperation.getUnitById(idUniteExpediteur);
//			}
			
			
			int idBocUnite = ReturnBocAssocieeUnite(u);
			System.out.println("idBocUnite :: " + idBocUnite);
			// Chercher le BO responsable à l'exécution dans transactionDest
			int boResponsableExecution = listExpd.get(0).getIdExpDestLdap();

			// si le même si non ça reste à 0
			if (idBocUnite == boResponsableExecution)
				idBocExpediteur = listExpd.get(0).getIdExpDestLdap();
		} else {
			IdExpediteur = transactionExpediteur.getExpdest()
					.getIdExpDestLdap();
			do {
				idExp = vb.getCopyLdapListUser().get(k).getId();

				if (idExp == IdExpediteur) {
					findPersonExp = true;
					personneRechercheExp = vb.getCopyLdapListUser().get(k);
				} else {
					k++;
				}
			} while (!findPersonExp && k < vb.getCopyLdapListUser().size());
			int idBocUnite = ReturnBocAssocieeUnite(personneRechercheExp
					.getAssociatedDirection());
			System.out.println("idBocUnite :: " + idBocUnite);
			// Chercher le BO responsable à l'exécution dans transactionDest
			int boResponsableExecution = listExpd.get(0).getIdExpDestLdap();

			// si le même si non ça reste à 0
			if (idBocUnite == boResponsableExecution)
				idBocExpediteur = listExpd.get(0).getIdExpDestLdap();
		}
		// /////////////////////// FIN Recherche Destinataire LDAP
		// ///////////////////////

		int idBosConnecte = vb.getPerson().getAssociatedBOC().getIdBOC();
		System.out.println("idBosConnecte  " + idBosConnecte
				+ " && idBocExpediteur " + idBocExpediteur);
		if (idBosConnecte == idBocExpediteur) {
			// System.out.println("idBos == idBocDestinataire");
			return true;
		} else {
			// System.out.println("idBos <> idBocDestinataire");
			return false;
		}

	}

	

	Transaction creerNewTransaction(Expdest expdest, int idUtilisateur,
			String etatLibelle, String typetransactionLibelle,
			int newOrderNumber, int first, Dossier dossier,
			TransactionDestinationReelle transactionDestinationReelle) {
		Transaction newTransaction = new Transaction();

		newTransaction.setExpdest(expdest);
		newTransaction.setIdUtilisateur(idUtilisateur);

		newTransaction.setTransactionDateTransaction(new Date());

		// set Type Transaction----------------------------------------------
		Typetransaction typetransaction = appMgr.getTypeTransactionByLibelle(
				typetransactionLibelle).get(0);
		newTransaction.setTypetransaction(typetransaction);
		Etat etat = appMgr.listEtatByLibelle(etatLibelle).get(0);

		newTransaction.setEtat(etat);
		newTransaction.setTransactionSupprimer(true);
		newTransaction.setTransactionOrdre(newOrderNumber);

		newTransaction.setDossier(dossier);
		newTransaction
				.setTransactionDestinationReelle(transactionDestinationReelle);

		newTransaction.setTransactionFirst(first);

		return newTransaction;
	}

	private void executeTransactionInterneAvecValidation(Transaction transaction,
			CourrierInformations courrierInformations) {
				
				System.out.println("### Méthode executeTransactionInterne Validation ###");

		if (courrierInformations.getCourrier() == null) {
			courrierInformations.setCourrier(appMgr.getCourrierByIdCourrier(
					courrierInformations.getCourrierID()).get(0));

		}

		if (courrierInformations.getTransaction() == null) {
			courrierInformations.setTransaction(appMgr
					.getListTransactionByIdTransaction(
							courrierInformations.getTransactionID()).get(0));
		}
				
				
			}
	
	
	
	// XTE - AH : Ancienne methode d'exécution Modifier avec SR
	private void executeTransactionInterne(Transaction transaction,
			CourrierInformations courrierInformations) {

		System.out.println("### Méthode executeTransactionInterne ####### "+transaction.getTransactionId());

		if (courrierInformations.getCourrier() == null) {
			courrierInformations.setCourrier(appMgr.getCourrierByIdCourrier(
					courrierInformations.getCourrierID()).get(0));

		}

		if (courrierInformations.getTransaction() == null) {
			courrierInformations.setTransaction(appMgr
					.getListTransactionByIdTransaction(
							courrierInformations.getTransactionID()).get(0));
		}

		setStatus1(false);
		setStatus2(false);
		//Commenté par AH on exécute que les transaction avec l'état à exécuter == 5 
		int etatId = courrierInformations.getTransaction().getEtat().getEtatId();
		//int etatId =transaction.getEtat().getEtatId();
		// Transaction transaction = new Transaction();
		// transaction = courrierInformations.getTransaction();
		Transaction newTransaction;
		List<Transaction> transactionExpediteur;
		List<Transaction> listTransaction = new ArrayList<Transaction>();
		List<Transaction> listTransactionByEtat = new ArrayList<Transaction>();

		// KHA :
		courrier = courrierInformations.getCourrier();
		// transaction=courrierInformations.getTransaction();
		vb.setCourDossConsulterInformations(courrierInformations);

		TransactionDestination transactionDestination = vb.getCourDossConsulterInformations().getTransactionDestination();
		//System.out.println(">>>>>>>>>##### courrier.getCourrierAvecDocumentPhysique()");
//		if(transactionDestination.getTransactionDestEtatReceptionPhysique()!=null)
//			System.out.println(transactionDestination.getTransactionDestEtatReceptionPhysique().getEtatId());
//		else 
//			System.out.println("l'état de la Recep Phy est null");
//		
		try {

			if (transaction.getTransactionDestinationReelle() != null) {

				newTransaction = new Transaction();
				transactionExpediteur = new ArrayList<Transaction>();
				Etat etat = new Etat();
				Expdest expdest = new Expdest();
				Typetransaction typetransaction = new Typetransaction();
				TransactionDestinationId id = new TransactionDestinationId();
				TransactionDestination trDest = new TransactionDestination();

				// : Transaction By id Transaction Destinataire Reele et ordre=1
//				System.out.println("JS 2019-08-05 "
//						+ transaction.getTransactionDestinationReelle()
//								.getTransactionDestinationReelleId());
				transactionExpediteur = appMgr
						.getTransactionExpediteurByIdTransactionDestinationReelle(
								transaction.getTransactionDestinationReelle()
										.getTransactionDestinationReelleId(), 1);
//				System.out.println("size transactionExpediteur : "
//						+ transactionExpediteur.size());
				boolean expediteurExterne = false;
				if (transactionExpediteur != null
						&& transactionExpediteur.size() > 0) {
					Expdest expedest = transactionExpediteur.get(0)
							.getExpdest();
					if (expedest != null) {
						if (expedest.getExpdestexterne() != null) {
//							System.out.println("l'expéditeur est externe");
							expediteurExterne = true;
						}

					}
				}
				// System.out.println("tr exp : "+transactionExpediteur.get(0).getExpdest());
				// SI l'expéditeur Externe

				

				// :get liste
				// Transaction---------------------------------------------------------------------------
				// (Transaction Expéditeur+transaction Expéditeur après
				// execution) By id destination reelle--------------

				listTransaction = appMgr
						.getTransactionByIdTransactionDestinationReelle(transaction
								.getTransactionDestinationReelle()
								.getTransactionDestinationReelleId());

				listTransactionByEtat = appMgr
						.getTransactionByIdTransactionDestinationReelleByEtat(transaction
								.getTransactionDestinationReelle()
								.getTransactionDestinationReelleId());

				// : Variable utilisé pour comparer si BO Destinataire == BO
				// PErsonne Connecté
				// ----------------------------------------------------------------------------------------------------
				boolean destInBocConnecte = false;

				for (Transaction tra : transactionExpediteur) {
					idUserDes = tra.getTransactionDestinationReelle()
							.getTransactionDestinationReelleIdDestinataire();
					typeUserDes = tra.getTransactionDestinationReelle()
							.getTransactionDestinationReelleTypeDestinataire();
				}

				// KHA : unité superieur sous 1er BO boc De destinataire
				int idDest;
				Person personneRechercheDes = new Person();
				Unit unitRechecheDes = new Unit();
				boolean findPersonDest = false;
				boolean findUnitDest = false;

				int k = 0;

				if (typeUserDes.equals("Interne-Person")) {

					do {

						idDest = vb.getCopyLdapListUser().get(k).getId();

						if (idDest == idUserDes) {
							findPersonDest = true;
							personneRechercheDes = vb.getCopyLdapListUser()
									.get(k);
						} else {
							k++;
						}

					} while (!findPersonDest
							&& k < vb.getCopyLdapListUser().size());
					getIdBocByUnit(personneRechercheDes
							.getAssociatedDirection());

				} else {
					do {

						idDest = vb.getCopyLdapListUnit().get(k).getIdUnit();

						if (idDest == idUserDes) {
							findUnitDest = true;
							unitRechecheDes = vb.getCopyLdapListUnit().get(k);
						} else {
							k++;
						}

					} while (!findUnitDest
							&& k < vb.getCopyLdapListUnit().size());

					Unit unite = ldapOperation.getUnitById(unitRechecheDes
							.getIdUnit());

					getIdBocByUnit(unite);
				}

				int idBocDestinataire = idBoc;

				System.out.println("# id BOC Destinataire :"+ idBocDestinataire);
				// KHA : unité superieur sous 1er BO
				Unit uniteSuperieurDestinataire = unitSup;

				// [] findBocExpBocDest : retourne true si boc dest et bos
				// connecté sous même BO------------------------------
				// -------------------------------------------------------------------------------------
				// destInBocConnecte = isBocDest(transaction);
				System.out.println("isBocDest(transaction) "+ isBocDest(transaction));
				System.out.println("isBocExp(transaction)"+ isBocExp(transaction));

				// [] : on execute les Courrier where son Etat = 5
				// ----------------------------------------------
				// -------------------------------------------------------------------------------------
				if (etatId == 5) {

//					if (expediteurExterne) {
//						System.out
//								.println("DANS le TEST de l'expéditeur EXTN ");
//
//					}

					// XTE - AH : l'expéditeur et le destinataire sous le même
					// BO
					String referenceCourrierTypeNewTr = "";

					int referenceCourrierNumeroNewTr = 0;
					String referenceCourrierCompletNewTr = "";

					String referenceCourrierTypeOldTr = "";
					int referenceCourrierNumeroOldTr = 0;
					String referenceCourrierCompletOldTr = "";

					int annee = courrierInformations.getCourrier()
							.getCourrierOldDateOper();
					int year = annee;
					if (isBocDest(transaction)) {

						if (isBocExp(transaction)) {
							System.out
									.println("Le destinataire et l'expéditeur sous  BOS connecté");
							referenceCourrierTypeNewTr = "I*";

							referenceCourrierTypeOldTr = "I*";
							Integer lastId = appMgr
									.CountAllCourrierRefIByTransaction("I",
											annee);
							if (lastId != null) {
								lastId++;
							} else {

								lastId = 1;
							}
							referenceCourrierNumeroNewTr = lastId;
							referenceCourrierNumeroOldTr = lastId;

						} 
						else {
							
							System.out
									.println("Le destinataire seulement sous  BOS connecté (l'expéditeur non)");
//							System.out
//									.println("==========>>>>>>>>>>>>> transaction "
//											+ transaction.getTransactionId());
//							System.out
//									.println("==========>>>>>>>>>>>>> transaction type "
//											+ transaction.getCourrierType());
//							System.out
//									.println("==========>>>>>>>>>>>>> transaction "
//											+ transaction
//													.getCourrierTypeOrdre());

							referenceCourrierTypeOldTr = transaction
									.getCourrierType();
							referenceCourrierNumeroOldTr = transaction
									.getCourrierTypeOrdre();

							if (transaction.getCourrierType().equals("A")) {
								referenceSomeA = transaction
										.getCourrierTypeOrdre();
							}
							System.out
									.println(">>>>>>>>>>>>>>>> referenceSomeA "
											+ referenceSomeA);
							referenceCourrierTypeNewTr = "A";
							referenceCourrierNumeroNewTr = referenceSomeA;

						}

						List<Variables> listVariables = appMgr
								.listVariablesByLibelle("validation_hierarchique_courrier_arrive");

						if (listVariables != null && listVariables.size() > 0) {

							Variables variable = listVariables.get(0);

							int newOrderNumber = transaction
									.getTransactionOrdre();

							newOrderNumber++;

							newTransaction = creerNewTransaction(
									transactionExpediteur.get(0).getExpdest(),
									vb.getPerson().getId(), "Traité", "Envoi",
									newOrderNumber,
									transaction.getTransactionId(),
									transaction.getDossier(),
									transaction
											.getTransactionDestinationReelle());

							// 1ére Etape : Mise à jour Dans table Courrier
							if (courrier.getCourrierType().equals("I")) {
//								System.out
//										.println("AH =====> Mise à jour courrier");
								Integer lastId = appMgr
										.CountAllCourrierBOCByTransaction(transaction.getDossier().getDossierId(),
												"D",
												year,
												"boc_"
														+ String.valueOf(vb
																.getPerson()
																.getAssociatedBOC()
																.getIdBOC()),
												listIdBocMembers);
								
								
								List<Courrier> listeCourrier=appMgr.getCourrierByIdCourrier(courrierInformations.getCourrier().getIdCourrier().intValue());
								if(listeCourrier!=null && listeCourrier.size()>0)
									courrier=listeCourrier.get(0);
								courrier
										.setCourrierType("D");
								if (lastId != null) {
									courrier
											.setCourrierTypeOrdre(lastId + 1);
								} else {
									courrier
											.setCourrierTypeOrdre(1);
								}
								
								courrier
									.setCourrierReferenceCorrespondant(
											courrierInformations.getCourrier()
													.getCourrierType()
													+ courrierInformations
															.getCourrier()
															.getCourrierTypeOrdre());
							System.out
									.println("REF Courrier  : "
											+ courrierInformations
													.getCourrier()
													.getCourrierReferenceCorrespondant());
							appMgr.update(courrier);
							courrierInformations
							.setCourrier(courrier);
								
							}

							// update Ref Courrier dans table courrier
							System.out.println("Type Courrier : "
									+ courrierInformations.getCourrier()
											.getCourrierType());
							System.out.println("Type Ordre : "
									+ courrierInformations.getCourrier()
											.getCourrierTypeOrdre());

							//courrierInformations
							//		.getCourrier()
							//		.setCourrierReferenceCorrespondant(
							//				courrierInformations.getCourrier()
							//						.getCourrierType()
							//						+ courrierInformations
							//								.getCourrier()
							//								.getCourrierTypeOrdre());
							System.out
									.println("REF Courrier  : "
											+ courrierInformations
													.getCourrier()
													.getCourrierReferenceCorrespondant());
							//appMgr.update(courrierInformations.getCourrier());

							List<Transaction> transaction2s = appMgr
									.getListTransactionByIdTransaction(transaction
											.getTransactionId());

							if (transaction2s != null
									&& transaction2s.size() > 0) {
								Transaction transaction2 = transaction2s.get(0);
								// transaction2.setCourrierReferenceCorrespondant(courrierInformations.getCourrier().getCourrierType()
								// +
								// courrierInformations.getCourrier().getCourrierTypeOrdre());

								// transaction2.setCourrierType(courrierInformations.getCourrier().getCourrierType());
								//
								// transaction2.setCourrierTypeOrdre(courrierInformations.getCourrier().getCourrierTypeOrdre());

								etat = appMgr.listEtatByLibelle("Traité")
										.get(0);
								transaction2.setEtat(etat);
								appMgr.update(transaction2);
							}

							// [] : Mettre à jour référence courrier dans
							// transaction
							newTransaction
									.setCourrierReferenceCorrespondant(newTransaction
											.getCourrierType()
											+ newTransaction
													.getCourrierTypeOrdre());

							// ///////////////////////////// UPDATE Référence
							// Transaction New /////////////////////////

							newTransaction.setCourrierDateReceptionAnnee(annee);
							newTransaction
									.setCourrierType(referenceCourrierTypeNewTr);
							newTransaction
									.setCourrierTypeOrdre(referenceCourrierNumeroNewTr);
							newTransaction
									.setCourrierReferenceCorrespondant(referenceCourrierTypeNewTr
											+ referenceCourrierNumeroNewTr);

							// ///////////////////////////// FIN UPDATE
							// Référence Transaction New
							// /////////////////////////

							appMgr.insert(newTransaction);

							// : Fin insertion dans la table Transaction
							// ===========================================================
							// -----------------------------------------------------------

							// : Début Test si Destinataire intern-Person ou
							// interne-Unité expdest------------------------

							expdest = new Expdest();

							TransactionDestinationReelle transactionDestinationReelle = appMgr
									.getTransactionDestinationReelById(transaction
											.getTransactionDestinationReelle()
											.getTransactionDestinationReelleId());

							// XTE - AH : Si la variable
							// "validation_hierarchique_courrier_arrive"= Non
							if (variable.getVaraiablesValeur().equals("Non")) {

								// [] :Type Destinataire Reelle :Interne-Person
								// Insertion Dans Expdest---
								if (transaction
										.getTransactionDestinationReelle()
										.getTransactionDestinationReelleTypeDestinataire()
										.equals("Interne-Person")) {

									expdest.setTypeExpDest("Interne-Person");
									Person personDestinationReel = vb
											.getLdapOperation()
											.getPersonalisedUserById(
													transaction
															.getTransactionDestinationReelle()
															.getTransactionDestinationReelleIdDestinataire());

									expdest.setIdExpDestLdap(personDestinationReel
											.getId());

									if (personDestinationReel.isResponsable()) {
										type = "sub_"
												+ personDestinationReel.getId();
									} else if (personDestinationReel
											.isSecretary()) {
										type = "secretary_"
												+ personDestinationReel.getId();

									} else {
										type = "agent_"
												+ personDestinationReel.getId();
									}
									trDest.setTransactionDestIdIntervenant(personDestinationReel
											.getId());
									trDest.setTransactionDestDateReponse(courrierInformations
											.getCourrier()
											.getCourrierDateReponse());
											
									
											
											
								} 
								else

								// [] :type Destinataire Reelle :Interne-Unité
								// Insertion Dans Expdest-----

								if (transaction
										.getTransactionDestinationReelle()
										.getTransactionDestinationReelleTypeDestinataire()
										.equals("Interne-Unité")) {

									expdest.setTypeExpDest("Interne-Unité");
									Unit unit = vb
											.getLdapOperation()
											.getUnitById(
													transaction
															.getTransactionDestinationReelle()
															.getTransactionDestinationReelleIdDestinataire());

									expdest.setIdExpDestLdap(unit.getIdUnit());
									type = "unit_"
											+ transaction
													.getTransactionDestinationReelle()
													.getTransactionDestinationReelleIdDestinataire();
									trDest.setTransactionDestIdIntervenant(transaction
											.getTransactionDestinationReelle()
											.getTransactionDestinationReelleIdDestinataire());

								}
								appMgr.insert(expdest);
								// : Fin Insertion Dans
								// expdest-------------------------------------------------------------------------------------------------

								// : set date de traitement de transaction
								transactionDestinationReelle
										.setTransactionDestinationReelleDateTraitement(new Date());
								appMgr.update(transactionDestinationReelle);

								// : Fin Insertion Dans
								// Transaction Dest
								// -------------------------------------------------------------------------------------------------
								id = new TransactionDestinationId();
								trDest = new TransactionDestination();
								id.setIdTransaction(newTransaction
										.getTransactionId());
								id.setIdExpDest(expdest.getIdExpDest());
								trDest.setId(id);
								trDest.setTransactionDestTypeIntervenant(type);
								trDest.setTransactionDestDateReponse(courrierInformations
										.getCourrier().getCourrierDateReponse());
										if(transactionDestination.getTransactionDestEtatReceptionPhysique()!=null){
										Etat etatNonReceptionPhysique = new Etat();
										etatNonReceptionPhysique.setEtatId(9);
										trDest.setTransactionDestEtatReceptionPhysique(etatNonReceptionPhysique);
									}
								appMgr.insert(trDest);

								// : Fin insert transactionDestination
								// -------------------------------------------------------------------------------------------------

								// update etat dans table transaction : etat5 ->
								// etat6
								for (Transaction transaction1 : listTransaction) {

									// ///////////////////////////// UPDATE
									// Référence Transaction Old
									// /////////////////////////

									transaction1
											.setCourrierDateReceptionAnnee(annee);
									transaction1
											.setCourrierType(referenceCourrierTypeOldTr);
									transaction1
											.setCourrierTypeOrdre(referenceCourrierNumeroOldTr);
									transaction1
											.setCourrierReferenceCorrespondant(referenceCourrierTypeOldTr
													+ referenceCourrierNumeroOldTr);

									// ///////////////////////////// FIN UPDATE
									// Référence Transaction Old
									// /////////////////////////

									transaction1.setEtat(etat);
									appMgr.update(transaction1);

								}

								// List<Transaction>
								// transactions=appMgr.getListTransactionByIdTransaction(transaction.getTransactionId());
								// System.out.println("2019-05-31 : "+transactions.size());
								// for(Transaction t:transactions)
								// {
								// System.out.println("====== 2019-05-31 =======");
								// System.out.println(t.getTransactionId());
								// System.out.println("=====================");
								// }
								// if(transactions!=null &&
								// transactions.size()>0){
								// Transaction transaction2=transactions.get(0);
								// System.out.println("2019-05-25 : Type Courrier "+courrierInformations.getCourrier().getCourrierType());
								// System.out.println("2019-05-25:  Type Ordre : "+courrierInformations.getCourrier().getCourrierTypeOrdre());
								// transaction2.setCourrierReferenceCorrespondant(courrierInformations.getCourrier().getCourrierType()
								// +courrierInformations.getCourrier().getCourrierTypeOrdre());
								// appMgr.update(transaction2);
								// }
								//

							}
							// XTE - AH : si la
							// "validation_hierarchique_courrier_arrive"= Oui
							else {
								System.out
										.println("########### Validation #######################");
								// // KHA : validation hiérarchique :
								// Destinataire Suivant
								Integer idDestinataireReel = transaction
										.getTransactionDestinationReelle()
										.getTransactionDestinationReelleIdDestinataire();

								// KHA : Si destinataire reel de type Person
								if (transaction
										.getTransactionDestinationReelle()
										.getTransactionDestinationReelleTypeDestinataire()
										.equals("Interne-Person")) {

									// Person : Destinataire suivant n'est pas
									// le Destinataire reel

									if (idDestinataireReel != uniteSuperieurDestinataire
											.getResponsibleUnit().getId()) {

										etat = appMgr.listEtatByLibelle(
												"A valider").get(0);
										newTransaction.setEtat(etat);
										appMgr.update(newTransaction);
										expdest.setTypeExpDest("Interne-Person");
										expdest.setIdExpDestLdap(uniteSuperieurDestinataire
												.getResponsibleUnit().getId());
										appMgr.insert(expdest);
										id = new TransactionDestinationId();
										trDest = new TransactionDestination();

										id.setIdTransaction(newTransaction
												.getTransactionId());
										id.setIdExpDest(expdest.getIdExpDest());

										String type = "sub_"
												+ uniteSuperieurDestinataire
														.getResponsibleUnit()
														.getId();

										trDest.setTransactionDestTypeIntervenant(type);
										trDest.setTransactionDestIdIntervenant(uniteSuperieurDestinataire
												.getResponsibleUnit().getId());
										trDest.setId(id);
if(transactionDestination.getTransactionDestEtatReceptionPhysique()!=null){
										Etat etatNonReceptionPhysique = new Etat();
										etatNonReceptionPhysique.setEtatId(9);
										trDest.setTransactionDestEtatReceptionPhysique(etatNonReceptionPhysique);
									}
										appMgr.insert(trDest);

										// : Fin insert transactionDestination
										// -------------------------------------------------------------------------------------------------

										// update etat dans table transaction
										// :etat5-> etat6

										for (Transaction transaction1 : listTransactionByEtat) {

											etat = appMgr.listEtatByLibelle(
													"Traité").get(0);
											transaction1.setEtat(etat);
											appMgr.update(transaction1);

										}

										//
										// Execution ==> Validation
										validateTransactionDestinataireSuivant(
												transaction,
												transactionDestination,
												uniteSuperieurDestinataire
														.getResponsibleUnit()
														.getId());

									} else {
										expdest.setTypeExpDest("Interne-Unité");
										expdest.setIdExpDestLdap(idDestinataireReel);
										appMgr.insert(expdest);
										id = new TransactionDestinationId();
										trDest = new TransactionDestination();
										id.setIdTransaction(newTransaction
												.getTransactionId());
										id.setIdExpDest(expdest.getIdExpDest());
										trDest.setId(id);

										String type = "sub_"
												+ idDestinataireReel;
										trDest.setTransactionDestTypeIntervenant(type);
										trDest.setTransactionDestIdIntervenant(idDestinataireReel);
										if(transactionDestination.getTransactionDestEtatReceptionPhysique()!=null){
										Etat etatNonReceptionPhysique = new Etat();
										etatNonReceptionPhysique.setEtatId(9);
										trDest.setTransactionDestEtatReceptionPhysique(etatNonReceptionPhysique);
									}
										appMgr.insert(trDest);

										// : Fin insert transactionDestination
										// -------------------------------------------------------------------------------------------------

										// update etat dans table transaction :
										// etat5-> etat6
										for (Transaction transaction1 : listTransaction) {
											// System.out.println("Id transaction : "+transaction1.getTransactionId());
											// System.out.println("etat transaction : "+transaction1.getEtat().getEtatLibelle());
											transaction1.setEtat(etat);
											appMgr.update(transaction1);
											// System.out.println("### Insertionstion : update Transaction ");
										}
										//

										validateTransactionDestinataireFinale(
												transaction,
												transactionDestination);
									}
								}

								// KHA : Si destinataire reel de type Unit
								if (transaction
										.getTransactionDestinationReelle()
										.getTransactionDestinationReelleTypeDestinataire()
										.equals("Interne-Unité")) {

									if (idDestinataireReel != uniteSuperieurDestinataire
											.getIdUnit()) {

										// Unit : Destinataire suivant n'est
										// pasle Destinataire reel
										validateTransactionDestinataireSuivant(
												transaction,
												transactionDestination,
												uniteSuperieurDestinataire
														.getResponsibleUnit()
														.getId());
									} else {
										validateTransactionDestinataireFinale(
												transaction,
												transactionDestination);
									}
								}

							}

						}

						// : Mettre a jour la reference pour indiquer qu'il est
						// un courrier de depart
						// -------------------------------------------------------------------------------------------------

						// [] Modification le 2019-05-15
						// Integer lastId =
						// appMgr.getCourrierLastIdByTypeOrdreAndAnnee("D",
						// year);
						// System.out.println("Last Id :"+lastId);
						// courrierInformations.getCourrier().setCourrierType("D");
						// if (lastId == null || lastId == 0) {
						// courrierInformations.getCourrier().setCourrierTypeOrdre(1);
						// } else {
						// courrierInformations.getCourrier().setCourrierTypeOrdre(lastId
						// + 1);
						// }
						// courrierInformations.getCourrier()
						// .setCourrierReferenceCorrespondant(
						// courrierInformations.getCourrier()
						// .getCourrierType()
						// + courrierInformations.getCourrier()
						// .getCourrierTypeOrdre());
						// appMgr.update(courrierInformations.getCourrier());

						// : Fin Mettre a jour la reference pour indiquer qu'il
						// est
						// un courrier de depart
						// -------------------------------------------------------------------------------------------------

						// : Mettre à jour Dossier et update libelle dossier
						// Courrier_Ix->Courrier_x avec x un entier
						// -------------------------------------------------------------------------------------------------
						Dossier dossier = appMgr.getDossierByIdDossier(
								transaction.getDossier().getDossierId()).get(0);
						dossier.setDossierIntitule("Courrier_"
								+ courrierInformations.getCourrier()
										.getIdCourrier());
						appMgr.update(dossier);

						setStatus1(true);

					}
					// ///////////////////////////////Fin
					// isBocDest////////////////////////////////////////////////

					else {

						if (isBocExp(transaction)) {
							System.out
									.println("L'expéditeur seulement  sous  BOS connecté ( Le destinataire non)");

							if (transaction.getCourrierType().equals("I")) {

								Integer lastId = appMgr
										.CountAllCourrierBOCByTransaction(transaction.getDossier().getDossierId(),
												"D",
												year,
												"boc_"
														+ String.valueOf(vb
																.getPerson()
																.getAssociatedBOC()
																.getIdBOC()),
												listIdBocMembers);

								referenceCourrierTypeNewTr = "D";
								referenceCourrierTypeOldTr = "D";
System.out.println("lastId "+lastId);
								if (lastId != null) {
									lastId++;
								} else {

									lastId = 1;
								}
								System.out.println("C'est le Départ : "+lastId);
								referenceCourrierNumeroNewTr = lastId;
								referenceCourrierNumeroOldTr = lastId;

								courrierInformations.getCourrier()
										.setCourrierType("D");
								courrierInformations.getCourrier()
										.setCourrierTypeOrdre(lastId);

							} 
							else {
								System.out.println("Le courrier de D ");

								referenceCourrierTypeNewTr = "D";
								referenceCourrierTypeOldTr = "D";

								referenceCourrierNumeroNewTr = transaction
										.getCourrierTypeOrdre();
								referenceCourrierNumeroOldTr = transaction
										.getCourrierTypeOrdre();
							}
						} 
						else {
							
							// Récupérer le BOC de Destinataire 
							System.out.println("################# La reference reste tel qu'elle était ################# "+transaction.getCourrierType());
							referenceCourrierTypeNewTr = transaction.getCourrierType();
							referenceCourrierTypeOldTr = transaction.getCourrierType();

							referenceCourrierNumeroNewTr = transaction.getCourrierTypeOrdre();
							referenceCourrierNumeroOldTr = transaction.getCourrierTypeOrdre();
							System.out
									.println("CAS NE S'APPLIQUE PAS : Expéditeur et Destinataire ne sont pas tout les deux sous le BO connecté!!!!");
						}

						// /////////////////////////// Debut insertTransaction
						// /////////////////////////////
						System.out
								.println("///////////////////////////// Debut insertTransaction /////////////////////////////");
						etat = appMgr.listEtatByLibelle("Traité").get(0);
						newTransaction.setExpdest(transactionExpediteur.get(0)
								.getExpdest());
						newTransaction.setIdUtilisateur(vb.getPerson().getId());
						newTransaction
								.setTransactionDateTransaction(new Date());
						typetransaction = appMgr.getTypeTransactionByLibelle(
								"Envoi").get(0);
						newTransaction.setTypetransaction(typetransaction);
						newTransaction.setEtat(etat);
						newTransaction.setTransactionSupprimer(true);
						int newOrderNumber = transaction.getTransactionOrdre();
						newOrderNumber++;
						newTransaction.setTransactionOrdre(newOrderNumber);
						newTransaction.setDossier(transaction.getDossier());
						newTransaction
								.setTransactionDestinationReelle(transaction
										.getTransactionDestinationReelle());
						appMgr.insert(newTransaction);
						System.out.println("trID "
								+ newTransaction.getTransactionId());
						newTransaction.setTransactionFirst(newTransaction
								.getTransactionId());
						appMgr.update(newTransaction);
						// /////////////////////////// Fin insertTransaction
						// /////////////////////////////

						// ///////////////////////////// UPDATE Référence
						// Transaction New /////////////////////////

						newTransaction.setCourrierDateReceptionAnnee(annee);
						newTransaction
								.setCourrierType(referenceCourrierTypeNewTr);
						newTransaction
								.setCourrierTypeOrdre(referenceCourrierNumeroNewTr);
						newTransaction
								.setCourrierReferenceCorrespondant(referenceCourrierTypeNewTr
										+ referenceCourrierNumeroNewTr);
						appMgr.insert(newTransaction);
						// ///////////////////////////// FIN UPDATE Référence
						// Transaction New /////////////////////////
						// Récupérer le courrier par ID 
						List<Courrier> listeCourrier=appMgr.getCourrierByIdCourrier(courrierInformations.getCourrier().getIdCourrier().intValue());
						if(listeCourrier!=null && listeCourrier.size()>0)
							courrier=listeCourrier.get(0);
						
						courrier.setCourrierType(referenceCourrierTypeNewTr);
						courrier.setCourrierTypeOrdre(referenceCourrierNumeroNewTr);
						
						courrier.setCourrierReferenceCorrespondant(
								courrier
								.getCourrierType()
								+ courrier
										.getCourrierTypeOrdre());
						
//						courrierInformations
//								.getCourrier()
//								.setCourrierReferenceCorrespondant(
//										courrierInformations.getCourrier()
//												.getCourrierType()
//												+ courrierInformations
//														.getCourrier()
//														.getCourrierTypeOrdre());
						
//						appMgr.update(courrierInformations.getCourrier());
				
						appMgr.update(courrier);

						// ///////////////////////////// UPDATE Référence
						// Transaction OLD /////////////////////////
						List<Transaction> transaction2s = appMgr
								.getListTransactionByIdTransaction(transaction
										.getTransactionId());
						if (transaction2s != null && transaction2s.size() > 0) {
							
							Transaction transaction2 = transaction2s.get(0);
							System.out.println("Transaction de l'expéditeur =====> "+transaction2.getTransactionId());
							transaction2.setCourrierDateReceptionAnnee(annee);
							transaction2
									.setCourrierType(referenceCourrierTypeOldTr);
							transaction2
									.setCourrierTypeOrdre(referenceCourrierNumeroOldTr);
							transaction2
									.setCourrierReferenceCorrespondant(referenceCourrierTypeOldTr
											+ referenceCourrierNumeroOldTr);

							appMgr.update(transaction2);
						}
						// ///////////////////////////// UPDATE Référence
						// Transaction OLD /////////////////////////

						// ****************************************************************************************************************

						vb.setTransaction(newTransaction);

						// : Début Test si Destinataire intern-Person ou
						// interne-Unité
						// expdest-------------------------------------------------------------------------------------------------
						expdest = new Expdest();
						TransactionDestinationReelle transactionDestinationReelle = appMgr
								.getTransactionDestinationReelById(transaction
										.getTransactionDestinationReelle()
										.getTransactionDestinationReelleId());

						// [] :type Destinataire Reelle :Interne-Person
						if (transaction
								.getTransactionDestinationReelle()
								.getTransactionDestinationReelleTypeDestinataire()
								.equals("Interne-Person")) {
							Person personDestinationReel = vb
									.getLdapOperation()
									.getPersonalisedUserById(
											transaction
													.getTransactionDestinationReelle()
													.getTransactionDestinationReelleIdDestinataire());

							// ******************BOS 2

							int idUserDest = personDestinationReel.getId();
							int id1;
							Person personneRecherche = new Person();
							boolean findPerson = false;
							int j = 0;
							do {
								id1 = vb.getCopyLdapListUser().get(j).getId();
								if (id1 == idUserDest) {
									findPerson = true;
									personneRecherche = vb
											.getCopyLdapListUser().get(j);
								} else {
									j++;
								}
							} while (!findPerson
									&& j < vb.getCopyLdapListUser().size());

							getIdBocByUnit(personneRecherche
									.getAssociatedDirection());
							idBocDestinataire = idBoc;

							expdest.setTypeExpDest("Interne-Boc");
							expdest.setIdExpDestLdap(idBocDestinataire);
							String typeIntervenant = "boc_"
									+ String.valueOf(idBoc);
							appMgr.insert(expdest);

							// XTE : Insertion
							// transactionDestination---------------------------------------------------------------------------------------------
							id.setIdTransaction(vb.getTransaction()
									.getTransactionId());
							id.setIdExpDest(expdest.getIdExpDest());
							trDest.setId(id);
							trDest.setTransactionDestIdIntervenant(idBoc);
							trDest.setTransactionDestTypeIntervenant(typeIntervenant);
							if(transactionDestination.getTransactionDestEtatReceptionPhysique()!=null){
										Etat etatNonReceptionPhysique = new Etat();
										etatNonReceptionPhysique.setEtatId(8);
										trDest.setTransactionDestEtatReceptionPhysique(etatNonReceptionPhysique);
									}
							appMgr.insert(trDest);

						} 
						else
						// [] :type Destinataire Reelle :Interne-Unité
						// [2019-06-27]
						if (transaction
								.getTransactionDestinationReelle()
								.getTransactionDestinationReelleTypeDestinataire()
								.equals("Interne-Unité")) {

							// expdest.setTypeExpDest("Interne-Unité");
							Unit unit = vb
									.getLdapOperation()
									.getUnitById(
											transaction
													.getTransactionDestinationReelle()
													.getTransactionDestinationReelleIdDestinataire());
							// ******************BOS 2

							int idUnitDest = unit.getIdUnit();
							int id1;
							Unit unitRecherche = new Unit();
							boolean findUnite = false;
							int j = 0;
							do {
								id1 = vb.getCopyLdapListUnit().get(j)
										.getIdUnit();
								if (id1 == idUnitDest) {
									findUnite = true;
									unitRecherche = vb.getCopyLdapListUnit()
											.get(j);
									break;
								} else {
									j++;
								}
							} while (!findUnite
									&& j < vb.getCopyLdapListUnit().size());

							Unit u = ldapOperation.getUnitById(unitRecherche
									.getIdUnit());
							System.out.println("Unité Dest : " + u);
							getIdBocByUnit(u);
							idBocDestinataire = idBoc;
							expdest.setTypeExpDest("Interne-Boc");

							expdest.setIdExpDestLdap(idBoc);
							String typeIntervenant = "boc_"
									+ String.valueOf(idBoc);
							appMgr.insert(expdest);

							id.setIdTransaction(vb.getTransaction()
									.getTransactionId());
							id.setIdExpDest(expdest.getIdExpDest());
							trDest.setId(id);
							trDest.setTransactionDestIdIntervenant(idBoc);

							trDest.setTransactionDestTypeIntervenant(typeIntervenant);
							if(transactionDestination.getTransactionDestEtatReceptionPhysique()!=null){
										Etat etatNonReceptionPhysique = new Etat();
										etatNonReceptionPhysique.setEtatId(8);
										trDest.setTransactionDestEtatReceptionPhysique(etatNonReceptionPhysique);
										//Copier le commentaire si existe
										System.out.println("le commentaired de la réception :: "+transactionDestination.getTransactionDestCommentaireReceptionPhysique());
										trDest.setTransactionDestCommentaireReceptionPhysique(transactionDestination.getTransactionDestCommentaireReceptionPhysique());
									}
							appMgr.insert(trDest);
							
						}

						// : Fin Test
						// expdest-------------------------------------------------------------------------------------------------

						// : set date de traitement de transaction
						transactionDestinationReelle
								.setTransactionDestinationReelleDateTraitement(new Date());
						appMgr.update(transactionDestinationReelle);
						appMgr.insert(expdest);

						for (Transaction transaction1 : listTransaction) {
							etat = appMgr.listEtatByLibelle("Traité").get(0);
							transaction1.setEtat(etat);
							appMgr.update(transaction1);
						}

						// Calendar cal = Calendar.getInstance();
						// cal.setTime(courrierInformations.getCourrierDateReceptionEnvoi());
						// int year = cal.get(Calendar.YEAR);

						//appMgr.update(courrierInformations.getCourrier());
						Dossier dossier = appMgr.getDossierByIdDossier(
								transaction.getDossier().getDossierId()).get(0);
						dossier.setDossierIntitule("Courrier_"
								+ courrierInformations.getCourrier()
										.getIdCourrier());
						appMgr.update(dossier);

						// ///////////////////////////////////////////////////////////////////////////////////////////
						// /////////////////////////// Transaction Ajoutée pour
						// BOC DEST/////////////////////////////
						// ///////////////////////////////////////////////////////////////////////////////////////////
						BOC bocDest = new BOC();
						if (isBocExp(transaction)|| (!isBocExp(transaction)&& !isBocDest(transaction))) {
							System.out
									.println("AH ==> DANS !isBocDest(transaction) && isBocExp(transaction) ou les DEUX ne SONT pas sous BO CONNECTEE");
							// List<BOC>
							//AAAA
							// bocs=vb.getCentralBoc().getListChildBOCsBOC();
							System.out.println("idBocDestinataire = "
									+ idBocDestinataire);
							bocDest = ldapOperation
									.getBocByID(idBocDestinataire);
							// for(BOC b: bocs){
							// if(b.getIdBOC()==idBocDestinataire){
							// bocDest=b;
							// break;
							// }
							// }
							listIdBocMembers = new ArrayList<Integer>();
							System.out.println("Liste Membre ");
							List<Person> listBocMembers = bocDest
									.getMembersBOC();
							for (Person person : listBocMembers) {
								listIdBocMembers.add(person.getId());
								System.out.println(person.getId());
								if (person.isResponsableBO()) {
									responsableBocDest = person.getId();
								}
							}

							Integer lastId = appMgr
									.CountAllCourrierBOCByTransaction(transaction.getDossier().getDossierId(),"A",
											year, "boc_" + idBocDestinataire,
											listIdBocMembers);
											System.out
									.println("#### $$$$  ##### idBocDestinataire  "+ idBocDestinataire);

							referenceCourrierTypeNewTr = "A";

							if (lastId != null) {
								lastId++;
							} else {

								lastId = 1;
							}
							referenceCourrierNumeroNewTr = lastId;
							System.out
									.println("AH  ====>id responsableBocDest : "
											+ responsableBocDest);
												System.out
									.println("#### $$$$  ##### lastId  "+ lastId);
							// /////////////////////////// Debut
							// insertTransaction /////////////////////////////
							etat = appMgr.listEtatByLibelle("Non traité")
									.get(0);
							Transaction newTransactionBocDest = new Transaction();
							newTransactionBocDest
									.setExpdest(transactionExpediteur.get(0)
											.getExpdest());

							if (responsableBocDest != 0)
								newTransactionBocDest
										.setIdUtilisateur(responsableBocDest);
							else
								newTransactionBocDest
										.setIdUtilisateur(listIdBocMembers
												.get(0));

							newTransactionBocDest
									.setTransactionDateTransaction(new Date());
							typetransaction = appMgr
									.getTypeTransactionByLibelle("Envoi")
									.get(0);
							newTransactionBocDest
									.setTypetransaction(typetransaction);
							newTransactionBocDest.setEtat(etat);
							newTransactionBocDest.setTransactionSupprimer(true);
							int newOrderNumberDest = transaction
									.getTransactionOrdre();
							newOrderNumberDest++;
							newTransactionBocDest
									.setTransactionOrdre(newOrderNumberDest);
							newTransactionBocDest.setDossier(transaction
									.getDossier());
							newTransactionBocDest
									.setTransactionDestinationReelle(transaction
											.getTransactionDestinationReelle());

							newTransactionBocDest
									.setCourrierDateReceptionAnnee(annee);
							newTransactionBocDest
									.setCourrierType(referenceCourrierTypeNewTr);
							newTransactionBocDest
									.setCourrierTypeOrdre(referenceCourrierNumeroNewTr);
							newTransactionBocDest
									.setCourrierReferenceCorrespondant(referenceCourrierTypeNewTr
											+ referenceCourrierNumeroNewTr);

							appMgr.insert(newTransactionBocDest);
							newTransactionBocDest
									.setTransactionFirst(newTransactionBocDest
											.getTransactionId());
							System.out
									.println("newTransactionBocDest.getTransactionId() "
											+ newTransactionBocDest
													.getTransactionId());
													
							System.out
									.println("newTransactionBocDest référence "
											+ referenceCourrierNumeroNewTr);						
							appMgr.update(newTransactionBocDest);
							// /////////////////////////// Fin insertTransaction
							// /////////////////////////////

							// : Début Test si Destinataire intern-Person ou
							// interne-Unité
							// expdest-------------------------------------------------------------------------------------------------
							expdest = new Expdest();
							transactionDestinationReelle = appMgr
									.getTransactionDestinationReelById(transaction
											.getTransactionDestinationReelle()
											.getTransactionDestinationReelleId());

							// [] :type Destinataire Reelle :Interne-Person
							if (transaction
									.getTransactionDestinationReelle()
									.getTransactionDestinationReelleTypeDestinataire()
									.equals("Interne-Person")) {
								Person personDestinationReel = vb
										.getLdapOperation()
										.getPersonalisedUserById(
												transaction
														.getTransactionDestinationReelle()
														.getTransactionDestinationReelleIdDestinataire());

								// ******************BOS 2

								int idUserDest = personDestinationReel.getId();
								int id1;
								Person personneRecherche = new Person();
								boolean findPerson = false;
								int j = 0;
								do {
									id1 = vb.getCopyLdapListUser().get(j)
											.getId();
									if (id1 == idUserDest) {
										findPerson = true;
										personneRecherche = vb
												.getCopyLdapListUser().get(j);
									} else {
										j++;
									}
								} while (!findPerson
										&& j < vb.getCopyLdapListUser().size());

								getIdBocByUnit(personneRecherche
										.getAssociatedDirection());
								idBocDestinataire = idBoc;

								expdest.setTypeExpDest("Interne-Boc");
								expdest.setIdExpDestLdap(idBocDestinataire);
								String typeIntervenant = "boc_"
										+ String.valueOf(idBoc);
								appMgr.insert(expdest);

								// XTE : Insertion
								// transactionDestination---------------------------------------------------------------------------------------------

								TransactionDestination trDestNew = new TransactionDestination();
								id.setIdTransaction(newTransactionBocDest
										.getTransactionId());
								id.setIdExpDest(expdest.getIdExpDest());
								trDestNew.setId(id);
								trDestNew
										.setTransactionDestIdIntervenant(idBoc);
								trDestNew
										.setTransactionDestTypeIntervenant(typeIntervenant);
										if(transactionDestination.getTransactionDestEtatReceptionPhysique()!=null){
										Etat etatNonReceptionPhysique = new Etat();
										etatNonReceptionPhysique.setEtatId(9);
										trDestNew.setTransactionDestEtatReceptionPhysique(etatNonReceptionPhysique);
									}
								appMgr.insert(trDestNew);

							} else
							// [] :type Destinataire Reelle :Interne-Unité
							// [2019-06-27]
							if (transaction
									.getTransactionDestinationReelle()
									.getTransactionDestinationReelleTypeDestinataire()
									.equals("Interne-Unité")) {
								System.out
										.println("############################################[2019-06-27]");
								// expdest.setTypeExpDest("Interne-Unité");
								Unit unit = vb
										.getLdapOperation()
										.getUnitById(
												transaction
														.getTransactionDestinationReelle()
														.getTransactionDestinationReelleIdDestinataire());
								// ******************BOS 2

								int idUnitDest = unit.getIdUnit();
								int id1;
								Unit unitRecherche = new Unit();
								boolean findUnite = false;
								int j = 0;
								do {
									id1 = vb.getCopyLdapListUnit().get(j)
											.getIdUnit();
									if (id1 == idUnitDest) {
										findUnite = true;
										unitRecherche = vb
												.getCopyLdapListUnit().get(j);
										break;
									} else {
										j++;
									}
								} while (!findUnite
										&& j < vb.getCopyLdapListUnit().size());

								Unit u = ldapOperation
										.getUnitById(unitRecherche.getIdUnit());
								getIdBocByUnit(u);

								expdest.setTypeExpDest("Interne-Boc");

								expdest.setIdExpDestLdap(idBoc);
								String typeIntervenant = "boc_"
										+ String.valueOf(idBoc);
								appMgr.insert(expdest);
								System.out
										.println("////////////////////////////Inserton dans trDest ");
								System.out.println("expdest.getIdExpDest() "
										+ expdest.getIdExpDest());
								TransactionDestination trDestDest = new TransactionDestination();
								id.setIdTransaction(newTransactionBocDest
										.getTransactionId());
								id.setIdExpDest(expdest.getIdExpDest());
								trDestDest.setId(id);
								trDestDest
										.setTransactionDestIdIntervenant(idBoc);
								System.out
										.println("newTransactionBocDest.getTransactionId() "
												+ newTransactionBocDest
														.getTransactionId());
								trDestDest
										.setTransactionDestTypeIntervenant(typeIntervenant);
										if(transactionDestination.getTransactionDestEtatReceptionPhysique()!=null){
										Etat etatNonReceptionPhysique = new Etat();
										etatNonReceptionPhysique.setEtatId(9);
										trDestDest.setTransactionDestEtatReceptionPhysique(etatNonReceptionPhysique);
									}
								appMgr.insert(trDestDest);
								System.out
										.println("***************************************************************************** ");
								System.out
										.println("Fin ajout dans table trDest avec ");
								System.out.println(trDest.getId()
										.getIdTransaction());
								System.out.println(trDest.getId()
										.getIdExpDest());

							}

						}
						// ///////////////////////////////////////////////////////////////////////////////////////////
						// ///////////////////////////FIN Transaction Ajoutée
						// pour BOC DEST/////////////////////////////
						// ///////////////////////////////////////////////////////////////////////////////////////////

					}
					setStatus1(true);
				}
			} else {
				
				System.out.println("ZZZZZZZZZZZZZZZZZZZZZZZZ"+courrierInformations.getTransaction().getTransactionId());
				System.out.println(" etat 6");
			}
		} catch (Exception e) {
			setStatus2(true);
			e.printStackTrace();
		}

	}
	
	
	public int ReturnBocAssocieeUnite(Unit u) {
		/*
		 * if (u.getAssociatedBOC() != null) return
		 * u.getAssociatedBOC().getIdBOC(); else if (u.getAssociatedUnit() !=
		 * null) return ReturnBocAssocieeUnite(u.getAssociatedUnit()); else
		 * return 0;
		 */

		if (u.getAssociatedUnit() != null && u.getIdUnit() != null) {

//			String stringId=codeUniteString(u.getAssociatedUnit()
//					.getIdUnit());
			Unit unite = ldapOperation.getUnitById(u.getAssociatedUnit()
					.getIdUnit());
			return ReturnBocAssocieeUnite(unite);

		} else if (u.getAssociatedBOC() != null) {
			return u.getAssociatedBOC().getIdBOC();

		} else {

			System.out
					.println("DANS else unit.getAssociatedUnit() != null && unit.getAssociatedBOC()!=null ");
			return 0;
		}

	}

	public void setTypeUserDes(String typeUserDes) {
		this.typeUserDes = typeUserDes;
	}

	public String getTypeUserDes() {
		return typeUserDes;
	}

	public void setReceptionphysiqueNonLivre(boolean receptionphysiqueNonLivre) {
		this.receptionphysiqueNonLivre = receptionphysiqueNonLivre;
	}

	public boolean isReceptionphysiqueNonLivre() {
		return receptionphysiqueNonLivre;
	}

	public String getCupSRV() {
		return cupSRV;
	}

	public void setCupSRV(String cupSRV) {
		this.cupSRV = cupSRV;
	}

	public String getCodeUniqueCourrier() {
		return codeUniqueCourrier;
	}

	public void setCodeUniqueCourrier(String codeUniqueCourrier) {
		this.codeUniqueCourrier = codeUniqueCourrier;
	}

	public boolean isExecuter() {
		return executer;
	}

	public void setExecuter(boolean executer) {
		this.executer = executer;
	}

	public boolean isExisteBOSansMembres() {
		return existeBOSansMembres;
	}

	public void setExisteBOSansMembres(boolean existeBOSansMembres) {
		this.existeBOSansMembres = existeBOSansMembres;
	}

	public void setEtatReceptionPhysique(Boolean etatReceptionPhysique) {
		this.etatReceptionPhysique = etatReceptionPhysique;
	}

	public Boolean getEtatReceptionPhysique() {
		return etatReceptionPhysique;
	}

	public void setCourrierPointer(boolean courrierPointer) {
		this.courrierPointer = courrierPointer;
	}

	public boolean isCourrierPointer() {
		return courrierPointer;
	}

	public void setListCourriersLiees(List<CourrierInformations> listCourriersLiees) {
		this.listCourriersLiees = listCourriersLiees;
	}

	public List<CourrierInformations> getListCourriersLiees() {
		return listCourriersLiees;
	}

	public boolean isDisbledBontonConsultation() {
		return disbledBontonConsultation;
	}

	public void setDisbledBontonConsultation(boolean disbledBontonConsultation) {
		this.disbledBontonConsultation = disbledBontonConsultation;
	}

	public String getAlign() {
		return align;
	}

	public void setAlign(String align) {
		this.align = align;
	}

	public TransactionDestination getTransactionDestination2() {
		return transactionDestination2;
	}

	public void setTransactionDestination2(
			TransactionDestination transactionDestination2) {
		this.transactionDestination2 = transactionDestination2;
	}

	public String getSelectedItemsTr() {
		return selectedItemsTr;
	}

	public void setSelectedItemsTr(String selectedItemsTr) {
		this.selectedItemsTr = selectedItemsTr;
	}

	public boolean isShowModificationButton() {
		return showModificationButton;
	}

	public void setShowModificationButton(boolean showModificationButton) {
		this.showModificationButton = showModificationButton;
	}

	public List<SelectItem> getSelectItemsTr2() {
		String libelle;
		List<SelectItem> selectItemsTr = new ArrayList<SelectItem>();
		selectItemsTr.add(new SelectItem(""));
		for (int j = 0; j <= listTr.size() - 1; j++) {
			Integer idTr = listTr.get(j).getTransmissionId();
			if (vb.getLocale().equals("ar")) {
				libelle = listTr.get(j).getTransmissionLibelleAr();
			} else {
				libelle = listTr.get(j).getTransmissionLibelle();
			}
			selectItemsTr.add(new SelectItem(String.valueOf(idTr), libelle));
		}
		return selectItemsTr;
	}

	public void setSelectItemsTr2(ArrayList<SelectItem> selectItemsTr2) {
		this.selectItemsTr2 = selectItemsTr2;
	}

	
	
	
}

// public CourrierInformations
// searchExpediteurDestinataireAndExplodeDataTransactionDestination(
// TransactionDestination transactionDestination) {
// CourrierInformations courrierInformations = new CourrierInformations();
// courrierInformations.setTransactionDestination(transactionDestination);
// Courrier courrier = appMgr.listCourrierByIdTransaction(
// transactionDestination.getId().getIdTransaction()).get(0);
// courrierInformations.setCourrierReference(courrier
// .getCourrierReferenceCorrespondant());
// courrierInformations.setCourrierObjet(courrier.getCourrierObjet());
// courrierInformations.setCourrier(courrier);
// Nature nature = appMgr
// .getNatureById(courrier.getNature().getNatureId()).get(0);
// courrierInformations.setCourrierNature(nature.getNatureLibelle());
//
// Transaction transaction = appMgr.getListTransactionByIdTransaction(
// transactionDestination.getId().getIdTransaction()).get(0);
// courrierInformations.setTransaction(transaction);
// System.out.println("é : " + transaction.getTransactionId());
// courrierInformations.setTransactionID(transaction.getTransactionId());
// courrierInformations.setCourrierDateReceptionEnvoi(transaction
// .getTransactionDateTransaction());
// courrierInformations.setCourrierRecu(1);
// if (transaction.getTransactionDestinationReelle() != null
// && transaction.getEtat().getEtatId().equals(2)) {
// courrierInformations.setCourrierAValider(1);
// } else {
// courrierInformations.setCourrierAValider(0);
// }
// // expediteur
// Expdest expDest = appMgr.getListExpDestByIdExpDest(
// transaction.getExpdest().getIdExpDest()).get(0);
// if (expDest.getTypeExpDest().equals("Interne-Person")) {
// Person person = ldapOperation.getUserById(expDest
// .getIdExpDestLdap());
// courrierInformations.setCourrierExpediteur(person.getCn());
// courrierInformations.setCourrierExpediteurObjet(person);
// } else if (expDest.getTypeExpDest().equals("Interne-Unité")) {
// Unit unit = ldapOperation.getUnitById(expDest.getIdExpDestLdap());
// courrierInformations.setCourrierExpediteur(unit.getNameUnit());
// courrierInformations.setCourrierExpediteurObjet(unit);
// } else if (expDest.getTypeExpDest().equals("Interne-Boc")) {
// Unit unit = ldapOperation.getBocById(expDest.getIdExpDestLdap());
// courrierInformations.setCourrierExpediteur(unit.getNameUnit());
// courrierInformations.setCourrierExpediteurObjet(unit);
// } else if (expDest.getTypeExpDest().equals("Externe")) {
// if (expDest.getExpdestexterne().getTypeutilisateur()
// .getTypeUtilisateurLibelle().equals("PP")) {
// courrierInformations.setCourrierExpediteur(expDest
// .getExpdestexterne().getExpDestExterneNom()
// + " "
// + expDest.getExpdestexterne().getExpDestExternePrenom()
// + " (PP)");
// courrierInformations.setCourrierExpediteurObjet(expDest
// .getExpdestexterne());
// } else {
// courrierInformations.setCourrierExpediteur(expDest
// .getExpdestexterne().getExpDestExterneNom() + " (PM)");
// courrierInformations.setCourrierExpediteurObjet(expDest
// .getExpdestexterne());
// }
// }
// // destinataire
// expDest = new Expdest();
// if (transaction.getTransactionDestinationReelle() != null) {
// TransactionDestinationReelle transactionDestinationReelle;
// Expdestexterne expDestExterne;
// transactionDestinationReelle = transaction
// .getTransactionDestinationReelle();
// if (transactionDestinationReelle
// .getTransactionDestinationReelleTypeDestinataire().equals(
// "Externe")) {
// Etat etat = appMgr.listEtatByRef(
// transaction.getEtat().getEtatId()).get(0);
// if (etat.getEtatLibelle().equals("Simple")) {
// expDest = appMgr.getListExpDestByIdExpDest(
// transactionDestination.getId().getIdExpDest()).get(
// 0);
// if (expDest.getTypeExpDest().equals("Interne-Person")) {
// courrierInformations
// .setCourrierDestinataireReelle(ldapOperation
// .getCnById(ldapOperation.CONTEXT_USER,
// "uid",
// expDest.getIdExpDestLdap()));
// } else if (expDest.getTypeExpDest().equals("Interne-Unité")) {
// courrierInformations
// .setCourrierDestinataireReelle(ldapOperation
// .getCnById(ldapOperation.CONTEXT_UNIT,
// "departmentNumber",
// expDest.getIdExpDestLdap()));
// } else if (expDest.getTypeExpDest().equals("Interne-Boc")) {
// courrierInformations
// .setCourrierDestinataireReelle(ldapOperation
// .getCnById(ldapOperation.CONTEXT_BOC,
// "departmentNumber",
// expDest.getIdExpDestLdap()));
// }
// } else {
// expDestExterne = new Expdestexterne();
// expDestExterne = appMgr
// .getExpediteurById(
// transactionDestinationReelle
// .getTransactionDestinationReelleIdDestinataire())
// .get(0);
// if (expDestExterne.getTypeutilisateur()
// .getTypeUtilisateurLibelle().equals("PP")) {
// courrierInformations
// .setCourrierDestinataireReelle(expDestExterne
// .getExpDestExterneNom()
// + " "
// + expDestExterne
// .getExpDestExternePrenom()
// + " (PP)");
// } else {
// courrierInformations
// .setCourrierDestinataireReelle(expDestExterne
// .getExpDestExterneNom() + " (PM)");
// }
// }
// }
// } else {
// expDest = new Expdest();
// expDest = appMgr.getListExpDestByIdExpDest(
// transactionDestination.getId().getIdExpDest()).get(0);
// if (expDest.getTypeExpDest().equals("Interne-Person")) {
// courrierInformations
// .setCourrierDestinataireReelle(ldapOperation.getCnById(
// ldapOperation.CONTEXT_USER, "uid",
// expDest.getIdExpDestLdap()));
// } else if (expDest.getTypeExpDest().equals("Interne-Unité")) {
// courrierInformations
// .setCourrierDestinataireReelle(ldapOperation.getCnById(
// ldapOperation.CONTEXT_UNIT, "departmentNumber",
// expDest.getIdExpDestLdap()));
// } else if (expDest.getTypeExpDest().equals("Interne-Boc")) {
// courrierInformations
// .setCourrierDestinataireReelle(ldapOperation.getCnById(
// ldapOperation.CONTEXT_BOC, "departmentNumber",
// expDest.getIdExpDestLdap()));
// }
// }
// if ((transaction.getTransactionDestinationReelle() != null
// && (transaction.getEtat().getEtatLibelle().equals("A valider") ||
// transaction
// .getEtat().getEtatLibelle().equals("Non traité")) || transaction
// .getEtat().getEtatLibelle().equals("Faire suivre"))) {
// courrierInformations.setCourrierAValider(1);
// } else {
// courrierInformations.setCourrierAValider(0);
// }
// // courrierInformations.setTypeCourrier(getCategorieCourrier(
// // transactionDestination, true));
// return courrierInformations;
// }

/*
 * private String getCategorieCourrier(Transaction transaction, boolean isMail)
 * { String result = ""; String[] type = new String[2]; if
 * (vb.getPerson().isResponsable()) { if
 * (transaction.getTransactionTypeIntervenant().contains("sub")) { type =
 * transaction.getTransactionTypeIntervenant().split("_"); if
 * (Integer.parseInt(type[1]) == vb.getPerson().getId()) { if (isMail) { result
 * = "A. Mes Propres Courriers Envoyés"; } else { result =
 * "A. Mes Propres Dossiers Envoyés"; } } else {
 * 
 * if (isMail) { result = "C. Les Courriers Envoyés de Mes Subordonnées"; } else
 * { result = "C. Les Dossiers Envoyés de Mes Subordonnées"; }
 * 
 * } } else if (transaction.getTransactionTypeIntervenant().contains( "unit")) {
 * type = transaction.getTransactionTypeIntervenant().split("_"); if
 * (Integer.parseInt(type[1]) == vb.getPerson()
 * .getAssociatedDirection().getIdUnit()) { if (isMail) { result =
 * "E. Les Courriers Envoyés de Mon Unité"; } else { result =
 * "E. Les Dossiers Envoyés de Mon Unité"; } } else {
 * 
 * if (isMail) { result = "G. Les Courriers Envoyés de Mes Sous-Unités"; } else
 * { result = "G. Les Dossiers Envoyés de Mes Sous-Unités"; }
 * 
 * } } else if (transaction.getTransactionTypeIntervenant().contains(
 * "secretary")) { if (isMail) { result =
 * "I. Les Courriers Envoyés de Ma Secrétaire"; } else { result =
 * "I. Les Dossiers Envoyés de Ma Secrétaire"; } } } else if
 * (vb.getPerson().isSecretary()) { if
 * (transaction.getTransactionTypeIntervenant().contains( "secretary")) { if
 * (isMail) { result = "A. Mes Propres Courriers Envoyés"; } else { result =
 * "A. Mes Propres Dossiers Envoyés"; } } else { if (isMail) { result =
 * "E. Les Courriers Envoyés de Mon Unité"; } else { result =
 * "E. Les Dossiers Envoyés de Mon Unité"; } } } else if
 * (vb.getPerson().isAgent()) { if
 * (transaction.getTransactionTypeIntervenant().contains("agent")) { if (isMail)
 * { result = "A. Mes Propres Courriers Envoyés"; } else { result =
 * "A. Mes Propres Dossiers Envoyés"; } } else { if (isMail) { result =
 * "E. Les Courriers Envoyés de Mon Unité"; } else { result =
 * "E. Les Courriers Envoyés de Mon Unité"; } } } else { result =
 * "A. Les Courriers du Bureau d'Ordre"; //
 * if(transaction.getTransactionTypeIntervenant() != null){ // result =
 * "A. Les Courriers de Départ"; // }else{ // result =
 * "B. Les Courriers d'Arrivée"; // } }
 * 
 * return result; }
 * 
 * private String getCategorieCourrier( TransactionDestination
 * transactionDestination, boolean isMail) { String result = ""; String[] type =
 * new String[2]; if (vb.getPerson().isResponsable()) { if
 * (transactionDestination.getTransactionDestTypeIntervenant() .contains("sub"))
 * { type = transactionDestination
 * .getTransactionDestTypeIntervenant().split("_"); if
 * (Integer.parseInt(type[1]) == vb.getPerson().getId()) { if (isMail) { result
 * = "B. Mes Propres Courriers Reéus"; } else { result =
 * "B. Mes Propres Dossiers Reéus"; } } else { if (isMail) { result =
 * "D. Les Courriers Reéus de Mes Subordonnées"; } else { result =
 * "D. Les Dossiers Reéus de Mes Subordonnées"; } } }
 * 
 * } else if (transactionDestination.getTransactionDestTypeIntervenant()
 * .contains("unit")) { type =
 * transactionDestination.getTransactionDestTypeIntervenant() .split("_"); if
 * (Integer.parseInt(type[1]) == vb.getPerson()
 * .getAssociatedDirection().getIdUnit()) { if (isMail) { result =
 * "F. Les Courriers Reéus de Mon Unité"; } else { result =
 * "F. Les Dossiers Reéus de Mon Unité"; } } else { if (isMail) { result =
 * "H. Les Courriers Reéus de Mes Sous-Unités"; } else { result =
 * "H. Les Dossiers Reéus de Mes Sous-Unités"; } } } else if
 * (transactionDestination.getTransactionDestTypeIntervenant()
 * .contains("secretary")) { if (isMail) { result =
 * "J. Les Courriers Reéus de Ma Secrétaire"; } else { result =
 * "J. Les Dossiers Reéus de Ma Secrétaire"; } }// else if
 * (transactionDestination //
 * .getTransactionDestTypeIntervenant().contains("agent")) { // // if (isMail) {
 * // result = "D. Les Courriers Reéus de Mes Agents"; // } else { // result =
 * "D. Les Dossiers Reéus de Mes Agents"; // } // } else if
 * (vb.getPerson().isSecretary()) { if
 * (transactionDestination.getTransactionDestTypeIntervenant()
 * .contains("secretary")) { if (isMail) { result =
 * "B. Mes Propres Courriers Reéus"; } else { result =
 * "B. Mes Propres Dossiers Reéus"; } } else { if (isMail) { result =
 * "F. Les Courriers Reéus de Mon Unité"; } else { result =
 * "F. Les Dossiers Reéus de Mon Unité"; } } } else if
 * (vb.getPerson().isAgent()) { if
 * (transactionDestination.getTransactionDestTypeIntervenant()
 * .contains("agent")) { if (isMail) { result =
 * "B. Mes Propres Courriers Reéus"; } else { result =
 * "B. Mes Propres Dossiers Reéus"; } } else { if (isMail) { result =
 * "F. Les Courriers Reéus de Mon Unité"; } else { result =
 * "F. Les Dossiers Reéus de Mon Unité"; } } } else { result =
 * "A. Les Courriers Reéus du Bureau d'Ordre"; }
 * 
 * return result; }
 */
