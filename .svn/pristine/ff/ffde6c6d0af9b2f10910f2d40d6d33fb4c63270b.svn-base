package xtensus.beans.common.GBO;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;

import org.hibernate.ejb.criteria.expression.function.SubstringFunction;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import xtensus.MethdesGeneriques.MethodesGenerique;
import xtensus.beans.common.ListeDestinatairesModel;
import xtensus.beans.common.VariableGlobale;
import xtensus.beans.utils.CourrierInformations;
import xtensus.entity.Annotation;
import xtensus.entity.AoConsultation;
import xtensus.entity.Courrier;
import xtensus.entity.CourrierDossier;
import xtensus.entity.Expdest;
import xtensus.entity.Expdestexterne;
import xtensus.entity.Pm;
import xtensus.entity.Pp;
import xtensus.entity.Transaction;
import xtensus.entity.TransactionAnnotation;
import xtensus.entity.TransactionDestination;
import xtensus.entity.Variables;
import xtensus.ldap.business.LdapOperation;
import xtensus.ldap.model.BOC;
import xtensus.ldap.model.ItemSelected;
import xtensus.ldap.model.Person;
import xtensus.ldap.model.Unit;
import xtensus.services.ApplicationManager;


@Component
@Scope("request")
	public class AoConsultationConsultationBean {

	private ApplicationManager appMgr;
	private AoConsultation aoConsultation;
	private int nombreCourrier;
	private DataModel listCourrierAoConsultationDM;
	private CourrierInformations courrierInformations;
	private List<CourrierInformations> listeCourriers;
	String	dateHeur;
	
@SuppressWarnings("unused")
	
	private long records = 0;
	@Autowired
	private VariableGlobale vb;
	private String dateHeurLimite;
	private String dateHeurComm;
	private String dateHeurProl;
	private ArrayList<ListeDestinatairesModel> destinatairesAvecAnnotations;
	private ArrayList<ItemSelected> listSelectedItem;
	private List<Variables> var;
	private String codeUniqueCourrier;
	private TransactionAnnotation ta;
	private Transaction tr;
	private Variables courrierAriverToDG;
	private String styleMessage;
	private int lastIndex;
	private boolean etatReceptionPhysique;
	private LdapOperation ldapOperation;
	private String type;
	private String type1;
	private String typeSecretaire;
	private List<Integer> listIdsSousUnit;
	private List<Integer> listIdsSubordonne;
	private int idBoc;
	private Unit unitSup;
	private String consultationCourrierSecretaire;
	private String consultationCourrierSubordonne;
	private String consultationCourrierSousUnite;
	private Integer idUser;
	private HashMap<String, Object> filterMap = new HashMap<String, Object>();
	private String sortField;
	private boolean descending;
	private Date dateDebut;
	private Date dateFin;
	private Courrier courrier;
	public AoConsultationConsultationBean() {

	}
	@Autowired
	public AoConsultationConsultationBean(
			@Qualifier("applicationManager") ApplicationManager appMgr) {

		this.appMgr = appMgr;
		aoConsultation = new AoConsultation();
		listCourrierAoConsultationDM = new ListDataModel();
		listIdsSousUnit = new ArrayList<Integer>();
		listIdsSubordonne = new ArrayList<Integer>();
		courrier=new Courrier();
	}

	@PostConstruct
	public void Initialize() {
		System.out.println("#### Dans initialize AO/C");
		listCourrierAoConsultationDM = new ListDataModel();
		aoConsultation = new AoConsultation();
		courrierAriverToDG = appMgr.listVariablesById(13).get(0);
		ldapOperation = vb.getLdapOperation();
		try {
			
			aoConsultation = vb.getAoConsultation();
			System.out.println("#### aoConsultation id == " + aoConsultation.getAoConsultationId());
			///////////////KBS 19-08-2019///////////////////
			dateHeurLimite =aoConsultation.getAoConsultationDateLimiteOffre().toString().substring(0,10) + " à "
			+ aoConsultation.getAoConsultationDateLimiteOffre().toString().substring(11,16);
			dateHeurComm =aoConsultation.getAoConsultationDateSeanceCommission().toString().substring(0,10) + " à "
			+ aoConsultation.getAoConsultationDateSeanceCommission().toString().substring(11,16);
			if(aoConsultation.getAoConsultationDelaisProlongation() != null){
			dateHeurProl =aoConsultation.getAoConsultationDelaisProlongation().toString().substring(0,10) + " à "
			+ aoConsultation.getAoConsultationDelaisProlongation().toString().substring(11,16);
			}
	
			// identify connected user
			//********* Début *******************//
			Calendar calendar = Calendar.getInstance();
			calendar.set(Calendar.DAY_OF_MONTH, 1);
			calendar.set(Calendar.HOUR_OF_DAY, 0);
			calendar.set(Calendar.MINUTE, 0);
			calendar.set(Calendar.SECOND, 0);
			calendar.set(Calendar.MILLISECOND, 0);
			dateDebut = calendar.getTime();
			
			//********* Fin *********************//
			calendar.set(Calendar.HOUR_OF_DAY, 23);
			calendar.set(Calendar.MINUTE, 59);
			calendar.set(Calendar.SECOND, 59);
			calendar.set(Calendar.MILLISECOND, 999);
			dateFin = calendar.getTime();
			
			idUser = vb.getPerson().getId();
			type = "";
			type1 = "";
			if (vb.getPerson().isBoc()) {
				type = "boc_" + vb.getPerson().getAssociatedBOC().getIdBOC();
				type1 = "";
			} else if (vb.getPerson().isResponsable()) {
				type = "unit_"
						+ vb.getPerson().getAssociatedDirection().getIdUnit();
				type1 = "sub_" + idUser;
				// NEW

				for (Unit unit : vb.getPerson().getAssociatedDirection()
						.getListUnitsChildUnit()) {
					
					listIdsSousUnit.add(unit.getIdUnit());
					 
					try {
						listIdsSubordonne
								.add(unit.getResponsibleUnit().getId());
						
					} catch (Exception e) {
						System.out.println("#Sub-Unit without Responsible");
					}

				}
				// FIn NEW
				try {
					typeSecretaire = "secretary_"
							+ vb.getPerson().getAssociatedDirection()
									.getSecretaryUnit().getId();
					
				} catch (NullPointerException e) {
					consultationCourrierSecretaire = "Non";
				}

			} else if (vb.getPerson().isSecretary()) {
				type = "secretary_" + idUser;
				type1 = "unit_"
						+ vb.getPerson().getAssociatedDirection().getIdUnit();
			} else if (vb.getPerson().isAgent()) {
				type = "agent_" + idUser;
				type1 = "";
			}
			// fin identify connected user
			listeCourriers=appMgr.findCourrierEnvoyerANDRecuByCriteria(vb.getPerson()
					.isResponsable(), listIdsSousUnit,
					listIdsSubordonne, filterMap, sortField,
					descending, consultationCourrierSecretaire,
					consultationCourrierSubordonne,
					consultationCourrierSousUnite, 12, dateDebut,
					dateFin, type, type1, typeSecretaire, idUser,
					0, "",
					0, 10, false,6, "Tous", vb.getDbType(),aoConsultation.getAoConsultationId(),0,0);			
			
			System.out.println("Size  listeCourriers ======> "+listeCourriers.size());

			
			for (CourrierInformations courrierInformations : listeCourriers) {
					try {
						searchExpediteurDestinataire(courrierInformations);					
				} catch (Exception e) {
			e.printStackTrace();
					
			continue;
			}
				}
			nombreCourrier = listeCourriers.size();
			
			listCourrierAoConsultationDM.setWrappedData(listeCourriers);
				System.out.println("##### vb.setCodeUniqueCourrier == " + vb.getCodeUniqueCourrier());
		} 
		
		catch (Exception e) {		
			e.printStackTrace();
		}
	}
	public void searchExpediteurDestinataire(
			CourrierInformations courrierInformations) throws Exception {
		System.out.println("AH : DANS searchExpediteurDestinataire ");

		destinatairesAvecAnnotations = new ArrayList<ListeDestinatairesModel>();
		listSelectedItem = new ArrayList<ItemSelected>();
		List<Object> listSelectedObject = new ArrayList<Object>();
		List<Person> listSelectedPerson = new ArrayList<Person>();
		List<Pp> listSelectetdPP = new ArrayList<Pp>();
		List<Pm> listSelectetdPM = new ArrayList<Pm>();
		List<Unit> listSelectetdUnit = new ArrayList<Unit>();
		List<BOC> listSelectetdBoc = new ArrayList<BOC>();

		// ***********************************************************************
		// --------------------------------------MM----------------------------
		// Test
		// var=appMgr.getListVariableByLibelle();
		// 11
		// var = appMgr
		// .listVariablesByLibelle("code_courrier_unique_personnalisable");
		//
		// codeUniqueCourrier = var.get(0).getVaraiablesValeur();
		// codeUniqueCourrier = codeUniqueCourrier.replace("[ID]", vb
		// .getCourrier().getCourrierReferenceCorrespondant() + "");
		//
		// codeUniqueCourrier = codeUniqueCourrier.replace("[Annee]",
		// new Date().getYear() + 1900 + "");
		// codeUniqueCourrier = codeUniqueCourrier.replace("[Mois]",
		// new Date().getMonth() + 1 + "");
		// XTE : Si le courrier est ajouté par un non Boc, il aura le type à
		// NULL--------------------------------------------------
		// if (vb.getCourrier().getCourrierType() != null) {
		// codeUniqueCourrier = codeUniqueCourrier.replace("[Sens]", vb
		// .getCourrier().getCourrierType());
		// } else {
		// codeUniqueCourrier = codeUniqueCourrier.replace("[Sens]", "I");
		// }
		// System.out.println("courrier type = "
		// + vb.getCourrier().getCourrierType());
		// codeUniqueCourrier = codeUniqueCourrier.replace("[SRV]", cupSRV);
		// KHA====
		// vb.setCourrierCodeUnique(codeUniqueCourrier);
		// ====
		// [ID][Annee][Mois]//[SRV]/[Sens]/
		// ***********************************************************************
		// --------------------------------------MM----------------------------
		// Test
		// get transaction destinataire by id transaction
		System.out
				.println("id : tr " + courrierInformations.getTransactionID());

		List<TransactionDestination> listDestinataires = appMgr
				.getDestinationByIdTransaction(courrierInformations
						.getTransactionID());
		if (listDestinataires != null && listDestinataires.size() > 0) {
			TransactionDestination BocSuivant = listDestinataires.get(0);
			Integer etatID = courrierInformations.getEtatID();
			String expType;
			Integer expTypeUser;
			Integer expLdap;
			String expNom;
			String expPrenom;
			String expediteurReel="";
			if (courrierInformations.getCourrierOldNum() == null) {
				expType = courrierInformations.getExpType();
				expTypeUser = courrierInformations.getExpTypeUser();
				expLdap = courrierInformations.getExpLdap();
				expNom = courrierInformations.getExpNom();
				expPrenom = courrierInformations.getExpPrenom();
			} else {
				expType = courrierInformations.getExpTypeOld();
				expTypeUser = courrierInformations.getExpTypeUserOld();
				expLdap = courrierInformations.getExpLdapOld();
				expNom = courrierInformations.getExpNomOld();
				expPrenom = courrierInformations.getExpPrenomOld();
			}
			// expediteur reel
			String expediteur = "";

			// Ajouté le 2019-06-09
			String destinataireExpediteur = "";
			Variables variableExecution = appMgr.listVariablesByLibelle(
					"execution_courrier_par_tous_types_membre_bo").get(0);

			Transaction transaction = appMgr.getListTransactionByIdTransaction(courrierInformations.getTransactionID()).get(0);

			courrierInformations.setTransaction(transaction);

			// //set Courrier dans Courrier Information
			// courrierInformations.setCourrier(appMgr.getCourrierByIdCourrier(
			// courrierInformations.getCourrierID()).get(0));

			// 2019-11-25 :Enveloppe : set mode transmission dans courrier
			// informations
			System.out.println("courrier id  "+ courrierInformations.getCourrierID());
			System.out.println("vb.getCourrier().getTransmission() "+ appMgr.getCourrierByIdCourrier(courrierInformations.getCourrierID()));
			courrierInformations.setTransmission(appMgr.getCourrierByIdCourrier(courrierInformations.getCourrierID()).get(0).getTransmission());
			

			System.out.println("expType====================>" + expType);

			if (expType.equals("Interne-Person")) {
				if (expLdap.equals(vb.getPerson().getId())) {
					courrierInformations.setCourrierRecu(0);
				}
				if (courrierAriverToDG.getVaraiablesValeur().equals("Non")) {
					/***
					 * test pour que boc execute un courrier
					 */
					if (vb.getPerson().getAssociatedBOC() != null
							&& courrierInformations.getTransactionOrdre() == null
							&& etatID.equals(5)) {
						courrierInformations.setCourrierAValider(1);

					}
				}

				// KHA : Seulement le responsable BO peut exécuter
				if (variableExecution.getVaraiablesValeur().equals("Non")) {
					if (vb.getPerson().getAssociatedBOC() != null
							&& courrierInformations.getTransactionOrdre() == null
							&& etatID.equals(5)) {

						courrierInformations.setCourrierAValider(1);
					} else

					// []: test pour que boc execute un courrier de destination
					// interne-Person avec ordre de transaction != null

					// KHA : ajouté le test si le connectee est resp BO
					if (vb.getPerson().getAssociatedBOC() != null
							&& vb.getPerson().isResponsableBO()
							&& courrierInformations.getTransactionOrdre() != null
							&& etatID.equals(5)) {

						courrierInformations.setCourrierAValider(1);

					}
				}
				// KHA : touls les Membres(Agent/Responsable) de BO peuvent
				// exécuter
				else {
					// []ajouter condition where BOC connecté a le meme id que
					// le
					// boc qui sera executer courrier
					if (vb.getPerson().getAssociatedBOC() != null
							&& courrierInformations.getTransactionOrdre() != null
							&& etatID.equals(5)
							&& vb.getPerson().getAssociatedBOC().getIdBOC() == BocSuivant
									.getTransactionDestIdIntervenant()) {

						courrierInformations.setCourrierAValider(1);

					}

				}

				Person person = vb.getHashMapAllUser().get(expLdap);

				Person p = vb.getLdapOperation().getPersonalisedUserById(
						person.getId());

				if (p.isResponsable() || p.isAgent() || p.isSecretary()) {

					destinataireExpediteur = p.getAssociatedDirection()
							.getShortNameUnit();
				}

				if (p.getAssociatedBOC() != null) {

					destinataireExpediteur = "BOC";

				}
				expediteur = person.getCn();

			} else if (expType.equals("Interne-Unité")) {
				System.out.println("vb.getPerson() " + vb.getPerson());
				System.out.println("expLdap : " + expLdap);

				if (vb.getPerson().isResponsable()
						&& !vb.getPerson().isBoc()
						&& expLdap.equals(vb.getPerson()
								.getAssociatedDirection().getIdUnit())) {
					courrierInformations.setCourrierRecu(0);
				}

				// System.out.println("courrierAriverToDG.getVaraiablesValeur()==============================>1 :"+courrierAriverToDG.getVaraiablesValeur());
				// System.out.println("vb.getPerson().getAssociatedBOC()=====================================>2 :"+vb.getPerson().getAssociatedBOC());
				// System.out.println("courrierInformations.getTransactionOrdre()============================>3 :"+courrierInformations.getTransactionOrdre());
				// System.out.println("etatID================================================================>4 : "+etatID);
				// System.out.println("vb.getPerson().isResponsableBO()======================================>5 : "+vb.getPerson().isResponsableBO());
				// System.out.println("variableExecution.getVaraiablesValeur()===============================>6 : "+variableExecution.getVaraiablesValeur());
				/***
				 * test pour que boc execute un courrier
				 */
				if (courrierAriverToDG.getVaraiablesValeur().equals("Non")) {

					if (vb.getPerson().getAssociatedBOC() != null
							&& courrierInformations.getTransactionOrdre() == null
							&& etatID.equals(5)) {
						courrierInformations.setCourrierAValider(1);

					}
				}

				/***
				 * test pour que boc execute un courrier
				 */
				if (variableExecution.getVaraiablesValeur().equals("Non")) {

					if (vb.getPerson().getAssociatedBOC() != null
							&& courrierInformations.getTransactionOrdre() == null
							&& etatID.equals(5)) {
						courrierInformations.setCourrierAValider(1);

					} else

					// KHA : ajouté le test si le connectee est resp BO
					if (vb.getPerson().getAssociatedBOC() != null
							&& vb.getPerson().isResponsableBO()
							&& courrierInformations.getTransactionOrdre() != null
							&& etatID.equals(5)) {
						courrierInformations.setCourrierAValider(1);
					}

				}
				// //[JS-2019-10-02] Ajouté condition Is Responsable pour que
				// bouton executer ne s'affiche au niveau BOCT
				else if (vb.getPerson().getAssociatedBOC() != null
						&& courrierInformations.getTransactionOrdre() != null
						&& etatID.equals(5)) {
					courrierInformations.setCourrierAValider(1);
					// 2019-11-25 : Enveloppe => Masquer bouton execution
					// lorsque type transmission enveloppe
					System.out.println(courrierInformations.getTransmission()
							.getTransmissionId() == 10);
					if (courrierInformations.getTransmission()
							.getTransmissionId() == 10) {
						// Enveloppe : Caché bouton execution
						courrierInformations.setCourrierAValider(0);
						System.out.println("Affiche bouton Execute 1 : "
								+ courrierInformations.getCourrierAValider());
					}

				}

				Unit unit = vb.getHashMapUnit().get(expLdap);

				destinataireExpediteur = unit.getShortNameUnit();

				expediteur = unit.getNameUnit();

			} else if (expType.equals("Interne-Boc")) {
				expediteur = vb.getCentralBoc().getNameBOC();
				/***
				 * test pour que boc execute un courrier
				 */
				if (courrierAriverToDG.getVaraiablesValeur().equals("Non")) {

					if (vb.getPerson().getAssociatedBOC() != null
							&& courrierInformations.getTransactionOrdre() == null
							&& etatID.equals(5)) {
						courrierInformations.setCourrierAValider(1);

					}
				}
				/***
				 * test pour que boc execute un courrier
				 */

				System.out.println(" DANS execute Interne-Boc");
				if (variableExecution.getVaraiablesValeur().equals("Non")) {
					if (vb.getPerson().getAssociatedBOC() != null
							&& courrierInformations.getTransactionOrdre() == null
							&& etatID.equals(5)) {
						courrierInformations.setCourrierAValider(1);

					}

					else if (vb.getPerson().getAssociatedBOC() != null
							&& vb.getPerson().isResponsableBO()
							&& courrierInformations.getTransactionOrdre() != null
							&& etatID.equals(5)) {
						courrierInformations.setCourrierAValider(1);
					}
				} else if (vb.getPerson().getAssociatedBOC() != null
						&& courrierInformations.getTransactionOrdre() != null
						&& etatID.equals(5)) {
					courrierInformations.setCourrierAValider(1);

				}

			} else if (expType.equals("Externe")) {

				// C* pour que le bouton executer soit activé pour les courriers
				// d'arrivé
				// provisoire .. juste pour activer l'execution des courrier
				// arrivé
				// pour le BOCT
				if (courrierAriverToDG.getVaraiablesValeur().equals("Non")) {

					if (vb.getPerson().getAssociatedBOC() != null
							&& courrierInformations.getTransactionOrdre() == null
							&& etatID.equals(5)) {
						courrierInformations.setCourrierAValider(1);

					}
				}

				if (variableExecution.getVaraiablesValeur().equals("Non")) {
					if (vb.getPerson().getAssociatedBOC() != null
							&& courrierInformations.getTransactionOrdre() == null
							&& etatID.equals(5)) {
						courrierInformations.setCourrierAValider(1);
					} else if (vb.getPerson().getAssociatedBOC() != null
							&& vb.getPerson().isResponsableBO()
							&& courrierInformations.getTransactionOrdre() != null
							&& etatID.equals(5)) {
						courrierInformations.setCourrierAValider(1);
					}
				} else if (vb.getPerson().getAssociatedBOC() != null
						&& courrierInformations.getTransactionOrdre() != null
						&& etatID.equals(5)) {
					courrierInformations.setCourrierAValider(1);

				}
				// provisoire .. juste pour activer l'execution des courrier
				// arrivé
				// pour le BOCT
				// C* pour que le bouton executer soit activé pour les courriers
				// d'arrivé
				List<Transaction> allTransactions = appMgr
				.getTransactionByIdDossier(courrierInformations
						.getDossierID());
	

		courrierInformations.setCourrierAllTransactions(allTransactions);

		Transaction firstTransaction = allTransactions.get(allTransactions
				.size() - 1);
				if(courrierInformations.getCourrierAllTransactions()!=null && courrierInformations.getCourrierAllTransactions().size()>0)
				{ List<Transaction> tousTR = courrierInformations.getCourrierAllTransactions();
				System.out.println(firstTransaction.getTransactionId());
				if(firstTransaction.getExpdest().getTypeExpDest().equals("Externe")){
					expTypeUser=firstTransaction.getExpdest().getExpdestexterne().getTypeutilisateur().getTypeUtilisateurId();
					System.out.println("expTypeUser  "+expTypeUser);
					expediteur=firstTransaction.getExpdest().getExpdestexterne().getExpDestExterneNom();
					if(expTypeUser == 1)
						expediteur=expediteur+ " "+firstTransaction.getExpdest().getExpdestexterne().getExpDestExternePrenom()+" (PP)";
					else 
						expediteur=expediteur+ " (PM)";
					destinataireExpediteur = "EXT";
				}
					
				}
//				if (expTypeUser != null && expTypeUser == 1) {
//					expediteur = expNom + " " + expPrenom + " (PP)";
//					destinataireExpediteur = "EXT";
//
//				} else {
//					expediteur = expNom + " (PM)";
//					
//					destinataireExpediteur = "EXT";
//
//				}
				expediteurReel=expediteur;
			}
			
			courrierInformations.setCourrierExpediteur(expediteur);

			// [JS] 2019-10-09 Format Référence [SRV]-[Annee]/[Mois]-[ID]
//			var = appMgr
//					.listVariablesByLibelle("code_courrier_unique_personnalisable");
//			codeUniqueCourrier = "";
//			codeUniqueCourrier = var.get(0).getVaraiablesValeur();
//			System.out.println("codeUniqueCourrier ========> :"
//					+ codeUniqueCourrier);
//			System.out
//					.println("transaction.getCourrierReferenceCorrespondant()  =====> :"
//							+ transaction.getCourrierReferenceCorrespondant());
//			System.out.println("transaction.getCourrierType() =====> :"
//					+ transaction.getCourrierType());
//
//			codeUniqueCourrier = codeUniqueCourrier.replace("[ID]",
//					transaction.getCourrierReferenceCorrespondant() + "");
//
//			codeUniqueCourrier = codeUniqueCourrier.replace("[Annee]",
//					new Date().getYear() + 1900 + "");
//			codeUniqueCourrier = codeUniqueCourrier.replace("[Mois]",
//					new Date().getMonth() + 1 + "");
//			// XTE : Si le courrier est ajouté par un non Boc, il aura le type à
//			// NULL--------------------------------------------------
//			if (transaction.getCourrierType() != null) {
//				codeUniqueCourrier = codeUniqueCourrier.replace("[Sens]",
//						transaction.getCourrierType());
//
//			} else {
//				codeUniqueCourrier = codeUniqueCourrier.replace("[Sens]", "I");
//			}
//
//			codeUniqueCourrier = codeUniqueCourrier.replace("[SRV]",
//					destinataireExpediteur);

//			System.out.println("########### ID ########## "
//					+ courrierInformations.getTransaction().getTransactionId());
//			if ((!vb.getPerson().isBoc() && courrierInformations
//					.getTransaction().getEtat().getEtatId() != 5)
//					|| (vb.getPerson().isBoc())) {
//				// System.out.println("c'est l'ajout de la ref de BO");
//
//				int idUtilisateurTransaction = courrierInformations
//						.getTransaction().getIdUtilisateur();
//				// System.out.println(">>>>>>>> idUtilisateurTransaction  "+idUtilisateurTransaction);
//
//				// Si le courrier est ajouté par autre que BO
//
//				boolean personeTrouve = false;
//
//				List<BOC> listeBOS = vb.getListTousBos();
//				for (BOC b : listeBOS) {
//					// System.out.println("DANS "+b.getShortNameBOC());
//					List<Person> listeMembres = b.getMembersBOC();
//					for (Person p : listeMembres) {
//						// System.out.println("MEMBRE ID "+p.getId());
//						if (p.getId() == idUtilisateurTransaction) {
//							codeUniqueCourrier = codeUniqueCourrier + " - "
//									+ b.getShortNameBOC();
//							personeTrouve = true;
//							break;
//						}
//					}
//				}
//				if (!personeTrouve) {
//					// récupérer le BO de la direction de cette utilisateur
//					Person person = new Person();
//					boolean findUser = false;
//					for (int i = 0; i < vb.getCopyLdapListAllUser().size(); i++) {
//						int j = 0;
//
//						do {
//							if (vb.getCopyLdapListUser().get(j).getId() == idUtilisateurTransaction) {
//								person = vb.getCopyLdapListUser().get(j);
//								findUser = true;
//							} else {
//								j++;
//							}
//						} while (!findUser
//								&& j < vb.getCopyLdapListUser().size());
//
//					}
//					if (findUser) {
//						// chercher le BO de l'unité du personne trouvé
//						Unit u = person.getAssociatedDirection();
//						// System.out.println(u);
//						if (u.getAssociatedBOC() != null) {
//							codeUniqueCourrier = codeUniqueCourrier + " - "
//									+ u.getAssociatedBOC().getShortNameBOC();
//						}
//
//					}
//
//				}
//
//			}

			
			boolean connecteIsBoc=vb.getPerson().isBoc();
			Integer courrierEtat = courrierInformations.getTransaction().getEtat().getEtatId();
			List<BOC> listeBOS = vb.getListTousBos();
			List<Person> listTousUtilisateur = vb.getCopyLdapListUser();
			
			String anneeCourrier = "";
			String moisCourier="";
			List<Courrier> listCourriers = appMgr.listCourrierByIdTransaction(transaction.getTransactionId());
			if(listCourriers!=null && listCourriers.size()>0){
				Courrier courrierConsulte = listCourriers.get(0);
				anneeCourrier=courrierConsulte.getCourrierOldDateOper().toString();
				moisCourier=courrierConsulte.getCourrierDateReceptionMois().toString();
			}
			
			int idUtilisateurTransaction = courrierInformations.getTransaction().getIdUtilisateur();
			
			
			codeUniqueCourrier=MethodesGenerique.generationCodeUniqueCourrier(vb.getPerson(),appMgr, transaction,anneeCourrier,moisCourier, destinataireExpediteur, connecteIsBoc, courrierEtat, listeBOS, listTousUtilisateur,idUtilisateurTransaction);
			
			courrierInformations.setCourrierDestinataireReelleDirection(codeUniqueCourrier);
			System.out.println("##### codeUniqueCourrier == " + codeUniqueCourrier);
			vb.setCodeUniqueCourrier(courrierInformations
					.getCourrierDestinataireReelleDirection());
			// remplissage de l'objet TransactionDest pour l'execution du BOC ou
			// la
			// validation des responsables

			List<TransactionDestination> listTransactionDestination = appMgr
					.getListTransactionDestinationByIdTransaction(courrierInformations
							.getTransactionID());// valeur ancien
			System.out.println("listTransactionDestination="
					+ listTransactionDestination.size()); // #firstTransaction.getTransactionId()#
			if (!listTransactionDestination.isEmpty()) {
				courrierInformations
						.setTransactionDestination(listTransactionDestination
								.get(listTransactionDestination.size() - 1));
			}
			if ((etatID.equals(2) || etatID.equals(10))
					&& !vb.getPerson().isBoc()
					&& !courrierInformations.getIdUtilisateur().equals(
							vb.getPerson().getId())) {
				courrierInformations.setCourrierAValider(1);

			}
			// pour activer l'execution des courriers qui suit un workflow pour
			// le
			// boct et juste la premiere execution
			if (vb.getPerson().isBoc()
					&& courrierInformations.getCourrierCircuit().equals(
							"workflow")) {
				if (etatID.equals(10)
						&& courrierInformations.getTransactionOrdre().equals(1)) {
					courrierInformations.setCourrierAValider(1);
					System.out.println("executer 3 controle");
				}
			}
			// Pour activer l'execution des courrier qui suit un workflow pour
			// le
			// boct et juste la premiere execution
			if (!courrierInformations.getIdUtilisateur().equals(
					vb.getPerson().getId())) {
				System.out.println("set Courrier 1");
				courrierInformations.setCourrierRecu(1);
			}

			// detinataire reel *
			StringBuilder destinataire = new StringBuilder("");
			StringBuilder destinataireCourrierReference = new StringBuilder("");

			String unitName;

			ListeDestinatairesModel destR;
			// KHA : destinataires reel dans le cas de modification
			
			
			
			/************************************************************/
			List<Transaction> allTransactions = appMgr
			.getTransactionByIdDossier(courrierInformations
					.getDossierID());


	courrierInformations.setCourrierAllTransactions(allTransactions);

	List<Transaction> allTransactionsByEtat = appMgr
			.getTransactionByIdDossierByEtat(courrierInformations
					.getDossierID());
	courrierInformations
			.setCourrierAllTransactionsByEtat(allTransactionsByEtat);

	Transaction firstTransaction = allTransactions.get(allTransactions
			.size() - 1);
			Expdest expdestExpediteurREEL = appMgr.getListExpDestByIdExpDest(
					firstTransaction.getExpdest().getIdExpDest()).get(0);
			courrierInformations.setExpDest(expdestExpediteurREEL);
		
			if(expdestExpediteurREEL.getTypeExpDest().equals("Interne-Unité")){
				Unit u=ldapOperation.getUnitById(expdestExpediteurREEL.getIdExpDestLdap());
				expediteurReel=u.getNameUnit();
			}
			else if(expdestExpediteurREEL.getTypeExpDest().equals("Interne-Person")){
				Person p=vb.getLdapOperation().getPersonalisedUserById(
						expdestExpediteurREEL.getIdExpDestLdap());
				expediteurReel=p.getPrenom()+ " "+p.getNom();
			}
			courrierInformations.setCourrierExpediteur(expediteurReel);
			if (courrierInformations.getDestReelList() != null) {

				destR = new ListeDestinatairesModel();
				List<String> destReelList = new ArrayList<String>(
						Arrays.asList(courrierInformations.getDestReelList()
								.split("\\|", -1)));
				System.out.println("destReelList.size()  :  "
						+ destReelList.size());
				// destReelElement.get(3);
				// Integer ldap = 0;
				/*
				 * if (destReelList.size()>0){
				 * 
				 * List<String> destReelElement1 = new ArrayList<String>(
				 * Arrays.asList(destReelList.get(0).split(";", -1)));
				 * if(!destReelElement1.get(3).equals("")) {
				 * 
				 * Integer ldap2 = Integer.valueOf(destReelElement1.get(3)); BOC
				 * b=ldapOperation.getBocByID(ldap2);
				 * System.out.println("Le Boc Intervenant "+b); String
				 * shortNameBOC = b.getShortNameBOC();
				 * codeUniqueCourrier=shortNameBOC+" - "+codeUniqueCourrier;
				 * courrierInformations
				 * .setCourrierDestinataireReelleDirection(codeUniqueCourrier);
				 * System
				 * .out.println("la nouvelle reference est "+codeUniqueCourrier
				 * ); }
				 */
				for (int i = 0; i < destReelList.size(); i++) {
					List<String> destReelElement = new ArrayList<String>(
							Arrays.asList(destReelList.get(i).split(";", -1)));
					System.out.println("destReelElement  " + destReelElement);
					Integer idExpDest = 0;

					if (!destReelElement.get(1).equals("")) {
						idExpDest = Integer.valueOf(destReelElement.get(1));

					}

					String type = destReelElement.get(2);
					Integer ldap = 0;
					if (!destReelElement.get(3).equals("")) {
						ldap = Integer.valueOf(destReelElement.get(3));
					}

					String nom = destReelElement.get(4);
					String prenom = destReelElement.get(5);
					Integer typeUser = 0;
					if (!destReelElement.get(6).equals("")) {
						typeUser = Integer.valueOf(destReelElement.get(6));
					}
					Integer idDestReelLdap = 0;
					if (!destReelElement.get(7).equals("")) {
						idDestReelLdap = Integer
								.valueOf(destReelElement.get(7));
					}
					String destReelType = destReelElement.get(8);

					if ((vb.isSonede()&& idDestReelLdap==0 && destReelType.equals("Interne-Unité"))||idDestReelLdap != 0) {
						System.out
								.println("AH 1 : courrier qui n'a pas des étaps de validation");
						if (courrierInformations.getCourrierCircuit().equals(
								"workflow")) {
							try {
								Unit unitDestinataireReel = vb.getHashMapUnit()
										.get(idDestReelLdap);
								unitName = unitDestinataireReel.getNameUnit();

								ItemSelected itemSelected = new ItemSelected();
								itemSelected.setItemSelectedId(idDestReelLdap);
								itemSelected.setItemSelectedName(unitName);
								itemSelected
										.setSelectedObject(unitDestinataireReel);
								listSelectedItem.add(itemSelected);

								Object object = (Object) unitDestinataireReel;
								listSelectedObject.add(object);
								listSelectetdUnit.add(unitDestinataireReel);

							} catch (Exception e) {
								unitName = "Inconnue";
								e.printStackTrace();
							}
							destinataire.append(" / ");

							destinataire.append(unitName);

							break;
						} else {
							System.out.println("destReelType  : "
									+ destReelType);
							if (destReelType.equals("Interne-Unité")) {

								System.out
										.println("### Type de destination Réel est Interne-Unité ###");
								Unit unit = vb.getHashMapUnit().get(
										idDestReelLdap);
								System.out.println("unité :"
										+ unit.getShortNameUnit());
								if (!destinataire.toString().contains(
										unit.getNameUnit())) {
									destinataire.append(" / ");
									System.out
											.println("Ajout Unité dans liste des destinataires");
									destinataire.append(unit.getNameUnit());

									// [JS] :Référence de Courrier pour chaque
									// destinataire
									destinataireCourrierReference.append(unit
											.getNameUnit());
									List<Transaction> listTransaction = appMgr
											.getReferenceCourrierByDestinataire(idDestReelLdap);
									destinataireCourrierReference
											.append(" [")
											.append(listTransaction
													.get(0)
													.getCourrierReferenceCorrespondant())
											.append("]");
									destinataireCourrierReference
											.append("<br/>");
									System.out
											.println("2019-06-2019 Destinataire + Référence : "
													+ destinataireCourrierReference
															.toString());

									destR = new ListeDestinatairesModel();
									System.out.println("idDestReelLdap :"
											+ idDestReelLdap);
									destR.setDestinataireId(idDestReelLdap);
									destR.setDestinataireName(unit
											.getNameUnit());
									System.out.println("AH AJOUT "
											+ unit.getNameUnit());
									System.out
											.println("============== affecter annotations unit 1 ===============");

									// List<Annotation> l =
									// appMgr.listeAnnotationParDestinataireEtTransaction(idDestReelLdap,courrierInformations.getDossierID());
									List<Annotation> l = new ArrayList<Annotation>();

									if (appMgr
											.listeAnnotationParDestinataireEtTransactionReell(
													idDestReelLdap,
													courrierInformations
															.getDossierID()) != null) {
										System.out
												.println(" KHA===> Destinataire reel enregistre dans table transactionDestinationRelle");
										l = appMgr
												.listeAnnotationParDestinataireEtTransactionReell(
														idDestReelLdap,
														courrierInformations
																.getDossierID());
									} else {

										l = appMgr
												.listeAnnotationParDestinataireEtTransactionExpDest(
														idDestReelLdap,
														courrierInformations
																.getDossierID());
										System.out
												.println(" KHA===> Destinataire reel enregistre dans table expdest");
									}
									if (l != null) {
										List<String> listAnnotationDest = new ArrayList<String>();
										for (Annotation a : l) {

											listAnnotationDest
													.add(String.valueOf(a
															.getAnnotationId()));
											System.out
													.println("listAnnotationDest = "
															+ listAnnotationDest);
											// []
											TransactionAnnotation ta = appMgr
													.getTransactionByIdAnnotation(
															a.getAnnotationId())
													.get(0);
											// tr=appMgr.getListTransactionByIdTransaction(ta.getId().getIdTransaction()).get(0);
										}
										destR.setListeAnnotations(listAnnotationDest);
										// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());
									}
									System.out
											.println("destR.ListeAnnotations = "
													+ destR.getListeAnnotations());

									System.out
											.println("============== Fin : affecter annotations  unit 1===============");

									destinatairesAvecAnnotations.add(destR);

									System.out
											.println("==============2===============");
									ItemSelected itemSelected = new ItemSelected();
									itemSelected
											.setItemSelectedId(idDestReelLdap);
									itemSelected.setItemSelectedName(unit
											.getNameUnit());
									listSelectedItem.add(itemSelected);

									Object object = (Object) unit;
									listSelectedObject.add(object);
									listSelectetdUnit.add(unit);
									System.out
											.println("============== ===============");

								}

							} else if (destReelType.equals("Interne-Person")) {

								
								Person person = vb.getHashMapAllUser().get(
										idDestReelLdap);
								System.out.println("Interne-Person");
								System.out.println(" : Person ### :"
										+ person.getNom());
								if (!destinataire.toString().contains(
										person.getCn())) {

									destinataire.append(" / ");
									System.out
											.println("Ajout Personne dans liste destinataires");
									System.out.println("Cn Person :"
											+ person.getCn());
									destinataire.append(person.getCn());

									// [JS] :Référence de Courrier pour chaque
									// destinataire
									destinataireCourrierReference.append(person
											.getCn());
									List<Transaction> listTransaction = appMgr
											.getReferenceCourrierByDestinataire(idDestReelLdap);
									if (listTransaction != null
											&& listTransaction.size() > 0)
										destinataireCourrierReference
												.append(" [")
												.append(listTransaction
														.get(0)
														.getCourrierReferenceCorrespondant())
												.append("]");
									destinataireCourrierReference
											.append("<br/>");
									System.out
											.println("2019-06-2019 Destinataire + Référence : "
													+ destinataireCourrierReference
															.toString());

									System.out
											.println("########## destR ##############");
									destR = new ListeDestinatairesModel();
									destR.setDestinataireId(idDestReelLdap);
									destR.setDestinataireName(person.getCn());

									System.out
											.println("============== affecter annotations Person ===============");

									// ajouté le 16-04-2019 : pour séparer les
									// destinataires enregistrés dans table
									// transactionDestinataireReel et dans table
									// expdest

									// List<Annotation> l =
									// appMgr.listeAnnotationParDestinataireEtTransaction(idDestReelLdap,courrierInformations.getDossierID());
									List<Annotation> l = new ArrayList<Annotation>();
									if (appMgr
											.listeAnnotationParDestinataireEtTransactionReell(
													idDestReelLdap,
													courrierInformations
															.getDossierID()) != null) {
										System.out
												.println(" KHA :Person Dans  listeAnnotationParDestinataireEtTransactionReell");
										l = appMgr
												.listeAnnotationParDestinataireEtTransactionReell(
														idDestReelLdap,
														courrierInformations
																.getDossierID());
									} else {
										System.out
												.println(" KHA :Person Dans  listeAnnotationParDestinataireEtTransactionExpDest");
										l = appMgr
												.listeAnnotationParDestinataireEtTransactionExpDest(
														idDestReelLdap,
														courrierInformations
																.getDossierID());

									}
									if (l != null) {
										List<String> listAnnotationDest = new ArrayList<String>();
										List<String> listRefCourrierDest = new ArrayList<String>();
										for (Annotation a : l) {

											listAnnotationDest
													.add(String.valueOf(a
															.getAnnotationId()));
											System.out
													.println("listAnnotationDest = "
															+ listAnnotationDest);
											// []
											TransactionAnnotation ta = appMgr
													.getTransactionByIdAnnotation(
															a.getAnnotationId())
													.get(0);
											Transaction tr = appMgr
													.getListTransactionByIdTransaction(
															ta.getId()
																	.getIdTransaction())
													.get(0);
										}
										destR.setListeAnnotations(listAnnotationDest);
										// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());

									}
//									System.out
//											.println("destR.ListeAnnotations = "
//													+ destR.getListeAnnotations());
//
//									System.out
//											.println("============== Fin : affecter annotations Person===============");
//									System.out.println("AH AJOUT "
//											+ person.getCn());
									destinatairesAvecAnnotations.add(destR);
									System.out
											.println("==============3===============");
									ItemSelected itemSelected = new ItemSelected();
									itemSelected
											.setItemSelectedId(idDestReelLdap);
									itemSelected.setItemSelectedName(person
											.getCn());
									listSelectedItem.add(itemSelected);
									Object object = (Object) person;
									listSelectedObject.add(object);
									listSelectedPerson.add(person);

									System.out
											.println("============== ===============");
								}

							} else if (destReelType.equals("Externe")) {

								if (vb.getPerson().isBoc() && !etatID.equals(6)) {
									courrierInformations.setCourrierAValider(1);

								}
								Expdestexterne destReelExterne = appMgr
										.getExpediteurById(idDestReelLdap).get(
												0);
								if (destReelExterne.getTypeutilisateur()
										.getTypeUtilisateurId().equals(1)) {
									String dest = destReelExterne
											.getExpDestExternePrenom()
											+ " "
											+ destReelExterne
													.getExpDestExterneNom();
									if (!destinataire.toString().contains(dest)) {
										destinataire.append(" / ");
										destinataire.append(dest);
										destR = new ListeDestinatairesModel();
										destR.setDestinataireId(idDestReelLdap);
										destR.setDestinataireName(dest);

										destinatairesAvecAnnotations.add(destR);
										System.out.println("3 - destR : "
												+ destR);
										ItemSelected itemSelected = new ItemSelected();
										itemSelected
												.setItemSelectedId(idDestReelLdap);
										itemSelected.setItemSelectedName(dest);
										listSelectedItem.add(itemSelected);

									}

								} else if (destReelExterne.getTypeutilisateur()
										.getTypeUtilisateurId().equals(2)) {
									String dest = destReelExterne
											.getExpDestExterneNom();
									if (!destinataire.toString().contains(dest)) {
										destinataire.append(" / ");
										destinataire.append(destReelExterne
												.getExpDestExterneNom());
										destR = new ListeDestinatairesModel();
										destR.setDestinataireId(idDestReelLdap);
										destR.setDestinataireName(dest);

										destinatairesAvecAnnotations.add(destR);
										System.out.println("4 - destR : "
												+ destR);
										ItemSelected itemSelected = new ItemSelected();
										itemSelected
												.setItemSelectedId(idDestReelLdap);
										itemSelected.setItemSelectedName(dest);
										listSelectedItem.add(itemSelected);

									}

								}
							} else {
								destinataire.append("--------");
							}
						}

					} else {
						// courrier qui n'a pas des étaps de validation
						System.out
								.println("AH : courrier qui n'a pas des étaps de validation");
						if (!listTransactionDestination.isEmpty()) {
							for (TransactionDestination transactionDestination : listTransactionDestination) {
								if (idExpDest.equals(transactionDestination.getId().getIdExpDest())) {
									
									if (type.equals("Interne-Person")) {
							
										courrierInformations.setCourrierRecu(1);
										courrierInformations
												.setTransactionDestination(transactionDestination);

										Person person = vb.getHashMapAllUser()
												.get(ldap);
										if (!destinataire.toString().contains(person.getCn())) {
											destinataire.append(" / ");
											destinataire.append(person.getCn());
											destR = new ListeDestinatairesModel();
											destR.setDestinataireId(ldap);
											destR.setDestinataireName(person
													.getCn());
											destinatairesAvecAnnotations
													.add(destR);
											System.out.println("5 - destR : "+ destR);
											// break;

											ItemSelected itemSelected = new ItemSelected();
											itemSelected
													.setItemSelectedId(ldap);
											itemSelected
													.setItemSelectedName(person
															.getCn());
											listSelectedItem.add(itemSelected);

											Object object = (Object) person;
											listSelectedObject.add(object);
											listSelectedPerson.add(person);
											
										}

									} else if (type.equals("Interne-Unité")) {
//										System.out
//												.println("is Responsable ===================> : "
//														+ vb.getPerson()
//																.isResponsable());
//										System.out
//												.println("vb.getPerson().getAssociatedDirection().getIdUnit()===================> : "
//														+ vb.getPerson()
//																.getAssociatedDirection()
//																.getIdUnit());
//										System.out
//												.println("ldap ===================> : "
//														+ ldap);
//										System.out
//												.println("transactionDestination ===================> : "
//														+ transactionDestination);

										/**
										 * [JS] Enlever le test qui est unitile
										 * (ldap.equals(vb.getPerson().
										 * getAssociatedDirection().getIdUnit())
										 * Ldap= id destinataire comparé avec
										 * l'id de l'unité personne conecté ce
										 * qui destinataire ne s'affiche pas au
										 * niveau liste courrier *
										 * **/

										// if (vb.getPerson().isResponsable()) {
										System.out.println("set Courrier 1");

										// courrierInformations.setCourrierRecu(1);
										courrierInformations
												.setTransactionDestination(transactionDestination);

										Unit unit = vb.getHashMapUnit().get(
												ldap);
										if (!destinataire.toString().contains(
												unit.getNameUnit())) {
											destinataire.append(" / ");
											destinataire.append(unit
													.getNameUnit());
											destR = new ListeDestinatairesModel();
											destR.setDestinataireId(ldap);
											destR.setDestinataireName(unit
													.getNameUnit());
											destinatairesAvecAnnotations
													.add(destR);
											System.out.println("6 - destR : "
													+ destR);
											ItemSelected itemSelected = new ItemSelected();
											itemSelected
													.setItemSelectedId(ldap);
											itemSelected
													.setItemSelectedName(unit
															.getNameUnit());
											listSelectedItem.add(itemSelected);

											Object object = (Object) unit;
											listSelectedObject.add(object);
											listSelectetdUnit.add(unit);

											// break;
											// }

										}

									} else if (type.equals("Interne-Boc")) {

										if (vb.getPerson().isBoc()) {
											courrierInformations
													.setCourrierRecu(1);
											courrierInformations
													.setTransactionDestination(transactionDestination);
										}
										if (!destinataire.toString()
												.contains(
														vb.getCentralBoc()
																.getNameBOC())) {
											destinataire.append(" / ");
											destinataire.append(vb
													.getCentralBoc()
													.getNameBOC());
											destR = new ListeDestinatairesModel();
											destR.setDestinataireId(ldap);
											destR.setDestinataireName(vb
													.getCentralBoc()
													.getNameBOC());
											destinatairesAvecAnnotations
													.add(destR);
											System.out.println("7 - destR : "
													+ destR);
											ItemSelected itemSelected = new ItemSelected();
											itemSelected
													.setItemSelectedId(ldap);
											itemSelected.setItemSelectedName(vb
													.getCentralBoc()
													.getNameBOC());
											listSelectedItem.add(itemSelected);

										}
									} else if (type.equals("Externe")) {

										if (typeUser.equals(1)) {
											if (!destinataire.toString()
													.contains(
															nom + " " + prenom
																	+ " (PP)")) {
												destinataire.append(" / ");
												destinataire.append(nom + " "
														+ prenom + " (PP)");
												destR = new ListeDestinatairesModel();
												destR.setDestinataireId(ldap);
												destR.setDestinataireName(nom
														+ " " + prenom
														+ " (PP)");
												destinatairesAvecAnnotations
														.add(destR);
												System.out
														.println("8 - destR : "
																+ destR);
												ItemSelected itemSelected = new ItemSelected();
												itemSelected
														.setItemSelectedId(ldap);
												itemSelected
														.setItemSelectedName(nom
																+ " " + prenom);
												listSelectedItem
														.add(itemSelected);

											}
										} else {
											if (!destinataire.toString()
													.contains(nom + " (PM)")) {
												destinataire.append(" / ");
												destinataire.append(nom
														+ " (PM)");
												destR = new ListeDestinatairesModel();
												destR.setDestinataireId(ldap);
												destR.setDestinataireName(nom
														+ " (PM)");
												destinatairesAvecAnnotations
														.add(destR);

												System.out
														.println("9 - destR : "
																+ destR);
												ItemSelected itemSelected = new ItemSelected();
												itemSelected
														.setItemSelectedId(ldap);
												itemSelected
														.setItemSelectedName(nom
																+ " " + prenom);
												listSelectedItem
														.add(itemSelected);

											}
										}
									}
								}
							}
						}
						if (courrierInformations.getCourrierRecu() == 1
								&& (etatID.equals(10) || etatID.equals(2))) {
							courrierInformations.setCourrierAValider(1);
							System.out.println("executer 5 controle");
						} else {
							// provisoire .. juste pour activer l'execution des
							// courrier arrivé pour le BOCT
							if (courrierAriverToDG.getVaraiablesValeur()
									.equals("Non")) {
								if (!vb.getPerson().isBoc()) {
									courrierInformations.setCourrierAValider(0);
									System.out
											.println("Non executer 1 controle");
								}
							}
							// provisoire .. juste pour activer l'execution des
							// courrier arrivé pour le BOCT
						}
						if (vb.getPerson().getAssociatedBOC() != null
								&& courrierInformations.getCourrierRecu() == 1
								&& etatID.equals(5) && etatID.equals(2)) {
							courrierInformations.setCourrierAValider(1);
						}
					}
					// KHA =========
					courrierInformations
							.setListSelectedItemDest(listSelectedItem);
					courrierInformations
							.setListSelectedObject(listSelectedObject);
					courrierInformations
							.setListSelectedPerson(listSelectedPerson);
					courrierInformations
							.setListSelectetdUnit(listSelectetdUnit);
					courrierInformations.setListSelectetdBoc(listSelectetdBoc);

				}
			}
			destinataire.delete(0, 3);
			System.out.println("destinataire  " + destinataire);
			courrierInformations.setCourrierDestinataireReelle(destinataire.toString());
			courrierInformations
					.setListeDestinatairesAvecAnnotations(destinatairesAvecAnnotations);
			
			
			
			//****************************************** 2019-12-09 ***********************************//
			
			/***
			 * test pour que bouton réception physique s'affiche 
			 */
			/***
			 * test pour que bouton réception physique s'affiche 
			 */
			Expdest cupExpDest;
			cupExpDest = new Expdest();
			
			cupExpDest = appMgr.getListExpDestByIdExpDest(transaction.getExpdest().getIdExpDest()).get(0);	
	
			CourrierDossier courrierDossier1 = appMgr.getCourrierDossierByIdCourrier(courrierInformations.getCourrierID()).get(0);
			int refdossier = courrierDossier1.getId().getDossierId();

			Transaction transactionn = new Transaction();
			List<Transaction> listTr = appMgr.getTransactionByIdDossier(refdossier);
			lastIndex=listTr.size();
			transactionn=listTr.get(lastIndex-1);
			int idEditeur=transactionn.getIdUtilisateur();
			System.out.println("Id Editeur ====>"+idEditeur);	
			
			List<ListeDestinatairesModel> list = destinatairesAvecAnnotations;
			List<Integer> listeIdDest = new ArrayList<Integer>();
			for (ListeDestinatairesModel d : list) {
				int idDest = 0;
				// KHA reception physique
				if (vb.getPerson().isResponsable() && !vb.getPerson().isBoc()) {
					if (vb.getPerson().getAssociatedDirection().getIdUnit() == d
							.getDestinataireId()) {
						idDest = vb.getPerson().getId();
					} else {
						System.out
								.println(" personne connectee n'est pas responsable");
						idDest = d.getDestinataireId();
					}
				}else{
				System.out.println("heloo");
					
				}
				listeIdDest.add(idDest);
				//
			}
			
			
			
			
			// récuperer liste des memebres de bureau d'ordre connecté
			List<Integer> listeIdMembresBOc=new ArrayList<Integer>();
			if(vb.getPerson().isBoc()){
			List<Person> listMembresBoc = vb.getPerson().getAssociatedBOC().getMembersBOC();
			for(Person membres:listMembresBoc){

				listeIdMembresBOc.add(membres.getId());
			}
			}
			//****************************
			
			
			
			Courrier courrier=appMgr.getCourrierByIdCourrier(courrierInformations.getCourrierID()).get(0);	
			if (courrier.getCourrierAvecDocumentPhysique() != null
					&& courrier.getCourrierAvecDocumentPhysique() == true ) {
				
				if (vb.getPerson().isResponsable()  && !vb.getPerson().isBoc()) {
					if (cupExpDest.getIdExpDestLdap() != null
							&& vb.getPerson().getAssociatedDirection()
									.getIdUnit() == cupExpDest
									.getIdExpDestLdap())
						System.out
								.println("si l'expediteur est le responsable du direction");
					//[JS-2019-11] l'expéditeur de courrier ne fait pas la réception physique
					etatReceptionPhysique = false;
					System.out.println("test ============>###1");
					


				}
				// is BOC et n'est pas l'editeur de courrier DONC FAIT LE
				// VALIDATION HEARCHQIUE
			
				
				
				else if ((vb.getPerson().isBoc() && !listeIdMembresBOc.contains(idEditeur))
						|| listeIdDest.contains(vb.getPerson().getId())
						|| vb.getPerson().getId() == cupExpDest
								.getIdExpDestLdap()) {
					// si le connectee est l'expediteur, le destinataire reel ou
					// le
					// BO
					etatReceptionPhysique = true;
					System.out.println("test ============>###2");

				}
				
			}
			
			
//			Courrier cr=appMgr.getCourrierByIdCourrier(courrierInformations.getCourrierID()).get(0);				
			
			if(courrier.getCourrierAvecDocumentPhysique() != null  
					&& courrier.getCourrierAvecDocumentPhysique() == true && appMgr.getListCourrierAvecReceptionPhysiqueByEtat(courrier.getIdCourrier(),transaction.getTransactionId()).size() !=0){
				System.out.println("test ============>###3");
				etatReceptionPhysique = false;
			
			}
			
			if(courrier.getCourrierAvecDocumentPhysique() != null
					&& courrier.getCourrierAvecDocumentPhysique() != true){
				System.out.println("KHA ===> reception physique : non ");
				etatReceptionPhysique = false;
				System.out.println("test ============>###4");

			}
		
			courrierInformations.setCourrierAvecDocumentPhysique(etatReceptionPhysique);
			
			
			
			

			// [JS] :
			
			if ((courrierInformations.getTransactionDateConsultation() == null && courrierInformations
					.getCourrierRecu() != 1)
					|| (courrierInformations.getTransactionDestination()
							.getTransactionDestDateConsultation() == null && courrierInformations
							.getCourrierRecu() == 1)) {
				System.out.println("Style CSS ");
				courrierInformations
						.setStyle("tableau_liste_courrier_non_consulte_gras");
			}
			
			
			
		}
	}

//	public void searchExpediteurDestinataire(
//			CourrierInformations courrierInformations) throws Exception {
//		System.out.println("AH : DANS searchExpediteurDestinataire ");
//		// []
//		Transaction transaction = appMgr.getListTransactionByIdTransaction(
//				courrierInformations.getTransactionID()).get(0);
//		System.out.println("transaction Refere Courrier : "
//				+ transaction.getCourrierReferenceCorrespondant());
//		courrierInformations.setTransaction(transaction);
//		courrierInformations.setTransmission(appMgr.getCourrierByIdCourrier(
//				courrierInformations.getCourrierID()).get(0).getTransmission());
//		System.out.println("2019-05-21 : "
//				+ courrierInformations.getTransaction()
//						.getCourrierReferenceCorrespondant());
//
//		// kha =========
//
//		courrierInformations.setCourrier(appMgr.getCourrierByIdCourrier(
//				courrierInformations.getCourrierID()).get(0));
//
//
//		// ======
//		System.out.println(" courrier id = "
//				+ courrierInformations.getCourrier().getNature().getNatureId());
//		// AH :
//		destinatairesAvecAnnotations = new ArrayList<ListeDestinatairesModel>();
//		listSelectedItem = new ArrayList<ItemSelected>();
//
//		List<Object> listSelectedObject = new ArrayList<Object>();
//		List<Person> listSelectedPerson = new ArrayList<Person>();
//		List<Pp> listSelectetdPP = new ArrayList<Pp>();
//		List<Pm> listSelectetdPM = new ArrayList<Pm>();
//		List<Unit> listSelectetdUnit = new ArrayList<Unit>();
//		List<BOC> listSelectetdBoc = new ArrayList<BOC>();
//
//		Integer etatID = courrierInformations.getEtatID();
//		System.out.println("get id transaction :"
//				+ courrierInformations.getTransactionID());
//		// get transaction destinataire by id transaction
//		List<TransactionDestination> listDestinataire = appMgr.getDestinationByIdTransaction(courrierInformations.getTransactionID());
//
//
//		if(listDestinataire != null && listDestinataire.size()>0){
//			TransactionDestination BocSuivant = listDestinataire.get(0);
//
//
//
//		System.out.println("ID BOC Suivant : "
//				+ BocSuivant.getTransactionDestIdIntervenant());
//		String expType;
//		Integer expTypeUser;
//		Integer expLdap;
//		String expNom;
//		String expPrenom;
//		if (courrierInformations.getCourrierOldNum() == null) {
//			expType = courrierInformations.getExpType();
//			expTypeUser = courrierInformations.getExpTypeUser();
//			expLdap = courrierInformations.getExpLdap();
//			expNom = courrierInformations.getExpNom();
//			expPrenom = courrierInformations.getExpPrenom();
//		} else {
//			expType = courrierInformations.getExpTypeOld();
//			expTypeUser = courrierInformations.getExpTypeUserOld();
//			expLdap = courrierInformations.getExpLdapOld();
//			expNom = courrierInformations.getExpNomOld();
//			expPrenom = courrierInformations.getExpPrenomOld();
//		}
//		// expediteur reel
//		String expediteur = "";
//		String destinataireExpediteur = "";
//		if (vb.getPerson().isBoc()) {
//			if (vb.getPerson().isResponsableBO()) {
//				System.out.println(" is responsable BO");
//			} else if (vb.getPerson().isAgentBO()) {
//				System.out.println(" is AGENT BO");
//			}
//		}
//		// KHA : variableExecution ===>Si la valeur de la variable est à Oui
//		// nous avons tous les types membre du Bureau d’Ordre
//		// a l’accès à l’exécution d’un Courrier.
//		// Si la valeur de la variable à Non, seul le responsable du Bureau
//		// d’ordre exécute le Courrier.
//		Variables variableExecution = appMgr.listVariablesByLibelle(
//				"execution_courrier_par_tous_types_membre_bo").get(0);
//
//		System.out.println("Type Expiditeur:" + expType);
//		if (expType.equals("Interne-Person")) {
//			System.out.println(" DANS  Interne-Person");
//			if (expLdap.equals(vb.getPerson().getId())) {
//				courrierInformations.setCourrierRecu(0);
//			}
//
//			// : Pas de Passage par DG
//			// System.out.println("courrierAriverToDG :"+courrierAriverToDG.getVaraiablesValeur());
//
//			// hidden par KHA// if
//			// (courrierAriverToDG.getVaraiablesValeur().equals("Non")) {
//			/***
//			 * test pour que boc execute un courrier
//			 */
//			System.out.println("courrierInformations.getTransactionOrdre :"
//					+ courrierInformations.getTransactionOrdre());
//			System.out.println("etat :" + etatID);
//
//			// KHA : Seulement le responsable BO peut exécuter
//			if (variableExecution.getVaraiablesValeur().equals("Non")) {
//				if (vb.getPerson().getAssociatedBOC() != null
//						&& courrierInformations.getTransactionOrdre() == null
//						&& etatID.equals(5)) {
//					System.out.println("2019-05-18 welcome ");
//					courrierInformations.setCourrierAValider(1);
//				} else
//
//					System.out
//							.println(" //[]: test pour que boc execute un courrier de destination interne-Person avec ordre de transaction != null");
//				// []: test pour que boc execute un courrier de destination
//				// interne-Person avec ordre de transaction != null
//				// if(vb.getPerson().getAssociatedBOC() != null &&
//				// courrierInformations.getTransactionOrdre() != null &&
//				// etatID.equals(5)){
//				// KHA : ajouté le test si le connectee est resp BO
//
//				if (vb.getPerson().getAssociatedBOC() != null
//						&& vb.getPerson().isResponsableBO()
//						&& courrierInformations.getTransactionOrdre() != null
//						&& etatID.equals(5)) {
//					System.out.println("-->courrier Interne à executer ");
//					System.out.println("hello I'm Here");
//					courrierInformations.setCourrierAValider(1);
//
//				}
//			}
//			// KHA : touls les Membres(Agent/Responsable) de BO peuvent exécuter
//			else {
//				// [] 2019-05-18 :ajouter condition where BOC connecté a le meme
//				// id que le boc qui sera executer courrier
//
//				System.out
//						.println("2019-05-18 : vb.getPerson().getAssociatedBOC() : "
//								+ vb.getPerson().getAssociatedBOC());
//				System.out.println("2019-05-18 : etatID.equals(5) : "
//						+ etatID.equals(5));
//				System.out
//						.println("2019-05-18 : BocSuivant.getTransactionDestIdIntervenant() : "
//								+ BocSuivant.getTransactionDestIdIntervenant());
//
//				if (vb.getPerson().getAssociatedBOC() != null
//						&& courrierInformations.getTransactionOrdre() != null
//						&& etatID.equals(5)
//						&& vb.getPerson().getAssociatedBOC().getIdBOC() == BocSuivant
//								.getTransactionDestIdIntervenant()) {
//					System.out.println("-->courrier Interne à executer ");
//					courrierInformations.setCourrierAValider(1);
//
//				}
//
//			}
//			// }
//			Person person = vb.getHashMapAllUser().get(expLdap);
//			System.out.println("person : " + person);
//			Person p = vb.getLdapOperation().getPersonalisedUserById(
//					person.getId());
//			System.out.println("person ================> " + p);
//			if (p.isResponsable() || p.isAgent() || p.isSecretary()) {
//				System.out.println("===========> "
//						+ p.getAssociatedDirection().getShortNameUnit());
//				destinataireExpediteur = p.getAssociatedDirection()
//						.getShortNameUnit();
//				System.out.println("directionPerson : "
//						+ destinataireExpediteur);
//
//			}
//			System.out.println("person.isboc 2: " + p.isBoc());
//			if (p.getAssociatedBOC() != null) {
//				System.out.println("person.isboc 3: " + p.isBoc());
//				destinataireExpediteur = "BOC";
//
//			}
//			expediteur = person.getCn();
//		} else if (expType.equals("Interne-Unité")) {
//			System.out.println(" DANS execute Interne-Unité");
//			if (vb.getPerson().isResponsable()
//					&& !vb.getPerson().isBoc()
//					&& expLdap.equals(vb.getPerson().getAssociatedDirection()
//							.getIdUnit())) {
//				courrierInformations.setCourrierRecu(0);
//			}
//			// hidden par KHA //if
//			// (courrierAriverToDG.getVaraiablesValeur().equals("Non")) {
//			/***
//			 * test pour que boc execute un courrier
//			 */
//
//			if (variableExecution.getVaraiablesValeur().equals("Non")) {
//
//				if (vb.getPerson().getAssociatedBOC() != null
//						&& courrierInformations.getTransactionOrdre() == null
//						&& etatID.equals(5)) {
//					courrierInformations.setCourrierAValider(1);
//
//				} else
//					System.out
//							.println(" //[]: test pour que boc execute un courrier de destination interne-unité avec ordre de transaction != null");
//
//				// ajouter partie connected person is responsable responsable
//				// ==========KHA
//				// []: test pour que boc execute un courrier de destination
//				// interne-unité avec ordre de transaction != null
//				// if(vb.getPerson().getAssociatedBOC() != null &&
//				// courrierInformations.getTransactionOrdre() != null &&
//				// etatID.equals(5)){
//				// KHA : ajouté le test si le connectee est resp BO
//				if (vb.getPerson().getAssociatedBOC() != null
//						&& vb.getPerson().isResponsableBO()
//						&& courrierInformations.getTransactionOrdre() != null
//						&& etatID.equals(5)) {
//					courrierInformations.setCourrierAValider(1);
//				}
//
//			} else if (vb.getPerson().getAssociatedBOC() != null
//					&& courrierInformations.getTransactionOrdre() != null
//					&& etatID.equals(5)) {
//				courrierInformations.setCourrierAValider(1);
//				if(courrierInformations.getTransmission().getTransmissionId() != null){
//					if(courrierInformations.getTransmission().getTransmissionId()==10){
//					//Enveloppe : Caché bouton execution 
//					System.out.println("### 8===> 1 ###");
//
//					courrierInformations.setCourrierAValider(0);
//					System.out.println("Affiche bouton Execute 1 : "+courrierInformations.getCourrierAValider());
//				}
//				}
//
//
//			}
//			// }
//			Unit unit = vb.getHashMapUnit().get(expLdap);
//			System.out.println("unit : " + unit);
//			destinataireExpediteur = unit.getShortNameUnit();
//			System.out.println("destinataireExpediteur : "
//					+ destinataireExpediteur);
//			expediteur = unit.getNameUnit();
//		} else if (expType.equals("Interne-Boc")) {
//			expediteur = vb.getCentralBoc().getNameBOC();
//			// if (courrierAriverToDG.getVaraiablesValeur().equals("Non")) {
//			/***
//			 * test pour que boc execute un courrier
//			 */
//
//			System.out.println(" DANS execute Interne-Boc");
//			if (variableExecution.getVaraiablesValeur().equals("Non")) {
//				if (vb.getPerson().getAssociatedBOC() != null
//						&& courrierInformations.getTransactionOrdre() == null
//						&& etatID.equals(5)) {
//					courrierInformations.setCourrierAValider(1);
//
//				}
//
//				else if (vb.getPerson().getAssociatedBOC() != null
//						&& vb.getPerson().isResponsableBO()
//						&& courrierInformations.getTransactionOrdre() != null
//						&& etatID.equals(5)) {
//					courrierInformations.setCourrierAValider(1);
//				}
//			} else if (vb.getPerson().getAssociatedBOC() != null
//					&& courrierInformations.getTransactionOrdre() != null
//					&& etatID.equals(5)) {
//				courrierInformations.setCourrierAValider(1);
//
//			}
//
//			// }
//		} else if (expType.equals("Externe")) {
//
//			System.out.println(" DANS execute Externe");
//			// C* pour que le bouton executer soit activé pour les courriers
//			// d'arrivé
//			// provisoire .. juste pour activer l'execution des courrier arrivé
//			// pour le BOCT
//			// if (courrierAriverToDG.getVaraiablesValeur().equals("Non")) {
//			// if (vb.getPerson().getAssociatedBOC() != null &&
//			// courrierInformations.getTransactionOrdre() == null &&
//			// etatID.equals(5)) {
//			// KHA
//			if (variableExecution.getVaraiablesValeur().equals("Non")) {
//				if (vb.getPerson().getAssociatedBOC() != null
//						&& courrierInformations.getTransactionOrdre() == null
//						&& etatID.equals(5)) {
//					courrierInformations.setCourrierAValider(1);
//				} else if (vb.getPerson().getAssociatedBOC() != null
//						&& vb.getPerson().isResponsableBO()
//						&& courrierInformations.getTransactionOrdre() != null
//						&& etatID.equals(5)) {
//					courrierInformations.setCourrierAValider(1);
//				}
//			} else if (vb.getPerson().getAssociatedBOC() != null
//					&& courrierInformations.getTransactionOrdre() != null
//					&& etatID.equals(5)) {
//				courrierInformations.setCourrierAValider(1);
//
//			}
//			// }
//			// provisoire .. juste pour activer l'execution des courrier arrivé
//			// pour le BOCT
//			// C* pour que le bouton executer soit activé pour les courriers
//			// d'arrivé
//			
//			List<Transaction> allTransactions = appMgr
//			.getTransactionByIdDossier(courrierInformations
//					.getDossierID());
//
//
//	courrierInformations.setCourrierAllTransactions(allTransactions);
//
//	Transaction firstTransaction = allTransactions.get(allTransactions
//			.size() - 1);
//			if(courrierInformations.getCourrierAllTransactions()!=null && courrierInformations.getCourrierAllTransactions().size()>0)
//			{ List<Transaction> tousTR = courrierInformations.getCourrierAllTransactions();
//			System.out.println(firstTransaction.getTransactionId());
//			if(firstTransaction.getExpdest().getTypeExpDest().equals("Externe")){
//				expTypeUser=firstTransaction.getExpdest().getExpdestexterne().getTypeutilisateur().getTypeUtilisateurId();
//				System.out.println("expTypeUser  "+expTypeUser);
//				expediteur=firstTransaction.getExpdest().getExpdestexterne().getExpDestExterneNom();
//				if(expTypeUser == 1)
//					expediteur=expediteur+ " "+firstTransaction.getExpdest().getExpdestexterne().getExpDestExternePrenom()+" (PP)";
//				else 
//					expediteur=expediteur+ " (PM)";
//				destinataireExpediteur = "EXT";
//			}
//				
//			}
////			if (expTypeUser == 1) {
////				expediteur = expNom + " " + expPrenom + " (PP)";
////				destinataireExpediteur = "EXT";
////			} else {
////				expediteur = expNom + " (PM)";
////				destinataireExpediteur = "EXT";
////			}
//		}
//		courrierInformations.setCourrierExpediteur(expediteur);
//		// courrierInformations
//		// .setCourrierDestinataireReelleDirection(destinataireExpediteur);
//
//		// [JS] 2019-10-09 Format Référence [SRV]-[Annee]/[Mois]-[ID]
//		var = appMgr.listVariablesByLibelle("code_courrier_unique_personnalisable");
//		codeUniqueCourrier = "";
//		codeUniqueCourrier = var.get(0).getVaraiablesValeur();
//		System.out.println("codeUniqueCourrier ========> :"
//				+ codeUniqueCourrier);
//		System.out
//				.println("transaction.getCourrierReferenceCorrespondant()  =====> :"
//						+ transaction.getCourrierReferenceCorrespondant());
//		System.out.println("transaction.getCourrierType() =====> :"
//				+ transaction.getCourrierType());
//
//		codeUniqueCourrier = codeUniqueCourrier.replace("[ID]",
//				transaction.getCourrierReferenceCorrespondant() + "");
//
//		codeUniqueCourrier = codeUniqueCourrier.replace("[Annee]",
//				new Date().getYear() + 1900 + "");
//		codeUniqueCourrier = codeUniqueCourrier.replace("[Mois]",
//				new Date().getMonth() + 1 + "");
//		// XTE : Si le courrier est ajouté par un non Boc, il aura le type à
//		// NULL--------------------------------------------------
//		if (transaction.getCourrierType() != null) {
//			codeUniqueCourrier = codeUniqueCourrier.replace("[Sens]",
//					transaction.getCourrierType());
//		} else {
//			codeUniqueCourrier = codeUniqueCourrier.replace("[Sens]", "I");
//		}
//		System.out.println("courrier type = "
//				+ vb.getCourrier().getCourrierType());
//		codeUniqueCourrier = codeUniqueCourrier.replace("[SRV]",
//				destinataireExpediteur);
//
//		
//		
//		System.out.println("########### ID ########## "+courrierInformations.getTransaction().getTransactionId());
//			if ((!vb.getPerson().isBoc()&& courrierInformations.getTransaction().getEtat().getEtatId() != 5)||(vb.getPerson().isBoc())) {
////				System.out.println("c'est l'ajout de la ref de BO");
//
//				int idUtilisateurTransaction = courrierInformations
//						.getTransaction().getIdUtilisateur();
////				System.out.println(">>>>>>>> idUtilisateurTransaction  "
////						+ idUtilisateurTransaction);
//
//				// Si le courrier est ajouté par autre que BO
//
//				boolean personeTrouve = false;
//
//				List<BOC> listeBOS = vb.getListTousBos();
//				for (BOC b : listeBOS) {
////					System.out.println("DANS " + b.getShortNameBOC());
//					List<Person> listeMembres = b.getMembersBOC();
//					for (Person p : listeMembres) {
////						System.out.println("MEMBRE ID " + p.getId());
//						if (p.getId() == idUtilisateurTransaction) {
//							codeUniqueCourrier = codeUniqueCourrier + " - "
//									+ b.getShortNameBOC();
//							personeTrouve = true;
//							break;
//						}
//					}
//				}
//				if (!personeTrouve) {
//					// récupérer le BO de la direction de cette utilisateur
//					Person person = new Person();
//					boolean findUser = false;
//					for (int i = 0; i < vb.getCopyLdapListAllUser().size(); i++) {
//						int j = 0;
//
//						do {
//							if (vb.getCopyLdapListUser().get(j).getId() == idUtilisateurTransaction) {
//								person = vb.getCopyLdapListUser().get(j);
//								findUser = true;
//							} else {
//								j++;
//							}
//						} while (!findUser
//								&& j < vb.getCopyLdapListUser().size());
//
//					}
//					if (findUser) {
//						// chercher le BO de l'unité du personne trouvé
//						Unit u = person.getAssociatedDirection();
//						System.out.println(u);
//						if (u.getAssociatedBOC() != null) {
//							codeUniqueCourrier = codeUniqueCourrier + " - "
//									+ u.getAssociatedBOC().getShortNameBOC();
//						}
//
//					}
//
//				}
//
//			}
//
//		courrierInformations
//				.setCourrierDestinataireReelleDirection(codeUniqueCourrier);
//
//		// remplissage de l'objet TransactionDest pour l'execution du BOC ou la
//		// validation des responsable
////		System.out.println("1111 : " + courrierInformations.getTransactionID());
//		List<TransactionDestination> listTransactionDestination = appMgr
//				.getListTransactionDestinationByIdTransaction(courrierInformations
//						.getTransactionID());// valeur ancien
//												// #firstTransaction.getTransactionId()#
//		System.out.println("listTransactionDestination : "
//				+ listTransactionDestination.size());
//		if (!listTransactionDestination.isEmpty()) {
//			courrierInformations
//					.setTransactionDestination(listTransactionDestination
//							.get(listTransactionDestination.size() - 1));
//		}
//		if ((etatID.equals(2) || etatID.equals(10))
//				&& !vb.getPerson().isBoc()
//				&& !courrierInformations.getIdUtilisateur().equals(
//						vb.getPerson().getId())) {
//
//			courrierInformations.setCourrierAValider(1);
//		}
//		// pour activer l'execution des courrier qui suit un workflow pour le
//		// boct et juste la premiere execution
//		if (vb.getPerson().isBoc()
//				&& courrierInformations.getCourrierCircuit().equals("workflow")) {
//			if (etatID.equals(10)
//					&& courrierInformations.getTransactionOrdre().equals(1)) {
//				courrierInformations.setCourrierAValider(1);
//			}
//		}
//		// pour activer l'execution des courrier qui suit un workflow pour le
//		// boct et juste la premiere execution
//		if (!courrierInformations.getIdUtilisateur().equals(
//				vb.getPerson().getId())) {
//			courrierInformations.setCourrierRecu(1);
//		}
//		// detinataire reel *
//		StringBuilder destinataire = new StringBuilder("");
//		StringBuilder destinataireCourrierReference = new StringBuilder("");
//
//		String unitName;
//		// AH
//		ListeDestinatairesModel destR;
//		// List<String> destinataireCourrierReference=new ArrayList<String>();
//
//		List<Transaction> allTransactions = appMgr
//				.getTransactionByIdDossier(courrierInformations.getDossierID());
//		courrierInformations.setCourrierAllTransactions(allTransactions);
//
//		List<Transaction> allTransactionsByEtat = appMgr
//				.getTransactionByIdDossierByEtat(courrierInformations
//						.getDossierID());
//		courrierInformations
//				.setCourrierAllTransactionsByEtat(allTransactionsByEtat);
//		System.out.println("size alla transaction by Etat : "
//				+ allTransactionsByEtat.size());
//		for (Transaction tr : allTransactionsByEtat) {
//			System.out.println("2019-06-10 id transaction : "
//					+ tr.getTransactionId());
//		}
//		// for(Transaction tr : allTransactions){
//		// //[]
//		// System.out.println("----------------------------------");
//		// System.out.println("2019-06-10 = "+tr.getTransactionId());
//		// System.out.println("2019-06-10 = "+tr.getCourrierReferenceCorrespondant());
//		// Person person =
//		// vb.getHashMapAllUser().get(tr.getTransactionDestinationReelle().getTransactionDestinationReelleIdDestinataire());
//		// destinataireCourrierReference.append(person.getCn());
//		// destinataireCourrierReference.append(" [").append(tr.getCourrierReferenceCorrespondant()).append("] ");
//		// System.out.println("----------------------------------");
//		// System.out.println("destinataireCourrierReference.toString() : "+destinataireCourrierReference.toString());
//		// courrierInformations.setReferenceDestinataireReelle(destinataireCourrierReference.toString());
//		// destinataireCourrierReference.append("<br/>");
//		//
//		// }
//		//
//		// System.out.println("2019-06-10 destinataireCourrierReference := "+destinataireCourrierReference);
//		// vb.setReferenceDestinataireReel(courrierInformations.getReferenceDestinataireReelle());
//
//		Transaction firstTransaction = allTransactions.get(allTransactions
//				.size() - 1);
//		System.out.println("2019-06-08 firstTransaction : "
//				+ firstTransaction.getTransactionId());
//		System.out.println("2019-06-08 id Expdest : "
//				+ firstTransaction.getExpdest().getIdExpDest());
//
//		Expdest expdestExpediteurREEL = appMgr.getListExpDestByIdExpDest(
//				firstTransaction.getExpdest().getIdExpDest()).get(0);
//		System.out.println("2019-08-06 expdestExpediteurREEL : "
//				+ expdestExpediteurREEL);
//		courrierInformations.setExpDest(expdestExpediteurREEL);
//		System.out.println("courrierInformations.getDestReelList() :"
//				+ courrierInformations.getDestReelList());
//		if (courrierInformations.getDestReelList() != null) {
//			// AH
//			destR = new ListeDestinatairesModel();
//			System.out.println("2019-06-08 : "
//					+ courrierInformations.getDestReelList());
//			List<String> destReelList = new ArrayList<String>(
//					Arrays.asList(courrierInformations.getDestReelList().split(
//							"\\|", -1)));
//			System.out.println(destReelList);
//			System.out.println(" destReelList size  = " + destReelList.size());
//			for (int i = 0; i < destReelList.size(); i++) {
//				List<String> destReelElement = new ArrayList<String>(
//						Arrays.asList(destReelList.get(i).split(";", -1)));
//				System.out.println("liste dest Reel Element :"
//						+ destReelElement.toString());
//				// Integer transactionId = 0;
//				// if(!destReelElement.get(0).equals("")) {
//				// transactionId = Integer.valueOf(destReelElement.get(0));
//				// }
//
//				Integer idExpDest = 0;
//				System.out.println("2019-06-10 : destReelElement.get(1) : "
//						+ destReelElement.get(1));
//				if (!destReelElement.get(1).equals("")) {
//					idExpDest = Integer.valueOf(destReelElement.get(1));
//					System.out.println("2019-06-10 idExpDest ;" + idExpDest);
//				}
//				String type = destReelElement.get(2);
//				System.out.println("2019-06-10 type ;" + type);
//
//				Integer ldap = 0;
//				System.out.println("2019-06-10 : destReelElement.get(3) : "
//						+ destReelElement.get(3));
//
//				if (!destReelElement.get(3).equals("")) {
//					ldap = Integer.valueOf(destReelElement.get(3));
//					System.out.println("2019-06-10 :  ldaaaaaaaaaaaap : "
//							+ ldap);
//				}
//				String nom = destReelElement.get(4);
//				String prenom = destReelElement.get(5);
//
//				System.out.println("2019-06-10 : nom : " + nom);
//				System.out.println("2019-06-10 : prenom : " + prenom);
//
//				Integer typeUser = 0;
//				System.out.println("2019-06-10 : destReelElement.get(6) : "
//						+ destReelElement.get(6));
//
//				if (!destReelElement.get(6).equals("")) {
//					typeUser = Integer.valueOf(destReelElement.get(6));
//					System.out.println("2019-06-10 : typeUser : " + typeUser);
//
//				}
//				Integer idDestReelLdap = 0;
//				System.out.println("2019-06-10 : destReelElement.get(7) :"
//						+ destReelElement.get(7));
//				if (!destReelElement.get(7).equals("")) {
//					idDestReelLdap = Integer.valueOf(destReelElement.get(7));
//					System.out.println("2019-06-10 idDestReelLdap :"
//							+ idDestReelLdap);
//				}
//				System.out.println("2019-06-10 : destReelElement.get(8) :"
//						+ destReelElement.get(8));
//
//				String destReelType = destReelElement.get(8);
//				System.out.println("### destReelType ###  :" + destReelType);
//				System.out.println("###  idDestReelLdap ###  :"
//						+ idDestReelLdap);
//
//				if (idDestReelLdap != 0) {
//					// : workflow
//					// ----------------------------------------------------------------------------------------------------
//
//					if (courrierInformations.getCourrierCircuit().equals(
//							"workflow")) {
//						try {
//							Unit unitDestinataireReel = vb.getHashMapUnit()
//									.get(idDestReelLdap);
//							unitName = unitDestinataireReel.getNameUnit();
//
//							System.out
//									.println("==============1===============");
//							ItemSelected itemSelected = new ItemSelected();
//							itemSelected.setItemSelectedId(idDestReelLdap);
//							itemSelected.setItemSelectedName(unitName);
//							itemSelected
//									.setSelectedObject(unitDestinataireReel);
//							listSelectedItem.add(itemSelected);
//							//
//							Object object = (Object) unitDestinataireReel;
//							listSelectedObject.add(object);
//							listSelectetdUnit.add(unitDestinataireReel);
//
//						} catch (Exception e) {
//							unitName = "Inconnue";
//							e.printStackTrace();
//						}
//						destinataire.append(" / ");
//						destinataire.append(unitName);
//
//						// [JS]:Reference Courrier de chaque Destinataire
//						destinataireCourrierReference.append(unitName);
//						List<Transaction> listTransaction = appMgr
//								.getReferenceCourrierByDestinataire(idDestReelLdap);
//						if (listTransaction != null
//								&& listTransaction.size() > 0)
//							destinataireCourrierReference
//									.append(" [")
//									.append(listTransaction
//											.get(0)
//											.getCourrierReferenceCorrespondant())
//									.append("]");
//						destinataireCourrierReference.append("<br/>");
//
//						break;
//					} else {
//						if (destReelType.equals("Interne-Unité")) {
//							System.out
//									.println("### Type de destination Réel est Interne-Unité ###");
//							Unit unit = vb.getHashMapUnit().get(idDestReelLdap);
//							System.out.println("unité :"
//									+ unit.getShortNameUnit());
//
//							if (!destinataire.toString().contains(
//									unit.getNameUnit())) {
//								destinataire.append(" / ");
//								System.out
//										.println("Ajout Unité dans liste des destinataires");
//								destinataire.append(unit.getNameUnit());
//
//								// [JS] :Référence de Courrier pour chaque
//								// destinataire
//								destinataireCourrierReference.append(unit
//										.getNameUnit());
//								List<Transaction> listTransaction = appMgr
//										.getReferenceCourrierByDestinataire(idDestReelLdap);
//								if (listTransaction != null
//										&& listTransaction.size() > 0)
//									destinataireCourrierReference
//											.append(" [")
//											.append(listTransaction
//													.get(0)
//													.getCourrierReferenceCorrespondant())
//											.append("]");
//								destinataireCourrierReference.append("<br/>");
//								System.out
//										.println("2019-06-2019 Destinataire + Référence : "
//												+ destinataireCourrierReference
//														.toString());
//
//								destR = new ListeDestinatairesModel();
//								System.out.println("idDestReelLdap :"
//										+ idDestReelLdap);
//								destR.setDestinataireId(idDestReelLdap);
//								destR.setDestinataireName(unit.getNameUnit());
//								System.out.println("AH AJOUT "
//										+ unit.getNameUnit());
//								System.out
//										.println("============== affecter annotations unit 1 ===============");
//
//								// List<Annotation> l =
//								// appMgr.listeAnnotationParDestinataireEtTransaction(idDestReelLdap,courrierInformations.getDossierID());
//								List<Annotation> l = new ArrayList<Annotation>();
//
//								if (appMgr
//										.listeAnnotationParDestinataireEtTransactionReell(
//												idDestReelLdap,
//												courrierInformations
//														.getDossierID()) != null) {
//									System.out
//											.println(" KHA===> Destinataire reel enregistre dans table transactionDestinationRelle");
//									l = appMgr
//											.listeAnnotationParDestinataireEtTransactionReell(
//													idDestReelLdap,
//													courrierInformations
//															.getDossierID());
//								} else {
//
//									l = appMgr
//											.listeAnnotationParDestinataireEtTransactionExpDest(
//													idDestReelLdap,
//													courrierInformations
//															.getDossierID());
//									System.out
//											.println(" KHA===> Destinataire reel enregistre dans table expdest");
//								}
//								if (l != null) {
//									List<String> listAnnotationDest = new ArrayList<String>();
//									for (Annotation a : l) {
//
//										listAnnotationDest.add(String.valueOf(a
//												.getAnnotationId()));
//										System.out
//												.println("listAnnotationDest = "
//														+ listAnnotationDest);
//										// []
//										ta = appMgr	.getTransactionByIdAnnotation(a.getAnnotationId()).get(0);
//										// tr=appMgr.getListTransactionByIdTransaction(ta.getId().getIdTransaction()).get(0);
//									}
//									destR.setListeAnnotations(listAnnotationDest);
//									// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());
//								}
//								System.out.println("destR.ListeAnnotations = "
//										+ destR.getListeAnnotations());
//
//								System.out
//										.println("============== Fin : affecter annotations  unit 1===============");
//
//								destinatairesAvecAnnotations.add(destR);
//
//								System.out
//										.println("==============2===============");
//								ItemSelected itemSelected = new ItemSelected();
//								itemSelected.setItemSelectedId(idDestReelLdap);
//								itemSelected.setItemSelectedName(unit
//										.getNameUnit());
//								listSelectedItem.add(itemSelected);
//
//								Object object = (Object) unit;
//								listSelectedObject.add(object);
//								listSelectetdUnit.add(unit);
//								System.out
//										.println("============== ===============");
//
//							}
//						} else if (destReelType.equals("Interne-Person")) {
//							System.out.println("2019-06-09 idDestReelLdap : "
//									+ idDestReelLdap);
//							Person person = vb.getHashMapAllUser().get(
//									idDestReelLdap);
//							System.out.println("Interne-Person");
//							System.out.println(" : Person ### :"
//									+ person.getNom());
//							if (!destinataire.toString().contains(
//									person.getCn())) {
//
//								destinataire.append(" / ");
//								System.out
//										.println("Ajout Personne dans liste destinataires");
//								System.out.println("Cn Person :"
//										+ person.getCn());
//								destinataire.append(person.getCn());
//
//								// [JS] :Référence de Courrier pour chaque
//								// destinataire
//								destinataireCourrierReference.append(person
//										.getCn());
//								List<Transaction> listTransaction = appMgr
//										.getReferenceCourrierByDestinataire(idDestReelLdap);
//								if (listTransaction != null
//										&& listTransaction.size() > 0)
//									destinataireCourrierReference
//											.append(" [")
//											.append(listTransaction
//													.get(0)
//													.getCourrierReferenceCorrespondant())
//											.append("]");
//								destinataireCourrierReference.append("<br/>");
//								System.out
//										.println("2019-06-2019 Destinataire + Référence : "
//												+ destinataireCourrierReference
//														.toString());
//
//								System.out
//										.println("########## destR ##############");
//								destR = new ListeDestinatairesModel();
//								destR.setDestinataireId(idDestReelLdap);
//								destR.setDestinataireName(person.getCn());
//
//								System.out
//										.println("============== affecter annotations Person ===============");
//
//								// ajouté le 16-04-2019 : pour séparer les
//								// destinataires enregistrés dans table
//								// transactionDestinataireReel et dans table
//								// expdest
//
//								// List<Annotation> l =
//								// appMgr.listeAnnotationParDestinataireEtTransaction(idDestReelLdap,courrierInformations.getDossierID());
//								List<Annotation> l = new ArrayList<Annotation>();
//								if (appMgr
//										.listeAnnotationParDestinataireEtTransactionReell(
//												idDestReelLdap,
//												courrierInformations
//														.getDossierID()) != null) {
//									System.out
//											.println(" KHA :Person Dans  listeAnnotationParDestinataireEtTransactionReell");
//									l = appMgr
//											.listeAnnotationParDestinataireEtTransactionReell(
//													idDestReelLdap,
//													courrierInformations
//															.getDossierID());
//								} else {
//									System.out
//											.println(" KHA :Person Dans  listeAnnotationParDestinataireEtTransactionExpDest");
//									l = appMgr
//											.listeAnnotationParDestinataireEtTransactionExpDest(
//													idDestReelLdap,
//													courrierInformations
//															.getDossierID());
//
//								}
//								if (l != null) {
//									List<String> listAnnotationDest = new ArrayList<String>();
//									List<String> listRefCourrierDest = new ArrayList<String>();
//									for (Annotation a : l) {
//
//										listAnnotationDest.add(String.valueOf(a
//												.getAnnotationId()));
//										System.out
//												.println("listAnnotationDest = "
//														+ listAnnotationDest);
//										// []
//										ta = appMgr
//												.getTransactionByIdAnnotation(
//														a.getAnnotationId())
//												.get(0);
//										tr = appMgr.getListTransactionByIdTransaction(ta.getId().getIdTransaction()).get(0);
//									}
//									destR.setListeAnnotations(listAnnotationDest);
//									// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());
//
//								}
//								System.out.println("destR.ListeAnnotations = "
//										+ destR.getListeAnnotations());
//
//								System.out
//										.println("============== Fin : affecter annotations Person===============");
//								System.out
//										.println("AH AJOUT " + person.getCn());
//								destinatairesAvecAnnotations.add(destR);
//								System.out
//										.println("==============3===============");
//								ItemSelected itemSelected = new ItemSelected();
//								itemSelected.setItemSelectedId(idDestReelLdap);
//								itemSelected
//										.setItemSelectedName(person.getCn());
//								listSelectedItem.add(itemSelected);
//								Object object = (Object) person;
//								listSelectedObject.add(object);
//								listSelectedPerson.add(person);
//
//								System.out
//										.println("============== ===============");
//							}
//						} else if (destReelType.equals("Externe")) {
//							System.out.println("### Externe");
//							/*
//							 * if (vb.getPerson().isBoc() && !etatID.equals(6))
//							 * { courrierInformations.setCourrierAValider(1);
//							 * 
//							 * }
//							 */
//
//							// KHA : executer externe si etat à 5
//
//							if (vb.getPerson().isBoc() && etatID.equals(5)) {
//								System.out
//										.println("KHA : avalider si vb.getPerson().isBoc() && etatID.equals(5)");
//
//								if (variableExecution.getVaraiablesValeur()
//										.equals("Non")) {
//									if (vb.getPerson().isResponsableBO()) {
//
//										courrierInformations
//												.setCourrierAValider(1);
//									}
//								} else {
//									System.out.println(" ");
//									courrierInformations.setCourrierAValider(1);
//								}
//							}
//							System.out.println("idDestReelLdap :"
//									+ idDestReelLdap);
//							Expdestexterne destReelExterne = appMgr
//									.getExpediteurById(idDestReelLdap).get(0);
//							if (destReelExterne.getTypeutilisateur()
//									.getTypeUtilisateurId().equals(1)) {
//								String dest = destReelExterne
//										.getExpDestExternePrenom()
//										+ " "
//										+ destReelExterne
//												.getExpDestExterneNom();
//								System.out.println("dest :" + dest);
//								if (!destinataire.toString().contains(dest)) {
//									destinataire.append(" / ");
//									destinataire.append(dest);
//
//									// [JS] :Référence de Courrier pour chaque
//									// destinataire
//									destinataireCourrierReference.append(dest);
//									List<Transaction> listTransaction = appMgr
//											.getReferenceCourrierByDestinataire(idDestReelLdap);
//									if (listTransaction != null
//											&& listTransaction.size() > 0)
//										destinataireCourrierReference
//												.append(" [")
//												.append(listTransaction
//														.get(0)
//														.getCourrierReferenceCorrespondant())
//												.append("]");
//									destinataireCourrierReference
//											.append("<br/>");
//									System.out
//											.println("2019-06-2019 Destinataire + Référence : "
//													+ destinataireCourrierReference
//															.toString());
//
//									destR = new ListeDestinatairesModel();
//									destR.setDestinataireId(idDestReelLdap);
//									destR.setDestinataireName(dest);
//									System.out
//											.println("type1 AH AJOUT " + dest);
//									System.out
//											.println("============== affecter annotations Externe ===============");
//									System.out.println("");
//									List<Annotation> l = appMgr
//											.listeAnnotationParDestinataireEtTransactionReell(
//													idDestReelLdap,
//													courrierInformations
//															.getDossierID());
//
//									if (l != null) {
//										List<String> listAnnotationDest = new ArrayList<String>();
//										for (Annotation a : l) {
//
//											listAnnotationDest
//													.add(String.valueOf(a
//															.getAnnotationId()));
//											System.out
//													.println("listAnnotationDest = "
//															+ listAnnotationDest);
//											// []
//											ta = appMgr
//													.getTransactionByIdAnnotation(
//															a.getAnnotationId())
//													.get(0);
//											tr = appMgr
//													.getListTransactionByIdTransaction(
//															ta.getId()
//																	.getIdTransaction())
//													.get(0);
//										}
//										destR.setListeAnnotations(listAnnotationDest);
//										// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());
//									}
//									System.out
//											.println("destR.ListeAnnotations = "
//													+ destR.getListeAnnotations());
//
//									System.out
//											.println("============== Fin : affecter annotations Externe===============");
//									destinatairesAvecAnnotations.add(destR);
//
//									System.out
//											.println("==============4===============");
//									ItemSelected itemSelected = new ItemSelected();
//									itemSelected
//											.setItemSelectedId(idDestReelLdap);
//									itemSelected.setItemSelectedName(dest);
//									listSelectedItem.add(itemSelected);
//
//									System.out
//											.println("============== ===============");
//								}
//							} else if (destReelExterne.getTypeutilisateur()
//									.getTypeUtilisateurId().equals(2)) {
//								String dest = destReelExterne
//										.getExpDestExterneNom();
//								if (!destinataire.toString().contains(dest)) {
//									destinataire.append(" / ");
//									destinataire.append(destReelExterne
//											.getExpDestExterneNom());
//
//									// [JS] :Référence de Courrier pour chaque
//									// destinataire
//									destinataireCourrierReference.append(dest);
//									System.out.println("Id Expdest Externe :"
//											+ destReelExterne
//													.getIdExpDestExterne());
//									List<Transaction> listTransaction = appMgr
//											.getReferenceCourrierByDestinataire(destReelExterne
//													.getIdExpDestExterne());
//									if (listTransaction != null
//											&& listTransaction.size() > 0)
//										destinataireCourrierReference
//												.append(" [")
//												.append(listTransaction
//														.get(0)
//														.getCourrierReferenceCorrespondant())
//												.append("]");
//									destinataireCourrierReference
//											.append("<br/>");
//									System.out
//											.println("2019-06-2019 Destinataire + Référence : "
//													+ destinataireCourrierReference
//															.toString());
//
//									// KHA ajouté 08-02-2019
//									destR = new ListeDestinatairesModel();
//									destR.setDestinataireId(idDestReelLdap);
//									destR.setDestinataireName(dest);
//									System.out
//											.println("type2 AH AJOUT " + dest);
//
//									System.out
//											.println("============== affecter annotations destReelExterne ===============");
//									System.out.println("idDestReelLdap= "
//											+ idDestReelLdap);
//									System.out.println("Dossier id ="
//											+ courrierInformations
//													.getDossierID());
//									List<Annotation> l = appMgr
//											.listeAnnotationParDestinataireEtTransactionReell(
//													idDestReelLdap,
//													courrierInformations
//															.getDossierID());
//									System.out.println("KHA===> l size =  "
//											+ l.size());
//									if (l != null) {
//										List<String> listAnnotationDest = new ArrayList<String>();
//										for (Annotation a : l) {
//
//											listAnnotationDest
//													.add(String.valueOf(a
//															.getAnnotationId()));
//											System.out
//													.println("listAnnotationDest = "
//															+ listAnnotationDest);
//											// []
//											ta = appMgr
//													.getTransactionByIdAnnotation(
//															a.getAnnotationId())
//													.get(0);
//											tr = appMgr
//													.getListTransactionByIdTransaction(
//															ta.getId()
//																	.getIdTransaction())
//													.get(0);
//										}
//										destR.setListeAnnotations(listAnnotationDest);
//										// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());
//									}
//									System.out
//											.println("destR.ListeAnnotations = "
//													+ destR.getListeAnnotations());
//
//									System.out
//											.println("============== Fin : affecter annotations destReelExterne===============");
//
//									destinatairesAvecAnnotations.add(destR);
//
//									System.out
//											.println("==============5===============");
//									ItemSelected itemSelected = new ItemSelected();
//									itemSelected
//											.setItemSelectedId(idDestReelLdap);
//									itemSelected.setItemSelectedName(dest);
//									listSelectedItem.add(itemSelected);
//									System.out
//											.println("============== ===============");
//								}
//							}
//						} else {
//							destinataire.append("--------");
//							destinataireCourrierReference.append("--------");
//						}
//					}
//				} else {
//					// courrier qui n'a pas des étaps de validation
//					System.out.println("-->size listTransactionDestination"
//							+ listTransactionDestination.size());
//					if (!listTransactionDestination.isEmpty()) {
//						for (TransactionDestination transactionDestination : listTransactionDestination) {
//							System.out.println("-->idExpDest" + idExpDest);
//							System.out
//									.println("-->TransactionDestination.getID.getIDExpdest :"
//											+ transactionDestination.getId()
//													.getIdExpDest());
//							// if
//							// (idExpDest.equals(transactionDestination.getId().getIdExpDest()))
//							// {
//							destinataire.append(" / ");
//							if (type.equals("Interne-Person")) {
//								System.out
//										.println("==> Courrier qui n'as pas des téapes de validation (Interne-Person)");
//								System.out.println("LDAP :" + ldap);
//								if (ldap.equals(vb.getPerson().getId())) {
//									courrierInformations.setCourrierRecu(1);
//								}
//								courrierInformations
//										.setTransactionDestination(transactionDestination);
//								// destinataire = new StringBuilder(" / ");
//
//								Person person = vb.getHashMapAllUser()
//										.get(ldap);
//								System.out.println(" person.getCn() = "
//										+ person.getCn());
//								if (!destinataire.toString().contains(
//										person.getCn())) {
//									destinataire.append(" / ");
//									destinataire.append(person.getCn());
//
//									// [JS] :Référence de Courrier pour chaque
//									// destinataire
//									destinataireCourrierReference.append(person
//											.getCn());
//									List<Transaction> listTransaction = appMgr
//											.getReferenceCourrierByDestinataire(ldap);
//									if (listTransaction != null
//											&& listTransaction.size() > 0)
//										destinataireCourrierReference
//												.append(" [")
//												.append(listTransaction
//														.get(0)
//														.getCourrierReferenceCorrespondant())
//												.append("]");
//									destinataireCourrierReference
//											.append("<br/>");
//									System.out
//											.println("2019-06-2019 Destinataire + Référence : "
//													+ destinataireCourrierReference
//															.toString());
//
//									// destinataire.append(transactionDestination.getId().get)
//									// KHA - ajouté 08-02-2019
//									destR = new ListeDestinatairesModel();
//									destR.setDestinataireId(ldap);
//									destR.setDestinataireName(person.getCn());
//									System.out
//											.println("============== affecter annotations Person 2===============");
//
//									// List<Annotation> l =
//									// appMgr.listeAnnotationParDestinataireEtTransaction(ldap,courrierInformations.getDossierID());
//									List<Annotation> l = new ArrayList<Annotation>();
//									if (appMgr
//											.listeAnnotationParDestinataireEtTransactionReell(
//													ldap, courrierInformations
//															.getDossierID()) != null) {
//										System.out
//												.println(" KHA :Person2 Dans  listeAnnotationParDestinataireEtTransactionReell");
//										l = appMgr
//												.listeAnnotationParDestinataireEtTransactionReell(
//														idDestReelLdap,
//														courrierInformations
//																.getDossierID());
//									} else {
//
//										l = appMgr
//												.listeAnnotationParDestinataireEtTransactionExpDest(
//														ldap,
//														courrierInformations
//																.getDossierID());
//										System.out
//												.println(" KHA :Person2 Dans  listeAnnotationParDestinataireEtTransactionExpDest");
//									}
//									if (l != null) {
//										List<String> listAnnotationDest = new ArrayList<String>();
//										for (Annotation a : l) {
//
//											listAnnotationDest
//													.add(String.valueOf(a
//															.getAnnotationId()));
//											System.out
//													.println("listAnnotationDest = "
//															+ listAnnotationDest);
//											// []
//											ta = appMgr
//													.getTransactionByIdAnnotation(
//															a.getAnnotationId())
//													.get(0);
//											tr = appMgr
//													.getListTransactionByIdTransaction(
//															ta.getId()
//																	.getIdTransaction())
//													.get(0);
//										}
//										destR.setListeAnnotations(listAnnotationDest);
//										// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());
//									}
//									System.out
//											.println("destR.ListeAnnotations = "
//													+ destR.getListeAnnotations());
//
//									System.out
//											.println("============== Fin : affecter annotations Person 2===============");
//
//									destinatairesAvecAnnotations.add(destR);
//
//									System.out
//											.println("==============6===============");
//									ItemSelected itemSelected = new ItemSelected();
//									itemSelected.setItemSelectedId(ldap);
//									itemSelected.setItemSelectedName(person
//											.getCn());
//									listSelectedItem.add(itemSelected);
//									Object object = (Object) person;
//									listSelectedObject.add(object);
//									listSelectedPerson.add(person);
//									System.out
//											.println("============== ===============");
//
//									// break;
//
//									/*
//									 * Person person =
//									 * vb.getHashMapAllUser().get(ldap); if
//									 * (!destinataire
//									 * .toString().contains(person.getCn())) {
//									 * destinataire.append(person.getCn());}
//									 */
//								}
//							} else if (type.equals("Interne-Unité")) {
//								if (vb.getPerson().isResponsable()
//										&& ldap.equals(vb.getPerson()
//												.getAssociatedDirection()
//												.getIdUnit())) {
//									courrierInformations.setCourrierRecu(1);
//								}
//								courrierInformations
//										.setTransactionDestination(transactionDestination);
//								// destinataire = new StringBuilder(" / ");
//								Unit unit = vb.getHashMapUnit().get(ldap);
//								if (!destinataire.toString().contains(
//										unit.getNameUnit())) {
//									destinataire.append(" / ");
//									destinataire.append(unit.getNameUnit());
//									// [JS] :Référence de Courrier pour chaque
//									// destinataire
//									destinataireCourrierReference.append(unit
//											.getNameUnit());
//									List<Transaction> listTransaction = appMgr
//											.getReferenceCourrierByDestinataire(ldap);
//									if (listTransaction != null
//											&& listTransaction.size() > 0)
//										destinataireCourrierReference
//												.append(" [")
//												.append(listTransaction
//														.get(0)
//														.getCourrierReferenceCorrespondant())
//												.append("]");
//									destinataireCourrierReference
//											.append("<br/>");
//									System.out
//											.println("2019-06-2019 Destinataire + Référence : "
//													+ destinataireCourrierReference
//															.toString());
//
//									// KHA - ajouté 08-02-2019
//									destR = new ListeDestinatairesModel();
//									destR.setDestinataireId(ldap);
//									destR.setDestinataireName(unit
//											.getNameUnit());
//									System.out
//											.println("============== affecter annotations  unit 2===============");
//
//									// List<Annotation> l =
//									// appMgr.listeAnnotationParDestinataireEtTransaction(ldap,courrierInformations.getDossierID());
//									List<Annotation> l = new ArrayList<Annotation>();
//									if (appMgr
//											.listeAnnotationParDestinataireEtTransactionReell(
//													ldap, courrierInformations
//															.getDossierID()) != null) {
//										System.out
//												.println(" KHA :unit2 Dans  listeAnnotationParDestinataireEtTransactionReell");
//
//										System.out
//												.println(" 2 KHA===> Destinataire reel enregistre dans table transactionDestinationRelle");
//										l = appMgr
//												.listeAnnotationParDestinataireEtTransactionReell(
//														idDestReelLdap,
//														courrierInformations
//																.getDossierID());
//									} else {
//										System.out
//												.println(" KHA :unit2 Dans  listeAnnotationParDestinataireEtTransactionExpDest");
//
//										l = appMgr
//												.listeAnnotationParDestinataireEtTransactionExpDest(
//														ldap,
//														courrierInformations
//																.getDossierID());
//										System.out
//												.println(" 2 KHA===> Destinataire reel enregistre dans table expdest");
//									}
//									if (l != null) {
//										List<String> listAnnotationDest = new ArrayList<String>();
//										for (Annotation a : l) {
//
//											listAnnotationDest
//													.add(String.valueOf(a
//															.getAnnotationId()));
//											System.out
//													.println("listAnnotationDest = "
//															+ listAnnotationDest);
//											// []
//											ta = appMgr
//													.getTransactionByIdAnnotation(
//															a.getAnnotationId())
//													.get(0);
//											tr = appMgr
//													.getListTransactionByIdTransaction(
//															ta.getId()
//																	.getIdTransaction())
//													.get(0);
//										}
//										destR.setListeAnnotations(listAnnotationDest);
//										// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());
//									}
//									System.out
//											.println("destR.ListeAnnotations = "
//													+ destR.getListeAnnotations());
//
//									System.out
//											.println("============== Fin : affecter annotations unit 2===============");
//
//									destinatairesAvecAnnotations.add(destR);
//
//									System.out
//											.println("==============7===============");
//									ItemSelected itemSelected = new ItemSelected();
//
//									itemSelected.setItemSelectedId(ldap);
//									itemSelected.setItemSelectedName(unit
//											.getNameUnit());
//									listSelectedItem.add(itemSelected);
//									Object object = (Object) unit;
//									listSelectedObject.add(object);
//									listSelectetdUnit.add(unit);
//									System.out
//											.println("============== ===============");
//
//									// break;
//								}
//								/*
//								 * Unit unit = vb.getHashMapUnit().get(ldap); if
//								 * (!destinataire.toString().contains(unit.
//								 * getNameUnit())) {
//								 * destinataire.append(unit.getNameUnit());}
//								 */
//
//							} else if (type.equals("Interne-Boc")) {
//								if (vb.getPerson().isBoc()) {
//									courrierInformations.setCourrierRecu(1);
//									courrierInformations
//											.setTransactionDestination(transactionDestination);
//								}
//								// KHA - modifié 08-02-2019
//								if (!destinataire.toString().contains(
//										vb.getCentralBoc().getNameBOC())) {
//									destinataire.append(" / ");
//									destinataire.append(vb.getCentralBoc()
//											.getNameBOC());
//									destR = new ListeDestinatairesModel();
//									destR.setDestinataireId(ldap);
//									destR.setDestinataireName(vb
//											.getCentralBoc().getNameBOC());
//									System.out
//											.println("============== affecter annotations  intern boc===============");
//
//									// List<Annotation> l =
//									// appMgr.listeAnnotationParDestinataireEtTransaction(ldap,courrierInformations.getDossierID());
//									List<Annotation> l = new ArrayList<Annotation>();
//									if (appMgr
//											.listeAnnotationParDestinataireEtTransactionReell(
//													ldap, courrierInformations
//															.getDossierID()) != null) {
//										System.out
//												.println(" 2 KHA===> Destinataire reel enregistre dans table transactionDestinationRelle");
//										l = appMgr
//												.listeAnnotationParDestinataireEtTransactionReell(
//														idDestReelLdap,
//														courrierInformations
//																.getDossierID());
//									} else {
//
//										l = appMgr
//												.listeAnnotationParDestinataireEtTransactionExpDest(
//														ldap,
//														courrierInformations
//																.getDossierID());
//										System.out
//												.println(" 2 KHA===> Destinataire reel enregistre dans table expdest");
//									}
//									if (l != null) {
//										List<String> listAnnotationDest = new ArrayList<String>();
//										for (Annotation a : l) {
//
//											listAnnotationDest
//													.add(String.valueOf(a
//															.getAnnotationId()));
//											System.out
//													.println("listAnnotationDest = "
//															+ listAnnotationDest);
//											// []
//											ta = appMgr
//													.getTransactionByIdAnnotation(
//															a.getAnnotationId())
//													.get(0);
//											tr = appMgr
//													.getListTransactionByIdTransaction(
//															ta.getId()
//																	.getIdTransaction())
//													.get(0);
//										}
//										destR.setListeAnnotations(listAnnotationDest);
//										// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());
//									}
//									System.out
//											.println("destR.ListeAnnotations = "
//													+ destR.getListeAnnotations());
//
//									System.out
//											.println("============== Fin : affecter annotations intern boc===============");
//
//									destinatairesAvecAnnotations.add(destR);
//
//									System.out
//											.println("==============8===============");
//									ItemSelected itemSelected = new ItemSelected();
//									itemSelected.setItemSelectedId(ldap);
//									itemSelected.setItemSelectedName(vb
//											.getCentralBoc().getNameBOC());
//									listSelectedItem.add(itemSelected);
//
//									System.out
//											.println("============== ===============");
//								}
//
//							} else if (type.equals("Externe")) {
//								if (typeUser.equals(1)) {
//									if (!destinataire.toString().contains(
//											nom + " " + prenom + " (PP)")) {
//										destinataire.append(" / ");
//										destinataire.append(nom + " " + prenom
//												+ " (PP)");
//										// KHA - ajouté 08-02-2019
//										destR = new ListeDestinatairesModel();
//										destR.setDestinataireId(ldap);
//										destR.setDestinataireName(nom + " "
//												+ prenom + " (PP)");
//										System.out
//												.println("============== affecter annotations  externe PP===============");
//
//										List<Annotation> l = appMgr
//												.listeAnnotationParDestinataireEtTransactionReell(
//														ldap,
//														courrierInformations
//																.getDossierID());
//
//										if (l != null) {
//											List<String> listAnnotationDest = new ArrayList<String>();
//											for (Annotation a : l) {
//
//												listAnnotationDest
//														.add(String.valueOf(a
//																.getAnnotationId()));
//												System.out
//														.println("listAnnotationDest = "
//																+ listAnnotationDest);
//												// []
//												ta = appMgr
//														.getTransactionByIdAnnotation(
//																a.getAnnotationId())
//														.get(0);
//												tr = appMgr
//														.getListTransactionByIdTransaction(
//																ta.getId()
//																		.getIdTransaction())
//														.get(0);
//											}
//											destR.setListeAnnotations(listAnnotationDest);
//											// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());
//										}
//										System.out
//												.println("destR.ListeAnnotations = "
//														+ destR.getListeAnnotations());
//
//										System.out
//												.println("============== Fin : affecter annotations externe PP===============");
//
//										destinatairesAvecAnnotations.add(destR);
//
//										System.out
//												.println("==============9===============");
//										ItemSelected itemSelected = new ItemSelected();
//										itemSelected.setItemSelectedId(ldap);
//										itemSelected.setItemSelectedName(nom
//												+ " " + prenom);
//										listSelectedItem.add(itemSelected);
//										Pp pp = (Pp) appMgr
//												.getPPByReferenceExpediteur(
//														ldap).get(0);
//										Object object = (Object) pp;
//										listSelectedObject.add(object);
//										listSelectetdPP.add(pp);
//
//										System.out
//												.println("============== ===============");
//
//									}
//								} else {
//									if (!destinataire.toString().contains(
//											nom + " (PM)")) {
//
//										destinataire.append(" / ");
//										destinataire.append(nom + " (PM)");
//										// KHA - ajouté 08-02-2019
//										destR = new ListeDestinatairesModel();
//										destR.setDestinataireId(ldap);
//										destR.setDestinataireName(nom + " (PM)");
//										System.out
//												.println("============== affecter annotations  externe PM===============");
//
//										List<Annotation> l = appMgr
//												.listeAnnotationParDestinataireEtTransactionReell(
//														ldap,
//														courrierInformations
//																.getDossierID());
//
//										if (l != null) {
//											List<String> listAnnotationDest = new ArrayList<String>();
//											for (Annotation a : l) {
//
//												listAnnotationDest
//														.add(String.valueOf(a
//																.getAnnotationId()));
//												System.out
//														.println("listAnnotationDest = "
//																+ listAnnotationDest);
//												// []
//												ta = appMgr
//														.getTransactionByIdAnnotation(
//																a.getAnnotationId())
//														.get(0);
//												tr = appMgr
//														.getListTransactionByIdTransaction(
//																ta.getId()
//																		.getIdTransaction())
//														.get(0);
//											}
//											destR.setListeAnnotations(listAnnotationDest);
//											// destR.setCourrierReferenceCorrespondant(tr.getCourrierReferenceCorrespondant());
//										}
//										System.out
//												.println("destR.ListeAnnotations = "
//														+ destR.getListeAnnotations());
//
//										System.out
//												.println("============== Fin : affecter annotations externe PM===============");
//
//										destinatairesAvecAnnotations.add(destR);
//										System.out
//												.println("==============10===============");
//										ItemSelected itemSelected = new ItemSelected();
//										itemSelected.setItemSelectedId(ldap);
//										itemSelected.setItemSelectedName(nom
//												+ " " + prenom);
//										listSelectedItem.add(itemSelected);
//										Pm pm = (Pm) appMgr
//												.getPMByReferenceExpediteur(
//														ldap).get(0);
//										Object object = (Object) pm;
//										listSelectedObject.add(object);
//										listSelectetdPM.add(pm);
//										System.out
//												.println("============== ===============");
//
//									}
//								}
//							}
//							// }
//						}
//					}
//					if (courrierInformations.getCourrierRecu() == 1
//							&& (etatID.equals(10) || etatID.equals(2))) {
//
//						courrierInformations.setCourrierAValider(1);
//					} else {
//						// provisoire .. juste pour activer l'execution des
//						// courrier arrivé pour le BOCT
//						if (courrierAriverToDG.getVaraiablesValeur().equals(
//								"Non")) {
//							if (!vb.getPerson().isBoc()) {
//								courrierInformations.setCourrierAValider(0);
//							}
//						}
//						// provisoire .. juste pour activer l'execution des
//						// courrier arrivé pour le BOCT
//					}
//					if (vb.getPerson().getAssociatedBOC() != null
//							&& courrierInformations.getCourrierRecu() == 1
//							&& etatID.equals(5) && etatID.equals(2)) {
//						courrierInformations.setCourrierAValider(1);
//					}
//				}
//				// KHA =========
//				courrierInformations.setListSelectedItemDest(listSelectedItem);
//				courrierInformations.setListSelectedObject(listSelectedObject);
//
//				courrierInformations.setListSelectedPerson(listSelectedPerson);
//				courrierInformations.setListSelectetdUnit(listSelectetdUnit);
//				courrierInformations.setListSelectetdBoc(listSelectetdBoc);
//				// ========
//				// ========
//			}
//
//		}
//
//		System.out.println("2019-06-08 Destinataiiiiire :"
//				+ destinataire.toString());
//
//		destinataire.delete(0, 3);
//		System.out.println("Destinataiiiiire :" + destinataire.toString());
//		courrierInformations.setCourrierDestinataireReelle(destinataire
//				.toString());
//		courrierInformations
//				.setReferenceDestinataireReelle(destinataireCourrierReference
//						.toString());
//		// AH
//		/*
//		 * System.out.println(
//		 * "==============DANS  COURRIER CONSULTATION-RECENT-BEAN=========== "
//		 * ); for(ListeDestinatairesModel d: destinatairesAvecAnnotations){
//		 * 
//		 * System.out.println("liste annotation=  "+d.getListeAnnotations().toString
//		 * ()); System.out.println(d.getDestinataireName()); }
//		 * System.out.println
//		 * ("================================================================== "
//		 * );
//		 */
//		courrierInformations
//				.setListeDestinatairesAvecAnnotations(destinatairesAvecAnnotations);
//		// [JS] : Ajoutée le 2019-08-06
//		System.out.println("======== Code JS=====================");
//		System.out.println("1 :"
//				+ courrierInformations.getTransactionDateConsultation());
//		System.out.println("2 :" + courrierInformations.getCourrierRecu());
//		System.out.println("3 : "
//				+ courrierInformations.getTransactionDestination());
//		if ((courrierInformations.getTransactionDateConsultation() == null && courrierInformations
//				.getCourrierRecu() != 1)
//				|| (courrierInformations.getTransactionDestination()
//						.getTransactionDestDateConsultation() == null && courrierInformations
//						.getCourrierRecu() == 1)) {
//			System.out.println("Style CSS ");
//			courrierInformations
//					.setStyle("tableau_liste_courrier_non_consulte_gras");
//			styleMessage = "tableau_liste_courrier_non_consulte_gras";
//		}
//		System.out
//				.println("listSelectedItem size : " + listSelectedItem.size());
//
//		/***
//		 * test pour que bouton réception physique s'affiche 
//		 */
//		Expdest cupExpDest;
//		cupExpDest = new Expdest();
//		
//		System.out.println("ID Expdest : ===> "+transaction.getExpdest().getIdExpDest());
//		System.out.println("ID Courrier : ===> "+courrierInformations.getCourrierID());
//		
//		cupExpDest = appMgr.getListExpDestByIdExpDest(transaction.getExpdest().getIdExpDest()).get(0);			
//		System.out.println("EXpdest : ======> " +cupExpDest);		
//		
//		
//		
//		
//		CourrierDossier courrierDossier1 = appMgr.getCourrierDossierByIdCourrier(courrierInformations.getCourrierID()).get(0);
//		int refdossier = courrierDossier1.getId().getDossierId();
//		
//		System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++'");
//		System.out.println("Transaction ID : "+transaction.getTransactionId());
//	    System.out.println("Editeur Courrier : "+transaction.getIdUtilisateur());
//	   System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++'");
//	     
//	     
//		Transaction transactionn = new Transaction();
//		List<Transaction> listTr = appMgr.getTransactionByIdDossier(refdossier);
//		lastIndex=listTr.size();
//		transactionn=listTr.get(lastIndex-1);
//		int idEditeur=transactionn.getIdUtilisateur();
//		System.out.println("Id Editeur ====>"+idEditeur);	
//		
//		List<ListeDestinatairesModel> list = destinatairesAvecAnnotations;
//		List<Integer> listeIdDest = new ArrayList<Integer>();
//		for (ListeDestinatairesModel d : list) {
//			int idDest = 0;
//			// KHA reception physique
//			if (vb.getPerson().isResponsable() && !vb.getPerson().isBoc()) {
//				System.out.println(" personne connectee responsable");
//				System.out.println("Vb.getPerson ===============> "+vb.getPerson());
//				System.out.println("vb.getPerson().getAssociatedDirection().getIdUnit()===>"+vb.getPerson().getAssociatedDirection().getIdUnit());
//				System.out.println("d.getDestinataireId()=================================> "+d.getDestinataireId());
//				if (vb.getPerson().getAssociatedDirection().getIdUnit() == d
//						.getDestinataireId()) {
//					idDest = vb.getPerson().getId();
//				} else {
//					System.out
//							.println(" personne connectee n'est pas responsable");
//					idDest = d.getDestinataireId();
//				}
//			}else{
//			System.out.println("heloo");
//				
//			}
//			listeIdDest.add(idDest);
//			//
//		}
//		
//		
//		
//		
//		// récuperer liste des memebres de bureau d'ordre connecté
//		List<Integer> listeIdMembresBOc=new ArrayList<Integer>();
//		if(vb.getPerson().isBoc()){
//		List<Person> listMembresBoc = vb.getPerson().getAssociatedBOC().getMembersBOC();
//		for(Person membres:listMembresBoc){
//
//			listeIdMembresBOc.add(membres.getId());
//		}
//		}
//		//****************************
//		
//		
//		for(Integer id:listeIdMembresBOc){
//			System.out.println("*****************************");
//			System.out.println("ID etdidteur ==> "+id);
//			System.out.println("idEditeur ==> "+idEditeur);
//			System.out.println("*****************************");
//
//		}
//		System.out.println("dddddddddddddddddddddddddd"+!listeIdMembresBOc.contains(idEditeur));
//		System.out.println(" listeIdDest.contains(vb.getPerson().getId()) "+ listeIdDest.contains(vb.getPerson().getId()));
//		System.out.println(" vb.getPerson().getId() "+ vb.getPerson().getId());
//		System.out.println(" cupExpDest.getIdExpDestLdap()"+ cupExpDest.getIdExpDestLdap());
//		Courrier courrier=appMgr.getCourrierByIdCourrier(courrierInformations.getCourrierID()).get(0);	
//		System.out.println("courrier.getCourrierAvecDocumentPhysique() "+courrier.getCourrierAvecDocumentPhysique());
//		if (courrier.getCourrierAvecDocumentPhysique() != null
//				&& courrier.getCourrierAvecDocumentPhysique() == true ) {
//			
//			if (vb.getPerson().isResponsable()  && !vb.getPerson().isBoc()) {
//				if (cupExpDest.getIdExpDestLdap() != null
//						&& vb.getPerson().getAssociatedDirection()
//								.getIdUnit() == cupExpDest
//								.getIdExpDestLdap())
//					System.out
//							.println("si l'expediteur est le responsable du direction");
//				//[JS-2019-11] l'expéditeur de courrier ne fait pas la réception physique
//				etatReceptionPhysique = false;
//				System.out.println("test ============>###1");
//				
//
//
//			}
//			// is BOC et n'est pas l'editeur de courrier DONC FAIT LE
//			// VALIDATION HEARCHQIUE
//		
//			
//			
//			else if ((vb.getPerson().isBoc() && !listeIdMembresBOc.contains(idEditeur))
//					|| listeIdDest.contains(vb.getPerson().getId())
//					|| vb.getPerson().getId() == cupExpDest
//							.getIdExpDestLdap()) {
//				// si le connectee est l'expediteur, le destinataire reel ou
//				// le
//				// BO
//				etatReceptionPhysique = true;
//				System.out.println("test ============>###2");
//
//			}
//			
//		}
//		
//		
////		Courrier cr=appMgr.getCourrierByIdCourrier(courrierInformations.getCourrierID()).get(0);				
//		
//		if(courrier.getCourrierAvecDocumentPhysique() != null  
//				&& courrier.getCourrierAvecDocumentPhysique() == true && appMgr.getListCourrierAvecReceptionPhysiqueByEtat(courrier.getIdCourrier(),transaction.getTransactionId()).size() !=0){
//			System.out.println("test ============>###3");
//			etatReceptionPhysique = false;
//		
//		}
//		
//		if(courrier.getCourrierAvecDocumentPhysique() != null
//				&& courrier.getCourrierAvecDocumentPhysique() != true){
//			System.out.println("KHA ===> reception physique : non ");
//			etatReceptionPhysique = false;
//			System.out.println("test ============>###4");
//
//		}
//	
//		courrierInformations.setCourrierAvecDocumentPhysique(etatReceptionPhysique);
//		
//		
//
//		System.out
//				.println("***********************FIN searchExpediteurDestinataire *********************");
//	}
//		
//	}
	
	//Get Row Courrier 
	
	
	
	public String getSelectedRowOffre() {
		
		System.out.println("&&&& getSelectedRowDM1 &&&&");
	
		CourrierInformations courrierInformations =new CourrierInformations();		
		courrierInformations = (CourrierInformations) listCourrierAoConsultationDM
				.getRowData();		
		vb.setDestinataireReel("");
		vb.setPremiereEntreeTransfert(1);
//		CourrierInformations selectedCourrier =new CourrierInformations();
//		selectedCourrier=(CourrierInformations) listCourrierAffecteDM
//		.getRowData();	
		Transaction transaction = new Transaction();
		
		vb.setDestinataireReel(courrierInformations
				.getCourrierDestinataireReelle());
		vb.setDestinataireReel(courrierInformations
				.getCourrierDestinataireReelle());
		vb.setCodeUniqueCourrier(courrierInformations
				.getCourrierDestinataireReelleDirection());

		if (courrierInformations.getCourrier() == null) {
			courrierInformations.setCourrier(appMgr
					.getCourrierByIdCourrier(
							courrierInformations.getCourrierID()).get(0));
		}
		if (courrierInformations.getTransaction() == null) {
			courrierInformations.setTransaction(appMgr
					.getListTransactionByIdTransaction(
							courrierInformations.getTransactionID())
					.get(0));
		}

		if (courrierInformations.getListSelectedObject() != null) {
			vb.setCopyListSelectedObject(courrierInformations
					.getListSelectedObject());
			vb.setCopyListSelectedObjectExp(courrierInformations
					.getListSelectedObject());
			System.out.println("CopyListSelectedObjectExp size = "
					+ vb.getCopyListSelectedObjectExp().size());
		}
		if (courrierInformations.getListSelectedPerson() != null) {
			vb.setCopyListSelectedPerson(courrierInformations
					.getListSelectedPerson());
			System.out.println("CopyListSelectedPerson size = "
					+ vb.getCopyListSelectedPerson().size());
		}
		if (courrierInformations.getListSelectetdUnit() != null) {
			vb.setCopyListSelectedUnit(courrierInformations
					.getListSelectetdUnit());
			System.out.println("CopyListSelectedUnit size = "
					+ vb.getCopyListSelectedUnit().size());
			System.out.println("vb.getCopyListSelectedUnit() "
					+ vb.getCopyListSelectedUnit());
		}
		if (courrierInformations.getListSelectetdBoc() != null) {
			vb.setCopyListSelectedBoc(courrierInformations
					.getListSelectetdBoc());
			System.out.println("CopyListSelectedBoc size = "
					+ vb.getCopyListSelectedBoc().size());
		}

		vb.setCourDossConsulterInformations(courrierInformations);
		// a commenté si on a renversé l'ancienne liste de courriers
		courrierInformations.setCourrier(appMgr.getCourrierByIdCourrier(
				courrierInformations.getCourrierID()).get(0));
		System.out.println("courier INFO ======> "+courrierInformations.getCourrierID());
		courrier = courrierInformations.getCourrier();
		System.out.println("courrier =============> "+courrier.getTransmission().getTransmissionLibelle());

		vb.setCourrier(courrier);
		transaction = appMgr.getListTransactionByIdTransaction(
				courrierInformations.getTransactionID()).get(0);
		List<TransactionDestination> listTransactionDestination = appMgr
				.getListTransactionDestinationByIdTransaction(courrierInformations
						.getTransactionID());// valeur ancien
												// #firstTransaction.getTransactionId()#

		if (!listTransactionDestination.isEmpty()) {
			vb.setTransactionDestination(listTransactionDestination
					.get(listTransactionDestination.size() - 1));// 2015-02-27
			courrierInformations
					.setTransactionDestination(listTransactionDestination
							.get(listTransactionDestination.size() - 1));

		}

		if (vb.getPerson().isBoc()) {
			
		vb.setCopyDestNom(courrierInformations
				.getCourrierDestinataireReelle());

		vb.setCopyExpNom(courrierInformations.getCourrierExpediteur());
		vb.setCopyCourrierCommentaire(courrierInformations
				.getCourrierCommentaire());
		vb.setCopyOtherDest(courrierInformations
				.getCourrierAutreDestinataires());
		vb.setTransaction(transaction);
		// ** expediteur reel
		vb.setCopyExpReelNom(courrierInformations.getCourrierExpediteur());
		// ** destinataire reel
		System.out.println("consulterInformations.getCourrierDestinataireReelle()"+courrierInformations.getCourrierDestinataireReelle());
		vb.setDestinataireReel(courrierInformations
				.getCourrierDestinataireReelle());

		vb.setReferenceDestinataireReel(courrierInformations
				.getReferenceDestinataireReelle());

		vb.setListeDestinataire(courrierInformations
				.getListeDestinatairesAvecAnnotations());

		// ** expediteur reel

		// Vider les listes des detinatires avant de transferer le courrier
		// pour ne pas garder le destinataire de l'ancien courrier
		vb.setCopyListSelectedUnit(new ArrayList<Unit>());
		vb.setCopyListSelectedPerson(new ArrayList<Person>());
		vb.setCopyListPP(new ArrayList<Pp>());
		vb.setCopyListPM(new ArrayList<Pm>());
		System.out.println("vb.getCopyListSelectedUnit()=====> "
				+ vb.getCopyListSelectedUnit());

		List<TransactionAnnotation> annotations = new ArrayList<TransactionAnnotation>();
		annotations = appMgr
				.getAnnotationByIdTransaction(courrierInformations
						.getTransactionID());

		int lastIndex;
		int refAnnotation;
		String result = "";
		for (TransactionAnnotation ta : annotations) {

			refAnnotation = ta.getId().getIdAnnotation();
			result += appMgr.getAnnotationByIdAnotation(refAnnotation)
					.get(0).getAnnotationLibelle()
					+ " / ";

		}
		if (!result.equals("")) {
			lastIndex = result.lastIndexOf("/");
			result = result.substring(0, lastIndex);
		}
		vb.setCopyAnnotationResult(result);
		}

		
		
		vb.setLinkedCourrier(courrierInformations.getCourrier());
		vb.setRedirect("redirectFromCLCToCDS");
		return "redirectFromCLCToCDS";
	}

	
	@SuppressWarnings("unchecked")
	public long getRecords() {

		return (listCourrierAoConsultationDM != null && listCourrierAoConsultationDM.getWrappedData() != null) ? ((List<CourrierInformations>) listCourrierAoConsultationDM
				.getWrappedData()).size() : 0;
	}
			
	/**
	 * Getter and Setter
	 */

	public AoConsultation getAoConsultation() {
		return aoConsultation;
	}

	public void setAoConsultation(AoConsultation aoConsultation) {
		this.aoConsultation = aoConsultation;
	}

	public VariableGlobale getVb() {
		return vb;
	}
	public void setVb(VariableGlobale vb) {
		this.vb = vb;
	}
	public long getNombreCourrier() {
		return nombreCourrier;
	}
	public void setNombreCourrier(int nombreCourrier) {
		this.nombreCourrier = nombreCourrier;
	}

	public DataModel getListCourrierAoConsultationDM() {
		return listCourrierAoConsultationDM;
	}
	public void setListCourrierAoConsultationDM(
			DataModel listCourrierAoConsultationDM) {
		this.listCourrierAoConsultationDM = listCourrierAoConsultationDM;
	}
	public CourrierInformations getCourrierInformations() {
		return courrierInformations;
	}
	public void setCourrierInformations(CourrierInformations courrierInformations) {
		this.courrierInformations = courrierInformations;
	}
	public List<CourrierInformations> getListeCourriers() {
		return listeCourriers;
	}
	public void setListeCourriers(List<CourrierInformations> listeCourriers) {
		this.listeCourriers = listeCourriers;
	}
	public void setRecords(long records) {
		this.records = records;
	}
	public String getDateHeur() {
		return dateHeur;
	}
	public void setDateHeur(String dateHeur) {
		this.dateHeur = dateHeur;
	}
	public String getDateHeurLimite() {
		return dateHeurLimite;
	}
	public void setDateHeurLimite(String dateHeurLimite) {
		this.dateHeurLimite = dateHeurLimite;
	}
	public String getDateHeurComm() {
		return dateHeurComm;
	}
	public void setDateHeurComm(String dateHeurComm) {
		this.dateHeurComm = dateHeurComm;
	}
	public String getDateHeurProl() {
		return dateHeurProl;
	}
	public void setDateHeurProl(String dateHeurProl) {
		this.dateHeurProl = dateHeurProl;
	}
	public void setIdBoc(int idBoc) {
		this.idBoc = idBoc;
	}
	public int getIdBoc() {
		return idBoc;
	}
	public void setUnitSup(Unit unitSup) {
		this.unitSup = unitSup;
	}
	public Unit getUnitSup() {
		return unitSup;
	}
	public void setCourrier(Courrier courrier) {
		this.courrier = courrier;
	}

	public Courrier getCourrier() {
		return courrier;
	}


}
