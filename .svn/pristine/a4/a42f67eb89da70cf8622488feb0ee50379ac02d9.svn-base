package xtensus.beans.common.GBO;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.TreeMap;

import javax.annotation.PostConstruct;

import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import javax.mail.MessagingException;
import javax.mail.internet.AddressException;
import javax.mail.internet.MimeUtility;
import javax.servlet.ServletContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import xtensus.MethdesGeneriques.MethodesGenerique;
import xtensus.aop.LogClass;
import xtensus.beans.common.ConnexionNotificationUtil;
import xtensus.beans.common.Ged;
import xtensus.beans.common.LanguageManagerBean;
import xtensus.beans.common.ListeDestinatairesModel;
import xtensus.beans.common.VariableGlobale;
import xtensus.beans.common.VariableGlobaleNotification;
import xtensus.beans.utils.ComposantDynamique;
import xtensus.beans.utils.CourrierConsulterInformations;
import xtensus.beans.utils.Informations;
import xtensus.beans.utils.UserBean;
import xtensus.beans.utils.ValidationVide;
import xtensus.entity.Annotation;
import xtensus.entity.Confidentialite;
import xtensus.entity.Courrier;
import xtensus.entity.CourrierDonneeSupplementaire;
import xtensus.entity.CourrierDossier;
import xtensus.entity.CourrierDossierId;
import xtensus.entity.Document;
import xtensus.entity.DocumentCategorie;

import xtensus.entity.AoConsultation;
import xtensus.entity.Cheque;
import xtensus.entity.DonneeSupplementaireNature;
import xtensus.entity.Dossier;
import xtensus.entity.Etat;
import xtensus.entity.Expdest;
import xtensus.entity.Expdestexterne;
import xtensus.entity.FaxMail;
import xtensus.entity.Mail;
import xtensus.entity.Nature;
import xtensus.entity.NatureCategorie;
import xtensus.entity.Pm;
import xtensus.entity.Pp;
import xtensus.entity.Transaction;
import xtensus.entity.TransactionAnnotation;
import xtensus.entity.TransactionAnnotationId;
import xtensus.entity.TransactionDestination;
import xtensus.entity.TransactionDestinationId;
import xtensus.entity.TransactionDestinationReelle;
import xtensus.entity.Transmission;
import xtensus.entity.Typedossier;
import xtensus.entity.Typetransaction;
import xtensus.entity.Unite;
import xtensus.entity.Urgence;
import xtensus.entity.Variables;
import xtensus.entity.Workflow;
import xtensus.faxmail.beans.AttachmentFileBean;
import xtensus.faxmail.beans.AttachmentHeadBean;
import xtensus.faxmail.utils.GedUtils;
import xtensus.faxmail.utils.MailConnection;
import xtensus.ldap.business.LdapOperation;
import xtensus.ldap.model.BOC;
import xtensus.ldap.model.ItemSelected;
import xtensus.ldap.model.Person;
import xtensus.ldap.model.Unit;
import xtensus.services.ApplicationManager;
import xtensus.workflow.beans.JBPMAccessProcessBean;
import xtensus.workflow.handlers.TraitementEtapeSuivant;

@Component()
@Scope("request")
public class CourrierAjoutBean {

	private ApplicationManager appMgr;
	private Courrier courrier;

	private Transaction transaction;
	private TransactionDestinationId id;
	private TransactionDestination trDest;
	private Expdestexterne expediteur;

	private Nature nature;
	private TransactionAnnotation courrierAnnotation;
	private TransactionAnnotationId courrierIdAnnotation;
	private String nom;
	private String courriercourrierObjet;
	private Transmission transmission;
	private boolean flagValise;
	private List<Annotation> listAnnotation;

	// ===== Début[JS]===============
	private String selectedItemCategorie;
	private String selectedItemNat;
	private String passageParBO;

	private List<NatureCategorie> listCategories;
	private List<Nature> listNatureParCateg;
	public List<SelectItem> selectItemsCat;
	public List<SelectItem> selectItemsBO;
	private List<SelectItem> selectItemsnature;
	private List<DonneeSupplementaireNature> listDonneeSupplementaireNatures;
	private List<DonneeSupplementaireNature> listDonneeSupplementaireTransmission;
	private ComposantDynamique composantDynamique;
	private List<ComposantDynamique> listComposantDynamique;
	private List<ComposantDynamique> listComposantDynamiqueTransmission;
	private List<ComposantDynamique> listComposantDynamiqueNature;
	private Properties msg;
	private List<Integer> listIdBocMembers;
	private boolean passe;
	private AoConsultation aoConsultation;
	private AoConsultation aoConsultationCourrier;
	private boolean showPanelAOC;
	private String numeroAoConsultation;
	private boolean erreurSaisieDate;
	private boolean afficheChoixExpediteurs;
	// ===== Fin [JS]===============
	private String selectedItemNature;
	private String selectedItemConf;
	private String selectedItemUg;
	private String selectedItemsTr;
	private String selectedItemsTrAncien;
	private String selectedItemNatureAncien;
	private boolean champDesabled;
	private boolean champDesabledReceptionPhysique;
	private List<String> selectedItemsAnnotation;
	private String associatedUnit;
	private String associatedLabel;
	private List<Nature> listNature;
	private List<Workflow> listWorkflow;
	private List<Transmission> listTransmission;
	private List<Confidentialite> listConfidentialite;
	private List<CourrierConsulterInformations> listCourriersRecusJour;
	private List<CourrierConsulterInformations> listCourriersEnvoyesJour;
	private List<Urgence> listUrgence;
	private Confidentialite confidentialite;
	private Urgence urgence;

	private String reponse;
	private String necessiteReponse;
	private boolean select = false;
	private boolean afficheEcheance = false;
	private boolean afficheChamps = false;
	public boolean ajoutValide;
	public boolean echeanceInvalide;
	public boolean dateCourrierInvalide;
	public boolean insertionInterrompus;
	public boolean sansDestinataire;
	public boolean sansExpediteur;
	public boolean statusPerson;

	private boolean etatCircuitWorkflow;
	private boolean etatCircuitWorkflowTextArea;
	private boolean requiredMessage;

	public Date date;
	public Date dateCourrier;
	private Date dateReelle;

	private String typeSender;
	private String typeExpediteur;
	private boolean selectParDefault;
	private boolean selectAutre;
	@Autowired
	private UserBean user;

	private Integer idBoc;
	private Unit unitSup;
	private Courrier cr;

	private Expdestexterne expdestExterne;

	@Autowired
	private LanguageManagerBean languageManager;

	@Autowired
	private MessageSource messageSource;

	@Autowired
	private VariableGlobale vb;

	// XTE : Les attributs "expNom1" et "expNom2" sont utilisés dans
	// "courrierChoixExpediteurDestinataire.xhtml"
	private String expNom1;
	private List<String> expNom2;
	private String typeCourrier;
	private boolean showFacetUser;
	private boolean showFacetBoc;

	private LdapOperation ldapOperation;

	private Informations info1, info2, info3, info4;
	private List<Informations> listInfo;

	@Autowired
	private VariableGlobaleNotification vbn;

	private String chooseAnnotationType;
	private String otherAnnotation;
	private String annotType;
	private String colonne;
	private Map<Integer, String> mapAnnotations;
	// private Integer[] indexNatureWorkflow;
	private TreeMap<Integer, Nature> mapIndexInListNatureWorkflow;
	List<Nature> listNatureWorkFlow;

	// XTE : Transformation - Mail/FAX
	private Mail mail;
	private GedUtils gedUtils;
	private FaxMail faxMail;
	private boolean transformationMailFax;

	// XTE : Popup sans GED
	private boolean showPopupSansGED;
	private boolean showPopupAvecGED;
	private boolean hidePopupSansGED;
	private boolean hidePopupAvecGED;

	private Person personDestinationReel;

	// SVN : KHA
	private String necessiteReceptionPhysique;
	private int idExpediteur;
	// AH
	private List<ListeDestinatairesModel> destinataires;
	private CourrierDonneeSupplementaire c;

	private boolean affichagePassageBO;
	// JS 2019-07-26
	private boolean affichageReceptionPhysique = true;
	private List<Expdestexterne> listExpdestExterne;
	private boolean affichageBlocAnnotation;
	private String message;
	private ListDataModel listCheques;
	private boolean showPanelCheque;
	private List<ChequeModel> listChequesTablo;
	private boolean afficheChampsSpecTansmission;
	@Autowired
	private LanguageManagerBean lm;
	
	private boolean ajoutMail;
	

	public boolean isAjoutMail() {
		return ajoutMail;
	}

	public void setAjoutMail(boolean ajoutMail) {
		this.ajoutMail = ajoutMail;
	}

	public List<ListeDestinatairesModel> getDestinataires() throws Exception {
		destinataires = vb.getListeDestinataire();

		if (destinataires != null)

			System.out.println("Get ----- nbr destinataires = "
					+ destinataires.size());

		return destinataires;
	}

	// KHA 12-04
	private boolean statusAgentBO;
	private boolean statusResponsableBO;
	// //////////KBS////////////////
	private boolean hideNumValise;
	private ArrayList<ChequeModel> listExpositionsTab2;
	private String heure1;
	private String heure2;
	private String heure3;
	//2020-06-08
//	private boolean sansAoConsultation;
	private String ccc = "c";
	// ////////////////////////////
	public void setDestinataires(List<ListeDestinatairesModel> destinataires) {
		this.destinataires = destinataires;
	}

	public CourrierAjoutBean() {

	}

	@Autowired
	public CourrierAjoutBean(
			@Qualifier("applicationManager") ApplicationManager appMgr) {
		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------
		// Fonction : CourrierAjoutBean
		// Date :
		// Auteur :
		// Description : Cette fonction représente le constructeur de la classe
		//
		//
		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------

		this.appMgr = appMgr;
		transaction = new Transaction();
		expediteur = new Expdestexterne();
		expdestExterne = new Expdestexterne();

		setListAnnotation(new ArrayList<Annotation>());
		listNature = new ArrayList<Nature>();
		listWorkflow = new ArrayList<Workflow>();
		listTransmission = new ArrayList<Transmission>();
		listConfidentialite = new ArrayList<Confidentialite>();
		listUrgence = new ArrayList<Urgence>();
		listCourriersRecusJour = new ArrayList<CourrierConsulterInformations>();
		listCourriersEnvoyesJour = new ArrayList<CourrierConsulterInformations>();
		date = new Date();
		dateCourrier = new Date();
		dateReelle = new Date();
		typeSender = "MonUnite";

		courrierAnnotation = new TransactionAnnotation();
		courrierIdAnnotation = new TransactionAnnotationId();
		nature = new Nature();
		confidentialite = new Confidentialite();
		urgence = new Urgence();
		transmission = new Transmission();
		trDest = new TransactionDestination();
		id = new TransactionDestinationId();

		expNom2 = new ArrayList<String>();
		listInfo = new ArrayList<Informations>();
		info1 = new Informations();
		info2 = new Informations();
		info3 = new Informations();
		chooseAnnotationType = "tous";
		ldapOperation = new LdapOperation();
		mapAnnotations = new HashMap<Integer, String>();
		mapIndexInListNatureWorkflow = new TreeMap<Integer, Nature>();

		mail = new Mail();
		gedUtils = new GedUtils();
		faxMail = new FaxMail();
		destinataires = new ArrayList<ListeDestinatairesModel>();
		// [JS]
		listCategories = new ArrayList<NatureCategorie>();
		listNatureParCateg = new ArrayList<Nature>();
		selectItemsnature = new ArrayList<SelectItem>();
		selectItemsCat = new ArrayList<SelectItem>();
		selectItemsBO = new ArrayList<SelectItem>();
		listComposantDynamique = new ArrayList<ComposantDynamique>();
		listComposantDynamiqueTransmission = new ArrayList<ComposantDynamique>();
		listDonneeSupplementaireNatures = new ArrayList<DonneeSupplementaireNature>();
		listDonneeSupplementaireTransmission = new ArrayList<DonneeSupplementaireNature>();
		c = new CourrierDonneeSupplementaire();
		listAnno = new ListeDestinatairesModel();
		personDestinationReel = new Person();
		listExpdestExterne = new ArrayList<Expdestexterne>();
		listCheques = new ListDataModel();
		listChequesTablo = new ArrayList<ChequeModel>();
	}

	@SuppressWarnings("unchecked")
	@PostConstruct
	public void Initialize() {
		System.out.println("###### Dans Initialize()");
		// [JS] 2019-07-26
		vb.getCourrier();
		vb.setNotAdd(false);
		vb.setNotAddCourrier(false);
		necessiteReceptionPhysique = "Non";
		necessiteReponse = "Non";
		passageParBO = "Non";
		afficheChampsSpecTansmission = false;
		
		destinataires = new ArrayList<ListeDestinatairesModel>();
		destinataires = vb.getListeDestinataire();
		
		Unit unitExpediteur = vb.getPerson().getAssociatedDirection();
		if (destinataires != null && unitExpediteur != null
				&& unitExpediteur.getIdUnit().intValue() == 0)
			for (ListeDestinatairesModel listDest : destinataires) {
				System.out.println(listDest.getDestinataireType());
				if (listDest.getDestinataireType() != null) {
					if (listDest.getDestinataireType().equals("Unit")) {
						if (!vb.getPerson().isBoc()) {
							Unit uni = ldapOperation.getUnitById(listDest
									.getDestinataireId());

							if (uni.getIdUnit() == 0
									|| uni.getIdUnit().intValue() == unitExpediteur
											.getIdUnit().intValue())
								listDest.setAffichageAnnotation(false);
							else {
								boolean affichage = annotaionPermise(
										unitExpediteur, uni);
								listDest.setAffichageAnnotation(affichage);
							}
						}
					}
				}
				// SI Unité vérifier si
			}
//		try {
//			hideNumValise = false;
//			listExpdestExterne = appMgr.getList(Expdestexterne.class);
//			if (destinataires != null && destinataires.size() > 0) {
//				System.out.println("Destinataire name "
//						+ destinataires.get(0).getDestinataireName());
//				System.out.println("externe name "
//						+ listExpdestExterne.get(0).getExpDestExterneNom());
//				System.out.println("boc " + vb.getPerson().isBoc());
//
//				if (destinataires
//						.get(0)
//						.getDestinataireName()
//						.equals(listExpdestExterne.get(0)
//								.getExpDestExterneNom())
//						&& vb.getPerson().isBoc()) {
//					affichageReceptionPhysique = false;
//					System.out
//							.println("DESTINATAIRE EXTERNE && CONNECTE IS STRUCTURE");
//				} else {
//					affichageReceptionPhysique = true;
//					System.out.println("DESTINATAIRE INTERNE ");
//
//				}
//			}
//		} catch (Exception e2) {
//			e2.printStackTrace();
//		}
		// FIN 2019-07-26

		// Fonction : charger les champs selon les
		// natures--------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------
		// Load fichier Properties
		if (!vb.getPerson().isBoc()) {
			System.out.println("compte connecté non BOC");
			// l'affichage du bloc annotation selon le destinataire
			affichagePassageBO = true;
			affichageBlocAnnotation = true;	
			passageParBO = "Non";
			//Destinataire PP ou PM => Masquer Affichage Panel Passage Par BO 
//				System.out.println("!vb.getCopyListPM().isEmpty() " +!vb.getCopyListPM().isEmpty());
//				System.out.println("!vb.getCopyListPP().isEmpty() " +!vb.getCopyListPP().isEmpty());
				if(!vb.getCopyListPM().isEmpty() || !vb.getCopyListPP().isEmpty()){
					System.out.println("affichagePassageBO=false");
					affichagePassageBO=true;
//					champDesabled=true;
					
			}
//				System.out.println("3===>"+champDesabled);
		} else {
			// ne pas afficher le bloc des annotaion
			affichageBlocAnnotation = false;
			affichagePassageBO = false;
			passageParBO = "Oui";
			
//			System.out.println("boc==> !vb.getCopyListPM().isEmpty() " +!vb.getCopyListPM().isEmpty());
//			System.out.println("boc==> !vb.getCopyListPP().isEmpty() " +!vb.getCopyListPP().isEmpty());
			if(!vb.getCopyListPM().isEmpty() || !vb.getCopyListPP().isEmpty()){
//				System.out.println("affichagePassageBO=false");
			     affichageReceptionPhysique=false;
		}
			
		}

//		System.out.println("Passage par bO ======> "+passageParBO);
		ExternalContext jsfContext = FacesContext.getCurrentInstance()
				.getExternalContext();
		ServletContext servletContext = (ServletContext) jsfContext
				.getContext();
//		System.out.println("Contenu de variable local :" + vb.getLocalFr());
		String webContentRoot = servletContext.getRealPath("/");
		String pathConfigFile = webContentRoot + File.separator + "WEB-INF"
				+ File.separator + "classes" + File.separator + "messages_"
				+ vb.getLocalFr() + ".properties";
		msg = new Properties();
		System.out.println("Path Fichier :" + pathConfigFile);
		try {
			msg.load(new FileInputStream(pathConfigFile));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		// --------------------------Début
		// JS-------------------------------------------------------------------------------------
		try {
			listCategories = appMgr.getList(NatureCategorie.class);
			if(vb.getSelectedItemCategorie() != null && !vb.getSelectedItemCategorie().equals("")){
				selectedItemCategorie=vb.getSelectedItemCategorie();
					listNatureParCateg = appMgr.listNaturesByCategorie(Integer
							.valueOf(selectedItemCategorie));
			
				getSelectItemsnature();
			}
			
			
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		// -------------------------Fin
		// JS--------------------------------------------------------------------------------------

		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------
		// Fonction : Initialize
		// Date :
		// Auteur :
		// Description : Cette fonction permet d'éffectuer tous les
		// initialisations que nous avons besoin après l'instanciation d'un
		// objet
		//
		//
		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------

		// vb.getListeDestinataire();
		// destinataires = vb.getListeDestinataire();

		// XTE : Le cas d'une transformation
		// Mail/Fax------------------------------------------------------------------------------------------
		if (vb.getRedirect().equals("FromMail")
				|| vb.getRedirect().equals("FromFax")
				|| vb.getRedirect()
						.equals("rediretFromCTMFDestArrToListSender")) {
			transformationMailFax = true;
			etatCircuitWorkflow = false;
			etatCircuitWorkflowTextArea = true;
			try {
				if (!vb.getStateSession().equals("")) {
					vb.setRedirect(vb.getStateSession());
				}
				//chooseAnnotationType = "tous";
				if (vb.getPerson().getAssociatedDirection() != null) {
					associatedUnit = vb.getPerson().getAssociatedDirection()
							.getNameUnit();
					setAssociatedLabel("Au nom de mon Unité");
				} else {
					associatedUnit = vb.getPerson().getAssociatedBOC()
							.getNameBOC();
					setAssociatedLabel("Au nom de mon BO");
				}
				setShowFacetUser(true);
				setShowFacetBoc(false);
				if (vb.getRedirect().equals("rediretFromCAExpDepToListSender")
						|| vb.getRedirect().equals(
								"rediretFromCADestDepToListSender")) {
					typeCourrier = "depart";
				} else {
					typeCourrier = "arrive";
				}
				if (vb.getPerson().isBoc()) {
					setShowFacetUser(false);
					setShowFacetBoc(true);
				}
				courrier = new Courrier();
				listAnnotation = appMgr.getList(Annotation.class);
				listNature = appMgr.getList(Nature.class);
				listTransmission = appMgr.getList(Transmission.class);
				listUrgence = appMgr.getList(Urgence.class);
				listConfidentialite = appMgr.getList(Confidentialite.class);
				listWorkflow = appMgr.getList(Workflow.class);
				listNatureWorkFlow = appMgr.getListNatureWithWorkFlow();
				expdestExterne = appMgr.getList(Expdestexterne.class).get(0);
				vb.setExpdestexterne(expdestExterne);
				courrier.setCourrierCircuit("Libre");
				typeExpediteur = "Défault";
				vb.setShowMonitoringButtonForDest(true);
				mail = vb.getMail();
				faxMail = vb.getFaxMail();
				gedUtils = vb.getGedUtils();
				// XTE : Si c'est un
				// mail--------------------------------------------------------------------------------------------------------------
				if (mail != null) {
					courrier.setCourrierDateReception(mail
							.getMailReceivedDate());
					courrier.setCourrierObjet(mail.getMailSubject());
					courrier.setCourrierCommentaire(mail
							.getMailOriginalContent().replaceAll("(<br/>)+",
									"\n"));
					if (mail.getMailPriority() == null) {
						selectedItemUg = listUrgence.get(0).getUrgenceId()
								.toString();
					} else {
						String urg = mail.getMailPriority();
						if (urg.equals("High")) {
							selectedItemUg = listUrgence.get(2).getUrgenceId()
									.toString();
						}
						if (urg.equals("Low")) {
							selectedItemUg = listUrgence.get(1).getUrgenceId()
									.toString();
						}
					}
//					selectedItemsTr = appMgr.getTransmissionById(4).get(0)
//							.getTransmissionLibelle();
					selectedItemsTr="4";
					System.out.println("DANS mail "+selectedItemsTr);
					vb.setSelectedItemsTr(selectedItemsTr);
					//Si Structure 
					if(!vb.getPerson().isBoc())
					{
						vb.setDestNom(vb.getPerson().getAssociatedDirection().getNameUnit());
						
						vb.getCopyListSelectedUnit().add(vb.getPerson().getAssociatedDirection());
					}
					
					
				}
				// XTE : Si c'est un
				// FaxMail---------------------------------------------------------------------------------------------------------------
				if (faxMail != null) {
					mail = new Mail();
					mail.setMailFromName(faxMail.getFaxMailFromName());
					mail.setMailFromAddress(faxMail.getFaxMailFromAdress());
					courrier.setCourrierDateReception(faxMail
							.getFaxMailReceivedDate());
					courrier.setCourrierObjet(faxMail.getFaxMailSubject());
					courrier.setCourrierCommentaire(faxMail
							.getFaxMailOriginalContent().replaceAll("(<br/>)+",
									"\n "));
					if (faxMail.getFaxMailPriority() == null) {
						selectedItemUg = listUrgence.get(0).getUrgenceId()
								.toString();
					} else {
						String urg = faxMail.getFaxMailPriority();
						if (urg.equals("High")) {
							selectedItemUg = listUrgence.get(2).getUrgenceId()
									.toString();
						}
						if (urg.equals("Low")) {
							selectedItemUg = listUrgence.get(1).getUrgenceId()
									.toString();
						}
					}
					selectedItemsTr = appMgr.getTransmissionById(3).get(0)
							.getTransmissionLibelle();
					vb.setSelectedItemsTr(selectedItemsTr);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			// XTE :Fin cas Transformation
			// Mail/Fax------------------------------------------------------------------------------------------------
		} else {

			try {

				if (vb.getPerson().getAssociatedDirection() != null) {
					associatedUnit = vb.getPerson().getAssociatedDirection()
							.getNameUnit();
					associatedLabel = messageSource.getMessage("nomUnite",
							new Object[] {}, languageManager.createLocal());
				} else {
					associatedUnit = vb.getPerson().getAssociatedBOC()
							.getNameBOC();
					associatedLabel = messageSource.getMessage("nomBO",
							new Object[] {}, languageManager.createLocal());
				}
				showFacetUser = true;
				etatCircuitWorkflow = false;
				etatCircuitWorkflowTextArea = true;
				requiredMessage = false;
				showFacetBoc = false;
				if (vb.getRedirect().equals("rediretFromCAExpDepToListSender")
						|| vb.getRedirect().equals(
								"rediretFromCADestDepToListSender")) {
					typeCourrier = "depart";

				} else {
					typeCourrier = "arrive";
				}
				if (vb.getPerson().isBoc()) {
					showFacetUser = false;
					showFacetBoc = true;
					//2020-06-12
					if(vb.getPerson().getAssociatedBOC().getIdBOC()==1){
					typeCourrier="depart";}
				}
				courrier = new Courrier();

				listAnnotation = appMgr.getList(Annotation.class);
				listNature = appMgr.getList(Nature.class);
				listWorkflow = appMgr.getList(Workflow.class);
				listNatureWorkFlow = appMgr.getListNatureWithWorkFlow();
				listTransmission = appMgr.getList(Transmission.class);
				listUrgence = appMgr.getList(Urgence.class);
				listConfidentialite = appMgr.getList(Confidentialite.class);
				courrier.setCourrierCircuit("Libre");
				typeExpediteur = "Défault";
				vb.setShowMonitoringButtonForDest(true);
				List<Expdestexterne> expdestexternes = appMgr
						.getList(Expdestexterne.class);
				if (expdestexternes.size() != 0) {
					expdestExterne = expdestexternes.get(0);
					vb.setExpdestexterne(expdestExterne);
				}
				// System.out.println("*******ChargementAvecSucces CourrierAjoutBean ******");
			} catch (Exception e) {
				e.printStackTrace();
				// System.out.println("*******ErreurDeChargement CourrierAjoutBean*******");
			}
			// XTE : Log &&
			// Notification-----------------------------------------------------------------------------------------------------------
			vbn.setEvenementNomVariableNotif("event_ajout_courrier_notif");
			vbn.setNotificationNomVariablAdmin("ajout_courrier_admin");
			vbn.setNotificationNomVariableDestinataire("ajout_courrier_dest");
			vbn.setEvenementNomVariableLog("event_ajout_courrier_log");
			vbn.setNomExpediteur("Administrator");
			vbn.setMailExpediteur("gbo.admin@xtensus.net");
			// XTE : Fin Log &
			// notification---------------------------------------------------------------------------------------------------------

			rollBackCourrierValue();
			System.out
					.println("########### après rollback selectedItemNature  ==  "
							+ selectedItemNature);
			System.out
					.println("########### après rollback numeroAoConsultation  === "
							+ numeroAoConsultation);
			if (typeCourrier.equals("depart")) {
				getSelectItemsNat();
				eventChooseTypeCourrier(null);
			}
		}
		// affichagePassageBO = true;
//		listExpositionsTab2 = new ArrayList<ChequeModel>();
//		ChequeModel fdm = new ChequeModel();
//		fdm.setOperation(1);
//		fdm.setBoutonPlus(true);
//		fdm.setBoutonSupprimer(false);
//		listExpositionsTab2.add(fdm);
//		listCheques.setWrappedData(listExpositionsTab2);
		vb.setFlagCheque(true);
		if (vb.getAoConsultation() != null) {
			System.out.println("######## dans vb.getAoConsultation()");		
			aoConsultation = appMgr.getAOByRef(vb.getAoConsultation().getAoConsultationNumero()).get(0);
			if(aoConsultation.getAoConsultationDateLimiteOffre()!=null){
			heure1 =aoConsultation.getAoConsultationDateLimiteOffre().toString().substring(0,10) + " à "
			+ aoConsultation.getAoConsultationDateLimiteOffre().toString().substring(11,16);
			}
			System.out.println("##### heure1 + " + heure1);
			if(aoConsultation.getAoConsultationDateSeanceCommission()!=null){
			heure3 =aoConsultation.getAoConsultationDateSeanceCommission().toString().substring(0,10) + " à "
			+ aoConsultation.getAoConsultationDateSeanceCommission().toString().substring(11,16);
			}
			System.out.println("##### heure3 + " + heure3);
			if(aoConsultation.getAoConsultationDelaisProlongation()!=null){
			heure2 =aoConsultation.getAoConsultationDelaisProlongation().toString().substring(0,10) + " à "
			+ aoConsultation.getAoConsultationDelaisProlongation().toString().substring(11,16);
			}
			System.out.println("##### heure2 + " + heure2);

		}
		
		
		selectedItemsTrAncien=vb.getSelectedItemsTr();
		selectedItemsTr=vb.getSelectedItemsTr();
		System.out.println("### selectedItemsTr ### "+selectedItemsTr);
		if (selectedItemsTr != null && !vb.getPerson().isBoc()) {
			if (Integer.valueOf(selectedItemsTr) == 11 || Integer.valueOf(selectedItemsTr) == 10  || !vb.getCopyListPM().isEmpty() || !vb.getCopyListPP().isEmpty()) {
				affichagePassageBO = true;
				passageParBO = "Oui";
				champDesabled=true;
				//necessiteReceptionPhysique="Non";
			} else{
				champDesabled=false;
			}
		}
			System.out.println("2===>"+champDesabled);
		
		
		//courrier Ajouté par BOC et mode transmision valise :le choix « réception physique » doit être positionnée automatiquement à « Non et grisé
		if(selectedItemsTr != null && vb.getPerson().isBoc()){
			if (Integer.valueOf(selectedItemsTr) == 9 || Integer.valueOf(selectedItemsTr) == 11 || Integer.valueOf(selectedItemsTr) == 10) {
				//necessiteReceptionPhysique="Non";
				champDesabled=true;
			}else{
				champDesabled=false;
			}
		}
		System.out.println("1===>"+champDesabled);
		
		if (selectedItemsTr != null && !vb.getPerson().isBoc()) {
			//Si le conneté est structure et le MT valise 
			if (Integer.valueOf(selectedItemsTr) == 9) {

				champDesabledReceptionPhysique = true;
				necessiteReceptionPhysique = "Non";
			} else {
				//champDesabledReceptionPhysique = false;
			}
		}
		
		
		if(selectedItemsTr != null && vb.getPerson().isBoc()){
			if (Integer.valueOf(selectedItemsTr) == 9|| !vb.getCopyListPM().isEmpty() || !vb.getCopyListPP().isEmpty()) {
				necessiteReceptionPhysique="Non";
				champDesabledReceptionPhysique=true;
			}else{
				champDesabledReceptionPhysique=false;
			}
		}
		listComposantDynamiqueTransmission=vb.getListComposantDynamiqueTransmission();
		listComposantDynamique=vb.getListComposantDynamiqueNature();
		System.out.println("vb.getListChequesSave()===>"+vb.getListChequesSave());
		
		if(vb.getListChequesSave() != null  && selectedItemNature != null ){
		if(Integer.valueOf(selectedItemNature)==38 || Integer.valueOf(selectedItemNature)==59 || Integer.valueOf(selectedItemNature)==80 ){
		listChequesTablo=vb.getListChequesSave();
		listCheques.setWrappedData(listChequesTablo);
		showPanelCheque=true;
		System.out.println("showPanelCheque=true");
		//2020-06-06
		necessiteReceptionPhysique="Oui";
		passageParBO="Oui";

		}else{
			System.out.println("showPanelCheque=false");
			showPanelCheque=false;
		}
		}
		
		if(listComposantDynamiqueTransmission!=null)
		
			if(listComposantDynamiqueTransmission!=null && listComposantDynamiqueTransmission.size()>0){
				//[JS] : 2020-06-02
				if(Integer.valueOf(selectedItemsTr)!=5 && Integer.valueOf(selectedItemsTr)!=6){
				afficheChampsSpecTansmission=true;
				//[JS] : 2020-05-07 : test ajouté dans le cas on modifie destinatire (externe =>interne) après choisis lettre Rec/rapid poste

				}else{
				if(  ((!vb.getCopyListPM().isEmpty() || !vb.getCopyListPP().isEmpty())
				 && 
				 (Integer.valueOf(selectedItemsTr)==5 || Integer.valueOf(selectedItemsTr)==6)) ||			 
				 (vb.getCopyListSelectedObjectExp().size()>0 
				  && 
				  ((vb.getCopyListSelectedObjectExp().get(0) instanceof Pp) || (vb.getCopyListSelectedObjectExp().get(0) instanceof Pm))
					&& (Integer.valueOf(selectedItemsTr)==5 || Integer.valueOf(selectedItemsTr)==6)))
				{
					afficheChampsSpecTansmission=true;
				}else{
					afficheChampsSpecTansmission=false;

				}
				}
			
			}
				
		
		else 
			afficheChampsSpecTansmission=false;
		System.out.println(afficheChampsSpecTansmission);
		
		selectedItemNatureAncien=vb.getSelectedItemNature();
		selectedItemNature=vb.getSelectedItemNature();
		
		if(mail!= null && mail.getMailId()!=null
				){
			if(!vb.getPerson().isBoc()){
			passageParBO = "Non";
			affichagePassageBO=true;
			champDesabled=true;
			champDesabledReceptionPhysique=true;
			}
			else{
				passageParBO = "Oui";
				affichagePassageBO=false;
				champDesabled=true;
				champDesabledReceptionPhysique=true;
			}
		}
			System.out.println("4===>"+champDesabled);
//		if(listComposantDynamique != null && listComposantDynamique.size()>0)		
//				showPanelCheque=true;
//		else
		
//		if(listComposantDynamiqueNature!=null)
//			System.out.println("##### ZISE::  "+listComposantDynamiqueNature.size());
//			if(listComposantDynamiqueNature!=null && listComposantDynamiqueNature.size()>0)
//				afficheChampsSpecTansmission=true;
//			else 
//				afficheChampsSpecTansmission=false;
//			System.out.println(afficheChampsSpecTansmission);
		

	}

	private boolean annotaionPermise(Unit unitExpediteur, Unit uni) {

		if (uni.getAssociatedUnit() != null && uni.getIdUnit() != null
				&& uni.getAssociatedUnit().getIdUnit().intValue() == 2990) {
			System.out.println("c'est l'unité générle");
			return false;
		} else if (uni.getAssociatedUnit() != null
				&& uni.getAssociatedUnit().getIdUnit().intValue() == unitExpediteur
						.getIdUnit().intValue()) {
			return true;
			// vérifie si l'unité des parmi les sup de unité exp

		} else if (uni.getAssociatedUnit() != null) {
			Unit unite = ldapOperation.getUnitById(uni.getAssociatedUnit()
					.getIdUnit());
			return annotaionPermise(unitExpediteur, unite);
		} else
			return false;

	}

	public List<SelectItem> getSelectItemsNat() {
		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------
		// Fonction : getSelectItemsNat
		// Date :
		// Auteur :
		// Description : Cette fonction permet d'initialiser la liste des
		// natures dans le listBox
		//
		//
		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------
		String libelle;
		List<SelectItem> selectItemsNat = new ArrayList<SelectItem>();
		selectItemsNat.add(new SelectItem(""));

		for (Nature natureWorkFlow : listNatureWorkFlow) {
			if (mapIndexInListNatureWorkflow.size() != listNatureWorkFlow
					.size()) {
				mapIndexInListNatureWorkflow.put(
						listNature.indexOf(natureWorkFlow), natureWorkFlow);
			}
			if (vb.getPerson().getAssociatedBOC() == null) {
				listNature.remove(natureWorkFlow);
			}
		}

		// }
		for (int j = 0; j <= listNature.size() - 1; j++) {
			Integer idNat = listNature.get(j).getNatureId();
			if (vb.getLocale().equals("ar")) {
				libelle = listNature.get(j).getNatureLibelleAr();
			} else {
				libelle = listNature.get(j).getNatureLibelle();
			}
			selectItemsNat.add(new SelectItem(String.valueOf(idNat), libelle));
		}
		return selectItemsNat;
	}

	public List<SelectItem> getSelectItemsTr() {
		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------
		// Fonction : getSelectItemsTr
		// Date :
		// Auteur :
		// Description : Cette fonction permet d'initialiser la liste des modes
		// de transmission dans le listBox
		//
		//
		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------

		String libelle;
		List<SelectItem> selectItemsTr = new ArrayList<SelectItem>();
		selectItemsTr.add(new SelectItem(""));
		for (int j = 0; j <= listTransmission.size() - 1; j++) {
			Integer idTr = listTransmission.get(j).getTransmissionId();
			if (vb.getLocale().equals("ar")) {
				libelle = listTransmission.get(j).getTransmissionLibelleAr();
			} else {
				libelle = listTransmission.get(j).getTransmissionLibelle();
			}
			selectItemsTr.add(new SelectItem(String.valueOf(idTr), libelle));
		}
		return selectItemsTr;
	}

	public List<SelectItem> getSelectItemsConf() {
		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------
		// Fonction : getSelectItemsConf
		// Date :
		// Auteur :
		// Description : Cette fonction permet d'initialiser la liste des degrés
		// de confidentialité dans le listBox
		//
		//
		// -------------------------------------------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------------------
		String libelle;
		List<SelectItem> selectItemsConf = new ArrayList<SelectItem>();
		// selectItemsConf.add(new SelectItem(""));
		for (int j = 0; j <= listConfidentialite.size() - 1; j++) {
			Integer idCf = listConfidentialite.get(j).getConfidentialiteId();
			if (vb.getLocale().equals("ar")) {
				libelle = listConfidentialite.get(j)
						.getConfidentialiteLibelleAr();
			} else {
				libelle = listConfidentialite.get(j)
						.getConfidentialiteLibelle();
			}
			selectItemsConf.add(new SelectItem(String.valueOf(idCf), libelle));
		}
		return selectItemsConf;
	}

	public List<SelectItem> getSelectItemsUg() {
		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------
		// Fonction : getSelectItemsUg
		// Date :
		// Auteur :
		// Description : Cette fonction permet d'initialiser la liste des degrés
		// d'urgences dans le listBox
		//
		//
		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------
		String libelle;
		List<SelectItem> selectItemsUg = new ArrayList<SelectItem>();
		// selectItemsUg.add(new SelectItem(""));
		for (int j = 0; j <= listUrgence.size() - 1; j++) {
			Integer idUg = listUrgence.get(j).getUrgenceId();
			if (vb.getLocale().equals("ar")) {
				libelle = listUrgence.get(j).getUrgenceLibelleAr();
			} else {
				libelle = listUrgence.get(j).getUrgenceLibelle();
			}
			selectItemsUg.add(new SelectItem(String.valueOf(idUg), libelle));
		}
		return selectItemsUg;
	}

	public void changeEtatPanalCircuit(ActionEvent evt) {
		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------
		// Fonction : changeEtatPanalCircuit
		// Date :
		// Auteur :
		// Description : Cette fonction permet de mettre à jour l'affichage du
		// destinataire selon la nature du courrier choisie, ce qui diffère
		// si le courrier suit un workflow ou non.
		//
		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------
		int nb = appMgr.listWorkflowByIdNature(
				Integer.valueOf(selectedItemNature)).size();
		if (nb == 0) {
			etatCircuitWorkflow = false;
			etatCircuitWorkflowTextArea = true;
			requiredMessage = true;
		} else {
			etatCircuitWorkflow = true;
			etatCircuitWorkflowTextArea = false;
			requiredMessage = false;
		}
	}

	public void resetExpDest() {
		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------
		// Fonction : resetExpDest
		// Date :
		// Auteur :
		// Description : Cette fonction permet d'initialiser l'inerface d'ajout
		// d'un courrier lors de changement de type de courrier
		//
		//
		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------

		vb.setCopyListSelectedPerson(new ArrayList<Person>());
		vb.setCopyListPP(new ArrayList<Pp>());
		vb.setCopyListPM(new ArrayList<Pm>());
		vb.setListSelectedItem(new ArrayList<ItemSelected>());
		vb.setCopyListSelectedBoc(new ArrayList<BOC>());
		vb.setCopyListSelectedUnit(new ArrayList<Unit>());
		vb.setCopyListSelectedObject(new ArrayList<Object>());
		vb.setCopyListSelectedObjectExp(new ArrayList<Object>());
		vb.setDestNom(null);
		vb.setExpNom(null);
		vb.setTypeCourrier("arrive");
	}

	public void resetTypeCourrier() {
		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------
		// Fonction : resetTypeCourrier
		// Date :
		// Auteur :
		// Description : Cette fonction permet d'inverser le type du courrier
		// s'il était arrivé devient départ et vise vers ça
		//
		//
		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------

		if (vb.getTypeCourrier().equals("arrive")) {
			vb.setTypeCourrier("depart");
		} else {
			vb.setTypeCourrier("arrive");
		}

	}

	@SuppressWarnings("unchecked")
	public void ajouterCourrier() {
		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------
		// Fonction : ajouterCourrier
		// Date :
		// Auteur :
		// Description : Cette fonction permet de vérifier si notre courrier à
		// ajouer va suivre un workflow ou non
		//
		//
		// -------------------------------------------------------------------------------------------------------------------------------------
		// -------------------------------------------------------------------------------------------------------------------------------------
	try {
		
	
		boolean passe = true;
		boolean passeNumCheque= true;
		if (selectedItemNature != null) {
			int natureID = Integer.valueOf(selectedItemNature);
			if (vb.getFlagCheque()) {
				if (natureID == 38 || natureID == 59 || natureID == 80) {
					// /parcourir la liste des cheques et vérifier s'il montant
					// à 0
					listChequesTablo = (List<ChequeModel>) listCheques.getWrappedData();
					if (listChequesTablo.size() > 0) {
						for (ChequeModel chequeDateModel : listChequesTablo) {

							if (chequeDateModel.getChequeMontant() != null
									&& chequeDateModel.getChequeMontant().doubleValue() <= 0)
								
							{
								passe = false;
								break;
							}
							
						}
						try {
							int numcheq=0;
							for (ChequeModel chequeDateModel : listChequesTablo) {
								
								 numcheq = Integer.parseInt(chequeDateModel.getChequeNum());
								
								
							}
						} catch (NumberFormatException e) {
							System.out.println("##### * N° Chèque doit ");
							passeNumCheque= false;
						}
						

					}
				}
			}
		}
		//2020-06-08
//		if (selectedItemNature != null){
//			int natureID = Integer.valueOf(selectedItemNature);
//			if (natureID == 44 || natureID == 46){
//				//if (vb.isFlagAjout()== true) {	
//					if (vb.getAoConsultation() == null){
////						sansAoConsultation = true;
////						passe=false;
//					}else{
////						sansAoConsultation=false;
////						passe=true;
//					}
//				//}
//			}
//		}
		
		if(passe && passeNumCheque && !vb.isNotAdd() && !vb.isNotAddCourrier()){
			
		Workflow workflow = new Workflow();
		int nb = appMgr.listWorkflowByIdNature(
				Integer.valueOf(selectedItemNature)).size();

		// XTE : Le courrier va suivre un
		// workflow---------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------
		if (nb != 0) {
			// XTE : Récupérer le WorkFlow à
			// suivre------------------------------------------------------------------------------------------------
			workflow = appMgr.listWorkflowByIdNature(
					Integer.valueOf(selectedItemNature)).get(0);
			String processId = workflow.getWorkflowTitre();

			// XTE : Récupérer la premier étape du
			// workflow----------------------------------------------------------------------------------------
			TraitementEtapeSuivant etapeSuivant = new TraitementEtapeSuivant();
			JBPMAccessProcessBean jbpmAccessProcessBean = new JBPMAccessProcessBean();
			etapeSuivant = jbpmAccessProcessBean
					.startProcessTraitementCourrier(processId, 1);

			// XTE : Appel à la méthode d'ajout d'un courrier qui suit un
			// workflow-----------------------------------------------------------------
			saveWorkflow(etapeSuivant);
		}
		// XTE : Le courrier ne suit pas un
		// workflow-------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------
		else {

			if (etatCircuitWorkflowTextArea && vb.getDestNom() != null
					&& (showFacetUser || vb.getExpNom() != null) ) {
				save();
				// XTE : Test pour l'affichage des popup pour le cas du GED
				// désactivé------------------------------------------------------------------
				if (vb.getGedStatus().equals("false")) {
					showPopupSansGED = true;
					showPopupAvecGED = false;
				} else {

					showPopupAvecGED = true;
					showPopupSansGED = false;
				}
				//AH : si c'est un transfert passer à l'ajout des documents
				if(transformationMailFax){
					if(vb.getAttachmentFileBeanList()!=null && vb.getAttachmentFileBeanList().size()>0){
						//Exiiste des Documents à joindre
						System.out.println("Existe des Documents à joindre : "+vb.getAttachmentFileBeanList().size());
						System.out.println("Nombre des messages : "+vb.getListMesages().size());
						
						ajouterAttachement(courrier,vb.getAttachmentFileBeanList(),vb.getListMesages());
						if(mail!=null)
						{
							mail.setMailIs_treated(1);
							appMgr.update(mail);
						}
						System.out.println("Fin ajout attachement");
					}
				}
				

			} else {
				if (showFacetUser == false && vb.getExpNom() == null) {
					sansExpediteur = true;
				} else {
					sansDestinataire = true;
				}
				if (transformationMailFax == true && mail != null)
					sansExpediteur = false;
				return;
			}
		}
		vb.setOldPage(false);
		if (ajoutValide) {
			
			System.out.println("Appel Méthode resety");
			reset();
		}
		}
		else{
	System.out.println("Existent des valeurs à 0");
	
//	String erreurMontantZero=messageSource.getMessage("erreurMontantZero",
//			new Object[] {}, lm.createLocal());
	if(!passe){
	setMessage(messageSource.getMessage("erreurMontantZero",
			new Object[] {}, lm.createLocal()));
	FacesContext.getCurrentInstance().addMessage(
			"messages",
			new FacesMessage(FacesMessage.SEVERITY_ERROR, message,
					""));
				}
	if(!passeNumCheque){
		
		setMessage(messageSource.getMessage("erreurNumCheq",
				new Object[] {}, lm.createLocal()));
		FacesContext.getCurrentInstance().addMessage(
				"messages",
				new FacesMessage(FacesMessage.SEVERITY_ERROR, message,
						""));
		
	}
}
		} catch (Exception e) {
			e.printStackTrace();
			}
	}

	public void chargementNotification() {
		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------
		// Fonction : chargementNotification
		// Date :
		// Auteur :
		// Description : Cette fonction permet de gérer le log et les
		// notifications en ajoutant une description de l'action faite, à savoir
		// l'ajout d'un courrier.
		//
		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------
		Date dateSystem = new Date();
		SimpleDateFormat formaterDate = null;
		formaterDate = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

//		String infoCourrier = "La réference de ce courrier est : "
//				+ courrier.getCourrierReferenceCorrespondant();
		
		String infoCourrier = "La réference de ce courrier est : "
			+ vb.getCodeUniqueCourrier();
		System.out.println("chargementNotification : infoCourrier "+infoCourrier );

		vbn.setInfo(infoCourrier);
		vbn.setNomClass(CourrierAjoutBean.class.getName());
		vbn.setTypeLog("INFO");

		// XTE : Chargement Hard Codé de les elements à remplir dans la classe
		// informations----------------------------------------------------
		info1.setVar("#p");
		info1.setContenu(vb.getPerson().getNom());

		info2.setVar("#I");
		info2.setContenu(infoCourrier);

		info3.setVar("#d");
		info3.setContenu(formaterDate.format(dateSystem));

		listInfo.add(info1);
		listInfo.add(info2);
		listInfo.add(info3);

		vbn.setListInformations(listInfo);
		vbn.setTypeObject("TEST");
		vbn.setCopyListSelectedPersonNotif(vb.getCopyListSelectedPersonNotif());
		vbn.setCopyListSelectedUnitNotif(vb.getCopyListSelectedUnitNotif());
		vbn.setCopyListPMNotif(vb.getCopyListPMNotif());
		vbn.setCopyListPPNotif(vb.getCopyListPPNotif());
		vbn.setPerson(vb.getPerson());
	}

	public void save() {
		System.out.println("###### Dans save()");

		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------
		
		erreurSaisieDate = false;

		int a = dateCourrier.compareTo(dateReelle);
		if (dateCourrier.compareTo(dateReelle) < 0) {
			erreurSaisieDate = true;

		} else {

			listIdBocMembers = new ArrayList<Integer>();
		
			// XTE - AH : Initialisation de la liste des Membre de BO Connecté
			if (vb.getPerson().isBoc()) {
			
				List<Person> listBocMembers = vb.getPerson().getAssociatedBOC()
						.getMembersBOC();


				for (Person person : listBocMembers) {
					listIdBocMembers.add(person.getId());
				}
			}
			
			// ------------------------------------------------------------------------------------------------------------------------------------
			// ------------------------------------------------------------------------------------------------------------------------------------
			// Fonction : save
			// Date :
			// Auteur :
			// Description : Cette fonction permet d'ajouter un courier
			//
			//
			// ------------------------------------------------------------------------------------------------------------------------------------
			// ------------------------------------------------------------------------------------------------------------------------------------
			ajoutMail=false;
			ajoutValide = false;
			echeanceInvalide = false;
			dateCourrierInvalide = false;
			insertionInterrompus = false;
			sansDestinataire = false;
			Dossier dossier = new Dossier();
			Typedossier typedossier = new Typedossier();
			Transaction nouvelleTransaction = new Transaction();
			Etat etat = new Etat();
			TransactionDestinationId id = new TransactionDestinationId();
			TransactionDestination trDest = new TransactionDestination();
			Expdest expdest = new Expdest();
			Typetransaction typetransaction = new Typetransaction();
			Transaction copyNouvelleTransaction = new Transaction();
			TransactionDestinationReelle transactionDestinationReelle = new TransactionDestinationReelle();
			try {

				Etat etatReceptionPhysique = appMgr.listEtatByRef(9).get(0);

				Variables passageCourrierArriveAuDG = appMgr.listVariablesById(
						13).get(0);

				courrier.setCourrierDateReception(dateCourrier);
				
				courrier.setCourrierDateReceptionReelle(dateReelle);
				
				boolean flagValise = vb.isFlagValise();

				if (flagValise) {
					courrier.setCourrierFormat(vb.getValise().getCourrierFormat());
				
					courrier.setCourrierTypeTransport(vb.getValise().getCourrierTypeTransport());
				}
				
				if (getIdPersonbyId(vb.getPerson().getId())
						.getAssociatedDirection() != null)
					getIdBocByUnit(getIdPersonbyId(vb.getPerson().getId())
							.getAssociatedDirection());
				else if (getIdPersonbyId(vb.getPerson().getId())
						.getAssociatedBOC() != null) {
					idBoc = getIdPersonbyId(vb.getPerson().getId())
							.getAssociatedBOC().getIdBOC();

				} else {
					idBoc = 0;
				
				}
				// ========== Fin
				// XTE : Si la date de reception avant date
				// d'aujourd'hui------------------------------------------------------------------------------
				String destinataireExpediteur="";
				if (courrier.getCourrierDateReception().compareTo(date) <= 0) {
					if ((courrier.getCourrierDateReponse() == null)
							|| courrier.getCourrierDateReception().compareTo(
									courrier.getCourrierDateReponse()) <= 0) {
						echeanceInvalide = false;
						ajoutValide = true;

						// XTE: Début Insertion
						// courrier-------------------------------------------------------------------------------------------------------

						// XTE : Mettre à jour la nature du
						// courrier------------------------------------------------------------------------------------------
						List<Nature> n = new ArrayList<Nature>();
						if (selectedItemNature != null) {
//					
							n = appMgr.getNatureById(Integer
									.valueOf(selectedItemNature));
							courrier.setNature(n.get(0));
						} else if (selectedItemNature == null) {
//							
							n = appMgr.getNatureById(1);
							courrier.setNature(n.get(0));
						}

						// XTE : Mettre à jour le mode transmission du
						// courrier-------------------------------------------------------------------------------

						if (transformationMailFax) {
							ajoutMail=true;
							ajoutValide = false;
							if (faxMail != null) {
								transmission = appMgr.getTransmissionById(3)
										.get(0);
							} else {
								transmission = appMgr.getTransmissionById(4)
										.get(0);
							}
						} else {
							List<Transmission> tr = new ArrayList<Transmission>();
							if (selectedItemsTr == null) {
								transmission = appMgr.getTransmissionById(9)
										.get(0);
								courrier.setTransmission(transmission);
							} else if (selectedItemsTr != null) {
								tr = appMgr.getTransmissionById(Integer
										.valueOf(selectedItemsTr));
								transmission = tr.get(0);

							}

						}
	
						courrier.setTransmission(transmission);
						// XTE : Mettre à jour la confidentialité du
						// courrier---------------------------------------------------------------------------------
						List<Confidentialite> conf = new ArrayList<Confidentialite>();
						if (selectedItemConf != null) {
							conf = appMgr.getConfidentialiteById(Integer
									.valueOf(selectedItemConf));
							confidentialite = conf.get(0);
							courrier.setConfidentialite(confidentialite);
						} else if (selectedItemConf == null) {
							confidentialite = appMgr.getConfidentialiteById(1)
									.get(0);
							courrier.setConfidentialite(confidentialite);

						}

						// XTE : Mettre à jour l'Urgence du
						// courrier------------------------------------------------------------------------------------------
						List<Urgence> ug = new ArrayList<Urgence>();
						if (selectedItemUg != null) {
							ug = appMgr.getUrgenceById(Integer
									.valueOf(selectedItemUg));
							urgence = ug.get(0);
							courrier.setUrgence(urgence);
						} else if (selectedItemUg == null) {
							urgence = appMgr.getUrgenceById(1).get(0);
							courrier.setUrgence(urgence);
						}

						// XTE : Mettre à jour la nécessité de
						// réponse-----------------------------------------------------------------------------------------
						if (necessiteReponse != null) {
							courrier.setCourrierNecessiteReponse(necessiteReponse);
						} else {

							courrier.setCourrierNecessiteReponse("Non");
						}

			
						if (passageParBO != null && passageParBO.equals("Non")) {
							courrier.setCourrierNecessitePassageParBO(false);
						} else if (passageParBO != null
								&& passageParBO.equals("Oui")) {
							courrier.setCourrierNecessitePassageParBO(true);
//						
						} else if (passageParBO == null) {
							courrier.setCourrierNecessitePassageParBO(false);
						}

						if (necessiteReceptionPhysique != null
								&& necessiteReceptionPhysique.equals("Non")) {
							courrier.setCourrierAvecDocumentPhysique(false);

						} else if (necessiteReceptionPhysique != null
								&& necessiteReceptionPhysique.equals("Oui")) {
							courrier.setCourrierAvecDocumentPhysique(true);

						} else if (necessiteReceptionPhysique == null) {
							courrier.setCourrierAvecDocumentPhysique(false);
						}

						courrier.setCourrierDateSysteme(new Date());
						courrier.setCourrierSupprime(true);
						courrier.setCourrierCircuit("Libre");
						courrier.setCourrierflagArchive(0);

						// XTE :Ajout
						// Dossier------------------------------------------------------------------------------------------------------------------
						if (confidentialite != null
								&& confidentialite.getConfidentialiteId() != null)
							dossier.setConfidentialite(confidentialite);
						dossier.setDossierDateCreation(new Date());
						dossier.setDossierDescription(courrier
								.getCourrierCommentaire());

						dossier.setDossierSupprime(true);
						typedossier = appMgr.getTypeDossierById(1).get(0);
						dossier.setTypedossier(typedossier);
						appMgr.insert(dossier);
						vb.setDossier(dossier);

						// XTE : Fin Ajout
						// Dossier-------------------------------------------------------------------------------------------------------------

						Calendar calendar = Calendar.getInstance();
						calendar.setTime(dateCourrier);

						// XTE :Ajout
						// Dates :DateReceptionAnnées
						// +DateReceptionMois--------------------------------------------------------------------------
						courrier.setCourrierOldDateOper(calendar
								.get(Calendar.YEAR));
						courrier.setCourrierDateReceptionMois(dateCourrier
								.getMonth() + 1);
//						
						// XTE :Ajout
						// Courrier---------------------------------------------------------------------------------------------------------
						appMgr.insert(courrier);
					
						if (!vb.getPerson().isBoc()
								&& courrier.getTransmission()
										.getTransmissionId() == 10) {
							courrier.setCourrierNecessitePassageParBO(true);
							passageParBO = "Oui";
							appMgr.update(courrier);
						}

						vb.setCourrier(courrier);
//						
						if (selectedItemNature != null) {
							int natureID = Integer.valueOf(selectedItemNature);
							if (vb.getFlagCheque()) {
								if (natureID == 38 || natureID == 59
										|| natureID == 80) {
									saveCheque();
								}
							}
						}
						// JS-: Ajout Composant
						// Dynamique------------------------------------------------------------------------------------------------------------
						// Méthode de Réflexion
						try {
							Class aClass = c.getClass();
							Class[] paramTypes = new Class[1];
//							if (!vb.getFlagCheque()){
//								listComposantDynamique=new ArrayList<ComposantDynamique>();
//							}
							if (listComposantDynamique != null && listComposantDynamique.size() > 0) {
								for (int i = 0; i < listComposantDynamique
										.size(); i++) {
									if (listComposantDynamique.get(i).getType()
											.equals("RADIO")) {
										paramTypes[0] = Boolean.class;
										listComposantDynamique
												.get(i)
												.setColonne(
														new Boolean(
																listComposantDynamique
																		.get(i)
																		.getColonne()
																		+ ""));
									} else
										paramTypes[0] = listComposantDynamique
												.get(i).getColonne().getClass();
									int idchamp = listComposantDynamique.get(i)
											.getIdChamps();
									String methodName = "setColonne" + idchamp; // fieldName
																				// String
									Method m = null;
									m = aClass.getMethod(methodName, paramTypes);
									String result = (String) m.invoke(c,
											listComposantDynamique.get(i)
													.getColonne()); // field
																	// value
									System.out.println(result);
								}
							}
						} catch (IllegalAccessException iae) {
							iae.printStackTrace();
						}

						try {
							if (listComposantDynamiqueTransmission != null	&& listComposantDynamiqueTransmission.size() > 0) {
								Class aClass = c.getClass();
								Class[] paramTypes = new Class[1];
								
								if (listComposantDynamiqueTransmission.size() > 0) {
									for (int i = 0; i < listComposantDynamiqueTransmission.size(); i++) {

										if (listComposantDynamiqueTransmission.get(i).getType().equals("RADIO")) {
											paramTypes[0] = Boolean.class;
										listComposantDynamiqueTransmission.get(i).setColonne(new Boolean(listComposantDynamiqueTransmission.get(i).getColonne()+ ""));
										} else if (listComposantDynamiqueTransmission.get(i).getColonne() != null) {
											paramTypes[0] = listComposantDynamiqueTransmission.get(i).getColonne().getClass();
											System.out.println("### getColonne() == " + getColonne());
											int idchamp = listComposantDynamiqueTransmission.get(i).getIdChamps();
											System.out.println("##### idchamp == " + idchamp);
											String methodName = "setColonne"+ idchamp; // fieldName	// String
											System.out.println("##### methodName == " + methodName);
											Method m = null;
											m = aClass.getMethod(methodName,paramTypes);
											String result = (String) m.invoke(c,listComposantDynamiqueTransmission.get(i).getColonne()); // field	// value
											System.out.println("##### result"+result);
											
										}
									}
								}
							}
						} catch (IllegalAccessException iae) {
							iae.printStackTrace();
						}

						catch (InvocationTargetException ite) {
							ite.printStackTrace();
						} catch (SecurityException e) {
							e.printStackTrace();
						} catch (NoSuchMethodException e) {
							e.printStackTrace();
						}
						if(listComposantDynamiqueTransmission != null && listComposantDynamiqueTransmission.size()>0 || listComposantDynamique !=null && listComposantDynamique.size()>0 ) {
						if (listComposantDynamiqueTransmission.size() > 0
								|| listComposantDynamique.size() > 0) {
							c.setIdCourrier(courrier);
							appMgr.insert(c);
						}
						}
						
						// XTE : Fin insertion
						// Courrier--------------------------------------------------------------------------------------------------------

						// XTE : Insertion référence
						// courrier--------------------------------------------------------------------------------------------------
						// si BOCT :
						// si Arrivée : A99 : où 99 est l’Id max des courriers
						// arrivées de l’année courante +1
						// si Départ : D99 : où 99 est l’Id max des courriers
						// départs de l’année courante +1
						// si Autre : I9999 : où 9999 est l’id max de tous les
						// courriers quel que soit la nature (A ou D) et quel
						// que
						// soit l’année +1

						// XTE : Personne conneté
						// isBoc--------------------------------------------------------------------------------------------------------
						if (vb.getPerson().isBoc()) {
//							System.out.println("1 ===== Ah le connecté isBOC");
							Calendar cal = Calendar.getInstance();
							cal.setTime(courrier.getCourrierDateReception());

//							System.out.println("Date Récéption Courrier :"
//									+ courrier.getCourrierDateReception());

							int year = cal.get(Calendar.YEAR);
//							System.out.println("Année :" + year);
//							System.out
//									.println("Type Courrier :" + typeCourrier);

							// JS: Mettre à jour référence Courrier
							// -----------------------------------------------------------------------
							// Modification 2019-05-15
							if (typeCourrier.equals("arrive")) {

								// Calcule des courrier avec la Ref A
								Integer lastId = appMgr
										.CountAllCourrierBOCByTransaction(dossier.getDossierId(),
												"A",
												year,
												"boc_"
														+ String.valueOf(vb
																.getPerson()
																.getAssociatedBOC()
																.getIdBOC()),
												listIdBocMembers);
//								System.out.println("Last ID (A) :" + lastId);
								// ????
								// [JS] : Ref Courrier
								// courrier.setCourrierType("A");
//								if (lastId == null || lastId == 0) {
//									// courrier.setCourrierTypeOrdre(1);
//								} else {
//									// courrier.setCourrierTypeOrdre(lastId +
//									// 1);
//								}

							} else if (typeCourrier.equals("depart")) {
								// Calcule des courrier avec la Ref D
								Integer lastId = appMgr
										.CountAllCourrierBOCByTransaction(dossier.getDossierId(),
												"D",
												year,
												"boc_"
														+ String.valueOf(vb
																.getPerson()
																.getAssociatedBOC()
																.getIdBOC()),
												listIdBocMembers);
								System.out.println("Last ID (D) :" + lastId);
								courrier.setCourrierType("D");
								if (lastId != null) {
									courrier.setCourrierTypeOrdre(lastId + 1);
								} else {
									courrier.setCourrierTypeOrdre(1);
								}
							}

							courrier.setCourrierReferenceCorrespondant(courrier
									.getCourrierType()
									+ courrier.getCourrierTypeOrdre());
							// [JS] Fin Modif
							System.out
									.println("Courrier Reference :"
											+ courrier
													.getCourrierReferenceCorrespondant());

						}

						// XTE : Personne conneté not
						// isBoc----------------------------------------------------------------------------------------------------
						else {

//							System.out
//									.println("JS--------------->initialisation_annuelle de Référence Courrier");

							Variables variable = new Variables();
							List<Variables> variables = appMgr
									.listVariablesByLibelle("courrier_interne_reference_initialisation_annuelle");

							Calendar calendar2 = Calendar.getInstance();
							calendar2.setTime(courrier
									.getCourrierDateReception());
							int annee = calendar2.get(Calendar.YEAR);

							if (variables != null && variables.size() > 0) {

								variable = variables.get(0);
								if ((variable.getVaraiablesValeur())
										.toLowerCase().equals("oui")) {

									courrier.setCourrierType("I");


									Person personDestinationReel = vb
											.getLdapOperation().getUserByName(
													vb.getDestNom());

									// JS : Ajouter 2019-05-16
									// ----------------------------------------------------------------------------------------------------
									Integer lastId = appMgr
											.CountAllCourrierRefIByTransaction(
													"I", annee);

									// Integer lastIdByTransaction = appMgr
									// .getTransactionLastIdByTypeOrdreAndAnnees(
									// "I", annee);

									// System.out.println("[JS] : lastIdByTransaction :"
									// + lastIdByTransaction);

									if (lastId == null) {
//										System.out
//												.println("Last ID== null && lastIdByTransaction ==null ");
										courrier.setCourrierTypeOrdre(1);
									}
									if (lastId != null) {
//										System.out
//												.println("Last ID != null && lastIdByTransaction ==null ");

										courrier.setCourrierTypeOrdre(lastId + 1);
									}

									courrier.setCourrierReferenceCorrespondant(courrier
											.getCourrierType()
											+ courrier.getCourrierTypeOrdre());
								} else {
									// ???? I ne sera pas reinitialisé

									Integer lastId = appMgr
											.CountAllCourrierRefIByTransaction(
													"I", annee);

									courrier.setCourrierReferenceCorrespondant("I"
											+ courrier.getIdCourrier());

									courrier.setCourrierType("I");
									if (lastId == null) {
//										System.out
//												.println("Last ID== null && lastIdByTransaction ==null ");
										courrier.setCourrierTypeOrdre(1);
									}
									if (lastId != null) {
//										System.out
//												.println("Last ID != null && lastIdByTransaction ==null ");

										courrier.setCourrierTypeOrdre(lastId + 1);
									}

								}
							}
						}

						// JS-:Mettre à
						// jour--------------------------------------------------------------------------
						// Dossier------------------------------------------------------------------------------------
						dossier.setDossierIntitule("Courrier_"
								+ courrier.getCourrierReferenceCorrespondant());
						appMgr.update(dossier);
						appMgr.update(courrier);

						// XTE : Insersion dans la table
						// CourrierDossier---------------------------------------------------------------------------------------
						CourrierDossierId courrierDossierId = new CourrierDossierId();
						CourrierDossier courrierDossier = new CourrierDossier();
						courrierDossierId.setDossierId(dossier.getDossierId());
						courrierDossierId.setIdCourrier(courrier
								.getIdCourrier());
						courrierDossier.setId(courrierDossierId);
						appMgr.insert(courrierDossier);

						// ------------------------------------------------------------------------------------------------------------------------------------
						// XTE : Insertion du l'expéditeur
						// ------------------------------------------------------------------------------------------------------------------------------------

						// ------------------------------------------------------------------------------------------------------------------------------------
						// XTE : Début Insersion dans la table expDest
						// ========================================================================================
						expdest = new Expdest();

						// XTE : 1/ User Is BOC
						// ===============================================================================================================
						// ------------------------------------------------------------------------------------------------------------------------------------
						if (vb.getPerson().isBoc()) {
							

							// XTE : 1.1/ Expéditeur Person
							// =======================================================================================================
							// ------------------------------------------------------------------------------------------------------------------------------------
						
							if (vb.getCopyListSelectedObjectExp().get(0) instanceof Person) {
								
								System.out.println("person : Interne-Person");
								Person person = (Person) vb
										.getCopyListSelectedObjectExp().get(0);
								expdest.setTypeExpDest("Interne-Person");
								expdest.setIdExpDestLdap(person.getId());
								vb.setCopyExpNom(person.getCn());
								vb.setCopyExpReelNom(person.getCn());
								// KHA id dest
								idExpediteur = person.getId();
								Person p=vb
								.getLdapOperation()
								.getPersonalisedUserById(idExpediteur);
								System.out.println("idExpediteur person = "
										+ idExpediteur);
								destinataireExpediteur=p.getAssociatedDirection().getShortNameUnit();
												System.out.println("destinataireExpediteur 1 "+destinataireExpediteur);

								//
								// XTE : 1.1.1/ Expéditeur Person Responsable
								// =========================================================================================
								// ------------------------------------------------------------------------------------------------------------------------------------
																		
								if (person.isResponsable()) {

									// if (person.getAssociatedDirection()
									// .getAssociatedUnit() != null) {
									nouvelleTransaction
											.setTransactionTypeIntervenant("sub_"
													+ String.valueOf(person
															.getId()));
									// }

									try {
										if (person.getAssociatedDirection()
												.getAssociatedUnit() != null && person.getAssociatedDirection()
												.getAssociatedUnit().getIdUnit() !=null ) {
											nouvelleTransaction
													.setTransactionIdIntervenant(person
															.getAssociatedDirection()
															.getAssociatedUnit()
															.getResponsibleUnit()
															.getId());
										}
									} catch (NullPointerException e) {

										e.printStackTrace();
									}
								}

								// XTE : 1.1.2/ Expéditeur Person Secretaire
								// ==========================================================================================
								// ------------------------------------------------------------------------------------------------------------------------------------
								else if (person.isSecretary()) {
									nouvelleTransaction
											.setTransactionTypeIntervenant("secretary_"
													+ String.valueOf(person
															.getId()));
									nouvelleTransaction
											.setTransactionIdIntervenant(person
													.getAssociatedDirection()
													.getResponsibleUnit()
													.getId());
								}

								// XTE : 1.1.3/ Expéditeur Person Agent
								// ===============================================================================================
								// ------------------------------------------------------------------------------------------------------------------------------------
								else {
									nouvelleTransaction
											.setTransactionTypeIntervenant("agent_"
													+ String.valueOf(person
															.getId()));
									nouvelleTransaction
											.setTransactionIdIntervenant(person
													.getAssociatedDirection()
													.getResponsibleUnit()
													.getId());
								}

							}

							// XTE : 1.2/ Expéditeur UNIT
							// ========================================================================================================
							// -----------------------------------------------------------------------------------------------------------------------------------
							else if (vb.getCopyListSelectedObjectExp().get(0) instanceof Unit) {
//								System.out.println("unit : Interne-Unité");
								Unit unit = (Unit) vb
										.getCopyListSelectedObjectExp().get(0);
								expdest.setTypeExpDest("Interne-Unité");
								expdest.setIdExpDestLdap(unit.getIdUnit());
								System.out.println("expdestexpdestexpdestexpdest "+expdest);
								vb.setCopyExpNom(unit.getNameUnit());
								vb.setCopyExpReelNom(unit.getNameUnit());
								nouvelleTransaction
										.setTransactionTypeIntervenant("unit_"
												+ String.valueOf(unit
														.getIdUnit()));
								// KHA id dest
								idExpediteur = unit.getIdUnit();
								System.out.println("idExpediteur unit = "
										+ idExpediteur);
								destinataireExpediteur=unit.getShortNameUnit();
												System.out.println("destinataireExpediteur 2 "+destinataireExpediteur);
								//
								try {
									if (unit.getAssociatedUnit() != null) {
										nouvelleTransaction
												.setTransactionIdIntervenant(unit
														.getAssociatedUnit()
														.getIdUnit());
									}
								} catch (NullPointerException e) {
									e.printStackTrace();
								}
							}

							// XTE : 1.3/ Expéditeur PP
							// ==========================================================================================================
							// -----------------------------------------------------------------------------------------------------------------------------------
							else if (vb.getCopyListSelectedObjectExp().get(0) instanceof Pp) {
								Pp pp = (Pp) vb.getCopyListSelectedObjectExp()
										.get(0);
//								System.out.println("pp : Externe");
								expdest.setTypeExpDest("Externe");
								expdest.setExpdestexterne(pp
										.getExpdestexterne());
								vb.setCopyExpNom(pp.getExpdestexterne()
										.getExpDestExterneNom()
										+ " "
										+ pp.getExpdestexterne()
												.getExpDestExternePrenom()
										+ " (PP)");
								destinataireExpediteur="EXT";
												System.out.println("destinataireExpediteur 3 "+destinataireExpediteur);
								vb.setCopyExpReelNom(vb.getCopyExpNom());
							}

							// XTE : 1.4/ Expéditeur PM
							// ==========================================================================================================
							// -----------------------------------------------------------------------------------------------------------------------------------
							else if (vb.getCopyListSelectedObjectExp().get(0) instanceof Pm) {
								Pm pm = (Pm) vb.getCopyListSelectedObjectExp()
										.get(0);
								System.out.println("PM : Externe");
								expdest.setTypeExpDest("Externe");
								expdest.setExpdestexterne(pm
										.getExpdestexterne());

								vb.setCopyExpNom(pm.getExpdestexterne()
										.getExpDestExterneNom() + " (PM)");
								destinataireExpediteur="EXT";
												System.out.println("destinataireExpediteur 4 "+destinataireExpediteur);
								vb.setCopyExpReelNom(pm.getExpdestexterne()
										.getExpDestExterneNom() + " (PM)");
							}
							// XTE : 1.4/ Expéditeur BOC
							// ==========================================================================================================
							// -----------------------------------------------------------------------------------------------------------------------------------
							else if (vb.getCopyListSelectedObjectExp().get(0) instanceof BOC) {
								System.out.println("unit : Interne-BO");
								BOC unit = (BOC) vb
										.getCopyListSelectedObjectExp().get(0);
								System.out
										.println("insertion Expdest ===========================> 1 ");
								expdest.setTypeExpDest("Interne-BO");
								expdest.setIdExpDestLdap(unit.getIdBOC());
								vb.setCopyExpNom(unit.getNameBOC());
								vb.setCopyExpReelNom(unit.getNameBOC());
								nouvelleTransaction
										.setTransactionTypeIntervenant("bo_"
												+ String.valueOf(unit
														.getIdBOC()));
								// KHA id dest
								idExpediteur = unit.getIdBOC();
								System.out.println("idExpediteur unit = "
										+ idExpediteur);
								//
								try {
									if (unit.getMembersBOC() != null
											&& unit.getMembersBOC().size() > 0) {
										nouvelleTransaction
												.setTransactionIdIntervenant(unit
														.getMembersBOC().get(0)
														.getId());
									}
								} catch (NullPointerException e) {
									e.printStackTrace();
								}
								if (flagValise) {
									typeCourrier="Valise";
									
									courrier.setCourrierType("V");
									courrier.setCourrierTypeTransport(vb.getValise().getCourrierTypeTransport());
									Calendar cal = Calendar.getInstance();
									cal.setTime(courrier
											.getCourrierDateReception());
									int year = courrier
											.getCourrierOldDateOper();
									int mois = courrier
											.getCourrierDateReceptionMois();
									// [KBS] Ajouté le 2019-10-04
									etat = appMgr.listEtatByLibelle("Encours")
											.get(0);
									nouvelleTransaction.setEtat(etat);

									// --------

									Integer lastId = appMgr
											.CountAllCourrierRefIByTransactionValise(
													"V", year, mois);

									if (lastId != null) {
									
										lastId=lastId + 1;
										courrier.setCourrierTypeOrdre(lastId );
										
									} else {
										
										lastId = 1;
										courrier.setCourrierTypeOrdre(1);

									}


									if(mois<10){
									courrier.setCourrierReferenceCorrespondant(lastId
											+ "-" +"0"+mois + "/" + year);
									}else{
										courrier.setCourrierReferenceCorrespondant(lastId+ "-" + mois + "/" + year);
									}
									
									// courrier.setCourrierDatePointage(vb.getValise().getCourrierDatePointage());
									appMgr.update(courrier);
								}

								// System.out.println("BO");
								// expdest.setTypeExpDest("BO");
								// expdest.setExpdestexterne(pm.getExpdestexterne());
								//
								// vb.setCopyExpNom(vb.getExpNom());
								// vb.setCopyExpReelNom(vb.getExpNom());
							}

						

							courrier.setCourrierDateReception(dateCourrier);
							Calendar cal = Calendar.getInstance();
							cal.setTime(courrier.getCourrierDateReception());
							int year = cal.get(Calendar.YEAR);

							// [JS]: Liste des entiers
							HashMap<Integer, Integer> mapIds = new HashMap<Integer, Integer>();

							if (expdest.getIdExpDest() != null
									&& expdest.getIdExpDest() != 0) {
								mapIds.put(1, expdest.getExpdestexterne()
										.getIdExpDestExterne());
								System.out.println("[Expdest Externe] = "
										+ expdest.getExpdestexterne()
												.getIdExpDestExterne());

							}
							if (expdest.getIdExpDestLdap() != null
									&& expdest.getIdExpDestLdap() != 0) {
								mapIds.put(2, expdest.getIdExpDestLdap());

							}
							
							if (typeCourrier.equals("arrive")) {

//								System.out.println("2019-06-14 BOC Connecté :"
//										+ vb.getPerson().getAssociatedBOC()
//												.getIdBOC());
								Integer lastId = appMgr
										.CountAllCourrierBOCByTransaction(dossier.getDossierId(),
												"A",
												year,
												"boc_"
														+ String.valueOf(vb
																.getPerson()
																.getAssociatedBOC()
																.getIdBOC()),
												listIdBocMembers);
//							

								courrier.setCourrierType("A");
								if (lastId == null) {
									System.out
											.println("Last ID== null && lastIdByTransaction ==null ");
									courrier.setCourrierTypeOrdre(1);
								}
								if (lastId != null) {
									System.out
											.println("Last ID != null && lastIdByTransaction ==null ");

									courrier.setCourrierTypeOrdre(lastId + 1);
								}
								
								courrier.setCourrierReferenceCorrespondant(courrier
										.getCourrierType()
										+ courrier.getCourrierTypeOrdre());

								appMgr.update(courrier);

							} else if (typeCourrier.equals("depart")) {

								Integer lastId = appMgr
										.CountAllCourrierBOCByTransaction(dossier.getDossierId(),
												"D",
												year,
												"boc_"
														+ String.valueOf(vb
																.getPerson()
																.getAssociatedBOC()
																.getIdBOC()),
												listIdBocMembers);
							


								courrier.setCourrierType("D");
								if (lastId == null) {
									
									courrier.setCourrierTypeOrdre(1);
								}
								if (lastId != null) {
									

									courrier.setCourrierTypeOrdre(lastId + 1);
								}
								courrier.setCourrierReferenceCorrespondant(courrier
										.getCourrierType()
										+ courrier.getCourrierTypeOrdre());

								appMgr.update(courrier);
							}
						

						

						}
						// XTE : 2/ User Is Not BOC
						// ==========================================================================================================
						// -----------------------------------------------------------------------------------------------------------------------------------
						else {
							// XTE : 2.1/ Expéditeur Personne connecté
							// ==========================================================================================
							// -----------------------------------------------------------------------------------------------------------------------------------
							if(!transformationMailFax){
							if (typeSender.equals("MoiMeme")) {
								System.out
										.println("Expéditeur Personne connecté : Interne-Person");
								expdest.setTypeExpDest("Interne-Person");
								expdest.setIdExpDestLdap(vb.getPerson().getId());
								vb.setCopyExpNom(vb.getPerson().getCn());
								destinataireExpediteur=vb.getPerson().getAssociatedDirection().getShortNameUnit();
								vb.setCopyExpReelNom(vb.getPerson().getCn());

								// XTE : 2.1.1/ Expéditeur Personne Responsable
								// ==
								// Personne connecte
								// =================================================================
								// -----------------------------------------------------------------------------------------------------------------------------------
								if (vb.getPerson().isResponsable()) {
									nouvelleTransaction
											.setTransactionTypeIntervenant("sub_"
													+ String.valueOf(vb
															.getPerson()
															.getId()));
									try {
										if (vb.getPerson()
												.getAssociatedDirection()
												.getAssociatedUnit() != null) {
											nouvelleTransaction
													.setTransactionIdIntervenant(vb
															.getPerson()
															.getAssociatedDirection()
															.getAssociatedUnit()
															.getResponsibleUnit()
															.getId());
										}
									} catch (NullPointerException e) {
									}
								}
								// XTE : 2.1.2/ Expéditeur Personne Secretary ==
								// Personne connecte
								// ==================================================================
								// -----------------------------------------------------------------------------------------------------------------------------------
								else if (vb.getPerson().isSecretary()) {
									nouvelleTransaction
											.setTransactionTypeIntervenant("secretary_"
													+ String.valueOf(vb
															.getPerson()
															.getId()));
									nouvelleTransaction
											.setTransactionIdIntervenant(vb
													.getPerson()
													.getAssociatedDirection()
													.getResponsibleUnit()
													.getId());
								}
								// XTE : 2.1.3/ Expéditeur Personne Agent
								// ===========================================================================================
								// -----------------------------------------------------------------------------------------------------------------------------------
								else {
									nouvelleTransaction
											.setTransactionTypeIntervenant("agent_"
													+ String.valueOf(vb
															.getPerson()
															.getId()));
									nouvelleTransaction
											.setTransactionIdIntervenant(vb
													.getPerson()
													.getAssociatedDirection()
													.getResponsibleUnit()
													.getId());
								}
							}

							// XTE : 2.2/ Expéditeur Mon Unite
							// ==================================================================================================
							// -----------------------------------------------------------------------------------------------------------------------------------
							else {
								// XTE : 2.2.1/ Expéditeur Unite
								// ====================================================================================================
								// -----------------------------------------------------------------------------------------------------------------------------------
								System.out
										.println("Expéditeur Unite : Interne-Unité");
								if (vb.getPerson().getAssociatedDirection() != null) {
									expdest.setTypeExpDest("Interne-Unité");
									expdest.setIdExpDestLdap(vb.getPerson()
											.getAssociatedDirection()
											.getIdUnit());
									vb.setCopyExpNom(vb.getPerson()
											.getAssociatedDirection()
											.getNameUnit());
									destinataireExpediteur=vb.getPerson()
									.getAssociatedDirection().getShortNameUnit();
									vb.setCopyExpReelNom(vb.getPerson()
											.getAssociatedDirection()
											.getNameUnit());

									nouvelleTransaction.setTransactionTypeIntervenant("unit_"+ String.valueOf(vb.getPerson().getAssociatedDirection().getIdUnit()));
									try {
										if (vb.getPerson()
												.getAssociatedDirection()
												.getAssociatedUnit() != null) {
											nouvelleTransaction
													.setTransactionIdIntervenant(vb
															.getPerson()
															.getAssociatedDirection()
															.getAssociatedUnit()
															.getIdUnit());
										}
									} catch (NullPointerException e) {
									e.printStackTrace();
									}
								}
								
								else {
									
									expdest.setTypeExpDest("Interne-Boc");
									expdest.setIdExpDestLdap(vb.getPerson()
											.getAssociatedBOC().getIdBOC());
									vb.setCopyExpNom(vb.getPerson()
											.getAssociatedBOC().getNameBOC());
									vb.setCopyExpReelNom(vb.getPerson()
											.getAssociatedBOC().getNameBOC());

									nouvelleTransaction
											.setTransactionTypeIntervenant("boc_"
													+ String.valueOf(vb
															.getPerson()
															.getAssociatedBOC()
															.getIdBOC()));
								}
							}
				}
					else{
						Calendar calendar2 = Calendar.getInstance();
						calendar2.setTime(courrier.getCourrierDateReception());
						int annee = calendar2.get(Calendar.YEAR);
						if (vb.getCopyListSelectedObjectExp().get(0) instanceof Person) {
						Person p=(Person) vb.getCopyListSelectedObjectExp().get(0);
								
								expdest.setTypeExpDest("Interne-Person");
								expdest.setIdExpDestLdap(p.getId());
								vb.setCopyExpNom(p.getCn());
								destinataireExpediteur=p.getAssociatedDirection().getShortNameUnit();
												
								vb.setCopyExpReelNom(p.getCn());

								// XTE : 2.1.1/ Expéditeur Personne Responsable
								// ==
								// Personne connecte
								// =================================================================
								// -----------------------------------------------------------------------------------------------------------------------------------
								if (p.isResponsable()) {
									nouvelleTransaction
											.setTransactionTypeIntervenant("sub_"
													+ String.valueOf(p
															.getId()));
									try {
										if (p
												.getAssociatedDirection()
												.getAssociatedUnit() != null) {
											nouvelleTransaction
													.setTransactionIdIntervenant(p
															.getAssociatedDirection()
															.getAssociatedUnit()
															.getResponsibleUnit()
															.getId());
										}
									} catch (NullPointerException e) {
									}
								}
								// XTE : 2.1.2/ Expéditeur Personne Secretary ==
								// Personne connecte
								// ==================================================================
								// -----------------------------------------------------------------------------------------------------------------------------------
								else if (p.isSecretary()) {
									nouvelleTransaction
											.setTransactionTypeIntervenant("secretary_"
													+ String.valueOf(p
															.getId()));
									nouvelleTransaction
											.setTransactionIdIntervenant(p
													.getAssociatedDirection()
													.getResponsibleUnit()
													.getId());
								}
								// XTE : 2.1.3/ Expéditeur Personne Agent
								// ===========================================================================================
								// -----------------------------------------------------------------------------------------------------------------------------------
								else {
									nouvelleTransaction
											.setTransactionTypeIntervenant("agent_"
													+ String.valueOf(p
															.getId()));
									nouvelleTransaction
											.setTransactionIdIntervenant(p
													.getAssociatedDirection()
													.getResponsibleUnit()
													.getId());
								}
							}
							
							// XTE : 1.2/ Expéditeur UNIT
							// ========================================================================================================
							// -----------------------------------------------------------------------------------------------------------------------------------
							else if (vb.getCopyListSelectedObjectExp().get(0) instanceof Unit) {
//								System.out.println("unit : Interne-Unité");
								Unit unit = (Unit) vb
										.getCopyListSelectedObjectExp().get(0);
								expdest.setTypeExpDest("Interne-Unité");
								expdest.setIdExpDestLdap(unit.getIdUnit());
								vb.setCopyExpNom(unit.getNameUnit());
								vb.setCopyExpReelNom(unit.getNameUnit());
								nouvelleTransaction
										.setTransactionTypeIntervenant("unit_"
												+ String.valueOf(unit
														.getIdUnit()));
								// KHA id dest
								idExpediteur = unit.getIdUnit();
								System.out.println("idExpediteur unit = "
										+ idExpediteur);
								destinataireExpediteur=unit.getShortNameUnit();
								//
												System.out.println("destinataireExpediteur 22 "+destinataireExpediteur);
								try {
									if (unit.getAssociatedUnit() != null) {
										nouvelleTransaction
												.setTransactionIdIntervenant(unit
														.getAssociatedUnit()
														.getIdUnit());
									}
								} catch (NullPointerException e) {
									e.printStackTrace();
								}
							}

							// XTE : 1.3/ Expéditeur PP
							// ==========================================================================================================
							// -----------------------------------------------------------------------------------------------------------------------------------
							else if (vb.getCopyListSelectedObjectExp().get(0) instanceof Pp) {
								Pp pp = (Pp) vb.getCopyListSelectedObjectExp()
										.get(0);
//								
								expdest.setTypeExpDest("Externe");
								expdest.setExpdestexterne(pp
										.getExpdestexterne());
								vb.setCopyExpNom(pp.getExpdestexterne()
										.getExpDestExterneNom()
										+ " "
										+ pp.getExpdestexterne()
												.getExpDestExternePrenom()
										+ " (PP)");
								destinataireExpediteur="EXT";
											
								vb.setCopyExpReelNom(vb.getCopyExpNom());
									Integer lastId = appMgr
											.CountAllCourrierRefIByTransaction(
													"M", annee);

									

									courrier.setCourrierType("M");
									if (lastId == null) {
//										System.out
//												.println("Last ID== null && lastIdByTransaction ==null ");
										courrier.setCourrierTypeOrdre(1);
									}
									if (lastId != null) {
//										System.out
//												.println("Last ID != null && lastIdByTransaction ==null ");

										courrier.setCourrierTypeOrdre(lastId + 1);
									}
									courrier.setCourrierReferenceCorrespondant("M"
											+ courrier.getCourrierTypeOrdre());
									appMgr.update(courrier);
							}

							// XTE : 1.4/ Expéditeur PM
							// ==========================================================================================================
							// -----------------------------------------------------------------------------------------------------------------------------------
							else if (vb.getCopyListSelectedObjectExp().get(0) instanceof Pm) {
								Pm pm = (Pm) vb.getCopyListSelectedObjectExp()
										.get(0);
								
								expdest.setTypeExpDest("Externe");
								expdest.setExpdestexterne(pm
										.getExpdestexterne());

								vb.setCopyExpNom(pm.getExpdestexterne()
										.getExpDestExterneNom() + " (PM)");
								destinataireExpediteur="EXT";
											
								vb.setCopyExpReelNom(pm.getExpdestexterne()
										.getExpDestExterneNom() + " (PM)");
										
										Integer lastId = appMgr
											.CountAllCourrierRefIByTransaction(
													"M", annee);

									
									courrier.setCourrierType("M");
									if (lastId == null) {

										courrier.setCourrierTypeOrdre(1);
									}
									if (lastId != null) {


										courrier.setCourrierTypeOrdre(lastId + 1);
									}
									courrier.setCourrierReferenceCorrespondant("M"
											+ courrier.getCourrierTypeOrdre());

									appMgr.update(courrier);
									
									
							}
	
}
						
						}
						appMgr.insert(expdest);
						System.out.println("Expéditeur expdest id: "
								+ expdest.getIdExpDest());
						// XTE : Fin Insersion dans la table
						// expDest==========================================================================================
						// -----------------------------------------------------------------------------------------------------------------------------------

						// -----------------------------------------------------------------------------------------------------------------------------------
						// XTE : Mettre à jour la
						// transaction-------------------------------------------------------------------------------------------------
						nouvelleTransaction.setExpdest(expdest);
						nouvelleTransaction.setIdUtilisateur(vb.getPerson()
								.getId());
						nouvelleTransaction.setDossier(vb.getDossier());
						nouvelleTransaction
								.setTransactionDateTransaction(new Date());
						nouvelleTransaction.setTransactionDateReponse(courrier
								.getCourrierDateReponse());
						typetransaction = new Typetransaction();
						typetransaction = appMgr.getTypeTransactionByLibelle(
								"Envoi").get(0);
						nouvelleTransaction.setTypetransaction(typetransaction);
						nouvelleTransaction.setTransactionSupprimer(true);

						// XTE : récupérer la liste des annotations
						// sélectionnées-----------------------------------------------------------------------------
						List<String> resultatAnnotation = new ArrayList<String>();
						String result = "";
						if (selectedItemsAnnotation != null
								&& selectedItemsAnnotation.size() > 0) {
							for (int j = 0; j <= selectedItemsAnnotation.size() - 1; j++) {
								resultatAnnotation.add(new String(
										selectedItemsAnnotation.get(j)));
							}
							for (String annot : resultatAnnotation) {
								result = result
										+ mapAnnotations.get(Integer
												.valueOf(annot)) + " / ";
							}
						}
						if (!result.equals("")) {
							int lastIndex = result.lastIndexOf("/");
							result = result.substring(0, lastIndex);
						}
						vb.setCopyAnnotationResult(result);
						result = "";

						// -----------------------------------------------------------------------------------------------------------------------------------

						// -----------------------------------------------------------------------------------------------------------------------------------
						// XTE : Insertion de la destinataire
						// -----------------------------------------------------------------------------------------------------------------------------------

						// -----------------------------------------------------------------------------------------------------------------------------------
						// XTE : Destinataires début
						// =========================================================================================================

						// XTE : 1/ Destinataire est interne:
						// ==============================================================================================
						// -----------------------------------------------------------------------------------------------------------------------------------
						if (!vb.getCopyListSelectedPerson().isEmpty()
								|| !vb.getCopyListSelectedUnit().isEmpty()) {


							// XTE : 1.1/ User Destinataire est PERSONNE:
							// ========================================================================================
							// -----------------------------------------------------------------------------------------------------------------------------------

							if (!vb.getCopyListSelectedPerson().isEmpty()) {

								Person connectedPerson = vb.getPerson();

								// XTE : 1.1.1/ User Connecte est PERSONNE
								// (AGENT /
								// RESPONSABLE/ SECRETARY):
								// =========================================================
								// -----------------------------------------------------------------------------------------------------------------------------------
								if (connectedPerson.isAgent()
										|| connectedPerson.isResponsable()
										|| connectedPerson.isSecretary()) {

									Variables variable = new Variables();
									Variables variableValidationHierarchiqueSortant = new Variables();
									Variables variableValidationHierarchiqueArrivee = new Variables();
									variable = appMgr
											.listVariablesByLibelle(
													"validation_hierarchique_courrier_nature")
											.get(0);

									variableValidationHierarchiqueSortant = appMgr
											.listVariablesByLibelle(
													"validation_hierarchique_courrier_sortant")
											.get(0);
									variableValidationHierarchiqueArrivee = appMgr
											.listVariablesByLibelle(
													"validation_hierarchique_courrier_arrive")
											.get(0);

									// XTE : Insertion dans table
									// Transaction-----------------------------------------------------------------------------------------

									for (int i = 0; i < vb
											.getCopyListSelectedPerson().size(); i++) {
										result = result
												+ vb.getCopyListSelectedPerson()
														.get(i).getCn() + " / ";

										// XTE : insertion dans la table
										// Transaction------------------------------------------------------------------------------------------
										copyNouvelleTransaction = new Transaction();

										copyNouvelleTransaction
												.setExpdest(nouvelleTransaction
														.getExpdest());
										copyNouvelleTransaction
												.setIdUtilisateur(nouvelleTransaction
														.getIdUtilisateur());
										copyNouvelleTransaction
												.setDossier(nouvelleTransaction
														.getDossier());
										copyNouvelleTransaction
												.setTransactionDateTransaction(nouvelleTransaction
														.getTransactionDateTransaction());
										copyNouvelleTransaction
												.setTransactionDateReponse(nouvelleTransaction
														.getTransactionDateReponse());
										copyNouvelleTransaction
												.setTransactionCommentaire(nouvelleTransaction
														.getTransactionCommentaire());
										copyNouvelleTransaction
												.setTransactionSupprimer(nouvelleTransaction
														.getTransactionSupprimer());

										copyNouvelleTransaction
												.setTransactionIdIntervenant(nouvelleTransaction
														.getTransactionIdIntervenant());
										copyNouvelleTransaction
												.setTransactionTypeIntervenant(nouvelleTransaction
														.getTransactionTypeIntervenant());

										typetransaction = appMgr
												.getTypeTransactionByLibelle(
														"Envoi").get(0);
										copyNouvelleTransaction
												.setTypetransaction(typetransaction);
									
										copyNouvelleTransaction
												.setTransactionFirst(copyNouvelleTransaction
														.getTransactionId());
										copyNouvelleTransaction
												.setTransactionOrdre(1);
								

										if (vb.getPerson().isBoc()) {
											etat = appMgr.listEtatByLibelle(
													"Traité").get(0);
											copyNouvelleTransaction
													.setEtat(etat);
										} else {
											etat = appMgr.listEtatByLibelle(
													"Simple").get(0);
											copyNouvelleTransaction
													.setEtat(etat);
										}

										appMgr.insert(copyNouvelleTransaction);
										// XTE: Fin insertion dans la table
										// Transaction---------------------------------------------------------------------------------------

										copyNouvelleTransaction
												.setTransactionFirst(copyNouvelleTransaction
														.getTransactionId());

									
										// -----------------------------------------------------------------------------
										Calendar calendar2 = Calendar
												.getInstance();

										calendar2.setTime(courrier
												.getCourrierDateReception());

										int annee = calendar2
												.get(Calendar.YEAR);

										copyNouvelleTransaction
												.setCourrierReferenceCorrespondant(courrier
														.getCourrierReferenceCorrespondant());

										// Ajout Date Reception Annee
										//copyNouvelleTransaction
										//		.setCourrierType("I");
										copyNouvelleTransaction
												.setCourrierType(courrier
														.getCourrierType());		
										calendar2.setTime(dateCourrier);
										copyNouvelleTransaction
												.setCourrierDateReceptionAnnee(calendar
														.get(Calendar.YEAR));
										copyNouvelleTransaction
												.setCourrierTypeOrdre(courrier
														.getCourrierTypeOrdre());

										copyNouvelleTransaction
												.setCourrierReferenceCorrespondant(courrier
														.getCourrierReferenceCorrespondant());

										appMgr.update(copyNouvelleTransaction);
										vb.setTransaction(copyNouvelleTransaction);
										vb.setTransactionDestination(trDest);

										// XTE : Insertion dans la table
										// Annotation-------------------------------------------------------------------------------------------
										if (chooseAnnotationType.equals("tous")) {
											// XTE : insertion de la liste des
											// annotations
											// selectionnées--------------------------------------------------------------------------
											for (int j = 0; j < resultatAnnotation
													.size(); j++) {
												courrierIdAnnotation
														.setIdAnnotation(Integer
																.valueOf(resultatAnnotation
																		.get(j)));
																		
												courrierIdAnnotation
														.setIdTransaction(vb
																.getTransaction()
																.getTransactionId());
												courrierAnnotation
														.setId(courrierIdAnnotation);
												appMgr.insert(courrierAnnotation);

												courrierAnnotation = new TransactionAnnotation();
												courrierIdAnnotation = new TransactionAnnotationId();
											}
										} else {

											// XTE : L'annotation de id=10-->
											// "pour copie"
											courrierIdAnnotation
													.setIdAnnotation(10);
											courrierIdAnnotation.setIdTransaction(vb
															.getTransaction()
															.getTransactionId());
											courrierAnnotation
													.setId(courrierIdAnnotation);
											appMgr.insert(courrierAnnotation);

											courrierAnnotation = new TransactionAnnotation();
											courrierIdAnnotation = new TransactionAnnotationId();
										}
										// ======KHA===========

										// XTE:Validation hierarchique
										// Interne-Interne
										// Interne :
										// Person----------------------------------------------------------------------------------------
										// validation hierarchique par nature
										// courrier est vrai
										// ====== Si validation Sortante est
										// Vrai
										// ==================================

										if (variableValidationHierarchiqueSortant
												.getVaraiablesValeur().equals(
														"Oui")
												&& (variable
														.getVaraiablesValeur())
														.toLowerCase().equals(
																"oui")
												&& courrier.getNature()
														.getNatureValide()
														.booleanValue() == true) {

											expdest = new Expdest();

											id = new TransactionDestinationId();
											trDest = new TransactionDestination();

											id.setIdTransaction(vb
													.getTransaction()
													.getTransactionId());

											// XTE : expediteur Agent person
											// Secretaire responsable ou l'unite
											// superieur n'est pas le
											// BO==============================================================================
											// -----------------------------------------------------------------------------------------------------------------------------------

											if (connectedPerson.isAgent()
													|| connectedPerson
															.isSecretary()
													|| (connectedPerson
															.isResponsable() && connectedPerson
															.getAssociatedDirection()
															.getAssociatedUnit() != null)) {

												expdest.setTypeExpDest("Interne-Person");

												if (connectedPerson.isAgent()
														&& (connectedPerson
																.getAssociatedBOC() == null)
														|| connectedPerson
																.isSecretary()) {
												
													expdest.setTypeExpDest("Interne-Person");
													expdest.setIdExpDestLdap(connectedPerson
															.getAssociatedDirection()
															.getResponsibleUnit()
															.getId());
													appMgr.insert(expdest);
													trDest.setTransactionDestIdIntervenant(connectedPerson
															.getAssociatedDirection()
															.getResponsibleUnit()
															.getId());
													trDest.setTransactionDestTypeIntervenant("sub_"
															+ String.valueOf(connectedPerson

																	.getAssociatedDirection()
																	.getResponsibleUnit()
																	.getId()));
												} else {
												
													if (connectedPerson
															.getAssociatedDirection()
															.getAssociatedUnit()
															.getResponsibleUnit() != null) {
														
														expdest.setIdExpDestLdap(connectedPerson
																.getAssociatedDirection()
																.getAssociatedUnit()
																.getResponsibleUnit()
																.getId());
														appMgr.insert(expdest);
														trDest.setTransactionDestIdIntervenant(connectedPerson
																.getAssociatedDirection()
																.getAssociatedUnit()
																.getResponsibleUnit()
																.getId());
														trDest.setTransactionDestTypeIntervenant("sub_"
																+ String.valueOf(connectedPerson

																		.getAssociatedDirection()
																		.getAssociatedUnit()
																		.getResponsibleUnit()
																		.getId()));
													}
												}

												// =============== > le courrier
												// necessite validation
												// XTE : Insertion dans la table
												// TransactionDestinationReelle-------------------------------------------------------------------------

												TransactionDestinationReelle trDestinationReelle = new TransactionDestinationReelle();
												trDestinationReelle
														.setTransactionDestinationReelleIdDestinataire(vb
																.getCopyListSelectedPerson()
																.get(i).getId());
												trDestinationReelle
														.setTransactionDestinationReelleTypeDestinataire("Interne-Person");
												appMgr.insert(trDestinationReelle);
												// XTE : Fin d'insertion dans la
												// table
												// TransactionDestinationReelle-------------------------------------------------------------------
												copyNouvelleTransaction
														.setTransactionDestinationReelle(trDestinationReelle);
												appMgr.update(copyNouvelleTransaction);

												etat = appMgr
														.listEtatByLibelle(
																"A valider")
														.get(0);
												copyNouvelleTransaction
														.setEtat(etat);
												appMgr.update(copyNouvelleTransaction);
											}
											// ===============> le courrier
											// necessite validation

											// XTE : expd person
											// Responsable ou l'unité sup est le
											// BO============================================================================
											// -----------------------------------------------------------------------------------------------------------------------------------
											if (connectedPerson.isResponsable()
													&& connectedPerson
															.getAssociatedDirection()
															.getAssociatedUnit() == null) {

												
												if (passageParBO.equals("Oui")) {

													

													expdest.setTypeExpDest("Interne-Boc");
													expdest.setIdExpDestLdap(connectedPerson
															.getAssociatedDirection()
															.getAssociatedBOC()
															.getIdBOC());
													appMgr.insert(expdest);
													trDest.setTransactionDestIdIntervenant(connectedPerson
															.getAssociatedDirection()
															.getAssociatedBOC()
															.getIdBOC());
												
													trDest.setTransactionDestTypeIntervenant("boc_"
															+ String.valueOf(connectedPerson
																	.getAssociatedDirection()
																	.getAssociatedBOC()
																	.getIdBOC()));

													// Le courrier à executer
													// ============ JS

													etat = appMgr
															.listEtatByLibelle(
																	"Non traité")
															.get(0);
													copyNouvelleTransaction
															.setEtat(etat);
													appMgr.update(copyNouvelleTransaction);
													vb.setTransaction(copyNouvelleTransaction);
													vb.setTransactionDestination(trDest);

													// JS : insertion dans la
													// table
													// Transaction Destinataire
													// Reelle------------------------------------------------------------------------------------------

													transactionDestinationReelle = new TransactionDestinationReelle();
												

													// set Id de la destinataire
													// Réelle
													transactionDestinationReelle
															.setTransactionDestinationReelleIdDestinataire(vb
																	.getCopyListSelectedPerson()
																	.get(i)
																	.getId());

													// [JS] Distinataire =lise
													// des
													// personnes
													transactionDestinationReelle
															.setTransactionDestinationReelleTypeDestinataire("Interne-Person");
													appMgr.insert(transactionDestinationReelle);

													// JS : Fin insertion dans
													// la
													// table
													// Transaction Destinataire
													// Reelle---------------------------------------------------------------------------------

													copyNouvelleTransaction
															.setTransactionDestinationReelle(transactionDestinationReelle);
													appMgr.update(copyNouvelleTransaction);

													// JS : Fin insertion
													// Transaction----------------------------------------------------------------------------------------------------

													// ====================================

												} else {
													

													if (variableValidationHierarchiqueArrivee
															.getVaraiablesValeur()
															.equals("Oui")) {
													

														expdest.setTypeExpDest("Interne-Person");
														int idUserDest = vb
																.getCopyListSelectedPerson()
																.get(i).getId();

														// recuperer 1ere
														// direction
														// sous BO destinataire

														getIdBocByUnit(getIdPersonbyId(
																idUserDest)
																.getAssociatedDirection());

													

														expdest.setIdExpDestLdap(unitSup
																.getResponsibleUnit()
																.getId());

														appMgr.insert(expdest);
													
														trDest.setTransactionDestIdIntervenant(unitSup
																.getResponsibleUnit()
																.getId());
												
														trDest.setTransactionDestTypeIntervenant("sub_"
																+ String.valueOf(unitSup
																		.getResponsibleUnit()
																		.getId()));

														// =============== > le
														// courrier necessite
														// validation
														// XTE : Insertion dans
														// la
														// table
														// TransactionDestinationReelle-------------------------------------------------------------------------

														TransactionDestinationReelle trDestinationReelle = new TransactionDestinationReelle();
														trDestinationReelle
																.setTransactionDestinationReelleIdDestinataire(vb
																		.getCopyListSelectedPerson()
																		.get(i)
																		.getId());
														trDestinationReelle
																.setTransactionDestinationReelleTypeDestinataire("Interne-Person");
														appMgr.insert(trDestinationReelle);
														// XTE : Fin d'insertion
														// dans la table
														// TransactionDestinationReelle-------------------------------------------------------------------
														copyNouvelleTransaction
																.setTransactionDestinationReelle(trDestinationReelle);
														appMgr.update(copyNouvelleTransaction);

														if (vb.getCopyListSelectedPerson()
																.get(i).getId() == expdest
																.getIdExpDestLdap()) {
															etat = appMgr
																	.listEtatByLibelle(
																			"Validé")
																	.get(0);
														} else {
															etat = appMgr
																	.listEtatByLibelle(
																			"A valider")
																	.get(0);
														}
														copyNouvelleTransaction
																.setEtat(etat);
														appMgr.update(copyNouvelleTransaction);

													} else {

													

														expdest.setTypeExpDest("Interne-Person");
														expdest.setIdExpDestLdap(vb
																.getCopyListSelectedPerson()
																.get(i).getId());
														appMgr.insert(expdest);
														if (vb.getCopyListSelectedPerson()
																.get(i)
																.isResponsable()) {
															System.out
																	.println("DANS destin   responsable");
															trDest.setTransactionDestTypeIntervenant("sub_"
																	+ String.valueOf(vb
																			.getCopyListSelectedPerson()
																			.get(i)
																			.getId()));
															if (vb.getCopyListSelectedPerson()
																	.get(i)
																	.getAssociatedDirection()
																	.getAssociatedUnit() != null) {
																trDest.setTransactionDestIdIntervenant(vb
																		.getCopyListSelectedPerson()
																		.get(i)
																		.getAssociatedDirection()
																		.getAssociatedUnit()
																		.getResponsibleUnit()
																		.getId());

															}
														}

														else if (vb
																.getCopyListSelectedPerson()
																.get(i)
																.isSecretary()) {
															trDest.setTransactionDestTypeIntervenant("secretary_"
																	+ String.valueOf(vb
																			.getCopyListSelectedPerson()
																			.get(i)
																			.getId()));
															trDest.setTransactionDestIdIntervenant(vb
																	.getCopyListSelectedPerson()
																	.get(i)
																	.getAssociatedDirection()
																	.getResponsibleUnit()
																	.getId());
														}

														else {
															trDest.setTransactionDestTypeIntervenant("agent_"
																	+ String.valueOf(vb
																			.getCopyListSelectedPerson()
																			.get(i)
																			.getId()));
															if (vb.getCopyListSelectedPerson()
																	.get(i)
																	.getAssociatedDirection() != null) {

																trDest.setTransactionDestIdIntervenant(vb
																		.getCopyListSelectedPerson()
																		.get(i)
																		.getAssociatedDirection()
																		.getResponsibleUnit()
																		.getId());
															}
														}

													}

												}

												// }

											}

											if (necessiteReponse.equals("Oui")) {
												trDest.setTransactionDestDateReponse(courrier
														.getCourrierDateReponse());
											}
											if (necessiteReceptionPhysique != null
													&& necessiteReceptionPhysique
															.equals("Oui")) {
												trDest.setTransactionDestEtatReceptionPhysique(etatReceptionPhysique);
											}
											id.setIdExpDest(expdest
													.getIdExpDest());
											trDest.setId(id);
											appMgr.insert(trDest);
											vb.setTransactionDestination(trDest);

										
										}

										if (variableValidationHierarchiqueSortant
												.getVaraiablesValeur().equals(
														"Non")
												|| (variableValidationHierarchiqueSortant
														.getVaraiablesValeur()
														.equals("Oui") && (variable
														.getVaraiablesValeur()
														.equals("Non") || courrier
														.getNature()
														.getNatureValide()
														.booleanValue() == false))) {
											
											// XTE : Insertion dans table
											// TransactionDest-----------------------------------------------------------------------------------------

											expdest = new Expdest();
											id = new TransactionDestinationId();
											trDest = new TransactionDestination();

											
											
											if (passageParBO.equals("Oui")) {
												

												expdest.setTypeExpDest("Interne-Boc");
											
												
												expdest.setIdExpDestLdap(idBoc);
												appMgr.insert(expdest);
												
												trDest.setTransactionDestTypeIntervenant("boc_"
														+ String.valueOf(idBoc));
												trDest.setTransactionDestIdIntervenant(idBoc);

												// ========= le courrier à
												// executer
												// =========
												// a ajouter par JS

												// ============ JS

												etat = appMgr
														.listEtatByLibelle(
																"Non traité")
														.get(0);
												copyNouvelleTransaction
														.setEtat(etat);
												appMgr.update(copyNouvelleTransaction);
												vb.setTransaction(copyNouvelleTransaction);
												vb.setTransactionDestination(trDest);

												// JS : insertion dans la table
												// Transaction Destinataire
												// Reelle------------------------------------------------------------------------------------------

												transactionDestinationReelle = new TransactionDestinationReelle();
												

												// set Id de la destinataire
												// Réelle
												transactionDestinationReelle
														.setTransactionDestinationReelleIdDestinataire(vb
																.getCopyListSelectedPerson()
																.get(i).getId());

												// [JS] Distinataire =lise des
												// personnes
												transactionDestinationReelle
														.setTransactionDestinationReelleTypeDestinataire("Interne-Person");
												appMgr.insert(transactionDestinationReelle);

												// JS : Fin insertion dans la
												// table
												// Transaction Destinataire
												// Reelle---------------------------------------------------------------------------------

												copyNouvelleTransaction
														.setTransactionDestinationReelle(transactionDestinationReelle);
												appMgr.update(copyNouvelleTransaction);

												// JS : Fin insertion
												// Transaction----------------------------------------------------------------------------------------------------
												// ===========================================

											} else {
												
												if (variableValidationHierarchiqueArrivee
														.getVaraiablesValeur()
														.equals("Oui")
														&& (((variable
																.getVaraiablesValeur())
																.toLowerCase()
																.equals("oui") && courrier
																.getNature()
																.getNatureValide()
																.booleanValue() == true))) {
													
													expdest.setTypeExpDest("Interne-Person");
													int idUserDest = vb
															.getCopyListSelectedPerson()
															.get(i).getId();

													// recuperer 1ere direction
													// sous
													// BO destinataire

													getIdBocByUnit(getIdPersonbyId(
															idUserDest)
															.getAssociatedDirection());

													

													expdest.setIdExpDestLdap(unitSup
															.getResponsibleUnit()
															.getId());

													appMgr.insert(expdest);
													
													trDest.setTransactionDestIdIntervenant(unitSup
															.getResponsibleUnit()
															.getId());
												
													trDest.setTransactionDestTypeIntervenant("sub_"
															+ String.valueOf(unitSup
																	.getResponsibleUnit()
																	.getId()));

													// =============== > le
													// courrier
													// necessite validation
													// XTE : Insertion dans la
													// table
													// TransactionDestinationReelle-------------------------------------------------------------------------

													TransactionDestinationReelle trDestinationReelle = new TransactionDestinationReelle();
													trDestinationReelle
															.setTransactionDestinationReelleIdDestinataire(vb
																	.getCopyListSelectedPerson()
																	.get(i)
																	.getId());
													trDestinationReelle
															.setTransactionDestinationReelleTypeDestinataire("Interne-Person");
													appMgr.insert(trDestinationReelle);
													// XTE : Fin d'insertion
													// dans la
													// table
													// TransactionDestinationReelle-------------------------------------------------------------------
													copyNouvelleTransaction
															.setTransactionDestinationReelle(trDestinationReelle);
													appMgr.update(copyNouvelleTransaction);

													if (vb.getCopyListSelectedPerson()
															.get(i).getId() == expdest
															.getIdExpDestLdap()) {
														etat = appMgr
																.listEtatByLibelle(
																		"Validé")
																.get(0);
													} else {
														etat = appMgr
																.listEtatByLibelle(
																		"A valider")
																.get(0);
													}
													copyNouvelleTransaction
															.setEtat(etat);
													appMgr.update(copyNouvelleTransaction);

													
												} else {


													expdest.setTypeExpDest("Interne-Person");
													expdest.setIdExpDestLdap(vb
															.getCopyListSelectedPerson()
															.get(i).getId());
													appMgr.insert(expdest);
													if (vb.getCopyListSelectedPerson()
															.get(i)
															.isResponsable()) {
														
														trDest.setTransactionDestTypeIntervenant("sub_"
																+ String.valueOf(vb
																		.getCopyListSelectedPerson()
																		.get(i)
																		.getId()));
														if (vb.getCopyListSelectedPerson()
																.get(i)
																.getAssociatedDirection()
																.getAssociatedUnit() != null) {
															trDest.setTransactionDestIdIntervenant(vb
																	.getCopyListSelectedPerson()
																	.get(i)
																	.getAssociatedDirection()
																	.getAssociatedUnit()
																	.getResponsibleUnit()
																	.getId());

														}
													}

													else if (vb
															.getCopyListSelectedPerson()
															.get(i)
															.isSecretary()) {
														trDest.setTransactionDestTypeIntervenant("secretary_"
																+ String.valueOf(vb
																		.getCopyListSelectedPerson()
																		.get(i)
																		.getId()));
														trDest.setTransactionDestIdIntervenant(vb
																.getCopyListSelectedPerson()
																.get(i)
																.getAssociatedDirection()
																.getResponsibleUnit()
																.getId());
													}

													else {
														trDest.setTransactionDestTypeIntervenant("agent_"
																+ String.valueOf(vb
																		.getCopyListSelectedPerson()
																		.get(i)
																		.getId()));
														if (vb.getCopyListSelectedPerson()
																.get(i)
																.getAssociatedDirection() != null) {

															trDest.setTransactionDestIdIntervenant(vb
																	.getCopyListSelectedPerson()
																	.get(i)
																	.getAssociatedDirection()
																	.getResponsibleUnit()
																	.getId());
														}
													}
													System.out
															.println("KHA ============>2.2.2 arrivee Non FIN");
												}
												System.out
														.println("KHA ===========> 2.2 sans passageParBO FIN");

											}
											id.setIdTransaction(vb
													.getTransaction()
													.getTransactionId());
											id.setIdExpDest(expdest
													.getIdExpDest());
											trDest.setId(id);
											System.out
													.println("dest person : id exp"
															+ expdest
																	.getIdExpDest());
											System.out
													.println("dest person : id trdest"
															+ trDest.getId()
																	.getIdTransaction());

											if (necessiteReponse.equals("Oui")) {
												trDest.setTransactionDestDateReponse(courrier
														.getCourrierDateReponse());
											}
											if (necessiteReceptionPhysique != null
													&& necessiteReceptionPhysique
															.equals("Oui")) {
												trDest.setTransactionDestEtatReceptionPhysique(etatReceptionPhysique);
											}
											appMgr.insert(trDest);
											vb.setTransactionDestination(trDest);

											// XTE : Insertion dans table
											// TransactionDest
											// fin-----------------------------------------------------------------------------------------
											System.out
													.println("KHA ===========> 2 validation hierarchique SORTANT :NON FINNNNNN");

											// ========================= y'as
											// pas de
											// validation hierarchique
											// ============================

										} else if (variableValidationHierarchiqueSortant
												.getVaraiablesValeur().equals(
														"Non")
												&& variableValidationHierarchiqueArrivee
														.getVaraiablesValeur()
														.equals("Non")) {
											System.out
													.println("y'as pas de validation hierarchique ");

											expdest = new Expdest();
											id = new TransactionDestinationId();
											trDest = new TransactionDestination();

											// ==========recupérer boc
											// expéditeur

											getIdBocByUnit(getIdPersonbyId(
													vb.getPerson().getId())
													.getAssociatedDirection());

											// ========== Fin
											System.out.println("Ligne : 2761");
											if (passageParBO.equals("Oui")) {
												System.out
														.println("insertion Expdest ===========================> 5 ");

												expdest.setTypeExpDest("Interne-Boc");
												System.out
														.println("passage par BO : ");
												System.out.println("idBoc 2= "
														+ idBoc);
												expdest.setIdExpDestLdap(idBoc);
												appMgr.insert(expdest);
												System.out.println("### 3 ###");
												trDest.setTransactionDestTypeIntervenant("boc_"
														+ String.valueOf(idBoc));
												trDest.setTransactionDestIdIntervenant(idBoc);
												// ======> Courrier à executer
												// a ajouter par JS

												// ============ JS

												etat = appMgr
														.listEtatByLibelle(
																"Non traité")
														.get(0);
												copyNouvelleTransaction
														.setEtat(etat);
												appMgr.update(copyNouvelleTransaction);
												vb.setTransaction(copyNouvelleTransaction);
												vb.setTransactionDestination(trDest);

												// JS : insertion dans la table
												// Transaction Destinataire
												// Reelle------------------------------------------------------------------------------------------

												transactionDestinationReelle = new TransactionDestinationReelle();
												System.out
														.println("Id Selected Person :"
																+ vb.getCopyListSelectedPerson()
																		.get(i)
																		.getId());

												// set Id de la destinataire
												// Réelle
												transactionDestinationReelle
														.setTransactionDestinationReelleIdDestinataire(vb
																.getCopyListSelectedPerson()
																.get(i).getId());

												// [JS] Distinataire =lise des
												// personnes
												transactionDestinationReelle
														.setTransactionDestinationReelleTypeDestinataire("Interne-Person");
												appMgr.insert(transactionDestinationReelle);

												// JS : Fin insertion dans la
												// table
												// Transaction Destinataire
												// Reelle---------------------------------------------------------------------------------

												copyNouvelleTransaction
														.setTransactionDestinationReelle(transactionDestinationReelle);
												appMgr.update(copyNouvelleTransaction);

												// JS : Fin insertion
												// Transaction----------------------------------------------------------------------------------------------------

											} else {
												System.out
														.println(" SANS PASSAGE PAR BO ");
												expdest.setTypeExpDest("Interne-Person");
												expdest.setIdExpDestLdap(vb
														.getCopyListSelectedPerson()
														.get(i).getId());
												appMgr.insert(expdest);
												if (vb.getCopyListSelectedPerson()
														.get(i).isResponsable()) {
													System.out
															.println("DANS destin  responsable");
													trDest.setTransactionDestTypeIntervenant("sub_"
															+ String.valueOf(vb
																	.getCopyListSelectedPerson()
																	.get(i)
																	.getId()));
													if (vb.getCopyListSelectedPerson()
															.get(i)
															.getAssociatedDirection()
															.getAssociatedUnit() != null) {
														trDest.setTransactionDestIdIntervenant(vb
																.getCopyListSelectedPerson()
																.get(i)
																.getAssociatedDirection()
																.getAssociatedUnit()
																.getResponsibleUnit()
																.getId());

													}
												}

												else if (vb
														.getCopyListSelectedPerson()
														.get(i).isSecretary()) {
													trDest.setTransactionDestTypeIntervenant("secretary_"
															+ String.valueOf(vb
																	.getCopyListSelectedPerson()
																	.get(i)
																	.getId()));
													trDest.setTransactionDestIdIntervenant(vb
															.getCopyListSelectedPerson()
															.get(i)
															.getAssociatedDirection()
															.getResponsibleUnit()
															.getId());
												}

												else {
													trDest.setTransactionDestTypeIntervenant("agent_"
															+ String.valueOf(vb
																	.getCopyListSelectedPerson()
																	.get(i)
																	.getId()));
													if (vb.getCopyListSelectedPerson()
															.get(i)
															.getAssociatedDirection() != null) {

														trDest.setTransactionDestIdIntervenant(vb
																.getCopyListSelectedPerson()
																.get(i)
																.getAssociatedDirection()
																.getResponsibleUnit()
																.getId());
													}
												}

												// XTE : Fin de l'insertion dans
												// la
												// table
												// TransactionDestination----------------------------------------------------------------------

											}

											// insertion dans la table
											// transaction
											// dest

											id.setIdTransaction(vb
													.getTransaction()
													.getTransactionId());
											id.setIdExpDest(expdest
													.getIdExpDest());
											trDest.setId(id);
											System.out
													.println("dest person : id exp"
															+ expdest
																	.getIdExpDest());
											System.out
													.println("dest person : id trdest"
															+ trDest.getId()
																	.getIdTransaction());

											if (necessiteReponse.equals("Oui")) {
												trDest.setTransactionDestDateReponse(courrier
														.getCourrierDateReponse());
											}
											if (necessiteReceptionPhysique != null
													&& necessiteReceptionPhysique
															.equals("Oui")) {
												trDest.setTransactionDestEtatReceptionPhysique(etatReceptionPhysique);
											}
											appMgr.insert(trDest);

											System.out
													.println("y'as pas de validation hierarchique FINNNNN ");

										}

									}
									
								}
								// XTE : 1.1.2/ User Connecte est Différent de
								// Person (Agent / Responsable/
								// Secrétaire)===============================================
								// -----------------------------------------------------------------------------------------------------------------------------------
								else {

									System.out
											.println(" Destinataire Person: BOC CONNECTEE");

									// ==============================

									for (int i = 0; i < vb
											.getCopyListSelectedPerson().size(); i++) {
										// XTE : insertion dans la table
										// Transaction------------------------------------------------------------------------------------------
										copyNouvelleTransaction = new Transaction();
										copyNouvelleTransaction
												.setExpdest(nouvelleTransaction
														.getExpdest());
										copyNouvelleTransaction
												.setIdUtilisateur(nouvelleTransaction
														.getIdUtilisateur());
										copyNouvelleTransaction
												.setDossier(nouvelleTransaction
														.getDossier());
										copyNouvelleTransaction
												.setTransactionDateTransaction(nouvelleTransaction
														.getTransactionDateTransaction());
										copyNouvelleTransaction
												.setTransactionDateReponse(nouvelleTransaction
														.getTransactionDateReponse());
										copyNouvelleTransaction
												.setTransactionCommentaire(nouvelleTransaction
														.getTransactionCommentaire());
										copyNouvelleTransaction
												.setTransactionSupprimer(nouvelleTransaction
														.getTransactionSupprimer());

										copyNouvelleTransaction
												.setTransactionIdIntervenant(nouvelleTransaction
														.getTransactionIdIntervenant());
										copyNouvelleTransaction
												.setTransactionTypeIntervenant(nouvelleTransaction
														.getTransactionTypeIntervenant());

										typetransaction = appMgr
												.getTypeTransactionByLibelle(
														"Envoi").get(0);
										copyNouvelleTransaction
												.setTypetransaction(typetransaction);
										copyNouvelleTransaction
												.setTransactionOrdre(1);
										if (vb.getPerson().isBoc()) {
											etat = appMgr.listEtatByLibelle(
													"Traité").get(0);
											copyNouvelleTransaction
													.setEtat(etat);
										} else {
											etat = appMgr.listEtatByRef(1).get(
													0);
											copyNouvelleTransaction
													.setEtat(etat);
										}
										
										appMgr.insert(copyNouvelleTransaction);

										// XTE: Fin insertion dans la table
										// Transaction--------------------------------------------------------------------------------------
										copyNouvelleTransaction
												.setTransactionFirst(copyNouvelleTransaction
														.getTransactionId());

										copyNouvelleTransaction
												.setCourrierReferenceCorrespondant(courrier
														.getCourrierReferenceCorrespondant());
										copyNouvelleTransaction
												.setCourrierType(courrier
														.getCourrierType());
										copyNouvelleTransaction
												.setCourrierTypeOrdre(courrier
														.getCourrierTypeOrdre());
										copyNouvelleTransaction
												.setCourrierDateReceptionAnnee(courrier
														.getCourrierOldDateOper());

										appMgr.update(copyNouvelleTransaction);
										vb.setTransaction(copyNouvelleTransaction);
										vb.setTransactionDestination(trDest);
										chooseAnnotationType="";
										otherAnnotation="";
										System.out
												.println("AH : l'insertion de la liste des annotations du destinaitre "
														+ i);	
										List<String> listAnnotationParDest = new ArrayList<String>();
										//chooseAnnotationType = "tous";
										//otherAnnotation = "";
										for (ListeDestinatairesModel dest : destinataires) {
											if (dest.getDestinataireId() == vb
													.getCopyListSelectedPerson()
													.get(i).getId()) {
												listAnnotationParDest = dest
														.getListeAnnotations();
												chooseAnnotationType = dest
														.getChooseAnnotationType();
												otherAnnotation = dest
														.getOtherAnnotation();
												break;
											}
										}
										// Parcourir la liste des Annotation de
										// destinataire en cours

										// XTE : Insertion des
										// annotations----------------------------------------------------------------------------------------------------
										if (chooseAnnotationType != null
												&& chooseAnnotationType
														.equals("tous")) {

											for (int j = 0; listAnnotationParDest != null
													&& j < listAnnotationParDest
															.size(); j++) {

												courrierIdAnnotation
														.setIdAnnotation(Integer
																.valueOf(listAnnotationParDest
																		.get(j)));
												courrierIdAnnotation
														.setIdTransaction(vb
																.getTransaction()
																.getTransactionId());
												courrierAnnotation
														.setId(courrierIdAnnotation);
												appMgr.insert(courrierAnnotation);
												courrierAnnotation = new TransactionAnnotation();
												courrierIdAnnotation = new TransactionAnnotationId();
											}
										} else if (chooseAnnotationType != null
												&& chooseAnnotationType
														.equals("autre")) {

											courrierIdAnnotation
													.setIdAnnotation(10);
											courrierIdAnnotation
													.setIdTransaction(vb
															.getTransaction()
															.getTransactionId());
											courrierAnnotation
													.setId(courrierIdAnnotation);
											appMgr.insert(courrierAnnotation);
											copyNouvelleTransaction
													.setTransactionCommentaireAnnotation(otherAnnotation);
											appMgr.update(copyNouvelleTransaction);
											courrierAnnotation = new TransactionAnnotation();
											courrierIdAnnotation = new TransactionAnnotationId();
										}

										// Validation Hiérarchique Sortante
										// Oui=============================
										// BOC connectee
										// =================================================================
										expdest = new Expdest();
										id = new TransactionDestinationId();
										trDest = new TransactionDestination();

										id.setIdTransaction(vb.getTransaction()
												.getTransactionId());

										// Expediteur de Type
										// Personne
										// ==================================================
										// Debut-----------------------------------------------------------
										Person connectedPerson1 = vb
												.getPerson();
										if (vb.getCopyListSelectedObjectExp()
												.get(0) instanceof Person) {
											Person personExp = (Person) vb
													.getCopyListSelectedObjectExp()
													.get(0);

											// KHA : A executer directement par
											// le
											// BO============================================================================
											// -----------------------------------------------------------------------------------------------------------------------------------

											System.out
													.println("KHA =====> CONNECTEE boc ");

											// ====Courrier necessite Execution
											// par
											// le BO

											getIdBocByUnit(getIdPersonbyId(
													personExp.getId())
													.getAssociatedDirection());

											System.out
													.println("connectedPerson1 : "
															+ connectedPerson1);
											System.out
													.println("insertion Expdest ===========================> 6 ");

											expdest.setTypeExpDest("Interne-Boc");
											System.out
													.println("passage par BO : ");
											System.out.println("idBoc 3= "
													+ idBoc);
											System.out.println("Corrigé : "
													+ connectedPerson1
															.getAssociatedBOC()
															.getIdBOC());
											// Modifier le 2019-08-10 id BOc :
											// cas 07
											expdest.setIdExpDestLdap(connectedPerson1
													.getAssociatedBOC()
													.getIdBOC());
											appMgr.insert(expdest);
											System.out.println("### 4 ###");
											trDest.setTransactionDestTypeIntervenant("boc_"
													+ String.valueOf(connectedPerson1
															.getAssociatedBOC()
															.getIdBOC()));
											trDest.setTransactionDestIdIntervenant(connectedPerson1
													.getAssociatedBOC()
													.getIdBOC());
											// ============ JS

											etat = appMgr.listEtatByLibelle(
													"Non traité").get(0);
											copyNouvelleTransaction
													.setEtat(etat);
											appMgr.update(copyNouvelleTransaction);
											vb.setTransaction(copyNouvelleTransaction);
											vb.setTransactionDestination(trDest);

										}
										// Expediteur de Type
										// Personne
										// =========================================
										// Fin--------------------------------------------------------------

										// Expediteur de Type
										// Unitee
										// ============================================
										// Debut----------------------------------------------------

										else if (vb
												.getCopyListSelectedObjectExp()
												.get(0) instanceof Unit) {
											Unit unitExpd = (Unit) vb
													.getCopyListSelectedObjectExp()
													.get(0);

											
											getIdBocByUnit(unitExpd);
											
											expdest.setTypeExpDest("Interne-Boc");
											
											expdest.setIdExpDestLdap(connectedPerson1
													.getAssociatedBOC()
													.getIdBOC());
											appMgr.insert(expdest);
										
											trDest.setTransactionDestTypeIntervenant("boc_"
													+ String.valueOf(connectedPerson1
															.getAssociatedBOC()
															.getIdBOC()));
											trDest.setTransactionDestIdIntervenant(connectedPerson1
													.getAssociatedBOC()
													.getIdBOC());
											// ============ JS

											etat = appMgr.listEtatByLibelle(
													"Non traité").get(0);
											copyNouvelleTransaction
													.setEtat(etat);
											appMgr.update(copyNouvelleTransaction);
											vb.setTransaction(copyNouvelleTransaction);
											vb.setTransactionDestination(trDest);

										}
										if (vb.getCopyListSelectedObjectExp()
												.get(0) instanceof Pp
												|| vb.getCopyListSelectedObjectExp()
														.get(0) instanceof Pm) {
											

											getIdBocByUnit(vb
													.getCopyListSelectedPerson()
													.get(i)
													.getAssociatedDirection());
											

											expdest.setTypeExpDest("Interne-Boc");
										
											expdest.setIdExpDestLdap(idBoc);
											appMgr.insert(expdest);
											
											trDest.setTransactionDestTypeIntervenant("boc_"
													+ String.valueOf(idBoc));
											trDest.setTransactionDestIdIntervenant(idBoc);
											// ============ JS

											etat = appMgr.listEtatByLibelle(
													"Non traité").get(0);
											copyNouvelleTransaction
													.setEtat(etat);
											copyNouvelleTransaction
													.setTransactionTypeIntervenant("boc_"
															+ String.valueOf(idBoc));
											copyNouvelleTransaction
													.setTransactionIdIntervenant(vb
															.getPerson()
															.getId());
											appMgr.update(copyNouvelleTransaction);
											vb.setTransaction(copyNouvelleTransaction);
											vb.setTransactionDestination(trDest);

										}

										// Expediteur de type
										// Unitee
										// ============================================
										// Fin-------------------------------------------------------------------
										if (necessiteReponse.equals("Oui")) {
											trDest.setTransactionDestDateReponse(courrier
													.getCourrierDateReponse());
										}
										if (necessiteReceptionPhysique != null
												&& necessiteReceptionPhysique
														.equals("Oui")) {
											trDest.setTransactionDestEtatReceptionPhysique(etatReceptionPhysique);
										}

										id.setIdExpDest(expdest.getIdExpDest());
										trDest.setId(id);
										appMgr.insert(trDest);
										
									
										// XTE : Insertion dans la table
										// TransactionDestinationReelle-------------------------------------------------------------------------
										TransactionDestinationReelle trDestinationReelle = new TransactionDestinationReelle();
										trDestinationReelle
												.setTransactionDestinationReelleIdDestinataire(vb
														.getCopyListSelectedPerson()
														.get(i).getId());
										trDestinationReelle
												.setTransactionDestinationReelleTypeDestinataire("Interne-Person");
										appMgr.insert(trDestinationReelle);
										// XTE : Fin d'insertion dans la table
										// TransactionDestinationReelle-------------------------------------------------------------------
										copyNouvelleTransaction
												.setTransactionDestinationReelle(trDestinationReelle);
										appMgr.update(copyNouvelleTransaction);
									}
								}
							}
							// XTE : 1.2/ User Destinataire est Unité:
							// ===========================================================================================
							// -----------------------------------------------------------------------------------------------------------------------------------
							if (!vb.getCopyListSelectedUnit().isEmpty()) {
								
								Person connectedPerson = vb.getPerson();
								

								if (!connectedPerson.isBoc()
										&& (connectedPerson.isAgent()
												|| connectedPerson
														.isResponsable() || connectedPerson
												.isSecretary())) {

									Variables variable = new Variables();
									Variables variableValidationHierarchiqueSortant = new Variables();
									Variables variableValidationHierarchiqueArrivee = new Variables();
									variable = appMgr
											.listVariablesByLibelle(
													"validation_hierarchique_courrier_nature")
											.get(0);

									variableValidationHierarchiqueSortant = appMgr
											.listVariablesByLibelle(
													"validation_hierarchique_courrier_sortant")
											.get(0);
									variableValidationHierarchiqueArrivee = appMgr
											.listVariablesByLibelle(
													"validation_hierarchique_courrier_arrive")
											.get(0);

									

									for (int i = 0; i < vb
											.getCopyListSelectedUnit().size(); i++) {

										// XTE : Insertion
										// Transaction--------------------------------------------------------------------------------------------------------
										copyNouvelleTransaction = new Transaction();
										copyNouvelleTransaction
												.setExpdest(nouvelleTransaction
														.getExpdest());
										copyNouvelleTransaction
												.setIdUtilisateur(nouvelleTransaction
														.getIdUtilisateur());
										copyNouvelleTransaction
												.setDossier(nouvelleTransaction
														.getDossier());
										copyNouvelleTransaction
												.setTransactionDateTransaction(nouvelleTransaction
														.getTransactionDateTransaction());
										copyNouvelleTransaction
												.setTransactionDateReponse(nouvelleTransaction
														.getTransactionDateReponse());
										copyNouvelleTransaction
												.setTransactionCommentaire(nouvelleTransaction
														.getTransactionCommentaire());
										copyNouvelleTransaction
												.setTransactionSupprimer(nouvelleTransaction
														.getTransactionSupprimer());

										copyNouvelleTransaction
												.setTransactionIdIntervenant(nouvelleTransaction
														.getTransactionIdIntervenant());
										copyNouvelleTransaction
												.setTransactionTypeIntervenant(nouvelleTransaction
														.getTransactionTypeIntervenant());

										copyNouvelleTransaction
												.setCourrierReferenceCorrespondant(courrier
														.getCourrierReferenceCorrespondant());
										copyNouvelleTransaction
												.setCourrierType(courrier
														.getCourrierType());
										copyNouvelleTransaction
												.setCourrierTypeOrdre(courrier
														.getCourrierTypeOrdre());
										copyNouvelleTransaction
												.setCourrierDateReceptionAnnee(courrier
														.getCourrierOldDateOper());

										typetransaction = appMgr
												.getTypeTransactionByLibelle(
														"Envoi").get(0);
										copyNouvelleTransaction
												.setTypetransaction(typetransaction);

										if (vb.getPerson().isBoc()) {
											etat = appMgr.listEtatByLibelle(
													"Traité").get(0);
											copyNouvelleTransaction
													.setEtat(etat);
										} else {
											etat = appMgr.listEtatByLibelle(
													"Simple").get(0);
											copyNouvelleTransaction
													.setEtat(etat);
										}
									
										appMgr.insert(copyNouvelleTransaction);
										// XTE : Fin d'insertion
										// Transaction--------------------------------------------------------------------------------------------------
										copyNouvelleTransaction
												.setTransactionFirst(copyNouvelleTransaction
														.getTransactionId());

										copyNouvelleTransaction
												.setTransactionOrdre(1);

										appMgr.update(copyNouvelleTransaction);

										vb.setTransaction(copyNouvelleTransaction);
										vb.setTransactionDestination(trDest);

										// AH : Récupérer l'e destinataire de
										// cette
										// transaction
										System.out
												.println("AH 1 : Récupérer le destinataire de cette transaction");
										System.out
												.println(">>>>>>>>>>> : destinataire "
														+ copyNouvelleTransaction
																.getExpdest()
																.getIdExpDestLdap());

										// XTE : Insertion dans table
										// Annotation----------------------------------------------------------------------------------------------

										// parcourir la liste des Destinataires
										chooseAnnotationType="";
										otherAnnotation="";
										List<String> listAnnotationParDest = new ArrayList<String>();
										
										if(destinataires!=null)
										for (ListeDestinatairesModel dest : destinataires) {
											if (dest.getDestinataireId() == vb.getCopyListSelectedUnit().get(i).getIdUnit()) {
													System.out
												.println("dest.getDestinataireId()  "+dest.getDestinataireId())	;
													System.out
												.println("dest.getListeAnnotations()  "+dest.getListeAnnotations())	;
												listAnnotationParDest = dest.getListeAnnotations();
												chooseAnnotationType = dest.getChooseAnnotationType();
												otherAnnotation = dest.getOtherAnnotation();
												break;
											}
										}
										
										if (chooseAnnotationType != null
												&& chooseAnnotationType
														.equals("tous")) {
															
											for (int j = 0; listAnnotationParDest!=null &&j < listAnnotationParDest
													.size(); j++) {

												courrierIdAnnotation
														.setIdAnnotation(Integer
																.valueOf(listAnnotationParDest
																		.get(j)));
												courrierIdAnnotation
														.setIdTransaction(vb
																.getTransaction()
																.getTransactionId());
																
																System.out
												.println("dest ID TR  "+vb
																.getTransaction()
																.getTransactionId());
												courrierAnnotation
														.setId(courrierIdAnnotation);
												appMgr.insert(courrierAnnotation);
												courrierAnnotation = new TransactionAnnotation();
												courrierIdAnnotation = new TransactionAnnotationId();
											}
										} else if (chooseAnnotationType != null
												&& chooseAnnotationType
														.equals("autre")) {

											courrierIdAnnotation
													.setIdAnnotation(10);
											courrierIdAnnotation
													.setIdTransaction(vb
															.getTransaction()
															.getTransactionId());
											courrierAnnotation
													.setId(courrierIdAnnotation);
											appMgr.insert(courrierAnnotation);
											copyNouvelleTransaction
													.setTransactionCommentaireAnnotation(otherAnnotation);
											appMgr.update(copyNouvelleTransaction);
											courrierAnnotation = new TransactionAnnotation();
											courrierIdAnnotation = new TransactionAnnotationId();
										}
										// XTE : Fin d'insertion dans table
										// Annotation----------------------------------------------------------------------------------------
										result = result
												+ vb.getCopyListSelectedUnit()
														.get(i).getNameUnit()
												+ " / ";

										if (variableValidationHierarchiqueSortant
												.getVaraiablesValeur().equals(
														"Oui")
												&& variable
														.getVaraiablesValeur()
														.equals("Oui")
												&& courrier.getNature()
														.getNatureValide()
														.booleanValue() == true) {

											
											expdest = new Expdest();

											id = new TransactionDestinationId();
											trDest = new TransactionDestination();

											id.setIdTransaction(vb
													.getTransaction()
													.getTransactionId());

											// XTE : expediteur Agent person
											// Secretaire responsable ou l'unite
											// superieur n'est pas le
											// BO==============================================================================
											// -----------------------------------------------------------------------------------------------------------------------------------

											if (connectedPerson.isAgent()
													|| connectedPerson
															.isSecretary()
													|| (connectedPerson
															.isResponsable() && connectedPerson
															.getAssociatedDirection()
															.getAssociatedUnit() != null)) {

												expdest.setTypeExpDest("Interne-Person");

												if (connectedPerson.isAgent()
														|| connectedPerson
																.isSecretary()) {
												
													expdest.setTypeExpDest("Interne-Person");
													expdest.setIdExpDestLdap(connectedPerson
															.getAssociatedDirection()
															.getResponsibleUnit()
															.getId());
													appMgr.insert(expdest);
													trDest.setTransactionDestIdIntervenant(connectedPerson
															.getAssociatedDirection()
															.getResponsibleUnit()
															.getId());
													trDest.setTransactionDestTypeIntervenant("sub_"
															+ String.valueOf(connectedPerson

																	.getAssociatedDirection()
																	.getResponsibleUnit()
																	.getId()));
												} else {

													expdest.setIdExpDestLdap(connectedPerson
															.getAssociatedDirection()
															.getAssociatedUnit()
															.getResponsibleUnit()
															.getId());
													appMgr.insert(expdest);
													trDest.setTransactionDestIdIntervenant(connectedPerson
															.getAssociatedDirection()
															.getAssociatedUnit()
															.getResponsibleUnit()
															.getId());
													trDest.setTransactionDestTypeIntervenant("sub_"
															+ String.valueOf(connectedPerson

																	.getAssociatedDirection()
																	.getAssociatedUnit()
																	.getResponsibleUnit()
																	.getId()));
												}

												// =============== > le courrier
												// necessite validation
												// XTE : Insertion dans la table
												// TransactionDestinationReelle-------------------------------------------------------------------------
												
												TransactionDestinationReelle trDestinationReelle = new TransactionDestinationReelle();
												trDestinationReelle
														.setTransactionDestinationReelleIdDestinataire(vb
																.getCopyListSelectedUnit()
																.get(i)
																.getIdUnit());
												trDestinationReelle
														.setTransactionDestinationReelleTypeDestinataire("Interne-Unité");
												appMgr.insert(trDestinationReelle);
											
												// XTE : Fin d'insertion dans la
												// table
												// TransactionDestinationReelle-------------------------------------------------------------------
												copyNouvelleTransaction
														.setTransactionDestinationReelle(trDestinationReelle);
												appMgr.update(copyNouvelleTransaction);

												etat = appMgr
														.listEtatByLibelle(
																"A valider")
														.get(0);
												copyNouvelleTransaction
														.setEtat(etat);
												appMgr.update(copyNouvelleTransaction);
											}
											// ===============> le courrier
											// necessite validation

											// XTE : expd person
											// Responsable ou l'unité sup est le
											// BO============================================================================
											// -----------------------------------------------------------------------------------------------------------------------------------
											if (connectedPerson.isResponsable()
													&& connectedPerson
															.getAssociatedDirection()
															.getAssociatedUnit() == null) {

												if (passageParBO.equals("Oui")) {

												

													expdest.setTypeExpDest("Interne-Boc");
													expdest.setIdExpDestLdap(connectedPerson
															.getAssociatedDirection()
															.getAssociatedBOC()
															.getIdBOC());
													appMgr.insert(expdest);
													trDest.setTransactionDestIdIntervenant(connectedPerson
															.getAssociatedDirection()
															.getAssociatedBOC()
															.getIdBOC());
													
													trDest.setTransactionDestTypeIntervenant("boc_"
															+ String.valueOf(connectedPerson
																	.getAssociatedDirection()
																	.getAssociatedBOC()
																	.getIdBOC()));

													// Le courrier à executer
													// a ajouter par JS
													// ============ JS

													etat = appMgr
															.listEtatByLibelle(
																	"Non traité")
															.get(0);
													copyNouvelleTransaction
															.setEtat(etat);
													appMgr.update(copyNouvelleTransaction);
													vb.setTransaction(copyNouvelleTransaction);
													vb.setTransactionDestination(trDest);

													// JS : insertion dans la
													// table
													// Transaction Destinataire
													// Reelle------------------------------------------------------------------------------------------

													transactionDestinationReelle = new TransactionDestinationReelle();
													

													// set Id de la destinataire
													// Réelle
													transactionDestinationReelle
															.setTransactionDestinationReelleIdDestinataire(vb
																	.getCopyListSelectedUnit()
																	.get(i)
																	.getIdUnit());

													// [JS] Distinataire =lise
													// des
													// unités
												
													transactionDestinationReelle
															.setTransactionDestinationReelleTypeDestinataire("Interne-Unité");
													appMgr.insert(transactionDestinationReelle);
	
													// JS : Fin insertion dans
													// la
													// table
													// Transaction Destinataire
													// Reelle---------------------------------------------------------------------------------

													copyNouvelleTransaction
															.setTransactionDestinationReelle(transactionDestinationReelle);
													appMgr.update(copyNouvelleTransaction);

													// JS : Fin insertion
													// Transaction----------------------------------------------------------------------------------------------------

												} else {
													

													if (variableValidationHierarchiqueArrivee
															.getVaraiablesValeur()
															.equals("Oui")) {
													

														expdest.setTypeExpDest("Interne-Person");
														int idUserDest = vb
																.getCopyListSelectedUnit()
																.get(i)
																.getResponsibleUnit()
																.getId();

														// recuperer 1ere
														// direction
														// sous BO destinataire

														getIdBocByUnit(getIdPersonbyId(
																idUserDest)
																.getAssociatedDirection());

													

														expdest.setIdExpDestLdap(unitSup
																.getResponsibleUnit()
																.getId());

														appMgr.insert(expdest);
													
														trDest.setTransactionDestIdIntervenant(unitSup
																.getResponsibleUnit()
																.getId());
														
														trDest.setTransactionDestTypeIntervenant("sub_"
																+ String.valueOf(unitSup
																		.getResponsibleUnit()
																		.getId()));

														// =============== > le
														// courrier necessite
														// validation
														// XTE : Insertion dans
														// la
														// table
														// TransactionDestinationReelle-------------------------------------------------------------------------

														TransactionDestinationReelle trDestinationReelle = new TransactionDestinationReelle();
														trDestinationReelle
																.setTransactionDestinationReelleIdDestinataire(vb
																		.getCopyListSelectedUnit()
																		.get(i)
																		.getIdUnit());
														trDestinationReelle
																.setTransactionDestinationReelleTypeDestinataire("Interne-Unité");
														appMgr.insert(trDestinationReelle);
														// XTE : Fin d'insertion
														// dans la table
														// TransactionDestinationReelle-------------------------------------------------------------------
														copyNouvelleTransaction
																.setTransactionDestinationReelle(trDestinationReelle);
														appMgr.update(copyNouvelleTransaction);

														if (vb.getCopyListSelectedUnit()
																.get(i)
																.getResponsibleUnit()
																.getId() == expdest
																.getIdExpDestLdap()) {
															
															etat = appMgr
																	.listEtatByLibelle(
																			"Validé")
																	.get(0);
														} else {
														
															etat = appMgr
																	.listEtatByLibelle(
																			"A valider")
																	.get(0);
														}
														copyNouvelleTransaction
																.setEtat(etat);
														appMgr.update(copyNouvelleTransaction);

													} else {

														
														// destinataire reel

														expdest.setTypeExpDest("Interne-Unité");
														expdest.setIdExpDestLdap(vb
																.getCopyListSelectedUnit()
																.get(i)
																.getIdUnit());
														appMgr.insert(expdest);

														trDest.setTransactionDestTypeIntervenant("unit_"
																+ String.valueOf(vb
																		.getCopyListSelectedUnit()
																		.get(i)
																		.getIdUnit()));

														trDest.setTransactionDestIdIntervenant(vb
																.getCopyListSelectedUnit()
																.get(i)
																.getAssociatedUnit()
																.getResponsibleUnit()
																.getId());

													}

												}

											}

											if (necessiteReponse.equals("Oui")) {
												trDest.setTransactionDestDateReponse(courrier
														.getCourrierDateReponse());
											}
											if (necessiteReceptionPhysique != null
													&& necessiteReceptionPhysique
															.equals("Oui")) {
												trDest.setTransactionDestEtatReceptionPhysique(etatReceptionPhysique);
											}
											id.setIdExpDest(expdest
													.getIdExpDest());
											trDest.setId(id);
											appMgr.insert(trDest);
											
										}

										if (variableValidationHierarchiqueSortant
												.getVaraiablesValeur().equals(
														"Non")
												|| (variableValidationHierarchiqueSortant
														.getVaraiablesValeur()
														.equals("Oui") && (variable
														.getVaraiablesValeur()
														.equals("Oui") && courrier
														.getNature()
														.getNatureValide()
														.booleanValue() == false))) {
											

											// XTE : Insertion dans table
											// TransactionDest-----------------------------------------------------------------------------------------

											expdest = new Expdest();
											id = new TransactionDestinationId();
											trDest = new TransactionDestination();

											// ==========recupérer boc
											// expéditeur

											getIdBocByUnit(getIdPersonbyId(
													vb.getPerson().getId())
													.getAssociatedDirection());

											// ========== Fin
											
											
											if (passageParBO.equals("Oui")) {
												

												expdest.setTypeExpDest("Interne-Boc");
												
												expdest.setIdExpDestLdap(idBoc);
												appMgr.insert(expdest);
												
												trDest.setTransactionDestTypeIntervenant("boc_"
														+ String.valueOf(idBoc));
												trDest.setTransactionDestIdIntervenant(idBoc);

												// ========= le courrier à
												// executer
												// =========
												// a ajouter par JS

												etat = appMgr
														.listEtatByLibelle(
																"Non traité")
														.get(0);
												copyNouvelleTransaction
														.setEtat(etat);
												appMgr.update(copyNouvelleTransaction);
												vb.setTransaction(copyNouvelleTransaction);
												vb.setTransactionDestination(trDest);

												// JS : insertion dans la table
												// Transaction Destinataire
												// Reelle------------------------------------------------------------------------------------------

												transactionDestinationReelle = new TransactionDestinationReelle();
												

												// set Id de la destinataire
												// Réelle
												transactionDestinationReelle
														.setTransactionDestinationReelleIdDestinataire(vb
																.getCopyListSelectedUnit()
																.get(i)
																.getIdUnit());

												
												transactionDestinationReelle
														.setTransactionDestinationReelleTypeDestinataire("Interne-Unité");
												appMgr.insert(transactionDestinationReelle);

												// JS : Fin insertion dans la
												// table
												// Transaction Destinataire
												// Reelle---------------------------------------------------------------------------------

												copyNouvelleTransaction
														.setTransactionDestinationReelle(transactionDestinationReelle);
												appMgr.update(copyNouvelleTransaction);

												// JS : Fin insertion
												// Transaction----------------------------------------------------------------------------------------------------
												// ===========================================

											} 
											else {
												
												if (variableValidationHierarchiqueArrivee
														.getVaraiablesValeur()
														.equals("Oui")
														&& ((variable
																.getVaraiablesValeur())
																.toLowerCase()
																.equals("oui") && courrier
																.getNature()
																.getNatureValide()
																.booleanValue() == true)) {
													
													expdest.setTypeExpDest("Interne-Person");
													int idUserDest = vb
															.getCopyListSelectedUnit()
															.get(i)
															.getResponsibleUnit()
															.getId();

													// recuperer 1ere direction
													// sous
													// BO destinataire

													getIdBocByUnit(getIdPersonbyId(
															idUserDest)
															.getAssociatedDirection());

													expdest.setIdExpDestLdap(unitSup
															.getResponsibleUnit()
															.getId());

													appMgr.insert(expdest);
													System.out
															.println("IdExpDestLdap = "
																	+ expdest
																			.getIdExpDest());
													trDest.setTransactionDestIdIntervenant(unitSup
															.getResponsibleUnit()
															.getId());
													System.out
															.println("trDest = "
																	+ trDest.getTransactionDestIdIntervenant());
													trDest.setTransactionDestTypeIntervenant("sub_"
															+ String.valueOf(unitSup
																	.getResponsibleUnit()
																	.getId()));

													// =============== > le
													// courrier
													// necessite validation
													// XTE : Insertion dans la
													// table
													// TransactionDestinationReelle-------------------------------------------------------------------------

													TransactionDestinationReelle trDestinationReelle = new TransactionDestinationReelle();
													trDestinationReelle
															.setTransactionDestinationReelleIdDestinataire(vb
																	.getCopyListSelectedUnit()
																	.get(i)
																	.getIdUnit());
													trDestinationReelle
															.setTransactionDestinationReelleTypeDestinataire("Interne-Person");
													appMgr.insert(trDestinationReelle);
													// XTE : Fin d'insertion
													// dans la
													// table
													// TransactionDestinationReelle-------------------------------------------------------------------
													copyNouvelleTransaction
															.setTransactionDestinationReelle(trDestinationReelle);
													appMgr.update(copyNouvelleTransaction);

													if (vb.getCopyListSelectedUnit()
															.get(i)
															.getResponsibleUnit()
															.getId() == expdest
															.getIdExpDestLdap()) {
														etat = appMgr
																.listEtatByLibelle(
																		"Validé")
																.get(0);
													} else {
														etat = appMgr
																.listEtatByLibelle(
																		"A valider")
																.get(0);
													}
													copyNouvelleTransaction
															.setEtat(etat);
													appMgr.update(copyNouvelleTransaction);

												

												}
												else {

													
													// destinataire reel

													expdest.setTypeExpDest("Interne-Unité");
													expdest.setIdExpDestLdap(vb
															.getCopyListSelectedUnit()
															.get(i).getIdUnit());
													appMgr.insert(expdest);

													
													trDest.setTransactionDestTypeIntervenant("unit_"
															+ String.valueOf(vb
																	.getCopyListSelectedUnit()
																	.get(i)
																	.getIdUnit()));
													if (vb.getCopyListSelectedUnit()
															.get(i)
															.getAssociatedUnit() != null) {
														trDest.setTransactionDestIdIntervenant(vb
																.getCopyListSelectedUnit()
																.get(i)
																.getAssociatedUnit()
																.getResponsibleUnit()
																.getId());
													}

													
												}
												

											}
											id.setIdTransaction(vb
													.getTransaction()
													.getTransactionId());
											id.setIdExpDest(expdest
													.getIdExpDest());
											trDest.setId(id);
											if (necessiteReponse.equals("Oui")) {
												trDest.setTransactionDestDateReponse(courrier
														.getCourrierDateReponse());
											}
											if (necessiteReceptionPhysique != null
													&& necessiteReceptionPhysique
															.equals("Oui")) {
												trDest.setTransactionDestEtatReceptionPhysique(etatReceptionPhysique);
											}
											appMgr.insert(trDest);
											vb.setTransactionDestination(trDest);

											transactionDestinationReelle = new TransactionDestinationReelle();
											

											// set Id de la destinataire Réelle
											transactionDestinationReelle
													.setTransactionDestinationReelleIdDestinataire(vb
															.getCopyListSelectedUnit()
															.get(i).getIdUnit());

											
											transactionDestinationReelle
													.setTransactionDestinationReelleTypeDestinataire("Interne-Unité");
											appMgr.insert(transactionDestinationReelle);
												System.out.println(transactionDestinationReelle);
												copyNouvelleTransaction
														.setTransactionDestinationReelle(transactionDestinationReelle);
												appMgr.update(copyNouvelleTransaction);
											System.out
													.println("KHA ===========> unit validation hierarchique SORTANT :NON FINNNNNN");
										}

										else if (variableValidationHierarchiqueSortant
												.getVaraiablesValeur().equals(
														"Non")
												&& variableValidationHierarchiqueArrivee
														.getVaraiablesValeur()
														.equals("Non")) {
											System.out
													.println("unit y'as pas de validation hierarchique ");

											expdest = new Expdest();
											id = new TransactionDestinationId();
											trDest = new TransactionDestination();

											// ==========recupérer boc
											// expéditeur

											getIdBocByUnit(getIdPersonbyId(
													vb.getPerson().getId())
													.getAssociatedDirection());

											// ========== Fin
									
											if (passageParBO.equals("Oui")) {
												
												expdest.setTypeExpDest("Interne-Boc");
												
												expdest.setIdExpDestLdap(idBoc);
												appMgr.insert(expdest);
											
												trDest.setTransactionDestTypeIntervenant("boc_"
														+ String.valueOf(idBoc));
												trDest.setTransactionDestIdIntervenant(idBoc);
												// ======> Courrier à executer
												// a ajouter par JS

												etat = appMgr
														.listEtatByLibelle(
																"Non traité")
														.get(0);
												copyNouvelleTransaction
														.setEtat(etat);
												appMgr.update(copyNouvelleTransaction);
												vb.setTransaction(copyNouvelleTransaction);
												vb.setTransactionDestination(trDest);

												// JS : insertion dans la table
												// Transaction Destinataire
												// Reelle------------------------------------------------------------------------------------------

												transactionDestinationReelle = new TransactionDestinationReelle();
												

												// set Id de la destinataire
												// Réelle
												transactionDestinationReelle
														.setTransactionDestinationReelleIdDestinataire(vb
																.getCopyListSelectedUnit()
																.get(i)
																.getIdUnit());

												// [JS] Distinataire =lise des
												// unités
												System.out
														.println("interne unité 4");
												transactionDestinationReelle
														.setTransactionDestinationReelleTypeDestinataire("Interne-Unité");
												appMgr.insert(transactionDestinationReelle);
	
												// JS : Fin insertion dans la
												// table
												// Transaction Destinataire
												// Reelle---------------------------------------------------------------------------------

												copyNouvelleTransaction
														.setTransactionDestinationReelle(transactionDestinationReelle);
												appMgr.update(copyNouvelleTransaction);

												// JS : Fin insertion
												// Transaction----------------------------------------------------------------------------------------------------

											} else {
												System.out
														.println(" unit SANS PASSAGE PAR BO ");
												expdest.setTypeExpDest("Interne-Unité");
												expdest.setIdExpDestLdap(vb
														.getCopyListSelectedUnit()
														.get(i).getIdUnit());
												appMgr.insert(expdest);

												trDest.setTransactionDestTypeIntervenant("unit_"
														+ String.valueOf(vb
																.getCopyListSelectedUnit()
																.get(i)
																.getIdUnit()));

												if (vb.getCopyListSelectedUnit()
														.get(i)
														.getAssociatedUnit() != null) {

													trDest.setTransactionDestIdIntervenant(vb
															.getCopyListSelectedUnit()
															.get(i)
															.getAssociatedUnit()
															.getResponsibleUnit()
															.getId());

												}

												// XTE : Fin de l'insertion dans
												// la
												// table
												// TransactionDestination----------------------------------------------------------------------

											}

											// insertion dans la table
											// transaction
											// dest

											id.setIdTransaction(vb
													.getTransaction()
													.getTransactionId());
											id.setIdExpDest(expdest
													.getIdExpDest());
											trDest.setId(id);

											if (necessiteReponse.equals("Oui")) {
												trDest.setTransactionDestDateReponse(courrier
														.getCourrierDateReponse());
											}
											if (necessiteReceptionPhysique != null
													&& necessiteReceptionPhysique
															.equals("Oui")) {
												trDest.setTransactionDestEtatReceptionPhysique(etatReceptionPhysique);
											}
											appMgr.insert(trDest);
											vb.setTransactionDestination(trDest);

											System.out
													.println(" unit y'as pas de validation hierarchique FINNNNN ");

										}
									
									
									
									}
								}
								// XTE : 1.2.2/ User Connecté est non Person:
								// ========================================================================================
								// -----------------------------------------------------------------------------------------------------------------------------------
								else {

									

									for (int i = 0; i < vb
											.getCopyListSelectedUnit().size(); i++) {
										// XTE : Insertion dans table
										// Transaction---------------------------------------------------------------------------------------------

										copyNouvelleTransaction = new Transaction();
										copyNouvelleTransaction
												.setExpdest(nouvelleTransaction
														.getExpdest());
										copyNouvelleTransaction
												.setIdUtilisateur(nouvelleTransaction
														.getIdUtilisateur());
										copyNouvelleTransaction
												.setDossier(nouvelleTransaction
														.getDossier());
										copyNouvelleTransaction
												.setTransactionDateTransaction(nouvelleTransaction
														.getTransactionDateTransaction());
										copyNouvelleTransaction
												.setTransactionDateReponse(nouvelleTransaction
														.getTransactionDateReponse());
										copyNouvelleTransaction
												.setTransactionCommentaire(nouvelleTransaction
														.getTransactionCommentaire());
										copyNouvelleTransaction
												.setTransactionSupprimer(nouvelleTransaction
														.getTransactionSupprimer());

										copyNouvelleTransaction
												.setTransactionIdIntervenant(nouvelleTransaction
														.getTransactionIdIntervenant());
										copyNouvelleTransaction
												.setTransactionTypeIntervenant(nouvelleTransaction
														.getTransactionTypeIntervenant());

										copyNouvelleTransaction
												.setCourrierReferenceCorrespondant(courrier
														.getCourrierReferenceCorrespondant());
										copyNouvelleTransaction
												.setCourrierType(courrier
														.getCourrierType());
										copyNouvelleTransaction
												.setCourrierTypeOrdre(courrier
														.getCourrierTypeOrdre());
										copyNouvelleTransaction
												.setCourrierDateReceptionAnnee(courrier
														.getCourrierOldDateOper());

										typetransaction = appMgr
												.getTypeTransactionByLibelle(
														"Envoi").get(0);
										copyNouvelleTransaction
												.setTypetransaction(typetransaction);
										
										copyNouvelleTransaction
												.setTransactionOrdre(1);
										
										if (vb.getPerson().isBoc()) {
											
											etat = appMgr.listEtatByRef(6).get(
													0);
											copyNouvelleTransaction
													.setEtat(etat);
										} else {

											etat = appMgr.listEtatByRef(1).get(
													0);
											copyNouvelleTransaction
													.setEtat(etat);
										}

										
										appMgr.insert(copyNouvelleTransaction);
										// XTE : Fin insertion
										// transaction----------------------------------------------------------------------------------------------------
										copyNouvelleTransaction
												.setTransactionFirst(copyNouvelleTransaction
														.getTransactionId());
										appMgr.update(copyNouvelleTransaction);
										vb.setTransaction(copyNouvelleTransaction);
										vb.setTransactionDestination(trDest);

										// AH : Récupérer l'e destinataire de
										// cette
										// transaction
									
										chooseAnnotationType="";
										otherAnnotation="";
										List<String> listAnnotationParDest = new ArrayList<String>();
										for (ListeDestinatairesModel dest : destinataires) {
										
											if (dest.getDestinataireId() == vb
													.getCopyListSelectedUnit()
													.get(i).getIdUnit()) {
												listAnnotationParDest = dest
														.getListeAnnotations();
												chooseAnnotationType = dest
														.getChooseAnnotationType();
												otherAnnotation = dest
														.getOtherAnnotation();
												break;
											}
										}
										// XTE : Insertion dans la table
										// Annotaion--------------------------------------------------------------------------------------------
										if (chooseAnnotationType != null
												&& chooseAnnotationType
														.equals("tous")) {
											for (int j = 0; listAnnotationParDest != null
													&& j < listAnnotationParDest
															.size(); j++) {

												courrierIdAnnotation
														.setIdAnnotation(Integer
																.valueOf(listAnnotationParDest
																		.get(j)));
												courrierIdAnnotation
														.setIdTransaction(vb
																.getTransaction()
																.getTransactionId());
												courrierAnnotation
														.setId(courrierIdAnnotation);
												appMgr.insert(courrierAnnotation);
												courrierAnnotation = new TransactionAnnotation();
												courrierIdAnnotation = new TransactionAnnotationId();
											}
										} else if (chooseAnnotationType != null
												&& chooseAnnotationType
														.equals("autre")) {
												System.out.println("1 Dans AUTRE : "+otherAnnotation);
											courrierIdAnnotation
													.setIdAnnotation(10);
											courrierIdAnnotation
													.setIdTransaction(vb
															.getTransaction()
															.getTransactionId());
											courrierAnnotation
													.setId(courrierIdAnnotation);
											appMgr.insert(courrierAnnotation);
											copyNouvelleTransaction
													.setTransactionCommentaireAnnotation(otherAnnotation);
											appMgr.update(copyNouvelleTransaction);
											courrierAnnotation = new TransactionAnnotation();
											courrierIdAnnotation = new TransactionAnnotationId();
										}
										// XTE : Fin insertion dans table
										// Annotation------------------------------------------------------------------------------------------

										expdest = new Expdest();
										id = new TransactionDestinationId();
										trDest = new TransactionDestination();

										id.setIdTransaction(vb.getTransaction()
												.getTransactionId());

										// Expediteur de Type
										// Personne
										// ==================================================
										// Debut-----------------------------------------------------------
										Person connectedPerson1 = vb
												.getPerson();
										if (vb.getCopyListSelectedObjectExp()
												.get(0) instanceof Person) {
											Person personExp = (Person) vb
													.getCopyListSelectedObjectExp()
													.get(0);

											// KHA : A executer directement par
											// le
											// BO============================================================================
											// -----------------------------------------------------------------------------------------------------------------------------------

											
											// ====Courrier necessite Execution
											// par
											// le BO

											getIdBocByUnit(getIdPersonbyId(
													personExp.getId())
													.getAssociatedDirection());
											
											expdest.setTypeExpDest("Interne-Boc");
									
											expdest.setIdExpDestLdap(connectedPerson1
													.getAssociatedBOC()
													.getIdBOC());
											appMgr.insert(expdest);
											
											trDest.setTransactionDestTypeIntervenant("boc_"
													+ String.valueOf(connectedPerson1
															.getAssociatedBOC()
															.getIdBOC()));
											trDest.setTransactionDestIdIntervenant(connectedPerson1
													.getAssociatedBOC()
													.getIdBOC());
										

											etat = appMgr.listEtatByLibelle(
													"Non traité").get(0);
											copyNouvelleTransaction
													.setEtat(etat);
											appMgr.update(copyNouvelleTransaction);
											vb.setTransaction(copyNouvelleTransaction);
											vb.setTransactionDestination(trDest);

										}
										// Expediteur de Type
										// Personne
										// =========================================
										// Fin--------------------------------------------------------------

										// Expediteur de Type
										// Unitee
										// ============================================
										// Debut----------------------------------------------------

										else if (vb
												.getCopyListSelectedObjectExp()
												.get(0) instanceof Unit) {
											Unit unitExpd = (Unit) vb
													.getCopyListSelectedObjectExp()
													.get(0);

										

											getIdBocByUnit(unitExpd);
											
											expdest.setTypeExpDest("Interne-Boc");
											
											expdest.setIdExpDestLdap(connectedPerson1
													.getAssociatedBOC()
													.getIdBOC());
											appMgr.insert(expdest);
										
											trDest.setTransactionDestTypeIntervenant("boc_"
													+ String.valueOf(connectedPerson1
															.getAssociatedBOC()
															.getIdBOC()));
											trDest.setTransactionDestIdIntervenant(connectedPerson1
													.getAssociatedBOC()
													.getIdBOC());
										

											etat = appMgr.listEtatByLibelle(
													"Non traité").get(0);
											copyNouvelleTransaction
													.setEtat(etat);
											appMgr.update(copyNouvelleTransaction);
											vb.setTransaction(copyNouvelleTransaction);
											vb.setTransactionDestination(trDest);

										}

										// Expediteur de type
										// Unitee
										// ============================================
										// Fin-------------------------------------------------------------------

										if (vb.getCopyListSelectedObjectExp()
												.get(0) instanceof Pp
												|| vb.getCopyListSelectedObjectExp()
														.get(0) instanceof Pm) {
											
											getIdBocByUnit(vb
													.getCopyListSelectedUnit()
													.get(i));
											
											expdest.setTypeExpDest("Interne-Boc");
											
											
											if(idBoc.intValue()!=vb.getPerson().getAssociatedBOC().getIdBOC()){
													//Le destinataire n'est pas sous le BO connecté 
												int idBocConnecte=vb.getPerson().getAssociatedBOC().getIdBOC();
												expdest.setIdExpDestLdap(idBocConnecte);
												
												appMgr.insert(expdest);
												
												trDest.setTransactionDestTypeIntervenant("boc_"
														+ idBocConnecte);
												trDest.setTransactionDestIdIntervenant(idBocConnecte);
												etat = appMgr.listEtatByLibelle(
												"Non traité").get(0);
												copyNouvelleTransaction
												.setEtat(etat);
												copyNouvelleTransaction
												.setTransactionTypeIntervenant("boc_"
														+ idBocConnecte);
												copyNouvelleTransaction
												.setTransactionIdIntervenant(vb
														.getPerson()
														.getId());
											}
											else{
												expdest.setIdExpDestLdap(idBoc);
												appMgr.insert(expdest);
											
												trDest.setTransactionDestTypeIntervenant("boc_"
														+ String.valueOf(idBoc));
												trDest.setTransactionDestIdIntervenant(idBoc);
												etat = appMgr.listEtatByLibelle(
												"Non traité").get(0);
										copyNouvelleTransaction
												.setEtat(etat);
										copyNouvelleTransaction
												.setTransactionTypeIntervenant("boc_"
														+ String.valueOf(idBoc));
										copyNouvelleTransaction
												.setTransactionIdIntervenant(vb
														.getPerson()
														.getId());
											}
											
											
											appMgr.update(copyNouvelleTransaction);
											vb.setTransaction(copyNouvelleTransaction);
											vb.setTransactionDestination(trDest);

										}
										if (necessiteReponse.equals("Oui")) {
											trDest.setTransactionDestDateReponse(courrier
													.getCourrierDateReponse());
										}
										if (necessiteReceptionPhysique != null
												&& necessiteReceptionPhysique
														.equals("Oui")) {
											trDest.setTransactionDestEtatReceptionPhysique(etatReceptionPhysique);
										}

										id.setIdExpDest(expdest.getIdExpDest());
										trDest.setId(id);
										appMgr.insert(trDest);
										vb.setTransactionDestination(trDest);

										// XTE : Insertion dans table
										// TransactionDestinationReelle----------------------------------------------------------------------------
										TransactionDestinationReelle trDestinationReelle = new TransactionDestinationReelle();
										trDestinationReelle
												.setTransactionDestinationReelleIdDestinataire(vb
														.getCopyListSelectedUnit()
														.get(i).getIdUnit());
										
										trDestinationReelle
												.setTransactionDestinationReelleTypeDestinataire("Interne-Unité");
										appMgr.insert(trDestinationReelle);
										// XTE : Fin d'insertion dans table
										// TransactionDestinationReelle
										// ---------------------------------------------------------------------
										copyNouvelleTransaction
												.setTransactionDestinationReelle(trDestinationReelle);
										appMgr.update(copyNouvelleTransaction);
										
									}
								}
							}
						}

						// XTE : 2/ Destinataire est externe:
						// ===============================================================================================
						// -----------------------------------------------------------------------------------------------------------------------------------
						// XTE : 2.1/ Destinataire est externe PP:
						// ==========================================================================================
						// -----------------------------------------------------------------------------------------------------------------------------------
						if (!vb.getCopyListPP().isEmpty()) {
							typetransaction = new Typetransaction();
							etat = new Etat();

							for (int i = 0; i < vb.getCopyListPP().size(); i++) {
								// XTE : Insertion dans table
								// transaction---------------------------------------------------------------------------------------------
								copyNouvelleTransaction = new Transaction();
								copyNouvelleTransaction
										.setExpdest(nouvelleTransaction
												.getExpdest());
								copyNouvelleTransaction
										.setIdUtilisateur(nouvelleTransaction
												.getIdUtilisateur());
								copyNouvelleTransaction
										.setDossier(nouvelleTransaction
												.getDossier());
								copyNouvelleTransaction
										.setTransactionDateTransaction(nouvelleTransaction
												.getTransactionDateTransaction());
								copyNouvelleTransaction
										.setTransactionDateReponse(nouvelleTransaction
												.getTransactionDateReponse());
								copyNouvelleTransaction
										.setTransactionCommentaire(nouvelleTransaction
												.getTransactionCommentaire());
								copyNouvelleTransaction
										.setTransactionSupprimer(nouvelleTransaction
												.getTransactionSupprimer());

								copyNouvelleTransaction
										.setTransactionTypeIntervenant(nouvelleTransaction
												.getTransactionTypeIntervenant());

								typetransaction = appMgr
										.getTypeTransactionByLibelle("Envoi")
										.get(0);
								copyNouvelleTransaction
										.setTypetransaction(typetransaction);

								copyNouvelleTransaction
										.setCourrierReferenceCorrespondant(courrier
												.getCourrierReferenceCorrespondant());
								copyNouvelleTransaction
										.setCourrierDateReceptionAnnee(courrier
												.getCourrierOldDateOper());
								copyNouvelleTransaction
										.setCourrierType(courrier
												.getCourrierType());
								copyNouvelleTransaction
										.setCourrierTypeOrdre(courrier
												.getCourrierTypeOrdre());
								etat = appMgr.listEtatByLibelle("Traité")
										.get(0);
								copyNouvelleTransaction.setEtat(etat);
								appMgr.insert(copyNouvelleTransaction);
								vb.setTransaction(copyNouvelleTransaction);
								vb.setTransactionDestination(trDest);

								// if (chooseAnnotationType!=null &&
								// chooseAnnotationType.equals("autre")) {
								//
								// copyNouvelleTransaction
								// .setTransactionCommentaireAnnotation(otherAnnotation);
								// }

								// XTE : Insertion dans table
								// Annotation----------------------------------------------------------------------------------------------
								System.out
										.println("Insertion liste annotation PP ");
								chooseAnnotationType="";
								otherAnnotation="";
								List<String> listAnnotationParDest = new ArrayList<String>();
								//chooseAnnotationType = "tous";
								//otherAnnotation = "";
								for (ListeDestinatairesModel dest : destinataires) {
									System.out.println(" PP dest  id = "
											+ dest.getDestinataireId());
									System.out.println("  PPid = "
											+ vb.getCopyListPP().get(i)
													.getExpdestexterne()
													.getIdExpDestExterne());
									if (dest.getDestinataireId() == vb
											.getCopyListPP().get(i)
											.getExpdestexterne()
											.getIdExpDestExterne()) {
										listAnnotationParDest = dest
												.getListeAnnotations();

										System.out
												.println(" annotation Destinataire PP id = "
														+ dest.getListeAnnotations());
										chooseAnnotationType = dest
												.getChooseAnnotationType();
										otherAnnotation = dest
												.getOtherAnnotation();
										break;
									}
								}
								if (chooseAnnotationType != null
										&& chooseAnnotationType.equals("tous")) {
									for (int j = 0; listAnnotationParDest != null
											&& j < listAnnotationParDest.size(); j++) {

										courrierIdAnnotation
												.setIdAnnotation(Integer
														.valueOf(listAnnotationParDest
																.get(j)));
										System.out.println(" annotation PP   "
												+ listAnnotationParDest.get(j));
										courrierIdAnnotation
												.setIdTransaction(vb
														.getTransaction()
														.getTransactionId());
										courrierAnnotation
												.setId(courrierIdAnnotation);
										appMgr.insert(courrierAnnotation);
										courrierAnnotation = new TransactionAnnotation();
										courrierIdAnnotation = new TransactionAnnotationId();
									}
								} else if (chooseAnnotationType != null
										&& chooseAnnotationType.equals("autre")) {
									courrierIdAnnotation.setIdAnnotation(10);
									courrierIdAnnotation.setIdTransaction(vb
											.getTransaction()
											.getTransactionId());
									courrierAnnotation
											.setId(courrierIdAnnotation);
									appMgr.insert(courrierAnnotation);
									copyNouvelleTransaction
											.setTransactionCommentaireAnnotation(otherAnnotation);
									appMgr.update(copyNouvelleTransaction);
									courrierAnnotation = new TransactionAnnotation();
									courrierIdAnnotation = new TransactionAnnotationId();
								}
								System.out
										.println("FIN Insertion liste annotation PP ");
								// XTE : Fin d'insertion dans table
								// Annotation--------------------------------------------

								// XTE: 2.1.1. La personne connectée Not
								// isBOc===========================================================================================
								// -----------------------------------------------------------------------------------------------------------------------------------

								if (!vb.getPerson().isBoc()) {
									etat = appMgr
											.listEtatByLibelle("A valider")
											.get(0);
									copyNouvelleTransaction.setEtat(etat);
									copyNouvelleTransaction
											.setTransactionOrdre(1);
									// XTE : Insertion
									// transactionDestinationReelle---------------------------------------------------------------------------------------
									transactionDestinationReelle = new TransactionDestinationReelle();
									transactionDestinationReelle
											.setTransactionDestinationReelleIdDestinataire(vb
													.getCopyListPP().get(i)
													.getExpdestexterne()
													.getIdExpDestExterne());
									transactionDestinationReelle
											.setTransactionDestinationReelleTypeDestinataire("Externe");
									appMgr.insert(transactionDestinationReelle);
									// XTE : Fin d'insertion
									// transactionDestinationReelle--------------------------------------------------------------------------------
									copyNouvelleTransaction
											.setTransactionDestinationReelle(transactionDestinationReelle);

									// XTE : Fin d'insertion dans table
									// transaction---------------------------------------------------------------------------------------

									copyNouvelleTransaction
											.setTransactionFirst(copyNouvelleTransaction
													.getTransactionId());
									appMgr.update(copyNouvelleTransaction);

									Variables variable = new Variables();

									// validation hierarchique par nature
									// courrier
									// est vrai
									variable = appMgr
											.listVariablesByLibelle(
													"validation_hierarchique_courrier_nature")
											.get(0);
									Variables variableValidationHierarchiqueSortant = new Variables();
									variableValidationHierarchiqueSortant = appMgr
											.listVariablesByLibelle(
													"validation_hierarchique_courrier_sortant")
											.get(0);

									// XTE : Validation hierarchique des
									// courriers
									// == Oui
									// =======KHA=====
								

									if (variableValidationHierarchiqueSortant
											.getVaraiablesValeur()
											.equals("Oui")
											&& (variable.getVaraiablesValeur())
													.toLowerCase()
													.equals("oui")
											&& courrier.getNature()
													.getNatureValide()
													.booleanValue() == true) {
										System.out
												.println("KHA :PP: Validation hierarchique des courriers==oui");

										expdest = new Expdest();
										id = new TransactionDestinationId();
										trDest = new TransactionDestination();
										String typeIntervenant = "";
										// XTE : Insertion dans
										// expdest-------------------------------------------------------------------------------------------------------

										// XTE : 2.1.1.1. Le cas Agent
										// ===========================================================================================================
										// -----------------------------------------------------------------------------------------------------------------------------------
										if (vb.getPerson().isAgent()) {

											if (vb.getPerson()
													.getAssociatedDirection() != null) {
												System.out
														.println("KHA :PP: Validation hierarchique des courriers==oui : agent dir ");
												expdest.setTypeExpDest("Interne-Person");
												expdest.setIdExpDestLdap(vb
														.getPerson()
														.getAssociatedDirection()
														.getResponsibleUnit()
														.getId());
												typeIntervenant = "sub_"
														+ String.valueOf(vb
																.getPerson()
																.getAssociatedDirection()
																.getResponsibleUnit()
																.getId());
												appMgr.insert(expdest);

												result = result
														+ ldapOperation
																.getUserById(
																		vb.getPerson()
																				.getAssociatedDirection()
																				.getResponsibleUnit()
																				.getId())
																.getCn() + " /";
											} else {
												
												// KHA le cas ou l'agent est
												// sous BO
												// ajouter partie pour que le BO
												// execute
												idBoc = vb.getPerson()
														.getAssociatedBOC()
														.getIdBOC();
												System.out.println("idBoc= "
														+ idBoc);
												System.out
														.println("insertion Expdest ===========================> 17 ");

												expdest.setTypeExpDest("Interne-Boc");
												expdest.setIdExpDestLdap(vb
														.getPerson()
														.getAssociatedBOC()
														.getIdBOC());
												trDest.setTransactionDestIdIntervenant(idBoc);
												typeIntervenant = "boc_"
														+ String.valueOf(idBoc);
												appMgr.insert(expdest);

												result = result
														+ vb.getPerson()
																.getAssociatedBOC()
																.getNameBOC()
														+ " /";

											}
										}

										// XTE : 2.1.1.2. Le cas Secretaire
										// ======================================================================================================
										// -----------------------------------------------------------------------------------------------------------------------------------
										else if (vb.getPerson().isSecretary()) {
											System.out
													.println("KHA :PP: Validation hierarchique des courriers==oui : SECRETAIRE ");

											expdest.setTypeExpDest("Interne-Person");
											expdest.setIdExpDestLdap(vb
													.getPerson()
													.getAssociatedDirection()
													.getResponsibleUnit()
													.getId());
											typeIntervenant = "sub_"
													+ String.valueOf(vb
															.getPerson()
															.getAssociatedDirection()
															.getResponsibleUnit()
															.getId());
											appMgr.insert(expdest);
											result = result
													+ ldapOperation
															.getUserById(
																	vb.getPerson()
																			.getAssociatedDirection()
																			.getResponsibleUnit()
																			.getId())
															.getCn() + " /";
										}

										// XTE : 2.1.1.3. Le cas responsable
										// =====================================================================================================
										// -----------------------------------------------------------------------------------------------------------------------------------
										else {
											if (vb.getPerson()
													.getAssociatedDirection()
													.getAssociatedUnit() != null) {
												// si est un responsable d'une
												// unité
												System.out
														.println("KHA :PP: Validation hierarchique des courriers==oui :  unite sup : UNIT  ");

												expdest.setTypeExpDest("Interne-Person");
												expdest.setIdExpDestLdap(vb
														.getPerson()
														.getAssociatedDirection()
														.getAssociatedUnit()
														.getResponsibleUnit()
														.getId());
												typeIntervenant = "sub_"
														+ String.valueOf(vb
																.getPerson()
																.getAssociatedDirection()
																.getAssociatedUnit()
																.getResponsibleUnit()
																.getId());
												appMgr.insert(expdest);

												result = result
														+ ldapOperation
																.getUserById(
																		vb.getPerson()
																				.getAssociatedDirection()
																				.getAssociatedUnit()
																				.getResponsibleUnit()
																				.getId())
																.getCn() + " /";
											} else {

//												System.out
//														.println("KHA :PP: Validation hierarchique des courriers==oui : unite sup :BO ");
												idBoc = vb
														.getPerson()
														.getAssociatedDirection()
														.getAssociatedBOC()
														.getIdBOC();
												System.out
														.println("insertion Expdest ===========================> 18 ");

												expdest.setTypeExpDest("Interne-Boc");
												expdest.setIdExpDestLdap(vb
														.getPerson()
														.getAssociatedDirection()
														.getAssociatedBOC()
														.getIdBOC());
												typeIntervenant = "boc_"
														+ String.valueOf(idBoc);
												appMgr.insert(expdest);
												trDest.setTransactionDestIdIntervenant(idBoc);
												etat = appMgr
														.listEtatByLibelle(
																"Non traité")
														.get(0);
												copyNouvelleTransaction
														.setEtat(etat);
												appMgr.update(copyNouvelleTransaction);
												vb.setTransaction(copyNouvelleTransaction);
												vb.setTransactionDestination(trDest);

												System.out.println("idBoc= "
														+ idBoc);
												result = result
														+ vb.getPerson()
																.getAssociatedDirection()
																.getAssociatedBOC()
																.getNameBOC()
														+ " /";

												System.out.println("result = "
														+ result);
											}
										}

										// XTE : Fin d'insertion dans
										// expdest-------------------------------------------------------------------------------------------------

										// XTE: Insertion dans
										// TransactionDestination-----------------------------------------------------------------------------------------
										id.setIdTransaction(vb.getTransaction()
												.getTransactionId());
										id.setIdExpDest(expdest.getIdExpDest());
										trDest.setId(id);
										System.out.println("### 13 ###");
										trDest.setTransactionDestTypeIntervenant(typeIntervenant);

										if (necessiteReponse.equals("Oui")) {
											trDest.setTransactionDestDateReponse(courrier
													.getCourrierDateReponse());
										}
										if (necessiteReceptionPhysique != null
												&& necessiteReceptionPhysique
														.equals("Oui")) {
											trDest.setTransactionDestEtatReceptionPhysique(etatReceptionPhysique);
										}
										appMgr.insert(trDest);
										vb.setTransactionDestination(trDest);

										// XTE: Fin d'insertion dans
										// TransactionDestination-----------------------------------------------------------------------------------
									}

									// XTE : Fin Validation hierarchique des
									// courriers == Oui
									// XTE : Validation hierarchique des
									// courriers
									// ==
									// Non---------------------------------------------------------------------------------
									else {

										System.out
												.println("PP : pas de Validation hierarchique des courriers   ");
										id = new TransactionDestinationId();
										trDest = new TransactionDestination();
										/*
										 * getIdBocByUnit(vb.getPerson()
										 * .getAssociatedDirection());
										 */

										getIdBocByUnit(vb.getPerson()
												.getAssociatedDirection());
										System.out.println("idBoc= " + idBoc);
										// XTE : Insertion dans
										// expdest-------------------------------------------------------------------------------------------------------
										expdest = new Expdest();
										System.out
												.println("insertion Expdest ===========================> 20 ");

										expdest.setTypeExpDest("Interne-Boc");
										expdest.setIdExpDestLdap(idBoc);

										appMgr.insert(expdest);
										System.out.println("id exp dest "
												+ expdest.getIdExpDest());
										System.out.println("type exp dest "
												+ expdest.getTypeExpDest());
										// XTE : Fin d'insertion dans
										// expdest-------------------------------------------------------------------------------------------------
										etat = appMgr.listEtatByLibelle(
												"Non traité").get(0);
										copyNouvelleTransaction.setEtat(etat);
										appMgr.update(copyNouvelleTransaction);

										vb.setTransaction(copyNouvelleTransaction);

										// XTE : Insertion dans
										// TransactionDestination----------------------------------------------------------------------------------------
										id.setIdTransaction(vb.getTransaction()
												.getTransactionId());
										id.setIdExpDest(expdest.getIdExpDest());
										trDest.setId(id);
										String typeIntervenant = "boc_"
												+ String.valueOf(idBoc);
//										System.out.println("### 14 ###");
										trDest.setTransactionDestTypeIntervenant(typeIntervenant);
										trDest.setTransactionDestIdIntervenant(idBoc);
										if (necessiteReponse.equals("Oui")) {
											trDest.setTransactionDestDateReponse(courrier
													.getCourrierDateReponse());
										}
										if (necessiteReceptionPhysique != null
												&& necessiteReceptionPhysique
														.equals("Oui")) {
											trDest.setTransactionDestEtatReceptionPhysique(etatReceptionPhysique);
										}
										appMgr.insert(trDest);
										vb.setTransactionDestination(trDest);

										// XTE : Fin insertion dans
										// TransactionDestination------------------------------------------------------------------------------------
										if (vb.getPerson()
												.getAssociatedDirection() != null) {
											getIdBocByUnit(vb.getPerson()
													.getAssociatedDirection());
										}
										// a changer KHA
										/*
										 * result = result +
										 * ldapOperation.getBocById(idBoc)
										 * .getNameUnit() + " /";
										 */
									}
								}
								// XTE : 2.1.1.2. La personne connectée isBoc
								// ==============================================================================================
								// -----------------------------------------------------------------------------------------------------------------------------------
								else {

									System.out
											.println("PP : personne connectee est boc ");

									copyNouvelleTransaction
											.setTransactionOrdre(1);

									transactionDestinationReelle = new TransactionDestinationReelle();
									transactionDestinationReelle
											.setTransactionDestinationReelleIdDestinataire(vb
													.getCopyListPP().get(i)
													.getExpdestexterne()
													.getIdExpDestExterne());

									transactionDestinationReelle
											.setTransactionDestinationReelleTypeDestinataire("Externe");

									appMgr.insert(transactionDestinationReelle);
									copyNouvelleTransaction
											.setTransactionDestinationReelle(transactionDestinationReelle);

									copyNouvelleTransaction
											.setTransactionFirst(copyNouvelleTransaction
													.getTransactionId());
									appMgr.update(copyNouvelleTransaction);
									vb.setTransaction(copyNouvelleTransaction);
									vb.setTransactionDestination(trDest);

									System.out
											.println("PP : validation_hierarchique_des_courriers non ");
									expdest = new Expdest();
									id = new TransactionDestinationId();
									trDest = new TransactionDestination();
									String typeIntervenant = "";
									if (vb.getCopyListSelectedObjectExp()
											.get(0) instanceof Unit) {
										System.out
												.println(" exp unit : id boc "
														+ idBoc);
										Unit unit = (Unit) vb
												.getCopyListSelectedObjectExp()
												.get(0);

										getIdBocByUnit(unit);

									} 
									else if (vb
											.getCopyListSelectedObjectExp()
											.get(0) instanceof Person) {

										Person person = (Person) vb
												.getCopyListSelectedObjectExp()
												.get(0);
										Person personneRecherche = new Person();
										personneRecherche = getIdPersonbyId(person
												.getId());
										getIdBocByUnit(personneRecherche
												.getAssociatedDirection());
										System.out
												.println(" PP: exp person : id boc "
														+ idBoc);

									}
									System.out
											.println("insertion Expdest ===========================> 21 ");

									expdest.setTypeExpDest("Interne-Boc");
									expdest.setIdExpDestLdap(idBoc);
									typeIntervenant = "boc_"
											+ String.valueOf(idBoc);
									appMgr.insert(expdest);
									System.out.println("### 15 ###");
									trDest.setTransactionDestTypeIntervenant("boc_"
											+ String.valueOf(idBoc));
									trDest.setTransactionDestIdIntervenant(idBoc);
									result = result
											+ unitSup.getAssociatedBOC()
													.getNameBOC() + " /";
									etat = appMgr.listEtatByLibelle(
											"Non traité").get(0);
									copyNouvelleTransaction.setEtat(etat);
									appMgr.update(copyNouvelleTransaction);

									// XTE : Fin d'insertion dans
									// expdest-------------------------------------------------------------------------------------------------

									// XTE : Insertion dans
									// TransactionDestination----------------------------------------------------------------------------------------
									id = new TransactionDestinationId();
									trDest = new TransactionDestination();
									id.setIdTransaction(vb.getTransaction()
											.getTransactionId());
									id.setIdExpDest(expdest.getIdExpDest());
									trDest.setId(id);
									System.out.println("### 16 ###");
									trDest.setTransactionDestTypeIntervenant(typeIntervenant);
									if (necessiteReponse.equals("Oui")) {
										trDest.setTransactionDestDateReponse(courrier
												.getCourrierDateReponse());
									}
									if (necessiteReceptionPhysique != null
											&& necessiteReceptionPhysique
													.equals("Oui")) {
										trDest.setTransactionDestEtatReceptionPhysique(etatReceptionPhysique);
									}
									appMgr.insert(trDest);
									vb.setTransactionDestination(trDest);

									// XTE : Fin d'insertion dans
									// TransactionDestination--------------------------
									result = result
											+ vb.getCopyListPP().get(i)
													.getExpdestexterne()
													.getExpDestExterneNom()
											+ " "
											+ vb.getCopyListPP().get(i)
													.getExpdestexterne()
													.getExpDestExternePrenom()
											+ " /";

									

								}

							}
						}

						// XTE : 2.2/ Destinataire est externe PM:
						// ==========================================================================================
						// -----------------------------------------------------------------------------------------------------------------------------------
						if (!vb.getCopyListPM().isEmpty()) {

							typetransaction = new Typetransaction();
							etat = new Etat();
							for (int i = 0; i < vb.getCopyListPM().size(); i++) {
								// XTE : Insertion
								// Transaction--------------------------------------------------------------------------------------------------------
								copyNouvelleTransaction = new Transaction();
								copyNouvelleTransaction
										.setExpdest(nouvelleTransaction
												.getExpdest());
								copyNouvelleTransaction
										.setIdUtilisateur(nouvelleTransaction
												.getIdUtilisateur());
								copyNouvelleTransaction
										.setDossier(nouvelleTransaction
												.getDossier());
								copyNouvelleTransaction
										.setTransactionDateTransaction(nouvelleTransaction
												.getTransactionDateTransaction());
								copyNouvelleTransaction
										.setTransactionDateReponse(nouvelleTransaction
												.getTransactionDateReponse());
								copyNouvelleTransaction
										.setTransactionCommentaire(nouvelleTransaction
												.getTransactionCommentaire());
								copyNouvelleTransaction
										.setTransactionSupprimer(nouvelleTransaction
												.getTransactionSupprimer());
								typetransaction = appMgr
										.getTypeTransactionByLibelle("Envoi")
										.get(0);
								copyNouvelleTransaction
										.setTypetransaction(typetransaction);

								copyNouvelleTransaction
										.setTransactionTypeIntervenant(nouvelleTransaction
												.getTransactionTypeIntervenant());
								copyNouvelleTransaction
										.setCourrierReferenceCorrespondant(courrier
												.getCourrierReferenceCorrespondant());
								copyNouvelleTransaction
										.setCourrierDateReceptionAnnee(courrier
												.getCourrierOldDateOper());
								copyNouvelleTransaction
										.setCourrierType(courrier
												.getCourrierType());
								copyNouvelleTransaction
										.setCourrierTypeOrdre(courrier
												.getCourrierTypeOrdre());
								typetransaction = appMgr
										.getTypeTransactionByLibelle("Envoi")
										.get(0);
								copyNouvelleTransaction
										.setTypetransaction(typetransaction);
								etat = appMgr.listEtatByLibelle("Traité")
										.get(0);
								copyNouvelleTransaction.setEtat(etat);
								appMgr.insert(copyNouvelleTransaction);
								vb.setTransaction(copyNouvelleTransaction);
								vb.setTransactionDestination(trDest);

								// XTE : Insertion dans table
								// Annotation----------------------------------------------------------------------------------------------
								List<String> listAnnotationParDest = new ArrayList<String>();
								//chooseAnnotationType = "tous";
								//otherAnnotation = "";
								System.out
										.println(" PM : Insertion dans table");
								chooseAnnotationType="";
								otherAnnotation="";
								for (ListeDestinatairesModel dest : destinataires) {
									System.out.println("PM: PMdest id= "
											+ vb.getCopyListPM().get(i)
													.getPmid().intValue());
									System.out.println("PM: dest id= "
											+ dest.getDestinataireId());
									if (dest.getDestinataireId() == vb
											.getCopyListPM().get(i)
											.getExpdestexterne()
											.getIdExpDestExterne()) {
										listAnnotationParDest = dest
												.getListeAnnotations();
										System.out.println("PM: annotation= "
												+ dest.getListeAnnotations());

										chooseAnnotationType = dest
												.getChooseAnnotationType();

										otherAnnotation = dest
												.getOtherAnnotation();
										break;
									}
								}
								if (chooseAnnotationType != null
										&& chooseAnnotationType.equals("tous")) {
									for (int j = 0; listAnnotationParDest != null
											&& j < listAnnotationParDest.size(); j++) {

										courrierIdAnnotation
												.setIdAnnotation(Integer
														.valueOf(listAnnotationParDest
																.get(j)));
										courrierIdAnnotation
												.setIdTransaction(vb
														.getTransaction()
														.getTransactionId());
										courrierAnnotation
												.setId(courrierIdAnnotation);
										appMgr.insert(courrierAnnotation);
										courrierAnnotation = new TransactionAnnotation();
										courrierIdAnnotation = new TransactionAnnotationId();
									}
								} else if (chooseAnnotationType != null
										&& chooseAnnotationType.equals("autre")) {

									courrierIdAnnotation.setIdAnnotation(10);
									courrierIdAnnotation.setIdTransaction(vb
											.getTransaction()
											.getTransactionId());
									courrierAnnotation
											.setId(courrierIdAnnotation);
									appMgr.insert(courrierAnnotation);
									copyNouvelleTransaction
											.setTransactionCommentaireAnnotation(otherAnnotation);
									appMgr.update(copyNouvelleTransaction);
									courrierAnnotation = new TransactionAnnotation();
									courrierIdAnnotation = new TransactionAnnotationId();
								}
								System.out
										.println(" PM : Fin Insertion dans table");
								// XTE : Fin insertion dans table
								// Annotation------------------------------------------------------------------------------------------

								// if (chooseAnnotationType!=null &&
								// chooseAnnotationType.equals("autre")) {
								// copyNouvelleTransaction
								// .setTransactionCommentaireAnnotation(otherAnnotation);
								// }
								// XTE : 2.2.1. La personne connectée not
								// isBoc===========================================================================================
								// -----------------------------------------------------------------------------------------------------------------------------------
								if (!vb.getPerson().isBoc()) {
									System.out
											.println("PM : Validation hierarchique connectee n'est boc ");
									etat = appMgr
											.listEtatByLibelle("A valider")
											.get(0);
									copyNouvelleTransaction.setEtat(etat);
									copyNouvelleTransaction
											.setTransactionOrdre(1);
									transactionDestinationReelle = new TransactionDestinationReelle();
									transactionDestinationReelle
											.setTransactionDestinationReelleIdDestinataire(vb
													.getCopyListPM().get(i)
													.getExpdestexterne()
													.getIdExpDestExterne());
									transactionDestinationReelle
											.setTransactionDestinationReelleTypeDestinataire("Externe");
									appMgr.insert(transactionDestinationReelle);
									
									copyNouvelleTransaction
											.setTransactionDestinationReelle(transactionDestinationReelle);

									// XTE : Fin insertion
									// Transaction----------------------------------------------------------------------------------------------------

									copyNouvelleTransaction
											.setTransactionFirst(copyNouvelleTransaction
													.getTransactionId());
									appMgr.update(copyNouvelleTransaction);

									Variables variable = new Variables();

									// validation hierarchique par nature
									// courrier
									// est vrai
									variable = appMgr
											.listVariablesByLibelle(
													"validation_hierarchique_courrier_nature")
											.get(0);
									Variables variableValidationHierarchiqueSortant = new Variables();
									variableValidationHierarchiqueSortant = appMgr
											.listVariablesByLibelle(
													"validation_hierarchique_courrier_sortant")
											.get(0);
									// XTE :
									// validation_hierarchique_des_courriers
									// ==Oui-----------------------------------------------------------------------------------
									if (variableValidationHierarchiqueSortant
											.getVaraiablesValeur()
											.equals("Oui")
											&& (variable.getVaraiablesValeur())
													.toLowerCase()
													.equals("oui")
											&& courrier.getNature()
													.getNatureValide()
													.booleanValue() == true) {
										System.out
												.println("PM : validation_hierarchique_des_courriers oui ");

										expdest = new Expdest();
										id = new TransactionDestinationId();
										trDest = new TransactionDestination();
										String typeIntervenant = "";
										// XTE : Insertion
										// Expdest------------------------------------------------------------------------------------------------------------
										// XTE : 2.2.1.1. Le cas
										// Agent============================================================================================================
										// -----------------------------------------------------------------------------------------------------------------------------------
										if (vb.getPerson().isAgent()) {
											if (vb.getPerson()
													.getAssociatedDirection() != null) {
												System.out
														.println("PM : connectee agent unit:  ");
												expdest.setTypeExpDest("Interne-Person");
												expdest.setIdExpDestLdap(vb
														.getPerson()
														.getAssociatedDirection()
														.getResponsibleUnit()
														.getId());
												typeIntervenant = "sub_"
														+ String.valueOf(vb
																.getPerson()
																.getAssociatedDirection()
																.getResponsibleUnit()
																.getId());
												appMgr.insert(expdest);
												result = result
														+ ldapOperation
																.getUserById(
																		vb.getPerson()
																				.getAssociatedDirection()
																				.getResponsibleUnit()
																				.getId())
																.getCn() + " /";
											} else {
												System.out
														.println("PM : connectee agent boc:  ");
												idBoc = vb.getPerson()
														.getAssociatedBOC()
														.getIdBOC();
												System.out.println("idBoc= "
														+ idBoc);
												System.out
														.println("insertion Expdest ===========================> 22 ");

												expdest.setTypeExpDest("Interne-Boc");
												expdest.setIdExpDestLdap(vb
														.getPerson()
														.getAssociatedBOC()
														.getIdBOC());

												typeIntervenant = "boc_"
														+ String.valueOf(idBoc);
												appMgr.insert(expdest);

												result = result
														+ vb.getPerson()
																.getAssociatedBOC()
																.getNameBOC()
														+ " /";
											}
										}
										// XTE : 2.2.1.2. Le cas
										// Secrétaire=======================================================================================================
										// -----------------------------------------------------------------------------------------------------------------------------------
										else if (vb.getPerson().isSecretary()) {
											System.out
													.println("PM : connectee secretary unit:  ");
											expdest.setTypeExpDest("Interne-Person");
											expdest.setIdExpDestLdap(vb
													.getPerson()
													.getAssociatedDirection()
													.getResponsibleUnit()
													.getId());
											typeIntervenant = "sub_"
													+ String.valueOf(vb
															.getPerson()
															.getAssociatedDirection()
															.getResponsibleUnit()
															.getId());
											appMgr.insert(expdest);
											result = result
													+ ldapOperation
															.getUserById(
																	vb.getPerson()
																			.getAssociatedDirection()
																			.getResponsibleUnit()
																			.getId())
															.getCn() + " /";
										}
										// XTE : 2.2.1.3 Le cas
										// Responsable=======================================================================================================
										// -----------------------------------------------------------------------------------------------------------------------------------
										else {
											if (vb.getPerson()
													.getAssociatedDirection()
													.getAssociatedUnit() != null) {
												System.out
														.println("PM : connectee resp unit:  ");
												expdest.setTypeExpDest("Interne-Person");
												expdest.setIdExpDestLdap(vb
														.getPerson()
														.getAssociatedDirection()
														.getAssociatedUnit()
														.getResponsibleUnit()
														.getId());
												typeIntervenant = "sub_"
														+ String.valueOf(vb
																.getPerson()
																.getAssociatedDirection()
																.getAssociatedUnit()
																.getResponsibleUnit()
																.getId());
												appMgr.insert(expdest);
												System.out
														.println("id exp dest "
																+ expdest
																		.getIdExpDest());
												System.out
														.println("type exp dest "
																+ expdest
																		.getTypeExpDest());
												result = result
														+ ldapOperation
																.getUserById(
																		vb.getPerson()
																				.getAssociatedDirection()
																				.getAssociatedUnit()
																				.getResponsibleUnit()
																				.getId())
																.getCn() + " /";
											} else {
												System.out
														.println("PM : connectee associated unit: boc ");
												System.out
														.println("insertion Expdest ===========================> 23 ");

												expdest.setTypeExpDest("Interne-Boc");
												expdest.setIdExpDestLdap(vb
														.getPerson()
														.getAssociatedDirection()
														.getAssociatedBOC()
														.getIdBOC());
												typeIntervenant = "boc_"
														+ String.valueOf(vb
																.getPerson()
																.getAssociatedDirection()
																.getAssociatedBOC()
																.getIdBOC());
												appMgr.insert(expdest);
												System.out
														.println("id exp dest "
																+ expdest
																		.getIdExpDest());
												System.out
														.println("type exp dest "
																+ expdest
																		.getTypeExpDest());
												etat = appMgr
														.listEtatByLibelle(
																"Non traité")
														.get(0);
												copyNouvelleTransaction
														.setEtat(etat);
												appMgr.update(copyNouvelleTransaction);
												vb.setTransaction(copyNouvelleTransaction);
												vb.setTransactionDestination(trDest);

												if (vb.getPerson()
														.getAssociatedDirection() != null) {
													getIdBocByUnit(vb
															.getPerson()
															.getAssociatedDirection());
												}
												result = result
														+ vb.getPerson()
																.getAssociatedDirection()
																.getAssociatedBOC()
																.getNameBOC()
														+ " /";
											}
										}
										// XTE : Fin d'insertion
										// Expdest------------------------------------------------------------------------------------------------------

										// XTE : Insertion
										// TransactionDestination---------------------------------------------------------------------------------------------
										id.setIdTransaction(vb.getTransaction()
												.getTransactionId());
										id.setIdExpDest(expdest.getIdExpDest());
										trDest.setId(id);
										System.out.println("### 17 ###");
										trDest.setTransactionDestTypeIntervenant(typeIntervenant);

										if (necessiteReponse.equals("Oui")) {
											trDest.setTransactionDestDateReponse(courrier
													.getCourrierDateReponse());
										}
										if (necessiteReceptionPhysique != null
												&& necessiteReceptionPhysique
														.equals("Oui")) {
											trDest.setTransactionDestEtatReceptionPhysique(etatReceptionPhysique);
										}
										appMgr.insert(trDest);
										vb.setTransactionDestination(trDest);

										// XTE : Insertion
										// TransactionDestination---------------------------------------------------------------------------------------------

									} else {
										System.out
												.println("Pm : pas de Validation hierarchique des courriers   ");

										id = new TransactionDestinationId();
										trDest = new TransactionDestination();
										getIdBocByUnit(vb.getPerson()
												.getAssociatedDirection());
										System.out.println("id boc= " + idBoc);
										// XTE : Insertion dans
										// Expdest-------------------------------------------------------------------------------------------------------
										expdest = new Expdest();
										System.out
												.println("insertion Expdest ===========================> 24 ");

										expdest.setTypeExpDest("Interne-Boc");
										expdest.setIdExpDestLdap(idBoc);
										String typeIntervenant = "boc_"
												+ String.valueOf(idBoc);
										appMgr.insert(expdest);
										System.out.println("id exp dest "
												+ expdest.getIdExpDest());
										System.out.println("type exp dest "
												+ expdest.getTypeExpDest());
										// XTE : Fin d'insertion dans
										// Expdest-------------------------------------------------------------------------------------------------

										etat = appMgr.listEtatByLibelle(
												"Non traité").get(0);
										copyNouvelleTransaction.setEtat(etat);
										appMgr.update(copyNouvelleTransaction);
										vb.setTransaction(copyNouvelleTransaction);

										// XTE : Insertion
										// transactionDestination---------------------------------------------------------------------------------------------
										id.setIdTransaction(vb.getTransaction()
												.getTransactionId());
										id.setIdExpDest(expdest.getIdExpDest());
										trDest.setId(id);
										System.out.println("### 18 ###");
										trDest.setTransactionDestTypeIntervenant(typeIntervenant);
										trDest.setTransactionDestIdIntervenant(idBoc);

										if (necessiteReponse.equals("Oui")) {
											trDest.setTransactionDestDateReponse(courrier
													.getCourrierDateReponse());
										}
										if (affichageReceptionPhysique == true)
											if (necessiteReceptionPhysique
													.equals("Oui")) {
												trDest.setTransactionDestEtatReceptionPhysique(etatReceptionPhysique);
											}

										appMgr.insert(trDest);
										vb.setTransactionDestination(trDest);

										// XTE : Fin insertion
										// transactionDestination-----------------------------------------------------------------------------------------
									
									}

								}
								// XTE : 2.2.2. Personne connecté
								// isBoc===================================================================================================
								// -----------------------------------------------------------------------------------------------------------------------------------
								else {

									System.out.println("PM : connectee boc");
									copyNouvelleTransaction
											.setTransactionOrdre(1);

									transactionDestinationReelle = new TransactionDestinationReelle();
									transactionDestinationReelle
											.setTransactionDestinationReelleIdDestinataire(vb
													.getCopyListPM().get(i)
													.getExpdestexterne()
													.getIdExpDestExterne());

									transactionDestinationReelle
											.setTransactionDestinationReelleTypeDestinataire("Externe");

									appMgr.insert(transactionDestinationReelle);
										System.out.println(transactionDestinationReelle);
									copyNouvelleTransaction
											.setTransactionDestinationReelle(transactionDestinationReelle);

									appMgr.insert(copyNouvelleTransaction);

									copyNouvelleTransaction
											.setTransactionFirst(copyNouvelleTransaction
													.getTransactionId());
									appMgr.update(copyNouvelleTransaction);
									vb.setTransaction(copyNouvelleTransaction);

									System.out
											.println("PM : validation_hierarchique_des_courriers non ");
									expdest = new Expdest();
									id = new TransactionDestinationId();
									trDest = new TransactionDestination();
									String typeIntervenant = "";
									if (vb.getCopyListSelectedObjectExp()
											.get(0) instanceof Unit) {
										System.out
												.println(" exp unit : id boc "
														+ idBoc);
										Unit unit = (Unit) vb
												.getCopyListSelectedObjectExp()
												.get(0);

										getIdBocByUnit(unit);

									} else if (vb
											.getCopyListSelectedObjectExp()
											.get(0) instanceof Person) {

										Person person = (Person) vb
												.getCopyListSelectedObjectExp()
												.get(0);
										Person personneRecherche = new Person();
										personneRecherche = getIdPersonbyId(person
												.getId());
										getIdBocByUnit(personneRecherche
												.getAssociatedDirection());
										System.out
												.println(" PM: exp person : id boc "
														+ idBoc);

									}
									System.out
											.println("insertion Expdest ===========================> 25 ");

									expdest.setTypeExpDest("Interne-Boc");
									expdest.setIdExpDestLdap(idBoc);
									typeIntervenant = "boc_"
											+ String.valueOf(idBoc);
									appMgr.insert(expdest);
									// System.out
									// .println("### 19 ###");
									// trDest.setTransactionDestTypeIntervenant("boc_"+String.valueOf(idBoc));
									System.out.println("boc id= " + idBoc);
									result = result
											+ unitSup.getAssociatedBOC()
													.getNameBOC() + " /";
									etat = appMgr.listEtatByLibelle(
											"Non traité").get(0);
									copyNouvelleTransaction.setEtat(etat);
									appMgr.update(copyNouvelleTransaction);

									// XTE : Fin d'insertion dans
									// expdest-------------------------------------------------------------------------------------------------

									// XTE : Insertion dans
									// TransactionDestination----------------------------------------------------------------------------------------
									id = new TransactionDestinationId();
									trDest = new TransactionDestination();
									id.setIdTransaction(vb.getTransaction()
											.getTransactionId());
									id.setIdExpDest(expdest.getIdExpDest());
									trDest.setId(id);
									System.out.println("### 20 ###");
									System.out.println("Type Intervenenat : "
											+ typeIntervenant);
									System.out.println("ID BOC : " + idBoc);

									trDest.setTransactionDestTypeIntervenant(typeIntervenant);
									trDest.setTransactionDestIdIntervenant(idBoc);

									if (necessiteReponse.equals("Oui")) {
										trDest.setTransactionDestDateReponse(courrier
												.getCourrierDateReponse());
									}
									if (necessiteReceptionPhysique != null
											&& necessiteReceptionPhysique
													.equals("Oui")) {
										trDest.setTransactionDestEtatReceptionPhysique(etatReceptionPhysique);
									}
									appMgr.insert(trDest);
									// XTE : Fin d'insertion dans
									// TransactionDestination--------------------------
									vb.setTransactionDestination(trDest);

									
								
								}

							}
						}
						// TODO c'est qui getCopyListSelectedBoc()
						// MM : 3.0/ Destinataire est ?????????:
						// =====================================================================================
						// -----------------------------------------------------------------------------------------------------------------------------
						if (!vb.getCopyListSelectedBoc().isEmpty()) {
							
							// XTE : Insertion
							// transaction--------------------------------------------------------------------------------------------------------
							copyNouvelleTransaction = new Transaction();
							copyNouvelleTransaction
									.setExpdest(nouvelleTransaction
											.getExpdest());
							copyNouvelleTransaction
									.setIdUtilisateur(nouvelleTransaction
											.getIdUtilisateur());
							copyNouvelleTransaction
									.setDossier(nouvelleTransaction
											.getDossier());
							copyNouvelleTransaction
									.setTransactionDateTransaction(nouvelleTransaction
											.getTransactionDateTransaction());
							copyNouvelleTransaction
									.setTransactionDateReponse(nouvelleTransaction
											.getTransactionDateReponse());
							copyNouvelleTransaction
									.setTransactionCommentaire(nouvelleTransaction
											.getTransactionCommentaire());
							copyNouvelleTransaction
									.setTransactionSupprimer(nouvelleTransaction
											.getTransactionSupprimer());
							typetransaction = appMgr
									.getTypeTransactionByLibelle("Envoi")
									.get(0);
							copyNouvelleTransaction
									.setTypetransaction(typetransaction);

							etat = appMgr.listEtatByLibelle("Encours").get(0);
							copyNouvelleTransaction.setEtat(etat);

							transactionDestinationReelle = new TransactionDestinationReelle();
							transactionDestinationReelle
									.setTransactionDestinationReelleIdDestinataire(vb
											.getCopyListSelectedBoc().get(0)
											.getIdBOC());
							transactionDestinationReelle
									.setTransactionDestinationReelleTypeDestinataire("BO");
							appMgr.insert(transactionDestinationReelle);
							copyNouvelleTransaction
									.setTransactionDestinationReelle(transactionDestinationReelle);

							if (chooseAnnotationType != null
									&& chooseAnnotationType.equals("autre")) {
								copyNouvelleTransaction
										.setTransactionCommentaireAnnotation(otherAnnotation);

							}
							appMgr.insert(copyNouvelleTransaction);
							// XTE : Fin d'insertion
							// transaction--------------------------------------------------------------------------------------------------

							copyNouvelleTransaction
									.setTransactionFirst(copyNouvelleTransaction
											.getTransactionId());
							appMgr.update(copyNouvelleTransaction);
							vb.setTransaction(copyNouvelleTransaction);
							id = new TransactionDestinationId();
							trDest = new TransactionDestination();

							id.setIdTransaction(vb.getTransaction()
									.getTransactionId());
							expdest.setTypeExpDest("Interne-BO");

							idBoc = vb.getPerson().getAssociatedBOC()
									.getIdBOC();
							expdest.setIdExpDestLdap(idBoc);
							appMgr.insert(expdest);

							copyNouvelleTransaction.setCourrierType("V");

							int year = courrier.getCourrierOldDateOper();
							int mois = courrier.getCourrierDateReceptionMois();
							copyNouvelleTransaction
									.setCourrierDateReceptionMois(mois);
							

							copyNouvelleTransaction
									.setCourrierTypeOrdre(courrier
											.getCourrierTypeOrdre());
							copyNouvelleTransaction
									.setCourrierReferenceCorrespondant(courrier
											.getCourrierReferenceCorrespondant());
							appMgr.update(copyNouvelleTransaction);
							vb.setTransaction(copyNouvelleTransaction);
							vb.setTransactionDestination(trDest);

							// XTE : Insertion des
							// annotations----------------------------------------------------------------------------------------------------
							if (chooseAnnotationType != null
									&& chooseAnnotationType.equals("tous")) {
								for (int j = 0; j < resultatAnnotation.size(); j++) {
									courrierIdAnnotation
											.setIdAnnotation(Integer
													.valueOf(resultatAnnotation
															.get(j)));
									courrierIdAnnotation.setIdTransaction(vb
											.getTransaction()
											.getTransactionId());
									courrierAnnotation
											.setId(courrierIdAnnotation);
									appMgr.insert(courrierAnnotation);
									courrierAnnotation = new TransactionAnnotation();
									courrierIdAnnotation = new TransactionAnnotationId();
								}
							} else if (chooseAnnotationType != null
									&& chooseAnnotationType.equals("autre")) {

								courrierIdAnnotation.setIdAnnotation(10);
								courrierIdAnnotation.setIdTransaction(vb
										.getTransaction().getTransactionId());
								courrierAnnotation.setId(courrierIdAnnotation);
								appMgr.insert(courrierAnnotation);
								courrierAnnotation = new TransactionAnnotation();
								courrierIdAnnotation = new TransactionAnnotationId();
							}
							// XTE : Fin d'insertion des
							// annotations----------------------------------------------------------------------------------------------
							// ///////////KBS 2019-10-12////////////////////
						
							if (flagValise) {
								expdest = new Expdest();
								
								expdest.setTypeExpDest("Interne-BO");
								expdest.setIdExpDestLdap(vb
										.getCopyListSelectedBoc().get(0)
										.getIdBOC());
								appMgr.insert(expdest);
								// XTE : Fin d'insertion
								// Expdest------------------------------------------------------------------------------------------------------

								// XTE : Insertion
								// TransactionDestination---------------------------------------------------------------------------------------------
								id = new TransactionDestinationId();
								trDest = new TransactionDestination();
								id.setIdTransaction(vb.getTransaction()
										.getTransactionId());
								id.setIdExpDest(expdest.getIdExpDest());
								trDest.setId(id);
								trDest.setTransactionDestTypeIntervenant("boc_"
										+ String.valueOf(idBoc));
								trDest.setTransactionDestIdIntervenant(idBoc);
								if (necessiteReponse != null
										&& necessiteReponse.equals("Oui")) {
									trDest.setTransactionDestDateReponse(courrier
											.getCourrierDateReponse());
								}
								if (necessiteReceptionPhysique != null
										&& necessiteReceptionPhysique
												.equals("Oui")) {
									trDest.setTransactionDestEtatReceptionPhysique(etatReceptionPhysique);
								}
								appMgr.insert(trDest);
							} else {
								// ///////////KBS 2019-10-12////////////////////
								for (int i = 0; i < vb.getCopyListSelectedBoc()
										.size(); i++) {
									
									result = result
											+ vb.getCopyListSelectedBoc()
													.get(i).getNameBOC()
											+ " / ";
									if (vb.getPerson().isResponsable()) {
										// XTE : Insertion
										// Expdest------------------------------------------------------------------------------------------------------------
										expdest = new Expdest();
										System.out
												.println("insertion Expdest ===========================> 27 ");

										expdest.setTypeExpDest("Interne-Bo");
										expdest.setIdExpDestLdap(vb
												.getCopyListSelectedBoc()
												.get(i).getIdBOC());
										appMgr.insert(expdest);
										// XTE : Fin d'insertion
										// Expdest------------------------------------------------------------------------------------------------------

										// XTE : Insertion
										// TransactionDestination---------------------------------------------------------------------------------------------
										id = new TransactionDestinationId();
										trDest = new TransactionDestination();
										id.setIdTransaction(vb.getTransaction()
												.getTransactionId());
										id.setIdExpDest(expdest.getIdExpDest());
										trDest.setId(id);
										trDest.setTransactionDestTypeIntervenant("boc_"
												+ String.valueOf(idBoc));
										trDest.setTransactionDestIdIntervenant(idBoc);
										if (necessiteReponse.equals("Oui")) {
											trDest.setTransactionDestDateReponse(courrier
													.getCourrierDateReponse());
										}
										if (necessiteReceptionPhysique != null
												&& necessiteReceptionPhysique
														.equals("Oui")) {
											trDest.setTransactionDestEtatReceptionPhysique(etatReceptionPhysique);
										}
										appMgr.insert(trDest);
										vb.setTransactionDestination(trDest);

										// XTE : Fin d'insertion
										// TransactionDestination---------------------------------------------------------------------------------------
									} else {
										// XTE : Insertion
										// Expdest------------------------------------------------------------------------------------------------------------
										expdest = new Expdest();
										
										expdest.setTypeExpDest("Interne-BO");
										expdest.setIdExpDestLdap(vb
												.getCopyListSelectedBoc()
												.get(i).getIdBOC());
										appMgr.insert(expdest);
										// XTE : Fin d'insertion
										// Expdest------------------------------------------------------------------------------------------------------

										// XTE : Insertion
										// TransactionDestination---------------------------------------------------------------------------------------------
										id = new TransactionDestinationId();
										trDest = new TransactionDestination();
										id.setIdTransaction(vb.getTransaction()
												.getTransactionId());
										id.setIdExpDest(expdest.getIdExpDest());
										trDest.setId(id);
										trDest.setTransactionDestTypeIntervenant("boc_"
												+ String.valueOf(idBoc));
										trDest.setTransactionDestIdIntervenant(idBoc);
										if (necessiteReponse != null
												&& necessiteReponse
														.equals("Oui")) {
											trDest.setTransactionDestDateReponse(courrier
													.getCourrierDateReponse());
										}
										if (necessiteReceptionPhysique != null
												&& necessiteReceptionPhysique
														.equals("Oui")) {
											trDest.setTransactionDestEtatReceptionPhysique(etatReceptionPhysique);
										}
										appMgr.insert(trDest);
										// XTE : Fin d'insertion
										// TransactionDestination---------------------------------------------------------------------------------------
									}
								}
							}// for
						}

						if (!result.equals("")) {
							int lastIndex = result.lastIndexOf("/");
							result = result.substring(0, lastIndex);
						}

						if (vb.getCopyListPM().isEmpty()
								&& vb.getCopyListPP().isEmpty()
								&& vb.getCopyListSelectedPerson().isEmpty()
								&& vb.getCopyListSelectedBoc().isEmpty()
								&& vb.getCopyListSelectedUnit().isEmpty()) {
							System.out
									.println("AH 3425 : tous les listes sont vides");
							// XTE : Insertion
							// transaction--------------------------------------------------------------------------------------------------------
							typetransaction = new Typetransaction();

							typetransaction = appMgr
									.getTypeTransactionByLibelle("Départ").get(
											0);
							nouvelleTransaction
									.setTypetransaction(typetransaction);
							appMgr.insert(nouvelleTransaction);
							// XTE : Fin d'insertion
							// transaction--------------------------------------------------------------------------------------------------
							nouvelleTransaction
									.setTransactionFirst(nouvelleTransaction
											.getTransactionId());
							appMgr.update(nouvelleTransaction);
							vb.setTransaction(nouvelleTransaction);
							vb.setTransactionDestination(trDest);

							// XTE : Insertion des
							// annotations----------------------------------------------------------------------------------------------------
							if (chooseAnnotationType != null
									&& chooseAnnotationType.equals("tous")) {
								for (int j = 0; j < resultatAnnotation.size(); j++) {
									courrierIdAnnotation
											.setIdAnnotation(Integer
													.valueOf(resultatAnnotation
															.get(j)));
									courrierIdAnnotation.setIdTransaction(vb
											.getTransaction()
											.getTransactionId());
									courrierAnnotation
											.setId(courrierIdAnnotation);
									appMgr.insert(courrierAnnotation);
									courrierAnnotation = new TransactionAnnotation();
									courrierIdAnnotation = new TransactionAnnotationId();
								}
							} else if (chooseAnnotationType != null
									&& chooseAnnotationType.equals("autre")) {

								courrierIdAnnotation.setIdAnnotation(10);
								courrierIdAnnotation.setIdTransaction(vb
										.getTransaction().getTransactionId());
								courrierAnnotation.setId(courrierIdAnnotation);
								appMgr.insert(courrierAnnotation);
								courrierAnnotation = new TransactionAnnotation();
								courrierIdAnnotation = new TransactionAnnotationId();
							}
							// XTE : Fin d'insertion des
							// annotations----------------------------------------------------------------------------------------------
						}

						if (courrier.getNature() != null
								&& courrier.getNature().getNatureId() == 44
								|| courrier.getNature().getNatureId() == 46) {
							//2020-08-06
							if(vb.getAoConsultation()!=null){
							courrier.setAoConsultationId(aoConsultation);						
							appMgr.update(courrier);
							}
						}
						 LogClass logClass = new LogClass();
						 logClass.addTrack("ajout",
						 "Evénement de log d'ajout du courrier " +
						 courrier.getIdCourrier() + "-"
						 + courrier.getCourrierReferenceCorrespondant(),
						 vb.getPerson(), "INFO", appMgr);

						List<Transaction> allTransactions = appMgr
						.getTransactionByIdDossier(dossier.getDossierId());
						vb.setAllTransactions(allTransactions);
				transaction = vb.getTransaction();
				boolean connecteIsBoc=vb.getPerson().isBoc();
				Integer courrierEtat = transaction.getEtat().getEtatId();
				List<BOC> listeBOS = vb.getListTousBos();
				List<Person> listTousUtilisateur = vb.getCopyLdapListUser();
				
				String anneeCourrier =courrier.getCourrierOldDateOper().toString();
				String moisCourier=courrier.getCourrierDateReceptionMois().toString();
				
				int idUtilisateurTransaction = vb.getPerson().getId();
				String codeUniqueCourrier = MethodesGenerique.generationCodeUniqueCourrier(vb.getPerson(),appMgr, transaction,anneeCourrier,moisCourier, destinataireExpediteur,  connecteIsBoc, courrierEtat, listeBOS, listTousUtilisateur,idUtilisateurTransaction);
				
				vb.setCodeUniqueCourrier(codeUniqueCourrier);
				
				
				try {
					chargementNotification();
				} catch (Exception e) {
					e.printStackTrace();
				}
				if(destinataires!=null)

				vb.setListeDestinataire(destinataires);
						
						courrier = new Courrier();
						// System.out.println("***************Succes Ajout Courrier***************");

						vb.setCopyListSelectedPerson(new ArrayList<Person>());
						vb.setCopyListPP(new ArrayList<Pp>());
						vb.setCopyListPM(new ArrayList<Pm>());
						vb.setListSelectedItem(new ArrayList<ItemSelected>());
						vb.setCopyListSelectedBoc(new ArrayList<BOC>());
						vb.setCopyListSelectedUnit(new ArrayList<Unit>());

						vb.setCopyDestNom(result);
						vb.setDestinataireReel(vb.getDestNom());
						
						//pour afficher la ref après l'ajout
						
						String affichageRefDest=vb.getDestinataireReel();
						String referenceCourrier=transaction.getCourrierReferenceCorrespondant();
						affichageRefDest=affichageRefDest.replaceAll("/", "["+referenceCourrier+"]/");
						affichageRefDest=affichageRefDest+"["+referenceCourrier+"]";
						vb.setDestinataireReel(affichageRefDest);
						System.out.println("AAAAAAA <<>> "+vb.getDestinataireReel());
						
						vb.setDestNom(null);
						vb.setExpNom(null);

					}
					else {
						echeanceInvalide = true;
						ajoutValide = false;
						return;
					}
					if(vb.getPerson().isBoc())
					vb.setCourrierAExcecuter(true);
					dateCourrierInvalide = false;
				}
				// XTE : Date du courrier est
				// invalide-------------------------------------------------------------------------------------------------
				else {
					dateCourrierInvalide = true;
					ajoutValide = false;

				}
				// XTE : Lorsque le destinataire et l'expéditeur du courrier
				// sont
				// les deux Unité,nous mettons "I" dans la colonne
				// "FlagInterne"--------
				if (vb.getPerson().isBoc()) {
					if ((vb.getCopyListSelectedObjectExp().get(0) instanceof Unit)
							&& (vb.getCopyListSelectedObject().get(0) instanceof Unit)) {
						vb.getCourrier().setCourrierFlagInterne("I");
						appMgr.update(vb.getCourrier());

					} else {
						vb.getCourrier().setCourrierFlagInterne(null);
						appMgr.update(vb.getCourrier());
					}
				} else {
//					System.out.println("[typeSender] " + typeSender);
//					System.out.println("[vb.getCopyListSelectedObject()] "
//							+ vb.getCopyListSelectedObject());
				if(!transformationMailFax){	
					if (typeSender.equals("MonUnite")
							&& (vb.getCopyListSelectedObject().get(0) instanceof Unit)) {

						vb.getCourrier().setCourrierFlagInterne("I");
						appMgr.update(vb.getCourrier());

					} else {
						vb.getCourrier().setCourrierFlagInterne(null);
						appMgr.update(vb.getCourrier());
					}
				}

				}

			} catch (Exception e) {
				e.printStackTrace();
				System.out
						.println("*************** Erreur d'ajout courrier §§§§§§§ ***************");

				e.printStackTrace();
				ajoutValide = false;
				ajoutMail=false;
				insertionInterrompus = true;
				Person person = vb.getPerson();				
				ConnexionNotificationUtil cf = new ConnexionNotificationUtil();
				// try {
				// cf.sendLogErreurAjoutCourrier(person, appMgr);
				// } catch (AddressException e1) {
				// e1.printStackTrace();
				// } catch (MessagingException e1) {
				// e1.printStackTrace();
				// }
			}
		}
	}

	public void saveWorkflow(TraitementEtapeSuivant etapeSuivant) {
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		// Fonction : saveWorkflow
		// Date :
		// Auteur :
		// Description : Cette fonction permet d'ajouter un courier qui suit un
		// Workflow en lui passant en paramètre l'étape suivante
		// que va suivre notre courrier.
		//
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------

		ajoutValide = false;
		echeanceInvalide = false;
		dateCourrierInvalide = false;
		insertionInterrompus = false;

		Dossier dossier = new Dossier();
		Typedossier typedossier = new Typedossier();
		Transaction nouvelleTransaction = new Transaction();
		Etat etat = new Etat();
		TransactionDestinationId id;
		TransactionDestination trDest;
		Expdest expdest;
		Typetransaction typetransaction;
		Transaction copyNouvelleTransaction;
		try {
			courrier.setCourrierDateReception(dateCourrier);
			courrier.setCourrierDateReceptionReelle(dateReelle);
			echeanceInvalide = false;
			ajoutValide = true;
			showPopupSansGED = true;

			// XTE : Mettre à jour la nature du
			// courrier-----------------------------------------------------------------------------------------
			courrier.setNature(appMgr.getNatureById(
					Integer.valueOf(selectedItemNature)).get(0));

			// XTE : Mettre à jour le Mode Transmission du
			// courrier------------------------------------------------------------------------------

			if (transformationMailFax) {

				if (mail != null) {
					transmission = appMgr.getTransmissionById(4).get(0);
				} else if (faxMail != null) {
					transmission = appMgr.getTransmissionById(3).get(0);
				}

			} else {
				transmission = appMgr.getTransmissionById(
						Integer.valueOf(selectedItemsTr)).get(0);
			}
			courrier.setTransmission(transmission);

			// XTE : Mettre à jour la Confidentialité du
			// courrier--------------------------------------------------------------------------------
			confidentialite = appMgr.getConfidentialiteById(
					Integer.valueOf(selectedItemConf)).get(0);
			courrier.setConfidentialite(confidentialite);

			// XTE : Mettre à jour l'Urgence du
			// courrier-----------------------------------------------------------------------------------------
			urgence = appMgr.getUrgenceById(Integer.valueOf(selectedItemUg))
					.get(0);
			courrier.setUrgence(urgence);

			// XTE : Mettre à jour la nécessité de
			// Reponse----------------------------------------------------------------------------------------
			courrier.setCourrierNecessiteReponse(necessiteReponse);

			courrier.setCourrierDateSysteme(new Date());
			courrier.setCourrierSupprime(true);
			courrier.setCourrierflagArchive(0);

			// XTE :Ajout
			// Dossier-----------------------------------------------------------------------------------------------------------------
			dossier.setConfidentialite(confidentialite);
			dossier.setDossierDateCreation(new Date());
			dossier.setDossierDescription(courrier.getCourrierCommentaire());

			dossier.setDossierSupprime(true);
			typedossier = appMgr.getTypeDossierById(1).get(0);
			dossier.setTypedossier(typedossier);
			appMgr.insert(dossier);

			vb.setDossier(dossier);
			// XTE : Fin Ajout
			// Dossier------------------------------------------------------------------------------------------------------------

			Calendar calendar = Calendar.getInstance();
			calendar.setTime(dateCourrier);
			// XTE : Remplissage des champs annee et mois du
			// courrier-----------------------------------------------------------------------------
			courrier.setCourrierOldDateOper(calendar.get(Calendar.YEAR));
			courrier.setCourrierDateReceptionMois(dateCourrier.getMonth() + 1);

			appMgr.insert(courrier);

			vb.setCourrier(courrier);
			// XTE : Fin insertion
			// Courrier-------------------------------------------------------------------------------------------------------

			Calendar cal = Calendar.getInstance();
			cal.setTime(courrier.getCourrierDateReception());
			int year = cal.get(Calendar.YEAR);

			Integer lastId = appMgr.CountAllCourrierBOCByTransaction(dossier.getDossierId(),
					"A",
					year,
					"boc_"
							+ String.valueOf(vb.getPerson().getAssociatedBOC()
									.getIdBOC()), listIdBocMembers);
			// XTE : Insertion référence du courrier elle est de la forme : type
			// courrier suivi par son ordre-------------------------------------
			if (lastId == null || lastId == 0) {
				courrier.setCourrierTypeOrdre(1);
			} else {
				courrier.setCourrierTypeOrdre(lastId + 1);
			}
			courrier.setCourrierType("A");
			courrier.setCourrierReferenceCorrespondant(courrier
					.getCourrierType() + courrier.getCourrierTypeOrdre());
			dossier.setDossierIntitule("Courrier_"
					+ courrier.getCourrierReferenceCorrespondant());

			appMgr.update(dossier);
			appMgr.update(courrier);

			// XTE : Insertion dans la table
			// CourrierDossier--------------------------------------------------------------------------------------
			CourrierDossierId courrierDossierId = new CourrierDossierId();
			CourrierDossier courrierDossier = new CourrierDossier();
			courrierDossierId.setDossierId(dossier.getDossierId());
			courrierDossierId.setIdCourrier(courrier.getIdCourrier());
			courrierDossier.setId(courrierDossierId);
			appMgr.insert(courrierDossier);
			// XTE : Fin insertion dans la table
			// CourrierDossier----------------------------------------------------------------------------------

			// XTE : Début Insersion dans la table
			// expDest----------------------------------------------------------------------------------------
			expdest = new Expdest();
			// XTE : 1/User Is BOC
			// ===============================================================================================================
			// -----------------------------------------------------------------------------------------------------------------------------------
			if (vb.getPerson().isBoc()) {
				// XTE : 1.1 Expéditeur
				// Person========================================================================================================
				// -----------------------------------------------------------------------------------------------------------------------------------
				if (vb.getCopyListSelectedObjectExp().get(0) instanceof Person) {
					Person person = (Person) vb.getCopyListSelectedObjectExp()
							.get(0);

					expdest.setTypeExpDest("Interne-Person");
					expdest.setIdExpDestLdap(person.getId());
					vb.setCopyExpNom(person.getCn());
					vb.setCopyExpReelNom(person.getCn());

					// XTE : Mettre à jour
					// "Type Intervenant"---------------------------------------------------------------------------------------------
					// XTE : 1.1.1 Expéditeur Person
					// Responsable==========================================================================================
					// -----------------------------------------------------------------------------------------------------------------------------------
					if (person.isResponsable()) {
						nouvelleTransaction
								.setTransactionTypeIntervenant("sub_"
										+ String.valueOf(person.getId()));
						try {
							if (vb.getPerson().getAssociatedDirection() != null
									&& vb.getPerson().getAssociatedDirection()
											.getAssociatedUnit() != null) {
								nouvelleTransaction
										.setTransactionIdIntervenant(person
												.getAssociatedDirection()
												.getAssociatedUnit()
												.getResponsibleUnit().getId());
							}
						} catch (NullPointerException e) {
							e.printStackTrace();
						}
					}
					// XTE : 1.1.2 Expéditeur Person
					// Secretaire===========================================================================================
					// -----------------------------------------------------------------------------------------------------------------------------------
					else if (person.isSecretary()) {
						nouvelleTransaction
								.setTransactionTypeIntervenant("secretary_"
										+ String.valueOf(person.getId()));
						nouvelleTransaction.setTransactionIdIntervenant(person
								.getAssociatedDirection().getResponsibleUnit()
								.getId());
					}
					// XTE : 1.1.3 Expéditeur Person
					// Agent================================================================================================
					// -----------------------------------------------------------------------------------------------------------------------------------
					else {
						nouvelleTransaction
								.setTransactionTypeIntervenant("agent_"
										+ String.valueOf(person.getId()));
						nouvelleTransaction.setTransactionIdIntervenant(person
								.getAssociatedDirection().getResponsibleUnit()
								.getId());
					}
				}
				// XTE : 1.2/ Expéditeur UNIT
				// ========================================================================================================
				// -----------------------------------------------------------------------------------------------------------------------------------
				else if (vb.getCopyListSelectedObjectExp().get(0) instanceof Unit) {

					Unit unit = (Unit) vb.getCopyListSelectedObjectExp().get(0);
					expdest.setTypeExpDest("Interne-Unité");
					expdest.setIdExpDestLdap(unit.getIdUnit());
					vb.setCopyExpNom(unit.getNameUnit());
					vb.setCopyExpReelNom(unit.getNameUnit());

					nouvelleTransaction.setTransactionTypeIntervenant("unit_"
							+ String.valueOf(unit.getIdUnit()));
					try {
						if (unit.getAssociatedUnit() != null) {
							nouvelleTransaction
									.setTransactionIdIntervenant(unit
											.getAssociatedUnit().getIdUnit());
						}
					} catch (NullPointerException e) {
					}
				}

				// XTE : 1.3/ Expéditeur PP
				// ==========================================================================================================
				// -----------------------------------------------------------------------------------------------------------------------------------
				else if (vb.getCopyListSelectedObjectExp().get(0) instanceof Pp) {
					Pp pp = (Pp) vb.getCopyListSelectedObjectExp().get(0);
					expdest.setTypeExpDest("Externe");
					expdest.setExpdestexterne(pp.getExpdestexterne());

					vb.setCopyExpNom(pp.getExpdestexterne()
							.getExpDestExterneNom()
							+ " "
							+ pp.getExpdestexterne().getExpDestExternePrenom()
							+ " (PP)");
					vb.setCopyExpReelNom(pp.getExpdestexterne()
							.getExpDestExterneNom()
							+ " "
							+ pp.getExpdestexterne().getExpDestExternePrenom()
							+ " (PP)");
				}
				// XTE : 1.4/ Expéditeur PM
				// ==========================================================================================================
				// -----------------------------------------------------------------------------------------------------------------------------------
				else if (vb.getCopyListSelectedObjectExp().get(0) instanceof Pm) {
					Pm pm = (Pm) vb.getCopyListSelectedObjectExp().get(0);
					expdest.setTypeExpDest("Externe");

					expdest.setExpdestexterne(pm.getExpdestexterne());

					vb.setCopyExpNom(pm.getExpdestexterne()
							.getExpDestExterneNom() + " (PM)");
					vb.setCopyExpReelNom(pm.getExpdestexterne()
							.getExpDestExterneNom() + " (PM)");
				}
			}

			appMgr.insert(expdest);
			// XTE : Fin Insersion dans la table
			// expDest------------------------------------------------------------------------------------------

			// XTE : Mettre à jour la
			// transaction-------------------------------------------------------------------------------------------------

			nouvelleTransaction.setExpdest(expdest);

			nouvelleTransaction.setIdUtilisateur(vb.getPerson().getId());
			nouvelleTransaction.setDossier(vb.getDossier());
			nouvelleTransaction.setTransactionDateTransaction(new Date());
			nouvelleTransaction.setTransactionDateReponse(courrier
					.getCourrierDateReponse());
			typetransaction = new Typetransaction();

			typetransaction = appMgr.getTypeTransactionByLibelle("Envoi")
					.get(0);
			nouvelleTransaction.setTypetransaction(typetransaction);

			nouvelleTransaction.setTransactionSupprimer(true);
			nouvelleTransaction.setTransactionOrdre(1);

			// XTE : récupérer la liste des annotations
			// sélectionnées-----------------------------------------------------------------------------
			List<String> resultatAnnotation = new ArrayList<String>();

			for (int j = 0; j <= selectedItemsAnnotation.size() - 1; j++) {
				resultatAnnotation.add(new String(selectedItemsAnnotation
						.get(j)));
			}
			String result = "";
			for (String annot : resultatAnnotation) {

				result = result + mapAnnotations.get(Integer.valueOf(annot))
						+ " / ";
			}
			if (!result.equals("")) {
				int lastIndex = result.lastIndexOf("/");
				result = result.substring(0, lastIndex);
			}
			vb.setCopyAnnotationResult(result);

			result = "";

			// -----------------------------------------------------------------------------------------------------------------------------------
			// XTE : Insertion de la destinataire
			// -----------------------------------------------------------------------------------------------------------------------------------

			// XTE : Fixer l'étape suivante à suivre le courrier dans le
			// workflow-----------------------------------------------------------------
			long resultat = etapeSuivant.getIdNodeSuivante();
			int etatActuelle = (int) resultat;
			courrier.setCourrierCircuit("workflow");
			courrier.setCourrierEtatActuelleWorkflow(etatActuelle);

			Unit u = new Unit();
			String unite = etapeSuivant.getEtatSuivant();
			u = ldapOperation.getUnitByShortName(unite);

			// XTE : insertion dans la table
			// Transaction------------------------------------------------------------------------------------------
			copyNouvelleTransaction = new Transaction();
			copyNouvelleTransaction
					.setExpdest(nouvelleTransaction.getExpdest());
			copyNouvelleTransaction.setIdUtilisateur(nouvelleTransaction
					.getIdUtilisateur());
			copyNouvelleTransaction
					.setDossier(nouvelleTransaction.getDossier());
			copyNouvelleTransaction
					.setTransactionDateTransaction(nouvelleTransaction
							.getTransactionDateTransaction());
			copyNouvelleTransaction
					.setTransactionDateReponse(nouvelleTransaction
							.getTransactionDateReponse());
			copyNouvelleTransaction
					.setTransactionCommentaire(nouvelleTransaction
							.getTransactionCommentaire());
			copyNouvelleTransaction.setTransactionSupprimer(nouvelleTransaction
					.getTransactionSupprimer());

			copyNouvelleTransaction
					.setTransactionTypeIntervenant(nouvelleTransaction
							.getTransactionTypeIntervenant());

			typetransaction = appMgr.getTypeTransactionByLibelle("Envoi")
					.get(0);
			copyNouvelleTransaction.setTypetransaction(typetransaction);
			etat = appMgr.listEtatByLibelle("Faire suivre").get(0);
			copyNouvelleTransaction.setEtat(etat);
			copyNouvelleTransaction.setTransactionOrdre(1);

			if (chooseAnnotationType != null
					&& chooseAnnotationType.equals("autre")) {

				copyNouvelleTransaction
						.setTransactionCommentaireAnnotation(otherAnnotation);
			}
			appMgr.insert(copyNouvelleTransaction);
			// XTE: Fin insertion dans la table
			// Transaction---------------------------------------------------------------------------------------
			copyNouvelleTransaction.setTransactionFirst(copyNouvelleTransaction
					.getTransactionId());
			appMgr.update(copyNouvelleTransaction);

			vb.setTransaction(copyNouvelleTransaction);

			// XTE : Insertion dans la table
			// Annotation-------------------------------------------------------------------------------------------
			if (chooseAnnotationType != null
					&& chooseAnnotationType.equals("tous")) {
				for (int j = 0; j < resultatAnnotation.size(); j++) {
					courrierIdAnnotation.setIdAnnotation(Integer
							.valueOf(resultatAnnotation.get(j)));
					courrierIdAnnotation.setIdTransaction(vb.getTransaction()
							.getTransactionId());
					courrierAnnotation.setId(courrierIdAnnotation);
					appMgr.insert(courrierAnnotation);
					courrierAnnotation = new TransactionAnnotation();
					courrierIdAnnotation = new TransactionAnnotationId();
				}
			} else if (chooseAnnotationType != null
					&& chooseAnnotationType.equals("autre")) {
				courrierIdAnnotation.setIdAnnotation(10);
				courrierIdAnnotation.setIdTransaction(vb.getTransaction()
						.getTransactionId());
				courrierAnnotation.setId(courrierIdAnnotation);
				appMgr.insert(courrierAnnotation);
				courrierAnnotation = new TransactionAnnotation();
				courrierIdAnnotation = new TransactionAnnotationId();
			}
			// XTE : Fin d'insertion dans la table
			// Annotation-------------------------------------------------------------------------------------

			result = result + u.getNameUnit() + " / ";
			expdest = new Expdest();
			id = new TransactionDestinationId();
			trDest = new TransactionDestination();
			// XTE : l'unite ==
			// "BOC"-------------------------------------------------------------------------------------------------------------
			if (unite.equals("BOC")) {
				if (vb.getPerson().getAssociatedDirection() != null) {
					getIdBocByUnit(vb.getPerson().getAssociatedDirection());
				} else {

					idBoc = vb.getPerson().getAssociatedBOC().getIdBOC();
				}
				expdest.setTypeExpDest("Interne-Boc");
				expdest.setIdExpDestLdap(idBoc);
				appMgr.insert(expdest);

				id.setIdTransaction(vb.getTransaction().getTransactionId());
				id.setIdExpDest(expdest.getIdExpDest());
				trDest.setId(id);
				System.out.println("### 21 ###");
				trDest.setTransactionDestTypeIntervenant("boc_" + idBoc);
			}
			// XTE : Autre que BOC =>
			// Unité--------------------------------------------------------------------------------------------------------
			else {
				expdest.setTypeExpDest("Interne-Unité");
				expdest.setIdExpDestLdap(u.getIdUnit());
				appMgr.insert(expdest);

				id.setIdTransaction(vb.getTransaction().getTransactionId());
				id.setIdExpDest(expdest.getIdExpDest());
				trDest.setId(id);
				trDest.setTransactionDestTypeIntervenant("unit_"
						+ String.valueOf(u.getIdUnit()));
			}
			if (necessiteReponse.equals("Oui")) {
				trDest.setTransactionDestDateReponse(courrier
						.getCourrierDateReponse());
			}

			appMgr.insert(trDest);

			// XTE : Insertion transaction destination
			// réelle-------------------------------------------------------------------------------------
			if (vb.getPerson().isBoc()) {
				Workflow workflow = appMgr.listWorkflowByIdNature(
						Integer.valueOf(selectedItemNature)).get(0);
				JBPMAccessProcessBean jbpmAccessProcessBean = new JBPMAccessProcessBean();

				// XTE : Récupérer le dernier noeud du
				// workflow---------------------------------------------------------------------------------------
				String lastUnitShortName = jbpmAccessProcessBean
						.getProcessLastNode(workflow.getWorkflowTitre());
				if (lastUnitShortName != null) {
					Unit lastUnit = ldapOperation
							.getUnitByShortName(lastUnitShortName);
					TransactionDestinationReelle transactionDestinationReelle = new TransactionDestinationReelle();
					transactionDestinationReelle
							.setTransactionDestinationReelleIdDestinataire(lastUnit
									.getIdUnit());
				
					transactionDestinationReelle
							.setTransactionDestinationReelleTypeDestinataire("Interne-Unité");
					appMgr.insert(transactionDestinationReelle);
					System.out.println(transactionDestinationReelle);

					copyNouvelleTransaction
							.setTransactionDestinationReelle(transactionDestinationReelle);
					appMgr.update(copyNouvelleTransaction);
					
					vb.setDestinataireReel(lastUnit.getNameUnit());
				}
			}
			// XTE : Fin d'insertion transaction destination
			// réelle------------------------------------------------------------------------------------

			if (!result.equals("")) {
				int lastIndex = result.lastIndexOf("/");
				result = result.substring(0, lastIndex);
			}
			vb.setCopyDestNom(result);
			//AH : Ajouter pour l'ajout des attachement
			if (transformationMailFax) {
				if (mail != null) {
					ajoutDocuments(courrier);
				}
			}
			chargementNotification();

			LogClass logClass = new LogClass();
			logClass.addTrack(
					"ajout",
					"Evénement de log de validation du courrier "
							+ courrier.getIdCourrier() + "-"
							+ courrier.getCourrierReferenceCorrespondant(),
					vb.getPerson(), "INFO", appMgr);
			courrier = new Courrier();
			// System.out.println("**********Succes Ajout Courrier Workflow************");
			vb.setDestNom(null);
			vb.setExpNom(null);
			dateCourrierInvalide = false;

		} catch (Exception e) {
			// System.out.println("***********Erreur Ajout Courrier Workflow*************");
			e.printStackTrace();
			ajoutValide = false;
			insertionInterrompus = true;
			Person person = vb.getPerson();
			ConnexionNotificationUtil cf = new ConnexionNotificationUtil();
			try {
				cf.sendLogErreurAjoutCourrier(person, appMgr);
			} catch (AddressException e1) {
				e1.printStackTrace();
			} catch (MessagingException e1) {
				e1.printStackTrace();
			}
		}
	}
	@Autowired
	private Ged ged;
	public void ajouterAttachement(Courrier courrier, List<AttachmentFileBean> attachmentFileBeanList ,List<String>listeMessages	){
		try {
			System.out.println("Dans ajouterAttachement");
			List<Courrier> courriers=appMgr.getCourrierByIdCourrier(vb.getCourrier().getIdCourrier());
			if(courriers!=null && courriers.size()>0)
				courrier=courriers.get(0);
			
			int count = 1;
			
			Mail mail=vb.getMail();
			List<AttachmentHeadBean> listHeader = appMgr.getMailHederByIdMail(mail.getMailId());
			String messageId ="";
			List<String> messageIds= new ArrayList<String>();
			messageIds=listeMessages;
//			if(listHeader!=null && listHeader.size()>0){
//				System.out.println("SizeMSG = "+listHeader.size());
//				for(int j=0;j<listHeader.size();j++){
//					
//					if(listHeader.get(j).getCle().equals("Message-ID")){
//						messageId= listHeader.get(j).getValeur();
//						System.out.println("ID :: "+messageId);
//						messageIds.add(messageId);
//					}
//				}
//				
//			}
			
			
			for(int i=0; i<attachmentFileBeanList.size();i++,count++){
					
			
			Document document= new Document();
			
			
			String str=attachmentFileBeanList.get(i).getName();
			try {
				str=MimeUtility.decodeText(attachmentFileBeanList.get(i).getName().replace("iso?8859?1", "iso-8859-1"));
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
			document.setDocumentNom(str);
			System.out.println("DOC Name "+str);
			DocumentCategorie docCategorie = appMgr.getDocumentCategorieById(1);
			String documentType = "";
			 documentType = str.substring(str.lastIndexOf("."));
			
			document.setDocumentType(documentType);
			document.setDocumentTypeUpload("Numérique");
			document.setCourrier(courrier);
			document.setDocumentCategorie(docCategorie);
			document.setDocumentDateInsertion(new Date());
			document.setDocumentProprietaire(vb.getPerson().getId());
			document.setDocumentSupprime(true);
			document.setDocumentParent(document);
			
			document.setDocumentReference(courrier.getCourrierReferenceCorrespondant()
					+ "_" + count);
			document.setDocumentObjet(courrier.getCourrierObjet() + "_" + count);
			
		//	vbg.getDocumentType()
			
				appMgr.insert(document);
				System.out.println(document);
				messageId=messageIds.get(i);
			System.out.println("Message-ID="+messageId);
	//	String messageId = mail.getMailHeaders().get("Message-ID");
		
		MailConnection mailConnection=avoirConnection();
	
		byte[] byteArray = mailConnection.downloadAttachmentFile(messageId,attachmentFileBeanList.get(i).getName());
	//	ByteArrayInputStream inputStream = new ByteArrayInputStream(byteArray);
		vb.setUploadType("local");
		vb.setUploadedData(byteArray);
		
		
			ged.uploadDocument(document);
			System.out.println("FIN upload");
			}	
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
public MailConnection avoirConnection(){
		System.out.println("Dans avoirConnection()");
		MailConnection mailConnection = null;
		if(vb.getPerson().isBoc()){
		
			List<Unite> bo=appMgr.getListeBoParId(vb.getPerson().getAssociatedBOC().getIdBOC()+"");

			
			if(bo!=null && bo.size()>0){
		
			 Unite boConected = bo.get(0);
				
				if(bo!=null && boConected.getUniteMailUser()!=null && boConected.getUniteMailUser().trim().length()>0 
					&& boConected.getUniteMailPass()!=null && boConected.getUniteMailPass().trim().length()>0)
				{	
				
					mailConnection =new MailConnection(boConected.getUniteMailUser(), boConected.getUniteMailPass());
				}
				else{
				
					System.out.println("cette User n'pas d'adresse Mail");
				}
			}
			
			
		}else
		{
			Unit unite=vb.getPerson().getAssociatedDirection();
		
			String CodeString =unite.getIdUnit().toString();
			
			for(int i=CodeString.length();i<8;i++)
				CodeString="0"+CodeString;
			for(int i=CodeString.length();i<12;i++)
				CodeString=" "+CodeString;
		
			Unite u=appMgr.getUniteConnecteeById(CodeString);
			System.out.println(u);
			if(u!=null &&u.getUniteMailUser()!=null && u.getUniteMailUser().trim().length()>0 
				&& u.getUniteMailPass()!=null && u.getUniteMailPass().trim().length()>0)
			{	
			
				mailConnection =new MailConnection(u.getUniteMailUser(), u.getUniteMailPass());
			}
			else{
				
				System.out.println("cette User n'pas d'adresse Mail");
			}
			
		}
		return mailConnection;
	}
	
	
	
	
	public String goToListDestinataire() {
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		// Fonction : goToListDestinataire
		// Date :
		// Auteur :
		// Description : Cette fonction permet de nous rediriger vers la liste
		// des contacts pour choisir le destinataire du courrier à envoyer
		//
		//
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		System.out.println("go to liste destinataires");

		vb.setAfficheTitre("Choix des destinataires");
		vb.setAfficheTitreList("Liste des destinataires choisis");
		if (transformationMailFax) {
			vb.setRedirect("rediretFromCTMFDestArrToListSender");

			return "rediretFromCTMFDestArrToListSender";
		} else {

			if (vb.getPerson().isBoc()) {
				if (typeCourrier.equals("arrive")) {
					vb.setRedirect("rediretFromCADestArrToListSender");
					vb.setNoeudEncours(vb.getPerson().getAssociatedBOC());

					System.out
							.println("au clic au Btn  Destination==========================");
					System.out.println(vb.getPerson());
					return "rediretFromCADestArrToListSender";
				} else {
					vb.setRedirect("rediretFromCADestDepToListSender");
					return "rediretFromCADestDepToListSender";
				}
			} else {
				// AH : c'est un membre d'une Unité Resposable, secrétaire ou
				// Agent
				System.out
						.println("AH : c'est un membre d'une Unité Resposable, secrétaire ou Agent");
				vb.setRedirect("rediretFromCAToListSender");

				return "rediretFromCAToListSender";
			}
		}
	}

	public String goToListExpediteur() {
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		// Fonction : goToListExpediteur
		// Date :
		// Auteur :
		// Description : Cette fonction permet de nous rediriger vers la liste
		// des contacts pour choisir l'expéditeur du courrier à envoyer
		//
		//
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		vb.setAfficheTitre("Choix des expéditeurs");
		vb.setAfficheTitreList("Liste des expéditeurs choisis");
		vb.setCourrierRefOriginal(false);
		if (typeCourrier.equals("arrive")) {
			vb.setRedirect("rediretFromCAExpArrToListSender");
			return "rediretFromCAExpArrToListSender";
		} else {
			vb.setRedirect("rediretFromCAExpDepToListSender");
			return "rediretFromCAExpDepToListSender";
		}
		
	}

	public void eventChooseTypeCourrier(ActionEvent evt) {
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		// Fonction : eventChooseTypeCourrier
		// Date :
		// Auteur :
		// Description : Cette fonction permet de charger la liste des natures
		// de courrier selon le type de ce dernier. Si le type du courrier
		// à envoyé est depart, éliminer les natures qui suivent un workflow, si
		// non toute la liste
		//
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------

		if (typeCourrier.equals("depart")) {

			for (Integer entryIndexNatureWF : mapIndexInListNatureWorkflow
					.descendingKeySet()) {
				listNature.remove(entryIndexNatureWF.intValue());
			}
		} else {
			for (Entry<?, ?> entryIndexNatureWF : mapIndexInListNatureWorkflow
					.entrySet()) {
				listNature.add(
						((Integer) entryIndexNatureWF.getKey()).intValue(),
						(Nature) entryIndexNatureWF.getValue());
			}
		}
	}

	private int getIdBocByUnitObj(Unit unit) {
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		// Fonction : getIdBocByUnit
		// Date :
		// Auteur :
		// Description : Cette fonction permet de récupérer l'id du boc de
		// l'unité passée en paramètre
		//
		//
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		if (unit.getAssociatedUnit() != null) {
			System.out.println("unit.getAssociatedUnit() = "
					+ unit.getAssociatedUnit());
			getIdBocByUnit(unit.getAssociatedUnit());

		} else {
			idBoc = unit.getAssociatedBOC().getIdBOC();
		}
		return idBoc;
	}

	private void getIdBocByUnit(Unit unit) {
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		// Fonction : getIdBocByUnit
		// Date :
		// Auteur :
		// Description : Cette fonction permet de récupérer l'id du boc de
		// l'unité passée en paramètre
		//
		//
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		System.out.println("DANS getIdBocByUnit");

		if (unit != null && unit.getAssociatedUnit() != null
				&& unit.getIdUnit() != null) {
			getIdBocByUnit(unit.getAssociatedUnit());
			System.out.println("dans <> null");
		} else if (unit != null && unit.getAssociatedBOC() != null) {
			idBoc = unit.getAssociatedBOC().getIdBOC();
			unitSup = unit;
			System.out.println("première Unité sous un BOC : " + unit);
			System.out.println("id BOC :" + idBoc);
		} else {
			System.out
					.println("DANS else unit.getAssociatedUnit() != null && unit.getAssociatedBOC()!=null ");
		}

		// if (unit.getAssociatedUnit() != null) {
		// getIdBocByUnit(unit.getAssociatedUnit());
		// } else {
		//
		// unitSup=unit;
		// idBoc = unit.getAssociatedBOC().getIdBOC();
		// System.out.println("idBoc= "+idBoc);
		// }
	}

	public void reset() {
		System.out.println("Dans méthode reset");
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		// Fonction : reset
		// Date :
		// Auteur :
		// Description : Cette fonction permet d'initialiser l'interface d'ajout
		// d'un courrier lors de l'annulation de lopération
		//
		//
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		vb.setCopyListSelectedPerson(new ArrayList<Person>());
		vb.setCopyListPP(new ArrayList<Pp>());
		vb.setCopyListPM(new ArrayList<Pm>());
		vb.setListSelectedItem(new ArrayList<ItemSelected>());
		vb.setCopyListSelectedBoc(new ArrayList<BOC>());
		vb.setCopyListSelectedUnit(new ArrayList<Unit>());
		vb.setCopyListSelectedObject(new ArrayList<Object>());
		vb.setCopyListSelectedObjectExp(new ArrayList<Object>());
		vb.setDestNom(null);
		vb.setExpNom(null);
		vb.setCourrierTempValue(null);
		vb.setSelectedAnnotationItems(null);
		vb.setOtherAnnotation("");
		vb.setChooseAnnotation("tous");
		vb.setTypeSender("MonUnite");
		vb.setTypeCourrier("arrive");
	}

	public List<SelectItem> getSelectItemsAnnotation() {
		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------
		// Fonction : getSelectItemsAnnotation
		// Date :
		// Auteur :
		// Description : Cette fonction permet d'initialiser la liste des
		// annotations dans le listBox
		//
		//
		// ------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------

		String libelle;
		List<SelectItem> selectItemsAnnotation = new ArrayList<SelectItem>();
		for (int j = 0; j <= listAnnotation.size() - 1; j++) {
			Integer idAt = listAnnotation.get(j).getAnnotationId();
			if (!idAt.equals(10)) {
				if (vb.getLocale().equals("ar")) {
					libelle = listAnnotation.get(j).getAnnotationLibelleAr();
				} else {
					libelle = listAnnotation.get(j).getAnnotationLibelle();
				}
				mapAnnotations.put(idAt, libelle);
				selectItemsAnnotation.add(new SelectItem(String.valueOf(idAt),
						libelle));
			}
		}
		return selectItemsAnnotation;
	}

	public void inserer() {
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		// Fonction : inserer
		// Date :
		// Auteur :
		// Description : Cette fonction permet de mettre à jour l'id du courrier
		// par l'id du courrier ajouté à la fin d'ajout
		//
		//
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		courrier.setIdCourrier(vb.getCourrier().getIdCourrier());
	}

	public void evenementChoixTransfert(ActionEvent evt) {
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		// Fonction : evenementChoixTransfert
		// Date :
		// Auteur :
		// Description : Cette fonction permet de vérifier la selection du
		// "Nécissité de réponse" et mettre à jour l'apparence de la zone
		// date
		//
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		if (necessiteReponse.equals("Non")) {
			afficheEcheance = false;
		} else {
			afficheEcheance = true;
		}
	}

	// XTE : Méthode utilisée par "courrierChoixExpediteurDestinataire.xhtml"
	public void evenementChoixExpediteur(ActionEvent evt) {
		if (typeExpediteur.equals("Direction")) {
			selectParDefault = false;
		} else {
			selectAutre = true;
		}
	}

	private ListeDestinatairesModel listAnno;
	private String messageValidation;
	private boolean notExistAoConsultation;

	public ListeDestinatairesModel getListAnno() {
		return listAnno;
	}

	public void setListAnno(ListeDestinatairesModel listAnno) {
		this.listAnno = listAnno;
	}

	public void saveTempValue() {
		System.out.println("###### Dans saveTempValue()");
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		// Fonction : saveTempValue
		// Date :
		// Auteur :
		// Description : Cette fonction permet de tester les données saisies
		// lors de l'ajout du courrier
		//
		//
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------

		try {
			Courrier courrierTemp = new Courrier();

			courrierTemp.setCourrierReferenceCorrespondant(courrier
					.getCourrierReferenceCorrespondant());
			courrierTemp.setCourrierObjet(courrier.getCourrierObjet());
			courrierTemp.setCourrierCommentaire(courrier
					.getCourrierCommentaire());
			courrierTemp.setCourrierDateReception(dateCourrier);
			courrierTemp.setCourrierDateReceptionReelle(dateReelle);
			System.out.println("Code Originale ==> "+courrier.getCourrierRefOriginale());
			courrierTemp.setCourrierRefOriginale(courrier.getCourrierRefOriginale());
			System.out.println("dateCourrier====> "+dateCourrier);
			System.out.println("dateReelle====> "+dateReelle);
			courrierTemp.setKeywords(courrier.getKeywords());
			courrierTemp.setCourrierDateReponse(courrier
					.getCourrierDateReponse());
			courrierTemp.setCourrierCircuit(courrier.getCourrierCircuit());

			vb.setSelectedItemCategorie(selectedItemCategorie);


			// Type de transmission : Vide = NA
			if (selectedItemsTr != null && !vb.getPerson().isBoc()) {
				if (Integer.valueOf(selectedItemsTr) == 11 || Integer.valueOf(selectedItemsTr) == 10 || !vb.getCopyListPM().isEmpty() || !vb.getCopyListPP().isEmpty()) {
					affichagePassageBO = true;
					passageParBO = "Oui";
					champDesabled=true;
//					necessiteReceptionPhysique="Non";
				} else{
					champDesabled=false;
				}
			}
			
			//courrier Ajoué par BOC et mode transmision valise :le choix « réception physique » doit être positionnée automatiquement à « Non et grisé
			if(selectedItemsTr != null && vb.getPerson().isBoc()){
				if (Integer.valueOf(selectedItemsTr) == 9 || Integer.valueOf(selectedItemsTr) == 10 || Integer.valueOf(selectedItemsTr) == 11 ) {
					necessiteReceptionPhysique="Non";
					champDesabled=true;
				}else{
					champDesabled=false;
				}
			}
	
			
			
			
			if (selectedItemsTr != null && !vb.getPerson().isBoc()) {
				//Si le conneté est structure et le MT valise ou 
			if (Integer.valueOf(selectedItemsTr) == 9 ) {
							
				champDesabledReceptionPhysique=true;
				necessiteReceptionPhysique="Non";
			} else{
				champDesabledReceptionPhysique=false;
			}
			}
			
			
			if(selectedItemsTr != null && vb.getPerson().isBoc()){
				if (Integer.valueOf(selectedItemsTr) == 9|| !vb.getCopyListPM().isEmpty() || !vb.getCopyListPP().isEmpty()) {
					necessiteReceptionPhysique="Non";
					champDesabledReceptionPhysique=true;
				}else{
					champDesabledReceptionPhysique=false;
				}
			}
			if (selectedItemCategorie != null) {
				listNatureParCateg = appMgr.listNaturesByCategorie(Integer
						.valueOf(selectedItemCategorie));
				getSelectItemsnature();
			}
			
			listComposantDynamique=vb.getListComposantDynamiqueNature();
			listChequesTablo=vb.getListChequesSave();
						
//			System.out.println("#########################################");
			if (selectedItemNature != null) {
				courrierTemp.setNature(appMgr.getNatureById(
						Integer.valueOf(selectedItemNature)).get(0));

				// //[JS] :Sowh Panel Ao Consultation
				int natureID = Integer.valueOf(selectedItemNature);
//				System.out.println("2019-06-19 natureID =>: " + natureID);
				if (natureID == 44 || natureID == 46) {
					showPanelAOC = true;
//					System.out.println("2019-06-19 ; showPanelAOC"
//							+ showPanelAOC);
				} else {
					showPanelAOC = false;
				}
//				listChequesTablo = (List<ChequeModel>) listCheques.getWrappedData();
//				System.out.println("size "+listChequesTablo.size());
//				vb.setListChequesSave(listChequesTablo);
//				System.out
//						.println("2019-06-19 out showPanelAOC" + showPanelAOC);

				// //[KBS] :Sowh Panel Chèque 2019-11-18 KBS
				if (natureID == 38 || natureID == 59 || natureID == 80) {
					showPanelCheque = true;
					//2020-06-06
					necessiteReceptionPhysique="Oui";
					passageParBO="Oui";
//					System.out.println("2019-11-18 ; showPanelCheque == "
//							+ showPanelCheque);
				} else {
					showPanelCheque = false;
				}
		
				if(selectedItemNatureAncien!=null && selectedItemNatureAncien.equals(selectedItemNature)){
					
			try {
						Class aClass = c.getClass();
						Class[] paramTypes = new Class[1];
												
						if (listComposantDynamique.size() > 0) {
							for (int i = 0; i < listComposantDynamique
									.size(); i++) {
								if (listComposantDynamique.get(i).getType()
										.equals("RADIO")) {
									paramTypes[0] = Boolean.class;
									listComposantDynamique
											.get(i)
											.setColonne(
													new Boolean(
															listComposantDynamique
																	.get(i)
																	.getColonne()
																	+ ""));
								} else
									if ( listComposantDynamique
											.get(i).getColonne() != null) {
									paramTypes[0] = listComposantDynamique
											.get(i).getColonne().getClass();
								int idchamp = listComposantDynamique.get(i)
										.getIdChamps();
								String methodName = "setColonne" + idchamp; // fieldName
																			// String
								Method m = null;
								m = aClass
										.getMethod(methodName, paramTypes);
								String result = (String) m.invoke(c,
										listComposantDynamique.get(i)
												.getColonne()); // field
																// value
								System.out.println(result);
									}
							}
						}
						listCheques.setWrappedData(vb.getListChequesSave());
					} catch (IllegalAccessException iae) {
						iae.printStackTrace();
					}
					
				}else{
				
				
				// Charger les champs de façon dynamique selon le type de nature
				// sélectionné
					
					vb.setSelectedItemNature(selectedItemNature);
					selectedItemNatureAncien=selectedItemNature;

					
				listDonneeSupplementaireNatures = appMgr
						.getListDonneeSupplementaireNatureAffectes(Integer
								.valueOf(selectedItemNature));
				listComposantDynamique = new ArrayList<ComposantDynamique>();
				if (listDonneeSupplementaireNatures != null
						&& listDonneeSupplementaireNatures.size() > 0) {
					for (int i = 0; i < listDonneeSupplementaireNatures.size(); i++) {

						composantDynamique = new ComposantDynamique();
						String libelle = listDonneeSupplementaireNatures.get(i)
								.getLibelleDonnee();
						boolean champObligatoire = listDonneeSupplementaireNatures
								.get(i).isObligatoire();


						composantDynamique.setChampOblig(champObligatoire);


						String s = msg
								.getProperty(listDonneeSupplementaireNatures
										.get(i).getLibelleDonnee());


						composantDynamique.setName(s);
						composantDynamique
								.setType(listDonneeSupplementaireNatures.get(i)
										.getDonneeSupplementaire()
										.getTypeDonneeSupplementaire());
						composantDynamique
								.setIdChamps(listDonneeSupplementaireNatures
										.get(i).getDonneeSupplementaire()
										.getIdDonneeSupplementaire());

						listComposantDynamique.add(composantDynamique);
					
					}

				}
				
				
				listChequesTablo=new ArrayList<ChequeModel>();
				ChequeModel fdm = new ChequeModel();
				fdm.setOperation(1);
//				System.out.println("######## Dans d1!=null");
				fdm.setBoutonPlus(true);
				fdm.setBoutonSupprimer(false);
				listChequesTablo.add(fdm);
				listCheques.setWrappedData(listChequesTablo);
				aoConsultation=new AoConsultation();
				heure1=null;
				heure2=null;
				heure3=null;
				numeroAoConsultation=null;

			}
				
				vb.setListComposantDynamiqueNature(listComposantDynamique);
				vb.setListChequesSave(listChequesTablo);
				
				
			}
			else{
				//Dans le cas où la valeur de tr a passé d'une valeur != null à null  
//				System.out.println("DANS ELSSE NAT sélectionné est NULL");
				vb.setSelectedItemNature(null);
				listComposantDynamique = new ArrayList<ComposantDynamique>();	
				vb.setListComposantDynamiqueNature(listComposantDynamique);
				listChequesTablo=new ArrayList<ChequeModel>();
				vb.setListChequesSave(listChequesTablo);
//				afficheChampsSpecTansmission=false;
			
			}
	
			listComposantDynamiqueTransmission=vb.getListComposantDynamiqueTransmission();
			vb.setSelectedItemsTr(selectedItemsTr);
			if (selectedItemsTr != null) {
				transmission = appMgr.getTransmissionById(
						Integer.valueOf(selectedItemsTr)).get(0);
				courrierTemp.setTransmission(transmission);
				
				if(selectedItemsTrAncien!=null && selectedItemsTrAncien.equals(selectedItemsTr)){
//					System.out.println("########### PAS DE CHANGEMENT DANS TR");
				
					try {
						if (listComposantDynamiqueTransmission != null	&& listComposantDynamiqueTransmission.size() > 0) {
							Class aClass = c.getClass();
							Class[] paramTypes = new Class[1];
							System.out.println("");
							
							if (listComposantDynamiqueTransmission.size() > 0) {
								for (int i = 0; i < listComposantDynamiqueTransmission.size(); i++) {

									if (listComposantDynamiqueTransmission.get(i).getType().equals("RADIO")) {
										paramTypes[0] = Boolean.class;
										listComposantDynamiqueTransmission.get(i).setColonne(new Boolean(listComposantDynamiqueTransmission.get(i).getColonne()+ ""));
									} else	if (listComposantDynamiqueTransmission.get(i).getColonne() != null) {
										paramTypes[0] = listComposantDynamiqueTransmission.get(i).getColonne().getClass();
										int idchamp = listComposantDynamiqueTransmission.get(i).getIdChamps();
										String methodName = "setColonne"+ idchamp; // fieldName
															// String
										Method m = null;
										m = aClass.getMethod(methodName,paramTypes);
										String result = (String) m.invoke(	c,	listComposantDynamiqueTransmission.get(i).getColonne()); // field
										// value
										System.out.println(">>>>>>>>RESULTAT "+result);
									}
								}
							}
						}
					} catch (IllegalAccessException iae) {
						iae.printStackTrace();
					}

					catch (InvocationTargetException ite) {
						ite.printStackTrace();
					} catch (SecurityException e) {
						e.printStackTrace();
					} catch (NoSuchMethodException e) {
						e.printStackTrace();
					}

				
				
				}
				else{
				
//					System.out.println("########### CREATION DE NOUVEAU");
				
				
					vb.setSelectedItemsTr(selectedItemsTr);
					selectedItemsTrAncien=selectedItemsTr;
				
//				System.out.println("typeCourrier ==>" + typeCourrier);


				listDonneeSupplementaireTransmission = appMgr.getListDonneeSupplementaireTransmissionAffectes(Integer.valueOf(selectedItemsTr));
				listComposantDynamiqueTransmission = new ArrayList<ComposantDynamique>();
				if (listDonneeSupplementaireTransmission != null	&& listDonneeSupplementaireTransmission.size() > 0) {
					for (int i = 0; i < listDonneeSupplementaireTransmission.size(); i++) {

						composantDynamique = new ComposantDynamique();
						String libelle = listDonneeSupplementaireTransmission.get(i).getLibelleDonnee();

						System.out.println("Libelle Donnée :" + libelle);
						System.out.println("Type Donnée :"	+ listDonneeSupplementaireTransmission.get(i).getDonneeSupplementaire().getTypeDonneeSupplementaire());
						System.out.println("ID Champ :"	+ listDonneeSupplementaireTransmission.get(i).getDonneeSupplementaire().getIdDonneeSupplementaire());

						String s = msg.getProperty(listDonneeSupplementaireTransmission.get(i).getLibelleDonnee());
						
							// field
						
						//***************************
						composantDynamique.setName(s);
						composantDynamique.setType(listDonneeSupplementaireTransmission.get(i).getDonneeSupplementaire().getTypeDonneeSupplementaire());
						composantDynamique.setIdChamps(listDonneeSupplementaireTransmission.get(i).getDonneeSupplementaire().getIdDonneeSupplementaire());
						composantDynamique.setChampOblig(listDonneeSupplementaireTransmission.get(i).isObligatoire());
						composantDynamique.setPattern(listDonneeSupplementaireTransmission.get(i).getPattern());
						composantDynamique.setMessageAlerte(listDonneeSupplementaireTransmission.get(i).getMessageAlerte());
						listComposantDynamiqueTransmission.add(composantDynamique);
						
					}
				}
		
			}
				vb.setListComposantDynamiqueTransmission(listComposantDynamiqueTransmission);
				if (vb.getPerson().isBoc()) {

					// if mode de transmission Porteur
					if (selectedItemsTr != null) {
						if (Integer.valueOf(selectedItemsTr) == 1
						 || Integer.valueOf(selectedItemsTr) == 5
						 || Integer.valueOf(selectedItemsTr) == 6) {
//							System.out
//									.println("typeCourrier======================> 1 "
//											+ typeCourrier);

							if (typeCourrier.equals("arrive")) {
								//[JS] : 2020-05-06
								if (Integer.valueOf(selectedItemsTr) == 1
										|| (vb.getCopyListSelectedObjectExp() != null
												&& vb.getCopyListSelectedObjectExp()
														.size() > 0
												&& ((vb.getCopyListSelectedObjectExp()
														.get(0) instanceof Pp) || (vb
														.getCopyListSelectedObjectExp()
														.get(0) instanceof Pm)) && (Integer
												.valueOf(selectedItemsTr) == 5 || Integer
												.valueOf(selectedItemsTr) == 6))

								) {
								afficheChampsSpecTansmission = true;

								}
								else{
									afficheChampsSpecTansmission = false;}
							} else{
								afficheChampsSpecTansmission = false;
								if((!vb.getCopyListPM().isEmpty() || !vb.getCopyListPP().isEmpty()) && (Integer.valueOf(selectedItemsTr) == 5 || Integer.valueOf(selectedItemsTr) == 6))
									afficheChampsSpecTansmission = true;
							}
						} else {

							afficheChampsSpecTansmission = true;
						}
					}
				} else {
//				  System.out.println("in not boc");
					if(Integer.valueOf(selectedItemsTr) == 7 || Integer.valueOf(selectedItemsTr) == 8 || ((!vb.getCopyListPM().isEmpty() || !vb.getCopyListPP().isEmpty()) && (Integer.valueOf(selectedItemsTr)==5 || Integer.valueOf(selectedItemsTr)==6)) ){
						afficheChampsSpecTansmission = true;
					}else{
				  	listComposantDynamiqueTransmission = new ArrayList<ComposantDynamique>();	
					vb.setListComposantDynamiqueTransmission(listComposantDynamiqueTransmission);
					afficheChampsSpecTansmission = false;
				}
				}

			}
			else{
				//Dans le cas où la valeur de tr a passé d'une valeur != null à null  
//				System.out.println("DANS ELSSE TR sélectionné est NULL");
				vb.setSelectedItemsTr(null);
				listComposantDynamiqueTransmission = new ArrayList<ComposantDynamique>();	
				vb.setListComposantDynamiqueTransmission(listComposantDynamiqueTransmission);
				afficheChampsSpecTansmission=false;
			
			}
			if (selectedItemConf != null) {
				confidentialite = appMgr.getConfidentialiteById(
						Integer.valueOf(selectedItemConf)).get(0);
				courrierTemp.setConfidentialite(confidentialite);
			}
			if (selectedItemUg != null) {
				urgence = appMgr
						.getUrgenceById(Integer.valueOf(selectedItemUg)).get(0);
				courrierTemp.setUrgence(urgence);
			}
			courrierTemp.setCourrierNecessiteReponse(necessiteReponse);

			vb.setTypeSender(typeSender);
			vb.setTypeCourrier(typeCourrier);
			vb.setOtherAnnotation(otherAnnotation);
			vb.setChooseAnnotation(chooseAnnotationType);
			vb.setSelectedAnnotationItems(selectedItemsAnnotation);
			vb.setCourrierTempValue(courrierTemp);
		

			if(destinataires!=null){
				for (ListeDestinatairesModel dest : destinataires) {

					if (listAnno.getDestinataireId() == dest
							.getDestinataireId()) {
						if (dest.getChooseAnnotationType() != null) {
							// vérifie si c'est changé
							if (chooseAnnotationType != null) {
								if (dest.getChooseAnnotationType().equals(
										"tous")) {

									dest.setListeAnnotations(selectedItemsAnnotation);
									dest.setOtherAnnotation(null);
									otherAnnotation = null;

								}
								if (dest.getChooseAnnotationType().equals(
										"autre")) {
									dest.setListeAnnotations(new ArrayList<String>());
									dest.setOtherAnnotation(otherAnnotation);
									if (otherAnnotation == null
											|| (otherAnnotation != null && otherAnnotation
													.length() == 0))
										otherAnnotation = null;

								}

							} else {
								chooseAnnotationType = "tous";
								dest.getChooseAnnotationType().equals("tous");
								System.out
										.println("DANS CAS chooseAnnotationType==NULL ");
							}
						}

						else {// dest.getChooseAnnotationType()==null
							dest.setChooseAnnotationType(chooseAnnotationType);
							if (chooseAnnotationType.equals("tous")) {
								dest.setListeAnnotations(selectedItemsAnnotation);
								dest.setOtherAnnotation(null);
								otherAnnotation = null;

							}
							if (chooseAnnotationType.equals("autre")) {

								dest.setOtherAnnotation(otherAnnotation);
								otherAnnotation = null;

							}
						}

						break;
					}
				}
			}

				otherAnnotation=null;
				
			
			listAnno = new ListeDestinatairesModel();
			vb.setListeDestinataire(destinataires);
		
			if(transformationMailFax){
				System.out.println("DANS transformationMailFax >>>>>>");
				if(!vb.getPerson().isBoc()){
				passageParBO = "Non";
				affichagePassageBO=true;
				champDesabled=true;
				champDesabledReceptionPhysique=true;
				}
				else{
					passageParBO = "Oui";
					affichagePassageBO=false;
					champDesabled=true;
					champDesabledReceptionPhysique=true;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void ajoutDocuments(Courrier c) {
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		// Fonction : ajoutDocuments
		// Date :
		// Auteur :
		// Description : Cette fonction permet d'ajouter les documents du
		// courrier passé en paramètre comme des pièces jointes d'un email
		//
		//
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		// XTE : Charger la liste des attachements que nous
		// avons-----------------------------------------------------------------------------
		List<AttachmentFileBean> attachmentFileBeans = new ArrayList<AttachmentFileBean>();
		if (mail.getMailAttachmentFiles() != null) {
			for (Map.Entry<String, Integer> entry : mail
					.getMailAttachmentFiles().entrySet()) {
				String mailId = mail.getMailHeaders().get("Message-ID");
				String name = entry.getKey();

				Date d = new Date();
				d = mail.getMailReceivedDate();
				String expediteurMail = mail.getMailFromAddress();
				String documentType = name.substring(name.lastIndexOf("."));
				documentType = documentType.toLowerCase();
				if (documentType.equals(".pdf") || documentType.equals(".vsd")
						|| documentType.equals(".xls")
						|| documentType.equals(".xlsx")
						|| documentType.equals(".doc")
						|| documentType.equals(".docx")
						|| documentType.equals(".png")
						|| documentType.equals(".jpg")) {
					MailConnection mailConnection = new MailConnection();
					byte[] byteArray = mailConnection.downloadAttachmentFile(
							mailId, name);
					if (byteArray != null) {
						AttachmentFileBean attachmentFile = new AttachmentFileBean(
								mailId, name, byteArray, d, expediteurMail);
						attachmentFileBeans.add(attachmentFile);
					}
				}
			}
		}
		else{
			System.out.println();
		}
		// XTE : Fin de chargement de la liste des
		// attachements-------------------------------------------------------------------------------

		// XTE : Ajout de la liste des
		// attachements-------------------------------------------------------------------------------------------
		int count = 1;
		for (AttachmentFileBean attachmentFile : attachmentFileBeans) {
			Document document = new Document();
			DocumentCategorie docCategorie = appMgr.getDocumentCategorieById(1);
			// XTE : Récupération de l'extension du
			// fichier---------------------------------------------------------------------------------------
			String fileName = attachmentFile.getName();
			String documentType = fileName.substring(fileName.lastIndexOf("."));
			document.setDocumentType(documentType);

			document.setCourrier(vb.getCourrier());
			document.setDocumentCategorie(docCategorie);
			document.setDocumentDateInsertion(new Date());
			document.setDocumentProprietaire(vb.getPerson().getId());
			document.setDocumentSupprime(true);
			document.setDocumentParent(document);
			document.setDocumentNom(attachmentFile.getName());
			document.setDocumentReference(c.getCourrierReferenceCorrespondant()
					+ "_" + count);
			document.setDocumentObjet(c.getCourrierObjet() + "_" + count);

			try {
				appMgr.insert(document);
			} catch (Exception e) {
				// System.out.println("erreur ajout document");
			}
			// XTE : Couche accès
			// GED-------------------------------------------------------------------------------------------------------------
			try {
				int refcourrier = c.getIdCourrier();
				int refdocument = document.getIdDocument();

				gedUtils.saveAttachFileMail(attachmentFile, refcourrier,
						refdocument);
			} catch (Exception e) {
				e.printStackTrace();
				// System.out.println("erreur ajout document attaché au mail ");
			}
			// XTE : Couche accès
			// GED-------------------------------------------------------------------------------------------------------------
			count++;
		}
		// XTE : Fin ajout de la liste des
		// attachements---------------------------------------------------------------------------------------

	}

	public void rollBackCourrierValue() {
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		// Fonction : rollBackCourrierValue
		// Date :
		// Auteur :
		// Description : Cette fonction permet de rétablir les données saisie
		// avant le passage vers l'interface courrierUtilisateurTree.jsf
		// qui son enregistées dans la variable globale courrierTempValue
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------

		try {
			Courrier courrierBack = new Courrier();
			if (vb.getCourrierTempValue() != null) {
				courrierBack = vb.getCourrierTempValue();
				courrier.setCourrierReferenceCorrespondant(courrierBack
						.getCourrierReferenceCorrespondant());
				courrier.setCourrierObjet(courrierBack.getCourrierObjet());
				courrier.setCourrierRefOriginale(courrierBack.getCourrierRefOriginale());
				courrier.setCourrierCommentaire(courrierBack
						.getCourrierCommentaire());
				courrier.setCourrierDateReponse(courrierBack
						.getCourrierDateReponse());
				courrier.setKeywords(courrierBack.getKeywords());
				courrier.setCourrierCircuit(courrierBack.getCourrierCircuit());
				//
				if (vb.getSelectedAnnotationItems() == null) {
					System.out.println("liste annotation vide");
				} else {
					selectedItemsAnnotation = vb.getSelectedAnnotationItems();
				}
				necessiteReponse = courrierBack.getCourrierNecessiteReponse();
				if (necessiteReponse != null) {
					if (necessiteReponse.equals("Non")) {
						afficheEcheance = false;
					} else {
						afficheEcheance = true;
					}
				}
				dateCourrier = courrierBack.getCourrierDateReception();
				dateReelle=courrierBack.getCourrierDateReceptionReelle();
				
				System.out.println("dateCourrier dans roll back "+dateCourrier);
				System.out
						.println("########### 8137 selectedItemCategorie  ===  "
								+ vb.getSelectedItemCategorie());
				System.out
						.println("########### 8139 selectedItemCategorie  ===  "
								+ selectedItemCategorie);
				// //////////////KBS//////////////////////////////////////
				selectedItemCategorie = vb.getSelectedItemCategorie();
				// //////////////KBS//////////////////////////////////////

				System.out.println("###### courrierBack.getNature()"
						+ courrierBack.getNature());
				if (courrierBack.getNature() != null) {
					selectedItemNature = Integer.toString(courrierBack
							.getNature().getNatureId());
					int nb = appMgr.listWorkflowByIdNature(
							Integer.valueOf(selectedItemNature)).size();

					System.out
							.println("########### 8149 selectedItemNature  ==  "
									+ selectedItemNature);

					if (nb == 0) {
						etatCircuitWorkflow = false;
						etatCircuitWorkflowTextArea = true;
						requiredMessage = true;
					} else {
						etatCircuitWorkflow = true;
						etatCircuitWorkflowTextArea = false;
						requiredMessage = false;
					}

				}
				System.out.println("###########  selectedItemNature  ===  "
						+ selectedItemNature);
				if(courrierBack.getNature() != null){
				if (courrierBack.getNature().getNatureId() == 44
						|| courrierBack.getNature().getNatureId() == 46) {
					showPanelAOC = true;
					if(vb.getAoConsultation() != null){
					courrierBack.setAoConsultationId(vb.getAoConsultation());
					numeroAoConsultation = (vb.getAoConsultation()
							.getAoConsultationNumero());
					}
				}
				}

				if (courrierBack.getTransmission() != null) {
					selectedItemsTr = Integer.toString(courrierBack
							.getTransmission().getTransmissionId());
				}
				if (courrierBack.getConfidentialite() != null) {
					selectedItemConf = Integer.toString(courrierBack
							.getConfidentialite().getConfidentialiteId());
				}
				if (courrierBack.getUrgence() != null) {
					selectedItemUg = Integer.toString(courrierBack.getUrgence()
							.getUrgenceId());
				}
			}
			otherAnnotation = vb.getOtherAnnotation();
			if (vb.getAnnotation() != null) {
				chooseAnnotationType = vb.getChooseAnnotation();
			}
			if (vb.getTypeSender() != null) {
				typeSender = vb.getTypeSender();
			}
			if (vb.getTypeCourrier() != null) {
				typeCourrier = vb.getTypeCourrier();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// --------------------------Début
	// JS-------------------------------------------------------------------------------------
	// Charger Liste des natures par catégorie sélectionné dans liste déroulante

	public List<SelectItem> getSelectItemsCat() {
		String libelle;
		List<SelectItem> selectItemsCat = new ArrayList<SelectItem>();
		selectItemsCat.add(new SelectItem(""));
		// vb.setAoConsultation(new AoConsultation());
		for (int j = 0; j <= listCategories.size() - 1; j++) {
			Integer idNat = listCategories.get(j).getNatureCategorieId();
			if (vb.getLocale().equals("ar")) {
				libelle = listCategories.get(j).getCategorieLibelle_AR();
			} else {
				libelle = listCategories.get(j).getCategorieLibelle();
			}
			selectItemsCat.add(new SelectItem(String.valueOf(idNat), libelle));
		}
		System.out.println("selectItemsCat :" + selectItemsCat.toString());
		return selectItemsCat;
	}

	public List<SelectItem> getSelectItemsBO() {
		// String libelle;
		// LdapFunction lf = new LdapFunction();
		// BOC bocCentrale = vb.getCentralBoc();
		// LdapFunction lf= new LdapFunction();
		// List<BOC> listBOC2=vb.getListTousBos();

		// if (bocCentrale != null) {
		// listBOC.add(bocCentrale);
		// for (int k = 0; bocCentrale.getListChildBOCsBOC() != null
		// && k < bocCentrale.getListChildBOCsBOC().size(); k++) {
		// listBOC.add(bocCentrale.getListChildBOCsBOC().get(k));
		//
		// }
		// }
		// for (int j = 0; j < listBOC.size(); j++) {
		//
		// libelle = listBOC.get(j).getNameBOC();System.out.println(libelle);
		// selectItemsBO.add(new SelectItem(libelle, libelle));
		// }
		List<SelectItem> selectItemsBO = new ArrayList<SelectItem>();
		List<BOC> listBOC = new ArrayList<BOC>();
		listBOC = vb.getListTousBos();
		selectItemsBO.add(new SelectItem(""));
		List<String> listBOSLibelle = new ArrayList<String>();
		for (BOC bo : listBOC) {
			if (!listBOSLibelle.contains(bo.getNameBOC()))
				listBOSLibelle.add(bo.getNameBOC());
		}
		
		for (String bostr : listBOSLibelle) {
			selectItemsBO.add(new SelectItem(bostr));
			System.out.println("############ bostr=== " + bostr);
		}
		return selectItemsBO;
	}

	public void setSelectItemsBO(List<SelectItem> selectItemsBO) {
		this.selectItemsBO = selectItemsBO;
	}

	public void chargerNature(ActionEvent evt) {
		System.out.println("Charger nature");

		if (!selectedItemCategorie.equals("")) {
			listNatureParCateg = appMgr.listNaturesByCategorie(Integer
					.valueOf(selectedItemCategorie));
		}
		showPanelCheque = false;
		getSelectItemsnature();

	}

	public List<SelectItem> getSelectItemsnature() {
		List<SelectItem> selectItemsnature = new ArrayList<SelectItem>();

		String libelle;
		selectItemsnature.add(new SelectItem(""));
		for (int j = 0; j <= listNatureParCateg.size() - 1; j++) {
			Integer idNature = listNatureParCateg.get(j).getNatureId();
			libelle = listNatureParCateg.get(j).getNatureLibelle();
			selectItemsnature.add(new SelectItem(String.valueOf(idNature),
					libelle));
		}
		return selectItemsnature;
	}

	// --------------------------FIN
	// JS-------------------------------------------------------------------------------------
	// KHA
	private Integer findIdDestinataireSuivant(Integer idDestinataireReel,
			Integer idConnectedPerson, Boolean destinataireReelIsPerson) {
		Person person;
		int i = 0;
		i = i + 1;

		System.out.println("KHA *********findIdDestinataireSuivant*********i= "
				+ i);
		if (destinataireReelIsPerson) {
			System.out
					.println("KHA si destinataire reel est une personne====> recuperer la personne");
			person = ldapOperation.getPersonalisedUserById(idDestinataireReel);

		} else {
			System.out
					.println("KHA dest reel is Unit ====> recuperer l'unitee et responsable unitee");
			Unit unit = ldapOperation.getUnitById(idDestinataireReel);
			System.out.println("unite name=" + unit.getNameUnit());
			System.out.println("unite name responsable="
					+ unit.getResponsibleUnit().getCn());

			System.out.println("unite Id responsable="
					+ unit.getResponsibleUnit().getId());
			person = ldapOperation.getPersonalisedUserById(unit
					.getResponsibleUnit().getId());
			System.out.println("unite name=" + unit.getNameUnit());
		}

		System.out.println("KHA :  associated unit of person= "
				+ person.getAssociatedDirection().getNameUnit());
		Unit superiorUnit;
		if (!person.isBoc()) {
			System.out.println(" si destinataire n'est pas  BOC");
			if (person.isResponsable()) {

				System.out
						.println("si personne destinataire est responsable====> recuperer l'unitee superieur par rapport au rep");
				System.out.println(" unitee sup == "
						+ person.getAssociatedDirection().getNameUnit());
				System.out.println(person.getAssociatedDirection().toString());
				superiorUnit = person.getAssociatedDirection()
						.getAssociatedUnit();

			} else {
				System.out
						.println("personne destinataire autre que responsable====> recuperer l'unitee courant");

				superiorUnit = person.getAssociatedDirection();
				System.out
						.println("superiorUnit == person.AssociatedDirection");
			}
			System.out.println(" unitee superieur" + superiorUnit);
			if (superiorUnit.getResponsibleUnit().getId() != idConnectedPerson) {

				System.out
						.println("responsable de l'unitee superieur n'est pas le connectee===> recuperer l'id de responsable unitee sup");
				System.out.println("id unite sup= "
						+ superiorUnit.getResponsibleUnit().getId());

				return findIdDestinataireSuivant(superiorUnit
						.getResponsibleUnit().getId(), idConnectedPerson, true);

			}
		}

		else {
			BOC superiorBOC = person.getAssociatedDirection()
					.getAssociatedBOC();
			System.out.println("");
			System.out.println(" si destinataire est  BOC");
			System.out.println("1 id person = " + person.getId());
			return findIdDestinataireSuivant(superiorBOC.getIdBOC(),
					idConnectedPerson, true);
		}
		System.out.println("2 id person = " + person.getId());
		return person.getId();

	}

	// KHA ====== recuperer les donnees d'une personne =============
	public Person getIdPersonbyId(int idUserDest) {
		System.out.println(" Dans getIdPersonbyId ");

		int id1;
		Person personneRecherche = new Person();
		boolean findPerson = false;
		int j = 0;
		do {
			id1 = vb.getCopyLdapListUser().get(j).getId();
			if (id1 == idUserDest) {
				findPerson = true;
				personneRecherche = vb.getCopyLdapListUser().get(j);
			} else {
				j++;
			}
		} while (!findPerson && j < vb.getCopyLdapListUser().size());
		System.out.println("#Connected recherché : " + personneRecherche);

		return personneRecherche;
	}

	// //////////////////KBS//////////////////////////
	@SuppressWarnings("unchecked")
	public void addCheque() {
		System.out.println("######## Dans add cheque");
		List<ChequeModel> listChequesTab1eau = new ArrayList<ChequeModel>();
		ChequeModel fdm = new ChequeModel();
		
		fdm = (ChequeModel) listCheques.getRowData();
		
		listChequesTab1eau = (List<ChequeModel>) listCheques.getWrappedData();
		vb.setListChequeTableau(listChequesTab1eau);
		listChequesTab1eau = new ArrayList<ChequeModel>();
		int niveau = fdm.getOperation();
		System.out.println("######## niveau == " + niveau);
		String d1 = "";
		d1 = vb.getListChequeTableau().get(niveau - 1).getChequeNum();
		if (niveau == 1) {
			if (d1 != null) {
				fdm.setBoutonPlus(false);
			//	fdm.setBoutonSupprimer(false);
				listChequesTab1eau.add(fdm);
				fdm = new ChequeModel();
				fdm.setOperation(niveau + 1);
				fdm.setBoutonPlus(true);
				fdm.setBoutonSupprimer(true);
				listChequesTab1eau.add(fdm);
				//listCheques.setWrappedData(listchequesTab1);
			} else {
				setMessage(messageSource.getMessage("messageDate",
						new Object[] {}, lm.createLocal()));
				FacesContext.getCurrentInstance().addMessage(
						"messages",
						new FacesMessage(FacesMessage.SEVERITY_ERROR, message,
								""));
				listChequesTab1eau=vb.getListChequeTableau();
			}
		} else if (niveau > 1) {
			
			listChequesTab1eau = vb.getListChequeTableau();
			//[Js]: 2020-03-28 : ce ligne pose un problème de null pointer exception lorsque on ajout 3 ligne dans liste chèque sans faire le saisie des données
//			d1 = new String(listchequesTab1.get(niveau - 2).getChequeNum());
			//[JS] Fin Modif  JS============================================
			
			listChequesTab1eau.get(niveau - 1).setBoutonPlus(false);
			//listchequesTab1.get(niveau - 1).setBoutonSupprimer(false);
			fdm = new ChequeModel();
			fdm.setOperation(niveau + 1);
			fdm.setBoutonPlus(true);
			fdm.setBoutonSupprimer(true);
			listChequesTab1eau.add(fdm);
			//listCheques.setWrappedData(listchequesTab1);
			
		}
		
		for(int i=0;i<listChequesTab1eau.size();i++){
			listChequesTab1eau.get(i).setBoutonPlus(false);
			listChequesTab1eau.get(i).setBoutonSupprimer(true);
			listChequesTab1eau.get(i).setOperation(i+1);	
		}
		listChequesTab1eau.get(listChequesTab1eau.size() - 1).setBoutonPlus(true);
		if(listChequesTab1eau.size()==1)
			listChequesTab1eau.get(0).setBoutonSupprimer(false);
		listCheques.setWrappedData(listChequesTab1eau);
		vb.setListChequesSave(listChequesTab1eau);
	}

	@SuppressWarnings("unchecked")
	public void suppDate() {
		System.out.println("########## dans suppDate ");

		ChequeModel fdm = new ChequeModel();
		fdm = (ChequeModel) listCheques.getRowData();
		System.out.println("########## dans suppDate " + fdm.getOperation());
		int niveau = fdm.getOperation();

		List<ChequeModel> listChequesTab1 = new ArrayList<ChequeModel>();
		listChequesTab1 = (List<ChequeModel>) listCheques.getWrappedData();
		
			listChequesTab1.remove(niveau - 1);
		

//		if (niveau == 2) {
//			listChequesTab1.get(0).setBoutonPlus(true);
//		//	listChequesTab1.get(0).setBoutonSupprimer(false);
//		} else {
//			listChequesTab1.get(niveau - 2).setBoutonPlus(true);
//			//listChequesTab1.get(niveau - 2).setBoutonSupprimer(true);
//		}
		//Mettre à jour le niveau des ligne du niveau jusqu'au la fin
		for(int i=niveau - 1;i<listChequesTab1.size();i++){
			listChequesTab1.get(i).setBoutonPlus(false);
			listChequesTab1.get(i).setBoutonSupprimer(true);
			listChequesTab1.get(i).setOperation(i+1);	
		}
		listChequesTab1.get(listChequesTab1.size() - 1).setBoutonPlus(true);
		if(listChequesTab1.size()==1)
		listChequesTab1.get(0).setBoutonSupprimer(false);
		listCheques.setWrappedData(listChequesTab1);

	}

	public void reintialiser() {
		List<ChequeModel> listChequeTab3 = new ArrayList<ChequeModel>();
		ChequeModel fdm = new ChequeModel();
		fdm.setOperation(1);
		fdm.setBoutonPlus(true);
		fdm.setBoutonSupprimer(false);
		listChequeTab3.add(fdm);
		listCheques.setWrappedData(listChequeTab3);
	}

	@SuppressWarnings("unchecked")
	public void saveCheque() {
		System.out.println("########## Dans saveCheque ##########");
		try {
			if (listCheques != null) {
			listChequesTablo = (List<ChequeModel>) listCheques.getWrappedData();
			if (listChequesTablo != null ){
					if(listChequesTablo.size() > 0) {
				for (ChequeModel chequeDateModel : listChequesTablo) {

					Cheque cheque = new Cheque();
					cheque.setChequeBordereauTransmission(vb.getCourrier());
					cheque.setChequeBanque(chequeDateModel.getChequeBanque());
					cheque.setChequeBarre(chequeDateModel.getChequeBarre());
					cheque.setChequeBeneficiaire(chequeDateModel
							.getChequeBeneficiaire());
					cheque.setChequeDate(chequeDateModel.getChequeDate());
					cheque.setChequeNum(chequeDateModel.getChequeNum());
					cheque.setChequeMontant(chequeDateModel.getChequeMontant());
					appMgr.insert(cheque);

				}
			}
			}
			}
		} catch (Exception e) {
			System.out.println("########## erreur ajout cheque############");
			e.printStackTrace();
		}
	}

	// KHA ====== recuperer les donnees d'une personne FIN =============
	// -----------------------------------------------------------------------------------------------------------------------------------
	// -----------------------------------------------------------------------------------------------------------------------------------
	// ---------------------------------------------Getter && Setter
	// ---------------------------------------------------------------------
	//
	// Description : les Getters et Setters son des fonctions qui jouent le rôle
	// des accésseurs en lecture et en écriture aux valeurs de
	// variables d'instance, get pour lire et set pour modifier.
	// -----------------------------------------------------------------------------------------------------------------------------------
	// -----------------------------------------------------------------------------------------------------------------------------------

	public String getAnnotType() {
		return annotType;
	}

	public List<Annotation> getListAnnotation() {
		return listAnnotation;
	}

	public void setListAnnotation(List<Annotation> listAnnotation) {
		this.listAnnotation = listAnnotation;
	}

	public List<Nature> getListNature() {
		return listNature;
	}

	public void setListNature(List<Nature> listNature) {
		this.listNature = listNature;
	}

	public List<Transmission> getListTransmission() {
		return listTransmission;
	}

	public void setListTransmission(List<Transmission> listTransmission) {
		this.listTransmission = listTransmission;
	}

	public List<Confidentialite> getListConfidentialite() {
		return listConfidentialite;
	}

	public void setListConfidentialite(List<Confidentialite> listConfidentialite) {
		this.listConfidentialite = listConfidentialite;
	}

	public List<Urgence> getListUrgence() {
		return listUrgence;
	}

	public void setListUrgence(List<Urgence> listUrgence) {
		this.listUrgence = listUrgence;
	}

	public void setAnnotType(String annotType) {
		this.annotType = annotType;
	}

	public ApplicationManager getAppMgr() {
		return appMgr;
	}

	public Courrier getCourrier() {
		return courrier;
	}

	public void setCourrier(Courrier courrier) {
		this.courrier = courrier;
	}

	public Confidentialite getConfidentialite() {
		return confidentialite;
	}

	public void setConfidentialite(Confidentialite confidentialite) {
		this.confidentialite = confidentialite;
	}

	public Expdestexterne getExpdestExterne() {
		return expdestExterne;
	}

	public void setExpdestExterne(Expdestexterne expdestExterne) {
		this.expdestExterne = expdestExterne;
	}

	public void setCr(Courrier cr) {
		this.cr = cr;
	}

	public Courrier getCr() {
		return cr;
	}

	public VariableGlobale getVb() {
		return vb;
	}

	public void setVb(VariableGlobale vb) {
		this.vb = vb;
	}

	public boolean isAjoutValide() {
		return ajoutValide;
	}

	public void setAjoutValide(boolean ajoutValide) {
		this.ajoutValide = ajoutValide;
	}

	public boolean isEcheanceInvalide() {
		return echeanceInvalide;
	}

	public void setEcheanceInvalide(boolean echeanceInvalide) {
		this.echeanceInvalide = echeanceInvalide;
	}

	public MessageSource getMessageSource() {
		return messageSource;
	}

	public void setMessageSource(MessageSource messageSource) {
		this.messageSource = messageSource;
	}

	public Date getDate() {
		return date;
	}

	public void setDate(Date date) {
		this.date = date;
	}

	public boolean isDateCourrierInvalide() {
		return dateCourrierInvalide;
	}

	public void setDateCourrierInvalide(boolean dateCourrierInvalide) {
		this.dateCourrierInvalide = dateCourrierInvalide;
	}

	public void setNature(Nature nature) {
		this.nature = nature;
	}

	public List<String> getSelectedItemsAnnotation() {
		return selectedItemsAnnotation;
	}

	public void setSelectedItemsAnnotation(List<String> selectedItemsAnnotation) {
		this.selectedItemsAnnotation = selectedItemsAnnotation;
	}

	public Nature getNature() {
		return nature;
	}

	public void setSelectedItemNature(String selectedItemNature) {
		this.selectedItemNature = selectedItemNature;
	}

	public String getSelectedItemNature() {
		return selectedItemNature;
	}

	public void setSelectedItemsTr(String selectedItemsTr) {
		this.selectedItemsTr = selectedItemsTr;
	}

	public String getSelectedItemsTr() {
		return selectedItemsTr;
	}

	public String getNom() {
		return nom;
	}

	public void setNom(String nom) {
		this.nom = nom;
	}

	public void setTransmission(Transmission transmission) {
		this.transmission = transmission;
	}

	public Transmission getTransmission() {
		return transmission;
	}

	public void setSelectedItemConf(String selectedItemConf) {
		this.selectedItemConf = selectedItemConf;
	}

	public String getSelectedItemConf() {
		return selectedItemConf;
	}

	public void setSelectedItemUg(String selectedItemUg) {
		this.selectedItemUg = selectedItemUg;
	}

	public String getSelectedItemUg() {
		return selectedItemUg;
	}

	public void setUrgence(Urgence urgence) {
		this.urgence = urgence;
	}

	public Urgence getUrgence() {
		return urgence;
	}

	public TransactionAnnotation getCourrierAnnotation() {
		return courrierAnnotation;
	}

	public void setCourrierAnnotation(TransactionAnnotation courrierAnnotation) {
		this.courrierAnnotation = courrierAnnotation;
	}

	public TransactionAnnotationId getCourrierIdAnnotation() {
		return courrierIdAnnotation;
	}

	public void setCourrierIdAnnotation(
			TransactionAnnotationId courrierIdAnnotation) {
		this.courrierIdAnnotation = courrierIdAnnotation;
	}

	public void setTransaction(Transaction transaction) {
		this.transaction = transaction;
	}

	public Transaction getTransaction() {
		return transaction;
	}

	public void setExpediteur(Expdestexterne expediteur) {
		this.expediteur = expediteur;
	}

	public Expdestexterne getExpediteur() {
		return expediteur;
	}

	public void setTrDest(TransactionDestination trDest) {
		this.trDest = trDest;
	}

	public TransactionDestination getTrDest() {
		return trDest;
	}

	public TransactionDestinationId getId() {
		return id;
	}

	public void setId(TransactionDestinationId id) {
		this.id = id;
	}

	public void setSelect(boolean select) {
		this.select = select;
	}

	public boolean isSelect() {
		return select;
	}

	public void setReponse(String reponse) {
		this.reponse = reponse;
	}

	public String getReponse() {
		return reponse;
	}

	public Date getDateCourrier() {
		return dateCourrier;
	}

	public boolean isInsertionInterrompus() {
		return insertionInterrompus;
	}

	public void setInsertionInterrompus(boolean insertionInterrompus) {
		this.insertionInterrompus = insertionInterrompus;
	}

	public void setDateCourrier(Date dateCourrier) {
		this.dateCourrier = dateCourrier;
	}

	public void setNecessiteReponse(String necessiteReponse) {
		this.necessiteReponse = necessiteReponse;
	}

	public String getNecessiteReponse() {
		return necessiteReponse;
	}

	public void setUser(UserBean user) {
		this.user = user;
	}

	public UserBean getUser() {
		return user;
	}

	public void setTypeExpediteur(String typeExpediteur) {
		this.typeExpediteur = typeExpediteur;
	}

	public String getTypeExpediteur() {
		return typeExpediteur;
	}

	public void setSelectParDefault(boolean selectParDefault) {
		this.selectParDefault = selectParDefault;
	}

	public boolean isSelectParDefault() {
		return selectParDefault;
	}

	public void setSelectAutre(boolean selectAutre) {
		this.selectAutre = selectAutre;
	}

	public boolean isSelectAutre() {
		return selectAutre;
	}

	public void setExpNom1(String expNom1) {
		this.expNom1 = expNom1;
	}

	public String getExpNom1() {
		return expNom1;
	}

	public void setExpNom2(List<String> expNom2) {
		this.expNom2 = expNom2;
	}

	public List<String> getExpNom2() {
		return expNom2;
	}

	public void setCourriercourrierObjet(String courriercourrierObjet) {
		this.courriercourrierObjet = courriercourrierObjet;
	}

	public String getCourriercourrierObjet() {
		return courriercourrierObjet;
	}

	public void setAssociatedUnit(String associatedUnit) {
		this.associatedUnit = associatedUnit;
	}

	public String getAssociatedUnit() {
		return associatedUnit;
	}

	public void setTypeSender(String typeSender) {
		this.typeSender = typeSender;
	}

	public String getTypeSender() {
		return typeSender;
	}

	public void setListCourriersRecusJour(
			List<CourrierConsulterInformations> listCourriersRecusJour) {
		this.listCourriersRecusJour = listCourriersRecusJour;
	}

	public List<CourrierConsulterInformations> getListCourriersRecusJour() {
		return listCourriersRecusJour;
	}

	public void setListCourriersEnvoyesJour(
			List<CourrierConsulterInformations> listCourriersEnvoyesJour) {
		this.listCourriersEnvoyesJour = listCourriersEnvoyesJour;
	}

	public List<CourrierConsulterInformations> getListCourriersEnvoyesJour() {
		return listCourriersEnvoyesJour;
	}

	public void setAssociatedLabel(String associatedLabel) {
		this.associatedLabel = associatedLabel;
	}

	public String getAssociatedLabel() {
		return associatedLabel;
	}

	public void setIdBoc(Integer idBoc) {
		this.idBoc = idBoc;
	}

	public Integer getIdBoc() {
		return idBoc;
	}

	public void setShowFacetUser(boolean showFacetUser) {
		this.showFacetUser = showFacetUser;
	}

	public boolean isShowFacetUser() {
		return showFacetUser;
	}

	public void setShowFacetBoc(boolean showFacetBoc) {
		this.showFacetBoc = showFacetBoc;
	}

	public boolean isShowFacetBoc() {
		return showFacetBoc;
	}

	public void setTypeCourrier(String typeCourrier) {
		this.typeCourrier = typeCourrier;
	}

	public String getTypeCourrier() {
		return typeCourrier;
	}

	public void setLdapOperation(LdapOperation ldapOperation) {
		this.ldapOperation = ldapOperation;
	}

	public LdapOperation getLdapOperation() {
		return ldapOperation;
	}

	public void setEtatCircuitWorkflow(boolean etatCircuitWorkflow) {
		this.etatCircuitWorkflow = etatCircuitWorkflow;
	}

	public boolean isEtatCircuitWorkflow() {
		return etatCircuitWorkflow;
	}

	public Informations getInfo1() {
		return info1;
	}

	public void setInfo1(Informations info1) {
		this.info1 = info1;
	}

	public Informations getInfo2() {
		return info2;
	}

	public void setInfo2(Informations info2) {
		this.info2 = info2;
	}

	public Informations getInfo3() {
		return info3;
	}

	public void setInfo3(Informations info3) {
		this.info3 = info3;
	}

	public Informations getInfo4() {
		return info4;
	}

	public void setInfo4(Informations info4) {
		this.info4 = info4;
	}

	public List<Informations> getListInfo() {
		return listInfo;
	}

	public void setListInfo(List<Informations> listInfo) {
		this.listInfo = listInfo;
	}

	public void setEtatCircuitWorkflowTextArea(
			boolean etatCircuitWorkflowTextArea) {
		this.etatCircuitWorkflowTextArea = etatCircuitWorkflowTextArea;
	}

	public boolean isEtatCircuitWorkflowTextArea() {
		return etatCircuitWorkflowTextArea;
	}

	public void setVbn(VariableGlobaleNotification vbn) {
		this.vbn = vbn;
	}

	public VariableGlobaleNotification getVbn() {
		return vbn;
	}

	public String getChooseAnnotationType() {
		return chooseAnnotationType;
	}

	public void setChooseAnnotationType(String chooseAnnotationType) {
		this.chooseAnnotationType = chooseAnnotationType;
	}

	public String getOtherAnnotation() {
		return otherAnnotation;
	}

	public void setOtherAnnotation(String otherAnnotation) {
		this.otherAnnotation = otherAnnotation;
	}

	public void setListWorkflow(List<Workflow> listWorkflow) {
		this.listWorkflow = listWorkflow;
	}

	public List<Workflow> getListWorkflow() {
		return listWorkflow;
	}

	public void setRequiredMessage(boolean requiredMessage) {
		this.requiredMessage = requiredMessage;
	}

	public boolean isRequiredMessage() {
		return requiredMessage;
	}

	public boolean isSansDestinataire() {
		return sansDestinataire;
	}

	public void setSansDestinataire(boolean sansDestinataire) {
		this.sansDestinataire = sansDestinataire;
	}

	public boolean isAfficheEcheance() {
		return afficheEcheance;
	}

	public void setAfficheEcheance(boolean afficheEcheance) {
		this.afficheEcheance = afficheEcheance;
	}

	public Mail getMail() {
		return mail;
	}

	public void setMail(Mail mail) {
		this.mail = mail;
	}

	public GedUtils getGedUtils() {
		return gedUtils;
	}

	public void setGedUtils(GedUtils gedUtils) {
		this.gedUtils = gedUtils;
	}

	public FaxMail getFaxMail() {
		return faxMail;
	}

	public void setFaxMail(FaxMail faxMail) {
		this.faxMail = faxMail;
	}

	public boolean isTransformationMailFax() {
		return transformationMailFax;
	}

	public void setTransformationMailFax(boolean transformationMailFax) {
		this.transformationMailFax = transformationMailFax;
	}

	public void setDateReelle(Date dateReelle) {
		this.dateReelle = dateReelle;
	}

	public Date getDateReelle() {
		return dateReelle;
	}

	public boolean isSansExpediteur() {
		return sansExpediteur;
	}

	public void setSansExpediteur(boolean sansExpediteur) {
		this.sansExpediteur = sansExpediteur;
	}

	public void setShowPopupSansGED(boolean showPopupSansGED) {
		this.showPopupSansGED = showPopupSansGED;
	}

	public boolean isShowPopupSansGED() {
		return showPopupSansGED;
	}

	public void setHidePopupSansGED(boolean hidePopupSansGED) {
		this.hidePopupSansGED = hidePopupSansGED;
	}

	public boolean isHidePopupSansGED() {
		return hidePopupSansGED;
	}

	public void setShowPopupAvecGED(boolean showPopupAvecGED) {
		this.showPopupAvecGED = showPopupAvecGED;
	}

	public boolean isShowPopupAvecGED() {
		return showPopupAvecGED;
	}

	public void setHidePopupAvecGED(boolean hidePopupAvecGED) {
		this.hidePopupAvecGED = hidePopupAvecGED;
	}

	public boolean isHidePopupAvecGED() {
		return hidePopupAvecGED;
	}

	public LanguageManagerBean getLanguageManager() {
		return languageManager;
	}

	public void setLanguageManager(LanguageManagerBean languageManager) {
		this.languageManager = languageManager;
	}

	public void setListCategories(List<NatureCategorie> listCategories) {
		this.listCategories = listCategories;
	}

	public List<NatureCategorie> getListCategories() {
		return listCategories;
	}

	public List<Nature> getListNatureParCateg() {
		return listNatureParCateg;
	}

	public void setListNatureParCateg(List<Nature> listNatureParCateg) {
		this.listNatureParCateg = listNatureParCateg;
	}

	public void setSelectItemsCat(List<SelectItem> selectItemsCat) {
		this.selectItemsCat = selectItemsCat;
	}

	public void setSelectItemsnature(List<SelectItem> selectItemsnature) {
		this.selectItemsnature = selectItemsnature;
	}

	public void setSelectedItemNat(String selectedItemNat) {
		this.selectedItemNat = selectedItemNat;
	}

	public String getSelectedItemNat() {
		return selectedItemNat;
	}

	public String getSelectedItemCategorie() {
		return selectedItemCategorie;
	}

	public void setSelectedItemCategorie(String selectedItemCategorie) {
		this.selectedItemCategorie = selectedItemCategorie;
	}

	public void setListDonneeSupplementaireNatures(
			List<DonneeSupplementaireNature> listDonneeSupplementaireNatures) {
		this.listDonneeSupplementaireNatures = listDonneeSupplementaireNatures;
	}

	public List<DonneeSupplementaireNature> getListDonneeSupplementaireNatures() {
		return listDonneeSupplementaireNatures;
	}

	public void setComposantDynamique(ComposantDynamique composantDynamique) {
		this.composantDynamique = composantDynamique;
	}

	public ComposantDynamique getComposantDynamique() {
		return composantDynamique;
	}

	public void setMsg(Properties msg) {
		this.msg = msg;
	}

	public Properties getMsg() {
		return msg;
	}

	public void setListComposantDynamique(
			List<ComposantDynamique> listComposantDynamique) {
		this.listComposantDynamique = listComposantDynamique;
	}

	public List<ComposantDynamique> getListComposantDynamique() {
//		for (int i = 0; i < listComposantDynamique.size(); i++) {
//			System.out.println(listComposantDynamique.get(i));
//		}

		return listComposantDynamique;
	}

	public String getColonne() {
		return colonne;
	}

	public void setColonne(String colonne) {
		this.colonne = colonne;
	}

	public void setC(CourrierDonneeSupplementaire c) {
		this.c = c;
	}

	public CourrierDonneeSupplementaire getC() {
		return c;
	}

	public void setAfficheChamps(boolean afficheChamps) {
		this.afficheChamps = afficheChamps;
	}

	public boolean isAfficheChamps() {
		return afficheChamps;
	}

	public String getNecessiteReceptionPhysique() {
		return necessiteReceptionPhysique;
	}

	public void setNecessiteReceptionPhysique(String necessiteReceptionPhysique) {
		this.necessiteReceptionPhysique = necessiteReceptionPhysique;
	}

	public String getPassageParBO() {
		return passageParBO;
	}

	public void setPassageParBO(String passageParBO) {
		this.passageParBO = passageParBO;
	}

	public int getIdExpediteur() {
		return idExpediteur;
	}

	public void setIdExpediteur(int idExpediteur) {
		this.idExpediteur = idExpediteur;
	}

	public boolean isStatusPerson() {
		return statusPerson;
	}

	public void setStatusPerson(boolean statusPerson) {
		this.statusPerson = statusPerson;
	}

	public boolean isFlagValise() {
		return flagValise;
	}

	public void setFlagValise(boolean flagValise) {
		this.flagValise = flagValise;
	}

	public void allerAListeAOConsultation() {
		passe = false;
		try {
			// vb.setFacture(facture);

			passe = true;

			// vb.setPagePrecedente("ajout");

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public String goToListAoConsultation() {
		vb.setCourrier(courrier);

		passe = false;
		vb.setFlagAjout(false);
		try {

			passe = true;
			vb.setFlagAjout(true);
			vb.setPagePrecedente("ajout");
			System.out
					.println("Dans goToListAoConsultation vb.setFlagAjout ==  "
							+ vb.isFlagAjout());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "listAO";
	}

	public boolean isPasse() {
		return passe;
	}

	public void setPasse(boolean passe) {
		this.passe = passe;
	}

	public AoConsultation getAoConsultation() {
		return aoConsultation;
	}

	public void setAoConsultation(AoConsultation aoConsultation) {
		this.aoConsultation = aoConsultation;
	}

	public AoConsultation getAoConsultationCourrier() {
		return aoConsultationCourrier;
	}

	public void setAoConsultationCourrier(AoConsultation aoConsultationCourrier) {
		this.aoConsultationCourrier = aoConsultationCourrier;
	}

	public void setShowPanelAOC(boolean showPanelAOC) {
		this.showPanelAOC = showPanelAOC;
	}

	public boolean isShowPanelAOC() {
		return showPanelAOC;
	}

	public boolean isAffichagePassageBO() {
		return affichagePassageBO;
	}

	public void setAffichagePassageBO(boolean affichagePassageBO) {
		this.affichagePassageBO = affichagePassageBO;
	}

	public void setAffichageReceptionPhysique(boolean affichageReceptionPhysique) {
		this.affichageReceptionPhysique = affichageReceptionPhysique;
	}

	public boolean isAffichageReceptionPhysique() {
		return affichageReceptionPhysique;
	}

	public String getNumeroAoConsultation() {
		return numeroAoConsultation;
	}

	public void setNumeroAoConsultation(String numeroAoConsultation) {
		this.numeroAoConsultation = numeroAoConsultation;
	}

	public void onBlur() {
		try{
	List<AoConsultation> listeAoConsultation = new ArrayList<AoConsultation>();
	if (numeroAoConsultation != null && numeroAoConsultation.length() > 0) {
		listeAoConsultation = appMgr.getAOByRef(numeroAoConsultation);
		if (listeAoConsultation != null && listeAoConsultation.size() > 0) {
			notExistAoConsultation=false;
			aoConsultation = listeAoConsultation.get(0);
			System.out.println("aoConsultation.getAoConsultationDateLimiteOffre() "+aoConsultation.getAoConsultationDateLimiteOffre());
			if(aoConsultation.getAoConsultationDateLimiteOffre()!=null){
				heure1 =aoConsultation.getAoConsultationDateLimiteOffre().toString().substring(0,10) + " à "
				+ aoConsultation.getAoConsultationDateLimiteOffre().toString().substring(11,16);
				}
			System.out.println("aoConsultation.getAoConsultationDelaisProlongation() "+aoConsultation.getAoConsultationDelaisProlongation());
			if(aoConsultation.getAoConsultationDelaisProlongation()!=null){
				heure2 =aoConsultation.getAoConsultationDelaisProlongation().toString().substring(0,10) + " à "
				+ aoConsultation.getAoConsultationDelaisProlongation().toString().substring(11,16);
				}
			
			System.out.println("##### heure1 + " + heure1);
			if(aoConsultation.getAoConsultationDateSeanceCommission()!=null){
			heure3 =aoConsultation.getAoConsultationDateSeanceCommission().toString().substring(0,10) + " à "
			+ aoConsultation.getAoConsultationDateSeanceCommission().toString().substring(11,16);
			}
		}
		else{
			notExistAoConsultation=true;
			aoConsultation=new AoConsultation();
		    heure1="";
			heure2="";
			heure3="";
		}
	}
	
	vb.setAoConsultation(aoConsultation);
	//2020-06-08
//	if (vb.getAoConsultation() == null){
//		sansAoConsultation = true;
//	}else{
//		sansAoConsultation=false;
//	}
}catch (Exception e) {
		e.printStackTrace();
	}
}

	public boolean isHideNumValise() {
		return hideNumValise;
	}

	public void setHideNumValise(boolean hideNumValise) {
		this.hideNumValise = hideNumValise;
	}

	public List<DonneeSupplementaireNature> getListDonneeSupplementaireTransmission() {
		return listDonneeSupplementaireTransmission;
	}

	public void setListDonneeSupplementaireTransmission(
			List<DonneeSupplementaireNature> listDonneeSupplementaireTransmission) {
		this.listDonneeSupplementaireTransmission = listDonneeSupplementaireTransmission;
	}

	public List<ComposantDynamique> getListComposantDynamiqueTransmission() {
		return listComposantDynamiqueTransmission;
	}

	public void setListComposantDynamiqueTransmission(
			List<ComposantDynamique> listComposantDynamiqueTransmission) {
		this.listComposantDynamiqueTransmission = listComposantDynamiqueTransmission;
	}

	public boolean isAffichageBlocAnnotation() {
		return affichageBlocAnnotation;
	}

	public void setAffichageBlocAnnotation(boolean affichageBlocAnnotation) {
		this.affichageBlocAnnotation = affichageBlocAnnotation;
	}

	public boolean isErreurSaisieDate() {
		return erreurSaisieDate;
	}

	public void setErreurSaisieDate(boolean erreurSaisieDate) {
		this.erreurSaisieDate = erreurSaisieDate;
	}

	public void setAfficheChoixExpediteurs(boolean afficheChoixExpediteurs) {
		this.afficheChoixExpediteurs = afficheChoixExpediteurs;
	}

	public boolean isAfficheChoixExpediteurs() {
		return afficheChoixExpediteurs;
	}

	public boolean isShowPanelCheque() {
		return showPanelCheque;
	}

	public void setShowPanelCheque(boolean showPanelCheque) {
		this.showPanelCheque = showPanelCheque;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public ListDataModel getListCheques() {
		return listCheques;
	}

	public void setListCheques(ListDataModel listCheques) {
		this.listCheques = listCheques;
	}

	public List<ChequeModel> getListChequesTablo() {
		return listChequesTablo;
	}

	public void setListChequesTablo(List<ChequeModel> listChequesTablo) {
		this.listChequesTablo = listChequesTablo;
	}

	public void setAfficheChampsSpecTansmission(
			boolean afficheChampsSpecTansmission) {
		this.afficheChampsSpecTansmission = afficheChampsSpecTansmission;
	}

	public boolean isAfficheChampsSpecTansmission() {
		return afficheChampsSpecTansmission;
	}

	public String getHeure1() {
		return heure1;
	}

	public void setHeure1(String heure1) {
		this.heure1 = heure1;
	}

	public String getHeure2() {
		return heure2;
	}

	public void setHeure2(String heure2) {
		this.heure2 = heure2;
	}

	public String getHeure3() {
		return heure3;
	}

	public void setHeure3(String heure3) {
		this.heure3 = heure3;
	}

	public void setSelectedItemNatureAncien(String selectedItemNatureAncien) {
		this.selectedItemNatureAncien = selectedItemNatureAncien;
	}

	public String getSelectedItemNatureAncien() {
		return selectedItemNatureAncien;
	}

	public void setListComposantDynamiqueNature(
			List<ComposantDynamique> listComposantDynamiqueNature) {
		this.listComposantDynamiqueNature = listComposantDynamiqueNature;
	}

	public List<ComposantDynamique> getListComposantDynamiqueNature() {
		return listComposantDynamiqueNature;
	}

	public boolean isChampDesabled() {
		return champDesabled;
	}

	public void setChampDesabled(boolean champDesabled) {
		this.champDesabled = champDesabled;
	}

	//2020-06-08
//	public boolean isSansAoConsultation() {
//		return sansAoConsultation;
//	}
//
//	public void setSansAoConsultation(boolean sansAoConsultation) {
//		this.sansAoConsultation = sansAoConsultation;
//	}
//	

	public String getMessageValidation() {
		return messageValidation;
	}

	public void setMessageValidation(String messageValidation) {
		this.messageValidation = messageValidation;
	}

	public String getCcc() {
		return ccc;
	}

	public void setCcc(String ccc) {
		this.ccc = ccc;
	}

	public boolean isChampDesabledReceptionPhysique() {
		return champDesabledReceptionPhysique;
	}

	public void setChampDesabledReceptionPhysique(
			boolean champDesabledReceptionPhysique) {
		this.champDesabledReceptionPhysique = champDesabledReceptionPhysique;
	}

	public boolean isNotExistAoConsultation() {
		return notExistAoConsultation;
	}

	public void setNotExistAoConsultation(boolean notExistAoConsultation) {
		this.notExistAoConsultation = notExistAoConsultation;
	}


	
}