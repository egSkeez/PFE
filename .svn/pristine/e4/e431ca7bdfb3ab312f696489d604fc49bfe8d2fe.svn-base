package xtensus.beans.common.GBO;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import xtensus.beans.common.LanguageManagerBean;
import xtensus.beans.common.VariableGlobale;
import xtensus.beans.utils.CourrierInformations;
import xtensus.entity.Annotation;
import xtensus.entity.Confidentialite;
import xtensus.entity.Courrier;
import xtensus.entity.Etat;
import xtensus.entity.Expdest;
import xtensus.entity.Expdestexterne;
import xtensus.entity.Nature;
import xtensus.entity.Transaction;
import xtensus.entity.TransactionAnnotation;
import xtensus.entity.TransactionAnnotationId;
import xtensus.entity.TransactionDestination;
import xtensus.entity.TransactionDestinationId;
import xtensus.entity.TransactionDestinationReelle;
import xtensus.entity.Transmission;
import xtensus.entity.Typetransaction;
import xtensus.entity.Urgence;
import xtensus.entity.Variables;
import xtensus.entity.Workflow;
import xtensus.ldap.business.LdapFunction;
import xtensus.ldap.business.LdapOperation;
import xtensus.ldap.model.Person;
import xtensus.ldap.model.Unit;
import xtensus.services.ApplicationManager;
import xtensus.workflow.beans.JBPMAccessProcessBean;
import xtensus.workflow.handlers.TraitementEtapeSuivant;

@Component
@Scope("request")
public class CourrierValidationBean {

	private ApplicationManager appMgr;
	private Courrier courrier;
	private Transaction transaction;
	private Transaction newTransaction;
	private List<TransactionAnnotation> transactionAnnotation;
	private Transmission transmission;
	private Urgence urgence;
	private Nature nature;
	private String expediteur;
	private String destinataire;
	private String listAnnotations;
	private Confidentialite confidentialite;
	private String commentaireTransaction;
	private boolean status1;
	private boolean status2;
	@Autowired
	private VariableGlobale vb;
	@Autowired
	private LanguageManagerBean lm;
	@Autowired
	private MessageSource messageSource;
	private String message;

	private LdapOperation ldapOperation;
	private LdapFunction ldapFunction;

	private int idBoc;

    private Unit unitSup;
   //KHA =======
@Autowired
	public CourrierValidationBean(
			@Qualifier("applicationManager") ApplicationManager appMgr) {
		this.appMgr = appMgr;
		ldapOperation = new LdapOperation();
		ldapFunction=new LdapFunction();
		System.out
				.println("**************BeanInjecte CourrierValidationBean *********");
	}

	@PostConstruct
	public void Initialize() {
		System.out.println("Dans initialize ValidationBean");
		try {
//			CourrierConsulterInformations courrierConsulterInformations = new CourrierConsulterInformations();
//			courrierConsulterInformations = vb.getConsulterInformations();
			// modifier a cause de redeveloppement de la liste courriers
			CourrierInformations courrierConsulterInformations = new CourrierInformations();
			courrierConsulterInformations = vb.getCourDossConsulterInformations();
			// fin modifier a cause de redeveloppement de la liste courriers
			courrier = new Courrier();
			courrier = appMgr.getCourrierByIdCourrier(courrierConsulterInformations.getCourrierID()).get(0);
			vb.setCourrier(courrier);
//			courrier = courrierConsulterInformations.getCourrier();
			transaction = new Transaction();
			transaction = appMgr.getListTransactionByIdTransaction(courrierConsulterInformations.getTransactionID()).get(0);
			vb.setTransaction(transaction);
//			transaction = courrierConsulterInformations.getTransaction();
			confidentialite = new Confidentialite();
			confidentialite = appMgr.getConfidentialiteById(
					courrier.getConfidentialite().getConfidentialiteId())
					.get(0);
			transmission = new Transmission();
			transmission = appMgr.getTransmissionById(
					courrier.getTransmission().getTransmissionId()).get(0);
			urgence = new Urgence();
			urgence = appMgr.getUrgenceById(
					courrier.getUrgence().getUrgenceId()).get(0);
			nature = new Nature();
			nature = appMgr.getNatureById(courrier.getNature().getNatureId())
					.get(0);
			expediteur = courrierConsulterInformations.getCourrierExpediteur();
			destinataire = courrierConsulterInformations
					.getCourrierDestinataireReelle();
			listAnnotations = "";
			transactionAnnotation = new ArrayList<TransactionAnnotation>();
			transactionAnnotation = appMgr
					.getAnnotationByIdTransaction(transaction
							.getTransactionId());
			Annotation annotation;
			for (TransactionAnnotation tr : transactionAnnotation) {
				annotation = new Annotation();
				annotation = appMgr.getAnnotationByIdAnotation(
						tr.getId().getIdAnnotation()).get(0);
				listAnnotations = listAnnotations
						+ annotation.getAnnotationLibelle() + " / ";
			}
			if (!listAnnotations.equals("")) {
				int lastIndex = listAnnotations.lastIndexOf("/");
				listAnnotations = listAnnotations.substring(0, lastIndex);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/************ Validation etape *************/
	public void validationTransaction() {
		courrier = vb.getCourrier();
		String circuitCourrier = courrier.getCourrierCircuit();
		if (circuitCourrier.equals("workflow")) {
			int refNature = courrier.getNature().getNatureId();
			int etatActuelle = courrier.getCourrierEtatActuelleWorkflow();
			Workflow workflow = new Workflow();
			int nb = appMgr.listWorkflowByIdNature(refNature).size();
			if (nb != 0) {
				/********* WorkFlow Request ********/
				workflow = appMgr.listWorkflowByIdNature(refNature).get(0);
				String processId = workflow.getWorkflowTitre();
				int idLastNode = workflow.getWorkflowIdLastNode();
				if (etatActuelle == idLastNode) {
					validerFinProcessus();
				}
				else {
					TraitementEtapeSuivant etapeSuivant = new TraitementEtapeSuivant();
					JBPMAccessProcessBean jbpmAccessProcessBean = new JBPMAccessProcessBean();
					etapeSuivant = jbpmAccessProcessBean
							.startProcessTraitementCourrier(processId,
									etatActuelle);
					validateWorkflow(etapeSuivant);
				}

			}
			else {
				validate();
			}
		} 
		else {
			// C *
			Transaction transaction = vb.getTransaction();
			//			Unit generalDirectorUnit = ldapOperation.getUnitById(1);
			//			Person generalDirector = generalDirectorUnit.getResponsibleUnit();
			//			generalDirector.getId() == vb.getPerson().getId()
			if(transaction.getTransactionDestinationReelle() != null){
				TransactionDestinationReelle trDestinationReelle = appMgr.getTransactionDestinationReelById(transaction.getTransactionDestinationReelle().getTransactionDestinationReelleId());
				int bocDestinataireId= 0;
				int bocExpediteurId = 0;
				 int bocConnectedPerson =0;
				if(!trDestinationReelle.getTransactionDestinationReelleTypeDestinataire().equals("Externe")){
				
					
					    //KHA: si Externe--> Interne=======================================
				    	//==================================================================
					  if(appMgr.getListExpDestByIdExpDest(vb.getCourDossConsulterInformations()
								.getExpID()).get(0).getTypeExpDest().equals("Externe")){
							//validation Entrante
						  validateTransactionToDestinationReel(transaction, trDestinationReelle);
                        }
					  
					    //KHA: si Interne --> Interne========================================
						//=================================================================
					  else{
					
							    // KHA : Recupere BOC Destnataire 
							    // ============================================================================
							 System.out.println("recuperer boc destinataire  ");
							 if(trDestinationReelle.getTransactionDestinationReelleTypeDestinataire().equals("Interne-Unit√©")){
							
						     	   // KHA : Destinataire Unite
								   // ============================================================================
								 getIdBocByUnit(
										 getIdPersonbyId(ldapOperation.getUnitById(trDestinationReelle.getTransactionDestinationReelleIdDestinataire())
												 .getResponsibleUnit().getId()).getAssociatedDirection()
										 );
			
							 }else if(trDestinationReelle.getTransactionDestinationReelleTypeDestinataire().equals("Interne-Person")){
						    
								
								   // KHA : Destinataire personne
								   // ============================================================================
								 getIdBocByUnit((getIdPersonbyId(trDestinationReelle.
										getTransactionDestinationReelleIdDestinataire() 
								  )).getAssociatedDirection());
							}
							 bocDestinataireId=idBoc;
						    
						        //============= Fin 
						      System.out.println("bocDestinataireId = "+bocDestinataireId);
						      System.out.println("FIN recuperer boc destinataire  ");
							
						        // KHA : Recupere BOC Expediteur 
							   // ============================================================================
						   System.out.println("recuperer boc Expediteur");
						  
						  int idExpdestLdap = appMgr.getListExpDestByIdExpDest(vb.getCourDossConsulterInformations()
									.getExpID()).get(0).getIdExpDestLdap();
						  System.out.println("idExpdestLdap ="+idExpdestLdap);
						 
						  if(appMgr.getListExpDestByIdExpDest(vb.getCourDossConsulterInformations()
									.getExpID()).get(0).getTypeExpDest().equals("Interne-Person")){
							
							   // KHA : Expediteur personne
							   // ============================================================================
							 Person x = getIdPersonbyId(idExpdestLdap);
							 if(!x.isBoc())
							  getIdBocByUnit(getIdPersonbyId((idExpdestLdap)).getAssociatedDirection());
							 else 
								 idBoc=x.getAssociatedBOC().getIdBOC();
						 
						   }else if (appMgr.getListExpDestByIdExpDest(vb.getCourDossConsulterInformations()
									.getExpID()).get(0).getTypeExpDest().equals("Interne-Unit√©")){
							
							   // KHA : Expediteur Unite
						       // ============================================================================
							   getIdBocByUnit(
									   getIdPersonbyId(ldapOperation.getUnitById(idExpdestLdap).getResponsibleUnit().getId()).getAssociatedDirection());
						   }
						   bocExpediteurId=idBoc;
						   System.out.println("FIN ===> recuperer boc Expediteur");
						   System.out.println("bocExpediteurId = "+bocExpediteurId);
						  
							 
						   // KHA : Recupere BOC du Connectee 
						   // ============================================================================
							 System.out.println("recuperer boc Personne Connectee");
							getIdBocByUnit(getIdPersonbyId(vb.getPerson().getId()).getAssociatedDirection());
							bocConnectedPerson=idBoc;
							System.out.println("bocConnectedPerson = "+bocConnectedPerson);
							 System.out.println("FIN ===> recuperer boc Personne Connectee");
						  
							//============= Fin 	
							if(bocDestinataireId != bocExpediteurId){
								System.out.println("KHA ====> si bocDestinataireId != bocExpediteurId");
								if(bocConnectedPerson==bocExpediteurId){
									//validation Sortante Interne
									validateInterne();
								
								}else if(bocConnectedPerson==bocDestinataireId){
									//validation Entrante
									validateTransactionToDestinationReel(transaction, trDestinationReelle);
								}
							}else {
						         System.out.println("DANS bocDestinataireId == bocExpediteurId ");
								if(courrier.getCourrierNecessiteReponse().equals("Non")){
						        // ajouter le type de Courrier pour differencier sortant et entrant
						         // || ((courrier.getCourrierType()==null) && transaction.getEtat().getEtatId()==2 )
						         if(courrier.getCourrierType()==null){
						           //validation Sortante
						        	 System.out.println("I ====> validation Sortante");
						        	validateInterne(); 
						         }
						         
						         if(courrier.getCourrierType().equals("D") || courrier.getCourrierType().equals("A")){
						        	//validation Entrante
						        	 System.out.println("D===> validation Entrante");
						          validateTransactionToDestinationReel(transaction, trDestinationReelle);
						         }
								}else{
								
								validate();
								}
							  }
					  }	 
				 }
				//KHA: si Interne --> Externe ========================================
				//====================================================================
				else{

					validate();
				}
			}else{
				
				//validation Sortante 
				validate();
			 
			}
			// C *
			
			// C * ancien code avant // C*
			//validate();
			// C *
		}

	}
	
	
	//[AH] Code Amani 
	
	
	 private Integer findIdDestinataireSuivant(Integer idDestinataireReel, Integer idConnectedPerson, Boolean destinataireReelIsPerson){
	    	Person person;
	    	int refere=0;
	    	if (destinataireReelIsPerson) {
	    		System.out.println("2019-05-23 idDestinataireReel :13"+idDestinataireReel);
	    		person = ldapOperation
				.getPersonalisedUserById(idDestinataireReel);
			}else{
				Unit unit = ldapOperation.getUnitById(idDestinataireReel);
				System.out.println("2019-05-23 unit : "+unit);
				person = ldapOperation.getPersonalisedUserById(unit.getResponsibleUnit().getId());
			}
	    	 System.out.println("2019-05-23 Person : "+person);//sec 13
			
			Unit superiorUnit;
			
			if (person.isResponsable()) {
	            System.out.println("person is responsable");
		    	System.out.println(person.getAssociatedDirection().toString());
		    	System.out.println("2019-05-23 : "+person);
				
				superiorUnit = person.getAssociatedDirection();
				//ajout-AH
				Unit uniteResponsable=ldapOperation.getUnitById(person.getAssociatedDirection().getIdUnit());
				if(uniteResponsable.getAssociatedUnit().getIdUnit()!= null)
					superiorUnit=uniteResponsable.getAssociatedUnit();
				
	            System.out.println("############# =======>"+superiorUnit);

				 
			}else{
				///////////////////////////////////
	            System.out.println("person is not responsable");
				//Modif-AH
				 superiorUnit = person.getAssociatedDirection();
	             System.out.println("&&&&&&&&&&&& =======>"+superiorUnit);

			}
			superiorUnit = vb.getLdapOperation().getUnitById(superiorUnit.getIdUnit());
			System.out.println("2019-06-03 superiorUnit: "+superiorUnit );
			
			
			
			if (superiorUnit.getResponsibleUnit().getId() != idConnectedPerson ){
				
			 	return findIdDestinataireSuivant(superiorUnit.getResponsibleUnit() 
						.getId(), idConnectedPerson , true);
			}
			return person.getId();
	 }
	
private void validateTransactionToDestinationReel(Transaction transaction, TransactionDestinationReelle trDestinationReelle) {
		try {
			System.out.println("KHA : *****************validateTransactionToDestinationReel*****************");
			
			// id 12 = les courriers arrivee necessite validation
		//	Variables variable = appMgr.listVariablesById(12).get(0);
			Variables variable = appMgr
			.listVariablesByLibelle(
					"validation_hierarchique_courrier_arrive")
			.get(0);
			status1 = false;
			status2 = false;
			TransactionDestination transactionDestination = vb.getCourDossConsulterInformations().getTransactionDestination();
			System.out.println(" tr id tr= "+transaction.getTransactionId());
			System.out.println(" trdest id tr= "+transactionDestination.getId().getIdTransaction());
			System.out.println(" trdest id exp = "+transactionDestination.getId().getIdExpDest());
			
			if (variable.getVaraiablesValeur().equals("Oui")) {
				Integer idDestinataireReel = trDestinationReelle.getTransactionDestinationReelleIdDestinataire();
				if (trDestinationReelle
						.getTransactionDestinationReelleTypeDestinataire()
						.equals("Interne-Person")) {
					System.out.println("KHA :si le destinataire reelle de type intern-person");
					System.out.println("idDestinataireReel ==> "+idDestinataireReel);
					System.out.println("PErson ID : "+vb.getPerson().getId());
                         Integer idDestinataireSuivant = findIdDestinataireSuivant(idDestinataireReel, vb.getPerson().getId(), true);
                         
                         
                         System.out.println();
                         System.out.println("2019-06-03 idDestinataireSuivant "+idDestinataireSuivant);
                         System.out.println("2019-06-03 idDestinataireReel "+idDestinataireReel);

                         if(idDestinataireSuivant.equals(idDestinataireReel)){
                        	 System.out.println("KHA : si le destinataire suivant  est le destinataire reelle");
                        	 validateTransactionDestinataireFinale(transaction, transactionDestination);
                         }else{
                        	 System.out.println("si le destinataire suivant  n'est PAS le destinataire reelle");
                        	 validateTransactionDestinataireSuivant(transaction, transactionDestination,idDestinataireSuivant);
                         }
				} else if (trDestinationReelle
						.getTransactionDestinationReelleTypeDestinataire()
						.equals("Interne-Unit√©")) {
					System.out.println("si le destinataire reelle de type intern-unitee");

					Integer idDestinataireSuivant = findIdDestinataireSuivant(idDestinataireReel, vb.getPerson().getId(), false);
                    System.out.println(idDestinataireSuivant);
                    Unit unit = ldapOperation.getUnitById(idDestinataireReel);
                    if(idDestinataireSuivant.equals(unit.getResponsibleUnit().getId())){
                   	 validateTransactionDestinataireFinale(transaction, transactionDestination);
                    }else{
                   	 validateTransactionDestinataireSuivant(transaction, transactionDestination,idDestinataireSuivant);
                    }
				}
			} else {

				validateTransactionDestinataireFinale(transaction, transactionDestination);
			}
			
			try {
				if (transactionDestination != null
						&& transactionDestination
								.getTransactionDestDateTransfert() == null) {
					transactionDestination
							.setTransactionDestDateTransfert(new Date());
					appMgr.update(transactionDestination);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			status1 = true;
		} catch (Exception e) {
			status2 = true;
			e.printStackTrace();
		}
	}
	private void validateTransactionDestinataireSuivant(Transaction transaction,TransactionDestination transactionDestination, Integer idDestinataireSuivant) throws Exception{
//		TransactionDestination transactionDestination = new TransactionDestination();
//		try {
//			if (vb.getConsulterInformations().getTransactionDestination() != null) {
//				transactionDestination = vb.getConsulterInformations()
//						.getTransactionDestination();
//				if (transactionDestination
//						.getTransactionDestDateTransfert() == null) {
//					transactionDestination
//							.setTransactionDestDateTransfert(new Date());
//					appMgr.update(transactionDestination);
//				}
//			}
//		} catch (NullPointerException e) {
//		} 
		System.out.println( "KHA :*************validateTransactionDestinataireSuivant************");
		newTransaction = new Transaction();
		Etat etat = new Etat();
		Expdest expdest = new Expdest();
		Typetransaction typetransaction = new Typetransaction();
		TransactionDestinationId id = new TransactionDestinationId();
		TransactionDestination trDest = new TransactionDestination();
		etat = appMgr.listEtatByRef(4).get(0);
		transaction.setEtat(etat);
		if(transaction.getTransactionOrdre() == null){
			transaction.setTransactionOrdre(1);
		}
		appMgr.update(transaction);
		expdest.setTypeExpDest("Interne-Person");
		expdest.setIdExpDestLdap(vb.getPerson().getId());
	    appMgr.insert(expdest);
		newTransaction.setTransactionTypeIntervenant("sub_" + vb.getPerson().getId());
	    newTransaction.setTransactionCommentaire(commentaireTransaction);
		newTransaction.setExpdest(expdest);
		newTransaction.setIdUtilisateur(vb.getPerson().getId());
		newTransaction.setTransactionDateTransaction(new Date());
		typetransaction = appMgr.getTypeTransactionByLibelle("Envoi").get(0);
		newTransaction.setTypetransaction(typetransaction);
		etat = appMgr.listEtatByRef(2).get(0);
		newTransaction.setEtat(etat);
		newTransaction.setTransactionSupprimer(true);
		int ordreTransaction = transaction.getTransactionOrdre();
		newTransaction.setTransactionOrdre(++ordreTransaction);
		newTransaction.setDossier(transaction.getDossier());
		newTransaction.setTransactionDestinationReelle(transaction.getTransactionDestinationReelle());
		newTransaction.setTransactionFirst(transaction.getTransactionId());
		newTransaction.setCourrierReferenceCorrespondant(transaction.getCourrierReferenceCorrespondant());
		newTransaction.setCourrierType(transaction.getCourrierType());
		newTransaction.setCourrierTypeOrdre(transaction.getCourrierTypeOrdre());
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(new Date());
		newTransaction.setCourrierDateReceptionAnnee(calendar.get(Calendar.YEAR));
		appMgr.insert(newTransaction);
		Expdest expdestSuivant = new Expdest();
		
		expdestSuivant.setTypeExpDest("Interne-Person");
		expdestSuivant.setIdExpDestLdap(idDestinataireSuivant);
		appMgr.insert(expdestSuivant);
		String type = "sub_" + idDestinataireSuivant;
		id = new TransactionDestinationId();
		trDest = new TransactionDestination();
		id.setIdTransaction(newTransaction.getTransactionId());
		id.setIdExpDest(expdestSuivant.getIdExpDest());
		trDest.setTransactionDestTypeIntervenant(type);
		trDest.setId(id);
		trDest.setTransactionDestDateReponse(transactionDestination.getTransactionDestDateReponse());
		appMgr.insert(trDest);
		TransactionAnnotationId cI = new TransactionAnnotationId();
		TransactionAnnotation cA = new TransactionAnnotation();
		for (TransactionAnnotation tr : transactionAnnotation) {
			cI.setIdAnnotation(tr.getId().getIdAnnotation());
			cI.setIdTransaction(newTransaction.getTransactionId());
			cA.setId(cI);
			appMgr.insert(cA);
			cA = new TransactionAnnotation();
			cI = new TransactionAnnotationId();
		}
	}
	private void validateTransactionDestinataireFinale(Transaction transaction,TransactionDestination transactionDestination) throws Exception{
		System.out.println( "KHA /*************validateTransactionDestinataireFinale***************");
		newTransaction = new Transaction();
		Etat etat = new Etat();
		Expdest expdest = new Expdest();
		Typetransaction typetransaction = new Typetransaction();
		TransactionDestinationId id = new TransactionDestinationId();
		TransactionDestination trDest = new TransactionDestination();
		etat = appMgr.listEtatByRef(4).get(0);
		transaction.setEtat(etat);
//		transaction.setTransactionDateReponse(new Date());
		if(transaction.getTransactionOrdre() == null){
			transaction.setTransactionOrdre(1);
		}
		appMgr.update(transaction);
		expdest.setTypeExpDest("Interne-Person");
		expdest.setIdExpDestLdap(vb.getPerson().getId());
	    appMgr.insert(expdest);
	    newTransaction.setTransactionTypeIntervenant("sub_"
				+ vb.getPerson().getId());
	    newTransaction.setTransactionCommentaire(commentaireTransaction);
		newTransaction.setExpdest(expdest);
		newTransaction.setIdUtilisateur(vb.getPerson().getId());
		newTransaction.setTransactionDateTransaction(new Date());
		typetransaction = appMgr.getTypeTransactionByLibelle("Envoi")
				.get(0);
		newTransaction.setTypetransaction(typetransaction);
		etat = appMgr.listEtatByRef(6).get(0);
		newTransaction.setEtat(etat);
		newTransaction.setTransactionSupprimer(true);
		int ordreTransaction = transaction.getTransactionOrdre();
		newTransaction.setTransactionOrdre(++ordreTransaction);
		//[JS]
		newTransaction.setDossier(transaction.getDossier());
		newTransaction.setCourrierReferenceCorrespondant(transaction.getCourrierReferenceCorrespondant());
		newTransaction.setCourrierType(transaction.getCourrierType());
		newTransaction.setCourrierTypeOrdre(transaction.getCourrierTypeOrdre());
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(new Date());
		newTransaction.setCourrierDateReceptionAnnee(calendar.get(Calendar.YEAR));
		// KHA 
		newTransaction.setTransactionDestinationReelle(transaction.getTransactionDestinationReelle());
		newTransaction.setTransactionFirst(transaction.getTransactionId());
		appMgr.insert(newTransaction);
		String type = "";
		Expdest expdestFinal = new Expdest();
		if (transaction.getTransactionDestinationReelle()
				.getTransactionDestinationReelleTypeDestinataire()
				.equals("Interne-Person")) {
              Person personDestinationReel = ldapOperation.getPersonalisedUserById(transaction.getTransactionDestinationReelle().getTransactionDestinationReelleIdDestinataire());
              expdestFinal.setTypeExpDest("Interne-Person");
              expdestFinal.setIdExpDestLdap(transaction.getTransactionDestinationReelle().getTransactionDestinationReelleIdDestinataire());
			  if (personDestinationReel.isResponsable()) {
				  type = "sub_"
						+ personDestinationReel.getId();
			  }else if(personDestinationReel.isSecretary()){
				  type = "secretary_"
						+ personDestinationReel.getId();
			  }else {
				  type = "agent_" + personDestinationReel.getId();
			  }
              
              
              
		} else if (transaction.getTransactionDestinationReelle()
				.getTransactionDestinationReelleTypeDestinataire()
				.equals("Interne-Unit√©")) {
//              Unit unit = ldapOperation.getUnitById(transaction.getTransactionDestinationReelle().getTransactionDestinationReelleIdDestinataire());
              expdestFinal.setTypeExpDest("Interne-Unit√©");
              expdestFinal.setIdExpDestLdap(transaction.getTransactionDestinationReelle().getTransactionDestinationReelleIdDestinataire());
				type = "unit_"
						+ transaction.getTransactionDestinationReelle().getTransactionDestinationReelleIdDestinataire();
		}
		appMgr.insert(expdestFinal);
		id = new TransactionDestinationId();
		trDest = new TransactionDestination();
		id.setIdTransaction(newTransaction.getTransactionId());
		id.setIdExpDest(expdestFinal.getIdExpDest());
		trDest.setTransactionDestTypeIntervenant(type);
		trDest.setId(id);
		trDest.setTransactionDestDateReponse(transactionDestination
				.getTransactionDestDateReponse());
		appMgr.insert(trDest);
		TransactionAnnotationId cI = new TransactionAnnotationId();
		TransactionAnnotation cA = new TransactionAnnotation();
		for (TransactionAnnotation tr : transactionAnnotation) {
			cI.setIdAnnotation(tr.getId().getIdAnnotation());
			cI.setIdTransaction(newTransaction.getTransactionId());
			cA.setId(cI);
			appMgr.insert(cA);
			cA = new TransactionAnnotation();
			cI = new TransactionAnnotationId();
		}
	}
	
	
	//  KHA : methode validation hi√©rarchique Interne-Interne
	// Debut-----------------------------------------------------
	public void validateInterne() {
		System.out.println("KHA :************************validateInterne***********************");
		status1 = false;
		status2 = false;
		Variables variableValidationHierarchiqueArrivee = appMgr
		.listVariablesByLibelle(
				"validation_hierarchique_courrier_arrive")
		.get(0);
		try {
			TransactionDestination transactionDestination = new TransactionDestination();
			try {
				if (vb.getCourDossConsulterInformations().getTransactionDestination() != null) {  // vb.getConsulterInformations().getTransactionDestination() != null
					transactionDestination = vb.getCourDossConsulterInformations().getTransactionDestination(); //  vb.getConsulterInformations().getTransactionDestination();
					if (transactionDestination
							.getTransactionDestDateTransfert() == null) {
						transactionDestination
								.setTransactionDestDateTransfert(new Date());
						appMgr.update(transactionDestination);
					}
				}
			} catch (NullPointerException e) {
			}
			// 
			newTransaction = new Transaction();
			Etat etat = new Etat();
			Expdest expdest = new Expdest();
			Typetransaction typetransaction = new Typetransaction();
			TransactionDestinationId id = new TransactionDestinationId();
			TransactionDestination trDest = new TransactionDestination();
			etat = appMgr.listEtatByLibelle("Valid√©").get(0);
			transaction = vb.getTransaction();
			transaction.setEtat(etat);
			transaction.setTransactionDateReponse(new Date());
			appMgr.update(transaction);
			
			
			if (vb.getPerson().getAssociatedBOC() != null) {
				expdest.setTypeExpDest("Interne-Boc");
				expdest.setIdExpDestLdap(vb.getPerson().getAssociatedBOC()
						.getIdBOC());
				 
			} else {
				expdest.setTypeExpDest("Interne-Person");
				expdest.setIdExpDestLdap(vb.getPerson().getId());
			}

			appMgr.insert(expdest);
			if (vb.getPerson().isResponsable()) {
				newTransaction.setTransactionTypeIntervenant("sub_"
						+ String.valueOf(vb.getPerson().getId()));
			} 
			
			newTransaction.setTransactionCommentaire(commentaireTransaction);
			newTransaction.setExpdest(expdest);
			newTransaction.setIdUtilisateur(vb.getPerson().getId());
			newTransaction.setTransactionDateTransaction(new Date());
			typetransaction = appMgr.getTypeTransactionByLibelle("Envoi")
					.get(0);
			newTransaction.setTypetransaction(typetransaction);
			if (vb.getPerson().getAssociatedBOC() != null) {
				
				etat = appMgr.listEtatByLibelle("Trait√©").get(0);
			 
			} else {
				if(vb.getPerson().getAssociatedDirection().getAssociatedBOC()!=null){
					etat = appMgr.listEtatByLibelle("Non trait√©").get(0);
				}else{
				etat = appMgr.listEtatByLibelle("A valider").get(0);
				}
			}
			newTransaction.setEtat(etat);
			newTransaction.setTransactionSupprimer(true);
			int newOrderNumber = transaction.getTransactionOrdre();
			newOrderNumber++;
			newTransaction.setTransactionOrdre(newOrderNumber);
			newTransaction.setDossier(transaction.getDossier());
			newTransaction.setTransactionDestinationReelle(transaction.getTransactionDestinationReelle());
			//2019-06-27
			System.out.println("[transaction.getCourrierReferenceCorrespondant()] : "+transaction.getCourrierReferenceCorrespondant());
			newTransaction.setCourrierReferenceCorrespondant(transaction.getCourrierReferenceCorrespondant());
			newTransaction.setCourrierDateReceptionAnnee(transaction.getCourrierDateReceptionAnnee());
			newTransaction.setCourrierType(transaction.getCourrierType());
			newTransaction.setCourrierTypeOrdre(transaction.getCourrierTypeOrdre());
			//FIn Modif
			appMgr.insert(newTransaction);
			if(vb.getPerson().getAssociatedDirection().getAssociatedBOC()!=null){
				newTransaction.setTransactionFirst(newTransaction.getTransactionId());	
			}else{
				newTransaction.setTransactionFirst(transaction.getTransactionId());	
			}
			appMgr.update(newTransaction);

			
			expdest = new Expdest();
			String type = "";
			// KHA 
			int idIntervenant = 0;
			// les destinataires suivants
		
			if (vb.getPerson().getAssociatedDirection().getAssociatedBOC() != null) {
					
					
					// Le courrier necessite  passage par BO
					if(courrier.getCourrierNecessitePassageParBO()==true){
						System.out.println("===> Le courrier necessite  passage par BO");
					expdest.setTypeExpDest("Interne-Boc");
					expdest.setIdExpDestLdap(vb.getPerson()
							.getAssociatedDirection().getAssociatedBOC()
							.getIdBOC());
					type = "boc_"
							+ String.valueOf(vb.getPerson()
									.getAssociatedDirection()
									.getAssociatedBOC().getIdBOC());
		 
					idIntervenant=vb.getPerson()
					.getAssociatedDirection()
					.getAssociatedBOC().getIdBOC();
					appMgr.insert(expdest);
					id = new TransactionDestinationId();
					trDest = new TransactionDestination();
					id.setIdTransaction(newTransaction.getTransactionId());
					id.setIdExpDest(expdest.getIdExpDest());
					trDest.setTransactionDestTypeIntervenant(type);
					trDest.setId(id);
					trDest.setTransactionDestDateReponse(transactionDestination
							.getTransactionDestDateReponse());
					trDest.setTransactionDestIdIntervenant(idIntervenant);
					appMgr.insert(trDest);
					TransactionAnnotationId cI = new TransactionAnnotationId();
					TransactionAnnotation cA = new TransactionAnnotation();
					for (TransactionAnnotation tr : transactionAnnotation) {
						cI.setIdAnnotation(tr.getId().getIdAnnotation());
						cI.setIdTransaction(newTransaction.getTransactionId());
						cA.setId(cI);
						appMgr.insert(cA);
						cA = new TransactionAnnotation();
						cI = new TransactionAnnotationId();
					}
					}
					// Le courrier NE necessite PAS passage par BO
					else{
						System.out.println("===> Le courrier ne necessite pas passage par BO");
					
						if(variableValidationHierarchiqueArrivee.getVaraiablesValeur().equals("Oui")){
							System.out.println("===> Validation Entrante existe : destinataire suivant est le DR sous 1er BO");
							
							expdest.setTypeExpDest("Interne-Person");
							
							TransactionDestinationReelle trDestinationReelle = appMgr.getTransactionDestinationReelById(transaction.getTransactionDestinationReelle().getTransactionDestinationReelleId());
							if(trDestinationReelle.getTransactionDestinationReelleTypeDestinataire().equals("Interne-Unit√©")){
								//   Destinataire de type unitee
									
								getIdBocByUnit(ldapOperation.getUnitById(trDestinationReelle.getTransactionDestinationReelleIdDestinataire()));
									
								}else if(trDestinationReelle.getTransactionDestinationReelleTypeDestinataire().equals("Interne-Person")){
								
									//   Destinataire de type personne
									 getIdBocByUnit((getIdPersonbyId(trDestinationReelle.
											getTransactionDestinationReelleIdDestinataire() 
									)).getAssociatedDirection());
								}
							expdest.setIdExpDestLdap(unitSup.getResponsibleUnit().getId());
							type = "sub_"
									+ String.valueOf(unitSup.getResponsibleUnit().getId());
				 
							idIntervenant=unitSup.getResponsibleUnit().getId();	
							System.out.println("unit sup id = "+unitSup.getResponsibleUnit().getId());
							
							
							System.out.println("FIN ===> Validation Entrante existe OUI");	
							appMgr.insert(expdest);
							id = new TransactionDestinationId();
							trDest = new TransactionDestination();
							id.setIdTransaction(newTransaction.getTransactionId());
							id.setIdExpDest(expdest.getIdExpDest());
							trDest.setTransactionDestTypeIntervenant(type);
							trDest.setId(id);
							trDest.setTransactionDestDateReponse(transactionDestination
									.getTransactionDestDateReponse());
							trDest.setTransactionDestIdIntervenant(idIntervenant);
							appMgr.insert(trDest);
							TransactionAnnotationId cI = new TransactionAnnotationId();
							TransactionAnnotation cA = new TransactionAnnotation();
							for (TransactionAnnotation tr : transactionAnnotation) {
								cI.setIdAnnotation(tr.getId().getIdAnnotation());
								cI.setIdTransaction(newTransaction.getTransactionId());
								cA.setId(cI);
								appMgr.insert(cA);
								cA = new TransactionAnnotation();
								cI = new TransactionAnnotationId();
							}
							

						}else{
							
                              validateTransactionDestinataireFinale(newTransaction, transactionDestination);
						}
					System.out.println("FIN ===> Le courrier ne necessite pas passage par BO ");
					}
				} else {
					
					expdest.setTypeExpDest("Interne-Person");
					expdest.setIdExpDestLdap(vb.getPerson()
							.getAssociatedDirection().getAssociatedUnit()
							.getResponsibleUnit().getId());
					type = "sub_"
							+ String.valueOf(vb.getPerson()
									.getAssociatedDirection()
									.getAssociatedUnit().getResponsibleUnit()
									.getId());
					// KHA 
					idIntervenant=vb.getPerson()
					.getAssociatedDirection()
					.getAssociatedUnit().getResponsibleUnit()
					.getId();
					appMgr.insert(expdest);
					id = new TransactionDestinationId();
					trDest = new TransactionDestination();
					id.setIdTransaction(newTransaction.getTransactionId());
					id.setIdExpDest(expdest.getIdExpDest());
					trDest.setTransactionDestTypeIntervenant(type);
					trDest.setId(id);
					trDest.setTransactionDestDateReponse(transactionDestination
							.getTransactionDestDateReponse());
					trDest.setTransactionDestIdIntervenant(idIntervenant);
					appMgr.insert(trDest);
					TransactionAnnotationId cI = new TransactionAnnotationId();
					TransactionAnnotation cA = new TransactionAnnotation();
					for (TransactionAnnotation tr : transactionAnnotation) {
						cI.setIdAnnotation(tr.getId().getIdAnnotation());
						cI.setIdTransaction(newTransaction.getTransactionId());
						cA.setId(cI);
						appMgr.insert(cA);
						cA = new TransactionAnnotation();
						cI = new TransactionAnnotationId();
					}
					

				}
			newTransaction.setTransactionIdIntervenant(idIntervenant);
			appMgr.update(newTransaction);
			//appMgr.insert(expdest);
//			id = new TransactionDestinationId();
//			trDest = new TransactionDestination();
//			id.setIdTransaction(newTransaction.getTransactionId());
//			id.setIdExpDest(expdest.getIdExpDest());
//			trDest.setTransactionDestTypeIntervenant(type);
//			trDest.setId(id);
//			trDest.setTransactionDestDateReponse(transactionDestination
//					.getTransactionDestDateReponse());
//			trDest.setTransactionDestIdIntervenant(idIntervenant);
//			appMgr.insert(trDest);

//			TransactionAnnotationId cI = new TransactionAnnotationId();
//			TransactionAnnotation cA = new TransactionAnnotation();
//			for (TransactionAnnotation tr : transactionAnnotation) {
//				cI.setIdAnnotation(tr.getId().getIdAnnotation());
//				cI.setIdTransaction(newTransaction.getTransactionId());
//				cA.setId(cI);
//				appMgr.insert(cA);
//				cA = new TransactionAnnotation();
//				cI = new TransactionAnnotationId();
//			}
			
			status1 = true;

		} catch (Exception e) {
			status2 = true;
			e.printStackTrace();
		}
	}
    //  KHA : methode validation hi√©rarchique Interne-Interne
	// Fin-----------------------------------------------------
	
	// methode validation hi√©rarchique
	public void validate() {
		System.out.println("KHA :************************validate***********************");
		status1 = false;
		status2 = false;
		try {
			TransactionDestination transactionDestination = new TransactionDestination();
			try {
				if (vb.getCourDossConsulterInformations().getTransactionDestination() != null) {  // vb.getConsulterInformations().getTransactionDestination() != null
					transactionDestination = vb.getCourDossConsulterInformations().getTransactionDestination(); //  vb.getConsulterInformations().getTransactionDestination();
					if (transactionDestination
							.getTransactionDestDateTransfert() == null) {
						transactionDestination
								.setTransactionDestDateTransfert(new Date());
						appMgr.update(transactionDestination);
					}
				}
			} catch (NullPointerException e) {
			}
			newTransaction = new Transaction();
			Etat etat = new Etat();
			Expdest expdest = new Expdest();
			Typetransaction typetransaction = new Typetransaction();
			TransactionDestinationId id = new TransactionDestinationId();
			TransactionDestination trDest = new TransactionDestination();
			etat = appMgr.listEtatByLibelle("Valid√©").get(0);
			transaction = vb.getTransaction();
			transaction.setEtat(etat);
			transaction.setTransactionDateReponse(new Date());
			appMgr.update(transaction);
			if (vb.getPerson().isAgent()
					&& vb.getPerson().getAssociatedBOC() != null) {
				expdest.setTypeExpDest("Interne-Boc");
				expdest.setIdExpDestLdap(vb.getPerson().getAssociatedBOC()
						.getIdBOC());
				// KHA n'est pas valable
			} else {
				System.out.println(" connectee n'est pas agent sous BO");
				System.out.println(" KHA +++++>remplir expdest l'utilisateur connect√© qui valider");
				expdest.setTypeExpDest("Interne-Person");
				expdest.setIdExpDestLdap(vb.getPerson().getId());
				System.out.println(" KHA+++++> fin remplir expdest l'utilisateur connect√© qui valider");
			}

			appMgr.insert(expdest);
			if (vb.getPerson().isResponsable()) {
				System.out.println("connectee responsable : set type intervenant DANS TABLE TRANSACTION  ");
				newTransaction.setTransactionTypeIntervenant("sub_"
						+ String.valueOf(vb.getPerson().getId()));
				System.out.println(newTransaction.getTransactionTypeIntervenant());
				System.out.println("connectee responsable :  FIN set type intervenant ");
			} else if (vb.getPerson().isSecretary()) {
				newTransaction.setTransactionTypeIntervenant("secretary_"
						+ String.valueOf(vb.getPerson().getId()));
			} else {
				if (vb.getPerson().getAssociatedBOC() != null) {
					System.out.println("connectee responsable BO : set type intervenant DANS TABLE TRANSACTION ");
					newTransaction.setTransactionTypeIntervenant("boc_"
							+ String.valueOf(vb.getPerson().getAssociatedBOC()
									.getIdBOC()));
					System.out.println(newTransaction.getTransactionTypeIntervenant());
					System.out.println("connectee responsable BO:  FIN set type intervenant ");
					
				} else {
					newTransaction.setTransactionTypeIntervenant("agent_"
							+ String.valueOf(vb.getPerson().getId()));
				}
			}
			
			newTransaction.setTransactionCommentaire(commentaireTransaction);
			newTransaction.setExpdest(expdest);
			newTransaction.setIdUtilisateur(vb.getPerson().getId());
			newTransaction.setTransactionDateTransaction(new Date());
			
			System.out.println("2019-05-30 : "+transaction.getCourrierReferenceCorrespondant());
			System.out.println("2019-05-30 : "+transaction.getCourrierType());
			System.out.println("2019-05-30 : "+transaction.getCourrierTypeOrdre());

			newTransaction.setCourrierReferenceCorrespondant(transaction.getCourrierReferenceCorrespondant());
			newTransaction.setCourrierType(transaction.getCourrierType());
			newTransaction.setCourrierTypeOrdre(transaction.getCourrierTypeOrdre());
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(new Date());
			newTransaction.setCourrierDateReceptionAnnee(calendar.get(Calendar.YEAR));

			typetransaction = appMgr.getTypeTransactionByLibelle("Envoi")
					.get(0);
			newTransaction.setTypetransaction(typetransaction);
			System.out.println("### : 100000000 ;"+vb.getPerson().getAssociatedBOC());
			if (vb.getPerson().getAssociatedBOC() != null) {
				
				etat = appMgr.listEtatByLibelle("Trait√©").get(0);
			 
			} else {
				etat = appMgr.listEtatByLibelle("A valider").get(0);
			}
			newTransaction.setEtat(etat);
			newTransaction.setTransactionSupprimer(true);
			int newOrderNumber = transaction.getTransactionOrdre();
			newOrderNumber++;
			newTransaction.setTransactionOrdre(newOrderNumber);
			newTransaction.setDossier(transaction.getDossier());
			newTransaction.setTransactionDestinationReelle(transaction.getTransactionDestinationReelle());
			
			appMgr.insert(newTransaction);
			System.out.println("Transaction First : "+newTransaction.getTransactionId());
			newTransaction.setTransactionFirst(newTransaction.getTransactionId());
			appMgr.update(newTransaction);

			expdest = new Expdest();
			String type = "";
			// KHA 
			int idIntervenant = 0;
			// les destinataires suivants
		
			if (vb.getPerson().isAgent()
					&& vb.getPerson().getAssociatedBOC() != null) {
				
				
				Expdestexterne expDestExterne = new Expdestexterne();
				TransactionDestinationReelle transactionDestinationReelle = new TransactionDestinationReelle();
				transactionDestinationReelle = transaction
						.getTransactionDestinationReelle();
				expdest.setTypeExpDest("Externe");
				expDestExterne = appMgr
						.getExpediteurById(
								transactionDestinationReelle
										.getTransactionDestinationReelleIdDestinataire())
						.get(0);
				expdest.setExpdestexterne(expDestExterne);
				transactionDestinationReelle
						.setTransactionDestinationReelleDateTraitement(new Date());
				appMgr.update(transactionDestinationReelle);
			
			System.out.println("");
			
			}
			
			else {
				System.out.println("Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
				
				if (vb.getPerson().getAssociatedDirection().getAssociatedBOC() != null) {
					expdest.setTypeExpDest("Interne-Boc");
					expdest.setIdExpDestLdap(vb.getPerson()
							.getAssociatedDirection().getAssociatedBOC()
							.getIdBOC());
					type = "boc_"
							+ String.valueOf(vb.getPerson()
									.getAssociatedDirection()
									.getAssociatedBOC().getIdBOC());
				// KHA
					idIntervenant=vb.getPerson()
					.getAssociatedDirection()
					.getAssociatedBOC().getIdBOC();
					etat = appMgr.listEtatByLibelle("Non trait√©").get(0);
					newTransaction.setEtat(etat);
					
				} else {
					
					expdest.setTypeExpDest("Interne-Person");
					expdest.setIdExpDestLdap(vb.getPerson()
							.getAssociatedDirection().getAssociatedUnit()
							.getResponsibleUnit().getId());
					type = "sub_"
							+ String.valueOf(vb.getPerson()
									.getAssociatedDirection()
									.getAssociatedUnit().getResponsibleUnit()
									.getId());
					// KHA 
					idIntervenant=vb.getPerson()
					.getAssociatedDirection()
					.getAssociatedUnit().getResponsibleUnit()
					.getId();
				}
			}
			appMgr.insert(expdest);
			id = new TransactionDestinationId();
			trDest = new TransactionDestination();
			id.setIdTransaction(newTransaction.getTransactionId());
			id.setIdExpDest(expdest.getIdExpDest());
			trDest.setTransactionDestTypeIntervenant(type);
			trDest.setId(id);
			trDest.setTransactionDestDateReponse(transactionDestination
					.getTransactionDestDateReponse());
			trDest.setTransactionDestIdIntervenant(idIntervenant);
			appMgr.insert(trDest);

			TransactionAnnotationId cI = new TransactionAnnotationId();
			TransactionAnnotation cA = new TransactionAnnotation();
			for (TransactionAnnotation tr : transactionAnnotation) {
				cI.setIdAnnotation(tr.getId().getIdAnnotation());
				cI.setIdTransaction(newTransaction.getTransactionId());
				cA.setId(cI);
				appMgr.insert(cA);
				cA = new TransactionAnnotation();
				cI = new TransactionAnnotationId();
			}
			
			status1 = true;

		} catch (Exception e) {
			status2 = true;
			e.printStackTrace();
		}
	}
	public void refuseWorkflow(TraitementEtapeSuivant etapeSuivant) {
		status1 = false;
		status2 = false;
		try {
			TransactionDestination transactionDestination = new TransactionDestination();
			transactionDestination = vb.getTransactionDestination();
			transactionDestination.setTransactionDestDateTransfert(new Date());
			appMgr.update(transactionDestination);
			newTransaction = new Transaction();
			Etat etat = new Etat();
			Expdest expdest = new Expdest();
			Typetransaction typetransaction = new Typetransaction();
			TransactionDestinationId id = new TransactionDestinationId();
			TransactionDestination trDest = new TransactionDestination();
			etat = appMgr.listEtatByRef(3).get(0);
			transaction = vb.getTransaction();
			transaction.setEtat(etat);
			transaction.setTransactionDateReponse(new Date());
			// changement demand√© par SAFA
//			transaction.setTransactionCommentaire(commentaireTransaction);
			newTransaction.setTransactionCommentaire(commentaireTransaction);
			// changement demand√© par SAFA
			appMgr.update(transaction);
			/**************************************************************/
			expdest.setTypeExpDest("Interne-Person");
			expdest.setIdExpDestLdap(vb.getPerson().getId());
			appMgr.insert(expdest);
			if (vb.getPerson().isResponsable()) {
				newTransaction.setTransactionTypeIntervenant("sub_"
						+ String.valueOf(vb.getPerson().getId()));
			} else if (vb.getPerson().isSecretary()) {
				newTransaction.setTransactionTypeIntervenant("secretary_"
						+ String.valueOf(vb.getPerson().getId()));
			}
			newTransaction.setExpdest(expdest);
			newTransaction.setIdUtilisateur(vb.getPerson().getId());
			newTransaction.setTransactionDateTransaction(new Date());
			typetransaction = appMgr.getTypeTransactionByLibelle("Envoi")
					.get(0);
			newTransaction.setTypetransaction(typetransaction);
			// Faire suivre
			etat = appMgr.listEtatByLibelle("Faire suivre").get(0);
			newTransaction.setEtat(etat);
			newTransaction.setTransactionSupprimer(true);
			int newOrderNumber = transaction.getTransactionOrdre();
			newOrderNumber++;
			newTransaction.setTransactionOrdre(newOrderNumber);
			newTransaction.setDossier(transaction.getDossier());
			// C * // dupliquer le destinataire reel du workflow au niveau de la nouvelle transaction
			newTransaction.setTransactionDestinationReelle(transaction.getTransactionDestinationReelle());
			// C * // dupliquer le destinataire reel du workflow au niveau de la nouvelle transaction
			newTransaction.setTransactionFirst(transaction.getTransactionId());
			appMgr.insert(newTransaction);

			/********** Workflow **********/

			long resultat = etapeSuivant.getIdNodeSuivante();
			int etatActuelle = (int) resultat;
			courrier.setCourrierEtatActuelleWorkflow(etatActuelle);
			appMgr.update(courrier);

			String result = "";
			Unit u = new Unit();
			String unite = etapeSuivant.getEtatSuivant();
			// Unite
			u = ldapOperation.getUnitByShortName(unite);

			/*
			 * Person pr = new Person(); // Person pr = u.getResponsibleUnit();
			 * // Envoi Responsable result = result + pr.getCn() + " / ";
			 * expdest = new Expdest(); id = new TransactionDestinationId();
			 * trDest = new TransactionDestination();
			 * expdest.setTypeExpDest("Interne-Person");
			 * expdest.setIdExpDestLdap(pr.getId()); appMgr.insert(expdest);
			 * id.setIdTransaction(newTransaction.getTransactionId());
			 * id.setIdExpDest(expdest.getIdExpDest()); trDest.setId(id);
			 * trDest.setTransactionDestTypeIntervenant("sub_" +
			 * String.valueOf(pr.getId()));
			 * trDest.setTransactionDestDateReponse(
			 * transactionDestination.getTransactionDestDateReponse());
			 * appMgr.insert(trDest);
			 */
			// Envoi Unit√©
			result = result + u.getNameUnit() + " / ";
			expdest = new Expdest();
			id = new TransactionDestinationId();
			trDest = new TransactionDestination();
			if (unite.equals("BOC")) {
				if (vb.getPerson().getAssociatedDirection() != null) {
					getIdBocByUnit(vb.getPerson().getAssociatedDirection());
				} else {
					idBoc = vb.getPerson().getAssociatedBOC().getIdBOC();
				}
				expdest.setTypeExpDest("Interne-Boc");
				expdest.setIdExpDestLdap(idBoc);
				appMgr.insert(expdest);
				id.setIdTransaction(newTransaction.getTransactionId());
				id.setIdExpDest(expdest.getIdExpDest());
				trDest.setId(id);
				trDest.setTransactionDestTypeIntervenant("boc_"
						+ idBoc);
			} else {
				expdest.setTypeExpDest("Interne-Unit√©");
				expdest.setIdExpDestLdap(u.getIdUnit());
				appMgr.insert(expdest);
				id.setIdTransaction(newTransaction.getTransactionId());
				id.setIdExpDest(expdest.getIdExpDest());
				trDest.setId(id);
				trDest.setTransactionDestTypeIntervenant("unit_"
						+ String.valueOf(u.getIdUnit()));
			}
			appMgr.insert(trDest);

			TransactionAnnotationId cI = new TransactionAnnotationId();
			TransactionAnnotation cA = new TransactionAnnotation();
			for (TransactionAnnotation tr : transactionAnnotation) {
				cI.setIdAnnotation(tr.getId().getIdAnnotation());
				cI.setIdTransaction(newTransaction.getTransactionId());
				cA.setId(cI);
				appMgr.insert(cA);
				cA = new TransactionAnnotation();
				cI = new TransactionAnnotationId();
			}
			status1 = true;

		} catch (Exception e) {
			status2 = true;
			e.printStackTrace();
		}
	}
	// methode Validation par workflow
	public void validateWorkflow(TraitementEtapeSuivant etapeSuivant) {
		System.out.println("KHA : **********validateWorkflow***********");
		status1 = false;
		status2 = false;
		try {
			TransactionDestination transactionDestination = new TransactionDestination();
			transactionDestination = vb.getTransactionDestination();
			transactionDestination.setTransactionDestDateTransfert(new Date());
			appMgr.update(transactionDestination);
			newTransaction = new Transaction();
			Etat etat = new Etat();
			Expdest expdest = new Expdest();
			Typetransaction typetransaction = new Typetransaction();
			TransactionDestinationId id = new TransactionDestinationId();
			TransactionDestination trDest = new TransactionDestination();
			etat = appMgr.listEtatByLibelle("Valid√©").get(0);
			transaction = vb.getTransaction();
			transaction.setEtat(etat);
			transaction.setTransactionDateReponse(new Date());
			// changement demand√© par SAFA
//			transaction.setTransactionCommentaire(commentaireTransaction);
			newTransaction.setTransactionCommentaire(commentaireTransaction);
			// changement demand√© par SAFA
			appMgr.update(transaction);
			/**************************************************************/
			expdest.setTypeExpDest("Interne-Person");
			expdest.setIdExpDestLdap(vb.getPerson().getId());
			appMgr.insert(expdest);
			if (vb.getPerson().isResponsable()) {
				newTransaction.setTransactionTypeIntervenant("sub_"
						+ String.valueOf(vb.getPerson().getId()));
			} else if (vb.getPerson().isSecretary()) {
				newTransaction.setTransactionTypeIntervenant("secretary_"
						+ String.valueOf(vb.getPerson().getId()));
			}
			newTransaction.setExpdest(expdest);
			newTransaction.setIdUtilisateur(vb.getPerson().getId());
			newTransaction.setTransactionDateTransaction(new Date());
			typetransaction = appMgr.getTypeTransactionByLibelle("Envoi")
					.get(0);
			newTransaction.setTypetransaction(typetransaction);
			// Faire suivre
			etat = appMgr.listEtatByLibelle("Faire suivre").get(0);
			newTransaction.setEtat(etat);
			newTransaction.setTransactionSupprimer(true);
			int newOrderNumber = transaction.getTransactionOrdre();
			newOrderNumber++;
			newTransaction.setTransactionOrdre(newOrderNumber);
			newTransaction.setDossier(transaction.getDossier());
			// C * // dupliquer le destinataire reel du workflow au niveau de la nouvelle transaction
			newTransaction.setTransactionDestinationReelle(transaction.getTransactionDestinationReelle());
			// C * // dupliquer le destinataire reel du workflow au niveau de la nouvelle transaction
			newTransaction.setTransactionFirst(transaction.getTransactionId());
			appMgr.insert(newTransaction);

			/********** Workflow **********/

			long resultat = etapeSuivant.getIdNodeSuivante();
			int etatActuelle = (int) resultat;
			courrier.setCourrierEtatActuelleWorkflow(etatActuelle);
			appMgr.update(courrier);

			String result = "";
			Unit u = new Unit();
			String unite = etapeSuivant.getEtatSuivant();
			// Unite
			u = ldapOperation.getUnitByShortName(unite);

			/*
			 * Person pr = new Person(); // Person pr = u.getResponsibleUnit();
			 * // Envoi Responsable result = result + pr.getCn() + " / ";
			 * expdest = new Expdest(); id = new TransactionDestinationId();
			 * trDest = new TransactionDestination();
			 * expdest.setTypeExpDest("Interne-Person");
			 * expdest.setIdExpDestLdap(pr.getId()); appMgr.insert(expdest);
			 * id.setIdTransaction(newTransaction.getTransactionId());
			 * id.setIdExpDest(expdest.getIdExpDest()); trDest.setId(id);
			 * trDest.setTransactionDestTypeIntervenant("sub_" +
			 * String.valueOf(pr.getId()));
			 * trDest.setTransactionDestDateReponse(
			 * transactionDestination.getTransactionDestDateReponse());
			 * appMgr.insert(trDest);
			 */
			// Envoi Unit√©
			result = result + u.getNameUnit() + " / ";
			expdest = new Expdest();
			id = new TransactionDestinationId();
			trDest = new TransactionDestination();
			if (unite.equals("BOC")) {
				if (vb.getPerson().getAssociatedDirection() != null) {
					getIdBocByUnit(vb.getPerson().getAssociatedDirection());
				} else {
					idBoc = vb.getPerson().getAssociatedBOC().getIdBOC();
				}
				expdest.setTypeExpDest("Interne-Boc");
				expdest.setIdExpDestLdap(idBoc);
				appMgr.insert(expdest);
				id.setIdTransaction(newTransaction.getTransactionId());
				id.setIdExpDest(expdest.getIdExpDest());
				trDest.setId(id);
				trDest.setTransactionDestTypeIntervenant("boc_"
						+ idBoc);
			} else {
				expdest.setTypeExpDest("Interne-Unit√©");
				expdest.setIdExpDestLdap(u.getIdUnit());
				appMgr.insert(expdest);
				id.setIdTransaction(newTransaction.getTransactionId());
				id.setIdExpDest(expdest.getIdExpDest());
				trDest.setId(id);
				trDest.setTransactionDestTypeIntervenant("unit_"
						+ String.valueOf(u.getIdUnit()));
			}
			appMgr.insert(trDest);

			TransactionAnnotationId cI = new TransactionAnnotationId();
			TransactionAnnotation cA = new TransactionAnnotation();
			for (TransactionAnnotation tr : transactionAnnotation) {
				cI.setIdAnnotation(tr.getId().getIdAnnotation());
				cI.setIdTransaction(newTransaction.getTransactionId());
				cA.setId(cI);
				appMgr.insert(cA);
				cA = new TransactionAnnotation();
				cI = new TransactionAnnotationId();
			}
			status1 = true;

		} catch (Exception e) {
			status2 = true;
			e.printStackTrace();
		}
	}
	


	public void refuse() {
		status1 = false;
		status2 = false;
		try {
			// old code
//			newTransaction = new Transaction();
//			Etat etat = new Etat();
//
//			etat = appMgr.listEtatByLibelle("Non valid√©").get(0);
//			transaction.setEtat(etat);
//			transaction.setTransactionDateReponse(new Date());
//			transaction.setTransactionCommentaire(commentaireTransaction);
//			appMgr.update(transaction);
			// old code
			// new code
			courrier = vb.getCourrier();
			String circuitCourrier = courrier.getCourrierCircuit();
			if (circuitCourrier.equals("workflow")) {
				int refNature = courrier.getNature().getNatureId();
				int etatActuelle = courrier.getCourrierEtatActuelleWorkflow();
				Workflow workflow = new Workflow();
//				int nb = appMgr.listWorkflowByIdNature(refNature).size();
//				if (nb != 0) {
					/********* WorkFlow Request ********/
					workflow = appMgr.listWorkflowByIdNature(refNature).get(0);
					String processId = workflow.getWorkflowTitre();
//					int idLastNode = workflow.getWorkflowIdLastNode();
//					if (etatActuelle == idLastNode) {
//						validerFinProcessus();
//					} else {
					TraitementEtapeSuivant etapeSuivant = new TraitementEtapeSuivant();
					JBPMAccessProcessBean jbpmAccessProcessBean = new JBPMAccessProcessBean();
					etapeSuivant = jbpmAccessProcessBean
					.refuseProcessTraitementCourrier(processId,
							etatActuelle);
					Unit precedentUnit = ldapOperation.getUnitByShortName(etapeSuivant.getEtatSuivant());
					if(vb.getCentralBoc().getIdBOC() != precedentUnit.getIdUnit()){
					      refuseWorkflow(etapeSuivant);
					}else{
						  refuseTransaction();
					}
//					}

//				} else {
//					validate();
//				}
			}else{
				refuseTransaction();
			}
			
			status1 = true;
		} catch (Exception e) {
			status2 = true;
			e.printStackTrace();
		}

	}
	public void refuseTransaction() throws Exception{
		newTransaction = new Transaction();
		Etat etat = new Etat();
		etat = appMgr.listEtatByLibelle("Non valid√©").get(0);
		transaction = vb.getTransaction();
		transaction.setEtat(etat);
		transaction.setTransactionDateReponse(new Date());
		transaction.setTransactionCommentaire(commentaireTransaction);
		appMgr.update(transaction);
	}
	public void validerFinProcessus() {
		status1 = false;
		status2 = false;
		try {
			newTransaction = new Transaction();
			Etat etat = new Etat();

			etat = appMgr.listEtatByLibelle("Valid√©").get(0);
			transaction = vb.getTransaction();
			transaction.setEtat(etat);
			transaction.setTransactionDateReponse(new Date());
			transaction.setTransactionCommentaire(commentaireTransaction);
			appMgr.update(transaction);
			// set the transfert date
			TransactionDestination trDestFinal = vb.getCourDossConsulterInformations().getTransactionDestination();
			trDestFinal.setTransactionDestDateTransfert(new Date());
			appMgr.update(trDestFinal);
			// set the transfert date
			status1 = true;
		} catch (Exception e) {
			status2 = true;
			e.printStackTrace();
		}

	}
	//********************** KHA *************************************
	// ====== recuperer les donnees d'une personne =============
	public Person getIdPersonbyId(int idUserDest){
		System.out.println(" Dans getIdPersonbyId ");
	   
	  int id1;
	  Person personneRecherche=new Person();
		boolean findPerson = false;
		int j = 0;
		do {
			id1 = vb.getCopyLdapListUser().get(j).getId();
			if (id1 == idUserDest) {
				findPerson = true;
				personneRecherche=vb.getCopyLdapListUser().get(j);
			} else {
				j++;
			}
		} while (!findPerson && j < vb.getCopyLdapListUser().size());
		System.out.println("#Connected recherch√© : " + personneRecherche);
		
	  
	return personneRecherche;
	}
	 
	//**********************************
	private void getIdBocByUnit(Unit unit) {
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		// Fonction : getIdBocByUnit
		// Date :
		// Auteur :
		// Description : Cette fonction permet de r√©cup√©rer l'id du boc de
		// l'unit√© pass√©e en param√®tre
		//
		//
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		System.out.println("DANS getIdBocByUnit");
		if (unit.getAssociatedUnit() != null) {
			getIdBocByUnit(unit.getAssociatedUnit());
		} else {
			
			unitSup=unit;
			idBoc = unit.getAssociatedBOC().getIdBOC();
			System.out.println("idBoc= "+idBoc);
		}
	}
	public void setMessageSource(MessageSource messageSource) {
		this.messageSource = messageSource;
	}

	public MessageSource getMessageSource() {
		return messageSource;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public String getMessage() {
		return message;
	}

	public void setLm(LanguageManagerBean lm) {
		this.lm = lm;
	}

	public LanguageManagerBean getLm() {
		return lm;
	}

	public void setVb(VariableGlobale vb) {
		this.vb = vb;
	}

	public VariableGlobale getVb() {
		return vb;
	}

	public void setCourrier(Courrier courrier) {
		this.courrier = courrier;
	}

	public Courrier getCourrier() {
		return courrier;
	}

	public void setTransaction(Transaction transaction) {
		this.transaction = transaction;
	}

	public Transaction getTransaction() {
		return transaction;
	}

	public void setNewTransaction(Transaction newTransaction) {
		this.newTransaction = newTransaction;
	}

	public Transaction getNewTransaction() {
		return newTransaction;
	}

	public void setTransmission(Transmission transmission) {
		this.transmission = transmission;
	}

	public Transmission getTransmission() {
		return transmission;
	}

	public void setUrgence(Urgence urgence) {
		this.urgence = urgence;
	}

	public Urgence getUrgence() {
		return urgence;
	}

	public void setNature(Nature nature) {
		this.nature = nature;
	}

	public Nature getNature() {
		return nature;
	}

	public void setConfidentialite(Confidentialite confidentialite) {
		this.confidentialite = confidentialite;
	}

	public Confidentialite getConfidentialite() {
		return confidentialite;
	}

	public void setTransactionAnnotation(
			List<TransactionAnnotation> transactionAnnotation) {
		this.transactionAnnotation = transactionAnnotation;
	}

	public List<TransactionAnnotation> getTransactionAnnotation() {
		return transactionAnnotation;
	}

	public void setStatus1(boolean status1) {
		this.status1 = status1;
	}

	public boolean isStatus1() {
		return status1;
	}

	public void setStatus2(boolean status2) {
		this.status2 = status2;
	}

	public boolean isStatus2() {
		return status2;
	}

	public void setCommentaireTransaction(String commentaireTransaction) {
		this.commentaireTransaction = commentaireTransaction;
	}

	public String getCommentaireTransaction() {
		return commentaireTransaction;
	}

	public void setExpediteur(String expediteur) {
		this.expediteur = expediteur;
	}

	public String getExpediteur() {
		return expediteur;
	}

	public void setDestinataire(String destinataire) {
		this.destinataire = destinataire;
	}

	public String getDestinataire() {
		return destinataire;
	}

	public void setListAnnotations(String listAnnotations) {
		this.listAnnotations = listAnnotations;
	}

	public String getListAnnotations() {
		return listAnnotations;
	}
	
	public void setIdBoc(Integer idBoc) {
		this.idBoc = idBoc;
	}

	public Integer getIdBoc() {
		return idBoc;
	}

	public LdapFunction getLdapFunction() {
		return ldapFunction;
	}

	public void setLdapFunction(LdapFunction ldapFunction) {
		this.ldapFunction = ldapFunction;
	}

}