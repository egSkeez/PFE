package xtensus.beans.common.GBO;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.faces.event.ActionEvent;
import javax.faces.model.SelectItem;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import xtensus.aop.LogClass;
import xtensus.beans.common.LanguageManagerBean;
import xtensus.beans.common.VariableGlobale;
import xtensus.beans.utils.CourrierConsulterInformations;
import xtensus.entity.Annotation;
import xtensus.entity.Confidentialite;
import xtensus.entity.Courrier;
import xtensus.entity.CourrierDossier;
import xtensus.entity.CourrierDossierId;
import xtensus.entity.CourrierLiens;
import xtensus.entity.CourrierLiensId;
import xtensus.entity.Document;
import xtensus.entity.Dossier;
import xtensus.entity.Etat;
import xtensus.entity.Expdest;
import xtensus.entity.Expdestexterne;
import xtensus.entity.Lienscourriers;
import xtensus.entity.Nature;
import xtensus.entity.Pm;
import xtensus.entity.Pp;
import xtensus.entity.Transaction;
import xtensus.entity.TransactionAnnotation;
import xtensus.entity.TransactionAnnotationId;
import xtensus.entity.TransactionDestination;
import xtensus.entity.TransactionDestinationId;
import xtensus.entity.TransactionDestinationReelle;
import xtensus.entity.Transmission;
import xtensus.entity.Typedossier;
import xtensus.entity.Typetransaction;
import xtensus.entity.Urgence;
import xtensus.entity.Utilisateur;
import xtensus.entity.Variables;
import xtensus.ldap.model.BOC;
import xtensus.ldap.model.ItemSelected;
import xtensus.ldap.model.Person;
import xtensus.ldap.model.Unit;
import xtensus.services.ApplicationManager;
import xtensus.services.Export;

@Component
@Scope("request")
public class CourrierCopy {

	private ApplicationManager appMgr;
	private Export export;
	private Courrier courrier;
	private Dossier dossier;
	private Transaction transaction;
	private TransactionDestination transactionDestination;
	private TransactionAnnotation transactionAnnotation;
	private TransactionAnnotation cA;
	private TransactionAnnotationId cI;
	public boolean status;
	public boolean status1;
	public boolean status2;
	public boolean status3;
	private Date date;
	private Date date1;
	private Nature nature;
	private Transmission transmission;
	private Confidentialite confidentialite;
	private Urgence urgence;
	private Expdestexterne expdestexterne;
	private List<Expdestexterne> listDestExpdestexternes;
	private Utilisateur utilisateur;
	private List<CourrierConsulterInformations> courrierConsulterInformations;
	private Date dateReception;
	private Date dateReponse;
	@Autowired
	private VariableGlobale vb;
	@Autowired
	private LanguageManagerBean lm;
	@Autowired
	private MessageSource messageSource;
	private String message;

	private String selectedItemNature;
	private String selectedItemConf;
	private String selectedItemUg;
	private String selectedItemsTr;
	private String associatedUnit;
	private String associatedLabel;
	private String typeExpediteur;
	private List<String> selectedItemsAnnotation;
	List<Annotation> listAnnotations;

	private List<Confidentialite> listCf;
	private List<Urgence> listUg;
	private List<Annotation> listAt;

	private String reponse1;
	private boolean select1 = false;
	private String typeSender;
	private Integer idBoc;
	private String typeCourrier;
	private boolean showFacetUser;
	private boolean showFacetBoc;
	private String courrierCommentaire;

	private String chooseAnnotationType;
	private String otherAnnotation;
	private String labelName;
	private String displayOther;
	private String displayPick;
	// C*
	private Courrier newCourrier;
	private List<Transmission> listTr;

	// C*

	@Autowired
	public CourrierCopy(
			@Qualifier("applicationManager") ApplicationManager appMgr,
			@Qualifier("export") Export export) {
		this.appMgr = appMgr;
		this.export = export;
		typeExpediteur = "MoiMeme";
		courrier = new Courrier();
		dossier = new Dossier();
		transaction = new Transaction();
		transactionDestination = new TransactionDestination();
		transactionAnnotation = new TransactionAnnotation();
		nature = new Nature();
		transmission = new Transmission();
		confidentialite = new Confidentialite();
		urgence = new Urgence();
		expdestexterne = new Expdestexterne();
		listDestExpdestexternes = new ArrayList<Expdestexterne>();
		utilisateur = new Utilisateur();
		courrierConsulterInformations = new ArrayList<CourrierConsulterInformations>();
		setListAt(new ArrayList<Annotation>());
		listCf = new ArrayList<Confidentialite>();
		listUg = new ArrayList<Urgence>();
		date = new Date();
		date1 = new Date();
		selectedItemsAnnotation = new ArrayList<String>();
		cA = new TransactionAnnotation();
		cI = new TransactionAnnotationId();
		listAnnotations = new ArrayList<Annotation>();
		typeSender = "MoiMeme";
		chooseAnnotationType = "tous";
		// C*
		newCourrier = new Courrier();
		listTr = new ArrayList<Transmission>();
		// C*
	}

	@PostConstruct
	public void Initialize() {
		try {

			if (vb.getPerson().getAssociatedDirection() != null) {
				associatedUnit = vb.getPerson().getAssociatedDirection()
						.getNameUnit();
				associatedLabel = "Au nom de mon Unit√©";
			} else {
				associatedUnit = vb.getPerson().getAssociatedBOC().getNameBOC();
				associatedLabel = "Au nom de mon BO";
			}
			showFacetUser = true;
			showFacetBoc = false;
			if (vb.getRedirect().equals("rediretFromCTExpDepToListSender")
					|| vb.getRedirect().equals(
							"rediretFromCTDestDepToListSender")) {
				typeCourrier = "depart";
			} else {
				typeCourrier = "arrive";
			}
			if (vb.getPerson().isBoc()) {
				showFacetUser = false;
				showFacetBoc = true;
			}
			courrier = vb.getCourrier();
			// reponse1 ="Non";
			// reponse1 = courrier.getCourrierNecessiteReponse();
			// if (reponse1.equals("Oui")) {
			// select1 = true;
			// Calendar cal = Calendar.getInstance();
			// cal.setTime(courrier.getCourrierDateReponse());
			// // courrier.setCourrierDateReponse(cal.getTime());
			// dateReponse = cal.getTime();
			// }else{
			// reponse1 ="Non";
			// }
			// if (courrier.getCourrierNecessiteReponse().equals("Oui")) {
			// reponse1 = "Oui";
			// dateReponse = courrier.getCourrierDateReponse();
			// select1 = true;
			// }

			nature = appMgr.getNatureById(courrier.getNature().getNatureId())
					.get(0);
			vb.setNature(nature);

			// confidentialite = appMgr.getConfidentialiteById(
			// courrier.getConfidentialite().getConfidentialiteId())
			// .get(0);
			// vb.setConfidentialite(confidentialite);

			// urgence = appMgr.getUrgenceById(
			// courrier.getUrgence().getUrgenceId()).get(0);
			// vb.setUrgence(urgence);

			transmission = appMgr.getTransmissionById(
					courrier.getTransmission().getTransmissionId()).get(0);
			vb.setTransmission(transmission);

			// if (vb.isToReplay()) {
			// labelName = messageSource.getMessage("repondreCourrier",new
			// Object[] {}, lm.createLocal());
			// } else {
			labelName = messageSource.getMessage("FacetTransfer",
					new Object[] {}, lm.createLocal());
			// }

			listAt = appMgr.getList(Annotation.class);
			listUg = appMgr.getList(Urgence.class);
			listCf = appMgr.getList(Confidentialite.class);

			// selectedItemConf =
			// confidentialite.getConfidentialiteId().toString();
			// selectedItemUg = urgence.getUrgenceId().toString();

			if (vb.getLocale().equals("ar")) {
				selectedItemNature = nature.getNatureLibelleAr();
				// selectedItemsTr = transmission.getTransmissionLibelleAr();
			} else {
				selectedItemNature = nature.getNatureLibelle();
				// selectedItemsTr = transmission.getTransmissionLibelle();
			}
			CourrierDossier courrierDossier = new CourrierDossier();
			courrierDossier = appMgr.getCourrierDossierByIdCourrier(
					courrier.getIdCourrier()).get(0);
			int refDossier = courrierDossier.getId().getDossierId();
			dossier = appMgr.getDossierByIdDossier(refDossier).get(0);

			// transaction =
			// appMgr.getTransactionByIdDossier(refDossier).get(0);
			// int refTransaction = transaction.getTransactionId();
			chooseAnnotationType = "tous";
			displayOther = "none";
			displayPick = "inline";

			// C*
			listTr = appMgr.getList(Transmission.class);
			newCourrier.setCourrierObjet("CP : " + courrier.getCourrierObjet());
			newCourrier.setCourrierCommentaire("CP : "
					+ courrier.getCourrierCommentaire());
			newCourrier.setCourrierCopyTransfere("CP");
			selectedItemsTr = courrier.getTransmission().getTransmissionId()
					.toString();
			selectedItemConf = courrier.getConfidentialite()
					.getConfidentialiteId().toString();
			selectedItemUg = courrier.getUrgence().getUrgenceId().toString();
			reponse1 = courrier.getCourrierNecessiteReponse();
			if (reponse1.equals("Oui")) {
				dateReponse = courrier.getCourrierDateReponse();
				select1 = true;
				// Calendar cal = Calendar.getInstance();
				// cal.setTime(courrier.getCourrierDateReponse());
				// courrier.setCourrierDateReponse(cal.getTime());
				// dateReponse = cal.getTime();
			}
			// C*

			// if (transaction.getTransactionCommentaireAnnotation() == null) {
			// chooseAnnotationType = "tous";
			// displayOther ="none";
			// displayPick = "inline";
			// List<TransactionAnnotation> annotations = new
			// ArrayList<TransactionAnnotation>();
			// annotations =
			// appMgr.getAnnotationByIdTransaction(refTransaction);
			// for (TransactionAnnotation ta : annotations) {
			// // int refAnnotation = ta.getId().getIdAnnotation();
			// // String annotationLibelle = appMgr
			// // .getAnnotationByIdAnotation(refAnnotation).get(0)
			// // .getAnnotationLibelle();
			// selectedItemsAnnotation.add(String
			// .valueOf(ta.getId()
			// .getIdAnnotation()));
			// }
			// }
			// else{
			// displayOther ="inline";
			// displayPick = "none";
			// chooseAnnotationType = "autre";
			// otherAnnotation = transaction
			// .getTransactionCommentaireAnnotation();
			// }

			// reponse1 = courrier.getCourrierNecessiteReponse();
			// if (reponse1.equals("Non")) {
			// setSelect1(false);
			// } else {
			// setSelect1(true);
			// }
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	// C*
	public void saveTempValue() {
		// try {
		// Courrier courrierTemp = new Courrier();
		// System.out.println("*** Dans la fonction saveTempValue ***");
		// courrierTemp.setCourrierReferenceCorrespondant(newCourrier
		// .getCourrierReferenceCorrespondant());
		// courrierTemp.setCourrierObjet(newCourrier.getCourrierObjet());
		// courrierTemp.setCourrierCommentaire(newCourrier
		// .getCourrierCommentaire());
		// courrierTemp.setCourrierDateReception(date1);
		// courrierTemp.setKeywords(newCourrier.getKeywords());
		// courrierTemp.setCourrierDateReponse(newCourrier
		// .getCourrierDateReponse());
		// courrierTemp.setCourrierCircuit(newCourrier.getCourrierCircuit());
		// if (selectedItemNature != null) {
		// courrierTemp.setNature(appMgr.getNatureById(
		// Integer.valueOf(selectedItemNature)).get(0));
		// }
		// if (selectedItemsTr != null) {
		// transmission = appMgr.getTransmissionById(
		// Integer.valueOf(selectedItemsTr)).get(0); // ** KS
		// courrierTemp.setTransmission(transmission);
		// }
		// if (selectedItemConf != null) {
		// cf = appMgr.getConfidentialiteById(
		// Integer.valueOf(selectedItemConf)).get(0); // ** KS
		// courrierTemp.setConfidentialite(cf);
		// }
		// if (selectedItemUg != null) {
		// urgence = appMgr
		// .getUrgenceById(Integer.valueOf(selectedItemUg)).get(0); // **
		// // KS
		// courrierTemp.setUrgence(urgence);
		// }
		// courrierTemp.setCourrierNecessiteReponse(reponse1);
		// //
		// vb.setTypeSender(typeSender);
		// vb.setTypeCourrier(typeCourrier);
		// vb.setOtherAnnotation(otherAnnotation);
		// vb.setChooseAnnotation(chooseAnnotationType);
		// vb.setSelectedAnnotationItems(selectedItems1);
		// vb.setCourrierTempValue(courrierTemp);
		// } catch (Exception e) {
		// e.printStackTrace();
		// }
		// System.out.println(date1);
	}

	// C*
	// fonction de selection des annotations dans le listBox
	public List<SelectItem> getSelectItems1() {
		String libelle;
		List<SelectItem> selectItems1 = new ArrayList<SelectItem>();
		for (int j = 0; j <= listAt.size() - 1; j++) {
			Integer idAt = listAt.get(j).getAnnotationId();
			if (!idAt.equals(10)) {
				if (vb.getLocale().equals("ar")) {
					libelle = listAt.get(j).getAnnotationLibelleAr();
				} else {
					libelle = listAt.get(j).getAnnotationLibelle();
				}
				// selectItems1.add(new SelectItem(libelle));
				selectItems1.add(new SelectItem(String.valueOf(idAt), libelle));
			}
		}
		return selectItems1;
	}

	// fonction de selection des degr√©s de confidentialit√© dans le listBox
	public List<SelectItem> getSelectItemsConf() {
		String libelle;
		List<SelectItem> selectItemsConf = new ArrayList<SelectItem>();
		selectItemsConf.add(new SelectItem(""));
		for (int j = 0; j <= listCf.size() - 1; j++) {
			Integer idCf = listCf.get(j).getConfidentialiteId();
			if (vb.getLocale().equals("ar")) {
				libelle = listCf.get(j).getConfidentialiteLibelleAr();
			} else {
				libelle = listCf.get(j).getConfidentialiteLibelle();
			}
			selectItemsConf.add(new SelectItem(String.valueOf(idCf), libelle));
			// selectItemsConf.add(new SelectItem(listCf.get(j)
			// .getConfidentialiteLibelle()));

		}
		return selectItemsConf;
	}

	// fonction de selection des degr√©s d'urgences dans le listBox
	public List<SelectItem> getSelectItemsUg() {
		String libelle;
		List<SelectItem> selectItemsUg = new ArrayList<SelectItem>();
		selectItemsUg.add(new SelectItem(""));
		for (int j = 0; j <= listUg.size() - 1; j++) {
			Integer idUg = listUg.get(j).getUrgenceId();
			if (vb.getLocale().equals("ar")) {
				libelle = listUg.get(j).getUrgenceLibelleAr();
			} else {
				libelle = listUg.get(j).getUrgenceLibelle();
			}
			selectItemsUg.add(new SelectItem(String.valueOf(idUg), libelle));
			// selectItemsUg
			// .add(new SelectItem(listUg.get(j).getUrgenceLibelle()));

		}
		return selectItemsUg;
	}

	public void evenementChoixTransfert(ActionEvent evt) {
		if (reponse1.equals("Non")) {
			setSelect1(false);
		} else {
			setSelect1(true);
		}
	}

	public String goToListSender() {
		if (vb.getPerson().isBoc()) {
			if (typeCourrier.equals("arrive")) {
				vb.setRedirect("rediretFromCTDestArrToListSender");
				return "rediretFromCTDestArrToListSender";
			} else {
				vb.setRedirect("rediretFromCTDestDepToListSender");
				return "rediretFromCTDestDepToListSender";
			}
		} else {
			vb.setRedirect("rediretFromCTToListSender");
			return "rediretFromCTToListSender";
		}

	}

	public String goToListSender1() {
		System.out.println("verify typeCourrier : " + typeCourrier);
		if (typeCourrier.equals("arrive")) {
			vb.setRedirect("rediretFromCTExpArrToListSender");
			return "rediretFromCTExpArrToListSender";
		} else {
			vb.setRedirect("rediretFromCTExpDepToListSender");
			return "rediretFromCTExpDepToListSender";
		}
	}

	public void eventChooseTypeSender(ActionEvent evt) {
		System.out.println(typeSender);
	}

	public void eventChooseTypeCourrier(ActionEvent evt) {
		System.out.println(typeCourrier);
	}

	public void copier() {
		status = false;
		status1 = false;
		status2 = false;
		status3 = false;
		Dossier dossier = new Dossier();
		Transaction nouvelleTransaction = new Transaction();
		Etat etat = new Etat();
		TransactionDestinationId id;
		TransactionDestination trDest;
		Expdest expdest;
		Expdest expdestOriginal;
		Typetransaction typetransaction;
		Transaction copyNouvelleTransaction;
		TransactionDestinationReelle transactionDestinationReelle;
		try {
			newCourrier.setCourrierDateReception(vb.getCourrier()
					.getCourrierDateReception());
			// if (courrier.getCourrierDateReception().compareTo(date) <= 0) {
			// if ((courrier.getCourrierDateReponse() == null)
			// || (courrier.getCourrierDateReception().before(courrier
			// .getCourrierDateReponse()))) {
			status1 = false;
			status = true;

			newCourrier.setNature(nature);
			// Transmission transmission =
			// appMgr.getTransmissionById(Integer.valueOf(selectedItemsTr)).get(0);
			newCourrier.setTransmission(transmission);
			// Confidentialit√©
			confidentialite = appMgr.getConfidentialiteById(
					Integer.valueOf(selectedItemConf)).get(0);
			newCourrier.setConfidentialite(confidentialite);
			// Urgence
			//
			urgence = appMgr.getUrgenceById(Integer.valueOf(selectedItemUg))
					.get(0);
			newCourrier.setUrgence(urgence);
			// Necessite Reponse
			newCourrier.setCourrierNecessiteReponse(reponse1);
			if (reponse1.equals("Oui")) {
				newCourrier.setCourrierDateReponse(dateReponse);
			}
			newCourrier.setCourrierDateSysteme(new Date());
			newCourrier.setCourrierSupprime(true);
			newCourrier.setCourrierCircuit("Libre");
			newCourrier.setCourrierflagArchive(0);
			/**** Ajout Dossier *******/
			dossier.setConfidentialite(confidentialite);
			dossier.setDossierDateCreation(new Date());
			dossier.setDossierDescription(newCourrier.getCourrierCommentaire());
			dossier.setDossierIntitule("Courrier_"
					+ newCourrier.getCourrierReferenceCorrespondant());
			dossier.setDossierSupprime(true);
			Typedossier typedossier = appMgr.getTypeDossierById(1).get(0);
			dossier.setTypedossier(typedossier);
			appMgr.insert(dossier);
			vb.setDossier(dossier);

			Calendar calendar = Calendar.getInstance();
			calendar.setTime(date1);
			newCourrier.setCourrierOldDateOper(calendar.get(Calendar.YEAR));
			newCourrier.setCourrierDateReceptionMois(date1.getMonth() + 1);

			newCourrier.setCourrierCopyTransfere("CP");
			appMgr.insert(newCourrier);
			vb.setCourrier(newCourrier);
			// ajout√© lors du changement #afficher l'id sequentiel de la table
			// courrier comme une reference#
			if (vb.getPerson().isBoc()) {
				Calendar cal = Calendar.getInstance();
				cal.setTime(newCourrier.getCourrierDateReception());
				int year = cal.get(Calendar.YEAR);
				if (typeCourrier.equals("arrive")) {
					Integer lastId = appMgr
							.getCourrierLastIdByTypeOrdreAndAnnee("A", year);
					newCourrier.setCourrierType("A");
					if (lastId == null || lastId == 0) {
						newCourrier.setCourrierTypeOrdre(1);
					} else {
						newCourrier.setCourrierTypeOrdre(lastId + 1);
					}
				} else if (typeCourrier.equals("depart")) {
					Integer lastId = appMgr
							.getCourrierLastIdByTypeOrdreAndAnnee("D", year);
					newCourrier.setCourrierType("D");
					if (lastId == null || lastId == 0) {
						newCourrier.setCourrierTypeOrdre(1);
					} else {
						newCourrier.setCourrierTypeOrdre(lastId + 1);
					}
				}
				newCourrier
						.setCourrierReferenceCorrespondant(newCourrier
								.getCourrierType()
								+ newCourrier.getCourrierTypeOrdre());
			} else {
				System.out
						.println("JS --------> Dans else de vb.getPerson().isBoc()");
				Variables variable = new Variables();

				List<Variables> variables = appMgr
						.listVariablesByLibelle("courrier_interne_reference_initialisation_annuelle");
				if (variables != null && variables.size() > 0) {
					variable = variables.get(0);
					if (variable.getVaraiablesValeur().equals("Oui")) {

						newCourrier.setCourrierType("I");
						Calendar calendar2 = Calendar.getInstance();
						System.out.println("Date R√©c√©ption Courrier :"
								+ newCourrier.getCourrierDateReception());
						calendar2.setTime(newCourrier
								.getCourrierDateReception());
						int annee = calendar2.get(Calendar.YEAR);
						System.out.println("Ann√©e Courant :" + annee);
						Integer lastId = appMgr
								.getCourrierLastIdByTypeOrdreAndAnnee("I",
										annee);
						System.out.println("Last Id :" + lastId);
						if (lastId == null || lastId == 0) {
							newCourrier.setCourrierTypeOrdre(1);
						} else {
							newCourrier.setCourrierTypeOrdre(lastId + 1);
						}
						newCourrier
								.setCourrierReferenceCorrespondant(newCourrier
										.getCourrierType()
										+ newCourrier.getCourrierTypeOrdre());
					}
				} else {
					System.out.println("variable globale √† Non");
					newCourrier.setCourrierReferenceCorrespondant("I"
							+ newCourrier.getIdCourrier());
				}

			}
			dossier.setDossierIntitule("Courrier_"
					+ newCourrier.getCourrierReferenceCorrespondant());
			appMgr.update(dossier);
			appMgr.update(newCourrier);
			// ajout√© lors du changement #afficher l'id sequentiel de la table
			// courrier comme une reference#
			CourrierDossierId courrierDossierId = new CourrierDossierId();
			CourrierDossier courrierDossier = new CourrierDossier();
			courrierDossierId.setDossierId(dossier.getDossierId());
			courrierDossierId.setIdCourrier(newCourrier.getIdCourrier());
			courrierDossier.setId(courrierDossierId);
			appMgr.insert(courrierDossier);

			// Expdest expdest;
			CourrierDossier courrierDoss = appMgr
					.getCourrierDossierByIdCourrier(courrier.getIdCourrier())
					.get(0);
			int refdossier = courrierDoss.getId().getDossierId();
			List<Transaction> transactionList = new ArrayList<Transaction>();
			transactionList = appMgr.getTransactionByIdDossier(refdossier);
			Transaction transactionOriginal = new Transaction();
			transactionOriginal = transactionList.get(0);
			expdest = new Expdest();
			expdestOriginal = new Expdest();
			expdestOriginal = appMgr.getListExpDestByIdExpDest(
					transactionList.get(0).getExpdest().getIdExpDest()).get(0);

			// ********************************************************************************************************ok
			expdest.setTypeExpDest(expdestOriginal.getTypeExpDest());
			expdest.setIdExpDestLdap(expdestOriginal.getIdExpDestLdap());
			if (expdestOriginal.getExpdestexterne() != null) {
				expdest.setExpdestexterne(expdestOriginal.getExpdestexterne());
			}

			appMgr.insert(expdest);
			nouvelleTransaction.setExpdest(expdest);
			nouvelleTransaction.setIdUtilisateur(transactionOriginal
					.getIdUtilisateur());
			nouvelleTransaction
					.setTransactionDestinationReelle(transactionOriginal
							.getTransactionDestinationReelle());
			nouvelleTransaction.setDossier(dossier);
			nouvelleTransaction.setTransactionDateTransaction(new Date());
			nouvelleTransaction.setTransactionDateReponse(newCourrier
					.getCourrierDateReponse());
			typetransaction = new Typetransaction();
			typetransaction = appMgr.getTypeTransactionByLibelle("Envoi")
					.get(0);
			nouvelleTransaction.setTypetransaction(typetransaction);
			nouvelleTransaction.setTransactionCommentaire(courrierCommentaire);
			nouvelleTransaction.setTransactionSupprimer(true);
			List<String> resultatAnnotation = new ArrayList<String>();
			// Annotation
			for (int j = 0; j <= selectedItemsAnnotation.size() - 1; j++) {
				resultatAnnotation.add(new String(selectedItemsAnnotation
						.get(j)));
			}
			String result = "";
			for (String string : resultatAnnotation) {
				result = result + string + " / ";
			}
			if (!result.equals("")) {
				int lastIndex = result.lastIndexOf("/");
				result = result.substring(0, lastIndex);
			}
			System.out.println("   -Annotation : " + result);
			vb.setCopyAnnotationResult(result);
			result = "";
			// Destinataires
			// **************************************************************************ok
			copyNouvelleTransaction = new Transaction();
			copyNouvelleTransaction
					.setExpdest(nouvelleTransaction.getExpdest());
			copyNouvelleTransaction.setIdUtilisateur(nouvelleTransaction
					.getIdUtilisateur());
			copyNouvelleTransaction
					.setDossier(nouvelleTransaction.getDossier());
			copyNouvelleTransaction
					.setTransactionDateTransaction(nouvelleTransaction
							.getTransactionDateTransaction());
			copyNouvelleTransaction
					.setTransactionDateReponse(nouvelleTransaction
							.getTransactionDateReponse());
			copyNouvelleTransaction
					.setTransactionCommentaire(nouvelleTransaction
							.getTransactionCommentaire());
			copyNouvelleTransaction.setTransactionSupprimer(nouvelleTransaction
					.getTransactionSupprimer());
			copyNouvelleTransaction
					.setTransactionDestinationReelle(nouvelleTransaction
							.getTransactionDestinationReelle());
			copyNouvelleTransaction.setTransactionOrdre(nouvelleTransaction
					.getTransactionOrdre());
			// A modifier
			copyNouvelleTransaction
					.setTransactionIdIntervenant(nouvelleTransaction
							.getTransactionIdIntervenant());
			copyNouvelleTransaction
					.setTransactionTypeIntervenant(nouvelleTransaction
							.getTransactionTypeIntervenant());
			//
			typetransaction = appMgr.getTypeTransactionByLibelle("Envoi")
					.get(0);
			copyNouvelleTransaction.setTypetransaction(typetransaction);
			if (vb.getPerson().isBoc()) {
				etat = appMgr.listEtatByLibelle("Trait√©").get(0);
				copyNouvelleTransaction.setEtat(etat);
			} else {// supprimer
				etat = appMgr.listEtatByLibelle("Simple").get(0);
				copyNouvelleTransaction.setEtat(etat);
			}
			if (chooseAnnotationType.equals("autre")) {// supprimer
				copyNouvelleTransaction
						.setTransactionCommentaireAnnotation(otherAnnotation);
			}
			appMgr.insert(copyNouvelleTransaction);
			copyNouvelleTransaction.setTransactionFirst(copyNouvelleTransaction
					.getTransactionId());
			appMgr.update(copyNouvelleTransaction);
			vb.setTransaction(copyNouvelleTransaction);
			if (chooseAnnotationType.equals("tous")) {
				for (int j = 0; j < resultatAnnotation.size(); j++) {
					cI.setIdAnnotation(Integer.valueOf(resultatAnnotation
							.get(j)));
					cI.setIdTransaction(vb.getTransaction().getTransactionId());
					cA.setId(cI);
					appMgr.insert(cA);
					cA = new TransactionAnnotation();
					cI = new TransactionAnnotationId();
				}
			} else {
				cI.setIdAnnotation(10);
				cI.setIdTransaction(vb.getTransaction().getTransactionId());
				cA.setId(cI);
				appMgr.insert(cA);
				cA = new TransactionAnnotation();
				cI = new TransactionAnnotationId();
			}

			// result = "";
			// ***********************************************ok?
			List<TransactionDestination> listTransactionDestination = new ArrayList<TransactionDestination>();
			listTransactionDestination = appMgr
					.getListTransactionDestinationByIdTransaction(transactionOriginal
							.getTransactionId());
			// [JS]
			if (listTransactionDestination != null
					&& listTransactionDestination.size() > 0) {
				int refExped = listTransactionDestination.get(0).getId()
						.getIdExpDest();

				expdest = new Expdest();
				id = new TransactionDestinationId();
				trDest = new TransactionDestination();
				expdest.setTypeExpDest(appMgr
						.getListExpDestByIdExpDest(refExped).get(0)
						.getTypeExpDest());
				expdest.setIdExpDestLdap(appMgr
						.getListExpDestByIdExpDest(refExped).get(0)
						.getIdExpDestLdap());

				appMgr.insert(expdest);
				id.setIdTransaction(vb.getTransaction().getTransactionId());
				id.setIdExpDest(expdest.getIdExpDest());
				trDest.setId(id);
				// A modifier

				trDest.setTransactionDestTypeIntervenant(listTransactionDestination
						.get(0).getTransactionDestTypeIntervenant());

				trDest.setTransactionDestIdIntervenant(listTransactionDestination
						.get(0).getTransactionDestIdIntervenant());

				//

				if (reponse1.equals("Oui")) {
					trDest.setTransactionDestDateReponse(listTransactionDestination
							.get(0).getTransactionDestDateReponse());
				}
				appMgr.insert(trDest);

			}

			System.out.println("Fin Exp√©diteur");

			// C*
			// inserer les liens
			// courrier original ---> nouveau courrier
			Lienscourriers lc = new Lienscourriers();
			Lienscourriers lcn;
			CourrierLiens cl;
			CourrierLiensId clI;
			lc.setCourrier(courrier);
			appMgr.insert(lc);
			cl = new CourrierLiens();
			clI = new CourrierLiensId(newCourrier.getIdCourrier(),
					lc.getLiensCourrier());
			cl.setId(clI);
			appMgr.insert(cl);
			// nouveau courrier ---> courrier original
			lc = new Lienscourriers();
			lc.setCourrier(newCourrier);
			appMgr.insert(lc);
			cl = new CourrierLiens();
			clI = new CourrierLiensId(courrier.getIdCourrier(),
					lc.getLiensCourrier());
			cl.setId(clI);
			appMgr.insert(cl);
			// FIN inserer les liens
			// duplication des documents du courrier originale pour le courrier
			// transferer
			List<Document> originalDocuments = appMgr
					.getDocumentByIdCourrier(courrier.getIdCourrier());
			Document copieDocumentForTR;
			for (Document document : originalDocuments) {
				copieDocumentForTR = new Document();
				copieDocumentForTR.setDocumentType(document.getDocumentType());
				copieDocumentForTR.setCourrier(newCourrier);
				copieDocumentForTR.setDocumentCategorie(document
						.getDocumentCategorie());
				copieDocumentForTR.setDocumentDateInsertion(new Date());
				copieDocumentForTR.setDocumentProprietaire(vb.getPerson()
						.getId());
				copieDocumentForTR.setDocumentSupprime(true);
				copieDocumentForTR.setDocumentParent(document
						.getDocumentParent());
				copieDocumentForTR.setDocumentReference(document
						.getDocumentReference());
				copieDocumentForTR
						.setDocumentObjet(document.getDocumentObjet());
				copieDocumentForTR.setDocumentNom(document.getDocumentNom());
				copieDocumentForTR.setDocumentCommentaire(document
						.getDocumentCommentaire());
				copieDocumentForTR.setDocumentIdDocumentOriginal(document
						.getIdDocument());
				copieDocumentForTR.setDocumentIdCourrierOriginal(courrier
						.getIdCourrier());
				appMgr.insert(copieDocumentForTR);

			}
			// C*

			// if (!vb.isToReplay()) {
			LogClass logClass = new LogClass();
			logClass.addTrack(
					"transfert",
					"Ev√©nement de log de transfert du courrier "
							+ courrier.getIdCourrier() + "-"
							+ courrier.getCourrierReferenceCorrespondant(),
					vb.getPerson(), "INFO", appMgr);
			// } else {
			// LogClass logClass = new LogClass();
			// logClass.addTrack(
			// "reponse",
			// "Ev√©nement de log de r√©ponse au courrier "
			// + courrier.getIdCourrier() + "-"
			// + courrier.getCourrierReferenceCorrespondant(),
			// vb.getPerson(), "INFO", appMgr);
			// }
			courrier = new Courrier();
			System.out
					.println("***************Succes Ajout Courrier***************");
			vb.setCopyListSelectedPerson(new ArrayList<Person>());
			vb.setCopyListPP(new ArrayList<Pp>());
			vb.setCopyListPM(new ArrayList<Pm>());
			vb.setListSelectedItem(new ArrayList<ItemSelected>());
			vb.setCopyListSelectedBoc(new ArrayList<BOC>());
			vb.setCopyListSelectedUnit(new ArrayList<Unit>());
			vb.setCopyDestNom(vb.getDestNom());
			vb.setCopyListSelectedObject(new ArrayList<Object>());
			vb.setCopyListSelectedObjectExp(new ArrayList<Object>());
			vb.setDestNom(" ");
			vb.setExpNom(" ");
			vb.setToReplay(false);
			vb.setTransactionDestination(new TransactionDestination());
			status2 = false;
			System.out.println("***Fin Transfert");

		} catch (Exception e) {
			System.out.println("***************Erreur***************");
			e.printStackTrace();
			status = false;
			status3 = true;
		}

	}

	private void getIdBocByUnit(Unit unit) {
		if (unit.getAssociatedUnit() != null) {
			getIdBocByUnit(unit.getAssociatedUnit());
		} else {
			idBoc = unit.getAssociatedBOC().getIdBOC();
		}

	}

	// C*
	// fonction de selection des modes de transmission dans le listBox
	public List<SelectItem> getSelectItemsTr() {
		String libelle;
		List<SelectItem> selectItemsTr = new ArrayList<SelectItem>();
		selectItemsTr.add(new SelectItem(""));
		for (int j = 0; j <= listTr.size() - 1; j++) {
			Integer idTr = listTr.get(j).getTransmissionId();
			if (vb.getLocale().equals("ar")) {
				libelle = listTr.get(j).getTransmissionLibelleAr();
			} else {
				libelle = listTr.get(j).getTransmissionLibelle();
			}
			// selectItemsTr.add(new SelectItem(libelle));
			selectItemsTr.add(new SelectItem(String.valueOf(idTr), libelle));

		}
		return selectItemsTr;
	}

	// C*
	// ************Getter & Setter********************

	public VariableGlobale getVb() {
		return vb;
	}

	public void setVb(VariableGlobale vb) {
		this.vb = vb;
	}

	public Export getExport() {
		return export;
	}

	public void setExport(Export export) {
		this.export = export;
	}

	public Courrier getCourrier() {
		return courrier;
	}

	public void setCourrier(Courrier courrier) {
		this.courrier = courrier;
	}

	public boolean isStatus() {
		return status;
	}

	public void setStatus(boolean status) {
		this.status = status;
	}

	public Date getDate() {
		return date;
	}

	public void setDate(Date date) {
		this.date = date;
	}

	public Transaction getTransaction() {
		return transaction;
	}

	public void setTransaction(Transaction transaction) {
		this.transaction = transaction;
	}

	public TransactionDestination getTransactionDestination() {
		return transactionDestination;
	}

	public void setTransactionDestination(
			TransactionDestination transactionDestination) {
		this.transactionDestination = transactionDestination;
	}

	public TransactionAnnotation getTransactionAnnotation() {
		return transactionAnnotation;
	}

	public void setTransactionAnnotation(
			TransactionAnnotation transactionAnnotation) {
		this.transactionAnnotation = transactionAnnotation;
	}

	public Nature getNature() {
		return nature;
	}

	public void setNature(Nature nature) {
		this.nature = nature;
	}

	public Transmission getTransmission() {
		return transmission;
	}

	public void setTransmission(Transmission transmission) {
		this.transmission = transmission;
	}

	public Confidentialite getConfidentialite() {
		return confidentialite;
	}

	public void setConfidentialite(Confidentialite confidentialite) {
		this.confidentialite = confidentialite;
	}

	public Expdestexterne getExpdestexterne() {
		return expdestexterne;
	}

	public void setExpdestexterne(Expdestexterne expdestexterne) {
		this.expdestexterne = expdestexterne;
	}

	public List<Expdestexterne> getListDestExpdestexternes() {
		return listDestExpdestexternes;
	}

	public void setListDestExpdestexternes(
			List<Expdestexterne> listDestExpdestexternes) {
		this.listDestExpdestexternes = listDestExpdestexternes;
	}

	public LanguageManagerBean getLm() {
		return lm;
	}

	public void setLm(LanguageManagerBean lm) {
		this.lm = lm;
	}

	public MessageSource getMessageSource() {
		return messageSource;
	}

	public void setMessageSource(MessageSource messageSource) {
		this.messageSource = messageSource;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public Urgence getUrgence() {
		return urgence;
	}

	public void setUrgence(Urgence urgence) {
		this.urgence = urgence;
	}

	public Date getDateReception() {
		return dateReception;
	}

	public void setDateReception(Date dateReception) {
		this.dateReception = dateReception;
	}

	public Date getDateReponse() {
		return dateReponse;
	}

	public void setDateReponse(Date dateReponse) {
		this.dateReponse = dateReponse;
	}

	public void setUtilisateur(Utilisateur utilisateur) {
		this.utilisateur = utilisateur;
	}

	public Utilisateur getUtilisateur() {
		return utilisateur;
	}

	public void setDossier(Dossier dossier) {
		this.dossier = dossier;
	}

	public Dossier getDossier() {
		return dossier;
	}

	public void setCourrierConsulterInformations(
			List<CourrierConsulterInformations> courrierConsulterInformations) {
		this.courrierConsulterInformations = courrierConsulterInformations;
	}

	public List<CourrierConsulterInformations> getCourrierConsulterInformations() {
		return courrierConsulterInformations;
	}

	public boolean isStatus1() {
		return status1;
	}

	public void setStatus1(boolean status1) {
		this.status1 = status1;
	}

	public boolean isStatus2() {
		return status2;
	}

	public void setStatus2(boolean status2) {
		this.status2 = status2;
	}

	public boolean isStatus3() {
		return status3;
	}

	public void setStatus3(boolean status3) {
		this.status3 = status3;
	}

	public String getSelectedItemNature() {
		return selectedItemNature;
	}

	public void setSelectedItemNature(String selectedItemNature) {
		this.selectedItemNature = selectedItemNature;
	}

	public String getSelectedItemConf() {
		return selectedItemConf;
	}

	public void setSelectedItemConf(String selectedItemConf) {
		this.selectedItemConf = selectedItemConf;
	}

	public String getSelectedItemUg() {
		return selectedItemUg;
	}

	public void setSelectedItemUg(String selectedItemUg) {
		this.selectedItemUg = selectedItemUg;
	}

	public String getSelectedItemsTr() {
		return selectedItemsTr;
	}

	public void setSelectedItemsTr(String selectedItemsTr) {
		this.selectedItemsTr = selectedItemsTr;
	}

	public List<Confidentialite> getListCf() {
		return listCf;
	}

	public void setListCf(List<Confidentialite> listCf) {
		this.listCf = listCf;
	}

	public List<Urgence> getListUg() {
		return listUg;
	}

	public void setListUg(List<Urgence> listUg) {
		this.listUg = listUg;
	}

	public List<Annotation> getListAt() {
		return listAt;
	}

	public void setListAt(List<Annotation> listAt) {
		this.listAt = listAt;
	}

	public void setSelectedItemsAnnotation(List<String> selectedItemsAnnotation) {
		this.selectedItemsAnnotation = selectedItemsAnnotation;
	}

	public List<String> getSelectedItemsAnnotation() {
		return selectedItemsAnnotation;
	}

	public void setDate1(Date date1) {
		this.date1 = date1;
	}

	public Date getDate1() {
		return date1;
	}

	public void setReponse1(String reponse1) {
		this.reponse1 = reponse1;
	}

	public String getReponse1() {
		return reponse1;
	}

	public void setSelect1(boolean select1) {
		this.select1 = select1;
	}

	public boolean isSelect1() {
		return select1;
	}

	public TransactionAnnotation getcA() {
		return cA;
	}

	public void setcA(TransactionAnnotation cA) {
		this.cA = cA;
	}

	public TransactionAnnotationId getcI() {
		return cI;
	}

	public void setcI(TransactionAnnotationId cI) {
		this.cI = cI;
	}

	public List<Annotation> getListAnnotations() {
		return listAnnotations;
	}

	public void setListAnnotations(List<Annotation> listAnnotations) {
		this.listAnnotations = listAnnotations;
	}

	public void setAssociatedUnit(String associatedUnit) {
		this.associatedUnit = associatedUnit;
	}

	public String getAssociatedUnit() {
		return associatedUnit;
	}

	public void setTypeExpediteur(String typeExpediteur) {
		this.typeExpediteur = typeExpediteur;
	}

	public String getTypeExpediteur() {
		return typeExpediteur;
	}

	public void setTypeSender(String typeSender) {
		this.typeSender = typeSender;
	}

	public String getTypeSender() {
		return typeSender;
	}

	public void setIdBoc(Integer idBoc) {
		this.idBoc = idBoc;
	}

	public Integer getIdBoc() {
		return idBoc;
	}

	public void setAssociatedLabel(String associatedLabel) {
		this.associatedLabel = associatedLabel;
	}

	public String getAssociatedLabel() {
		return associatedLabel;
	}

	public void setTypeCourrier(String typeCourrier) {
		this.typeCourrier = typeCourrier;
	}

	public String getTypeCourrier() {
		return typeCourrier;
	}

	public void setShowFacetUser(boolean showFacetUser) {
		this.showFacetUser = showFacetUser;
	}

	public boolean isShowFacetUser() {
		return showFacetUser;
	}

	public void setShowFacetBoc(boolean showFacetBoc) {
		this.showFacetBoc = showFacetBoc;
	}

	public boolean isShowFacetBoc() {
		return showFacetBoc;
	}

	public void setCourrierCommentaire(String courrierCommentaire) {
		this.courrierCommentaire = courrierCommentaire;
	}

	public String getCourrierCommentaire() {
		return courrierCommentaire;
	}

	public void setChooseAnnotationType(String chooseAnnotationType) {
		this.chooseAnnotationType = chooseAnnotationType;
	}

	public String getChooseAnnotationType() {
		return chooseAnnotationType;
	}

	public void setOtherAnnotation(String otherAnnotation) {
		this.otherAnnotation = otherAnnotation;
	}

	public String getOtherAnnotation() {
		return otherAnnotation;
	}

	public void setLabelName(String labelName) {
		this.labelName = labelName;
	}

	public String getLabelName() {
		return labelName;
	}

	public String getDisplayOther() {
		return displayOther;
	}

	public void setDisplayOther(String displayOther) {
		this.displayOther = displayOther;
	}

	public String getDisplayPick() {
		return displayPick;
	}

	public void setDisplayPick(String displayPick) {
		this.displayPick = displayPick;
	}

	public Courrier getNewCourrier() {
		return newCourrier;
	}

	public void setNewCourrier(Courrier newCourrier) {
		this.newCourrier = newCourrier;
	}

}