package xtensus.beans.common.GBO;

import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.annotation.PostConstruct;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import javax.servlet.ServletContext;

import org.apache.commons.lang.BooleanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import xtensus.aop.LogClass;
import xtensus.beans.common.LanguageManagerBean;
import xtensus.beans.common.ListeDestinatairesModel;
import xtensus.beans.common.VariableGlobale;
import xtensus.beans.utils.ComposantDynamique;
import xtensus.beans.utils.CourrierConsulterInformations;
import xtensus.beans.utils.CourrierDossierListe;
import xtensus.beans.utils.CourrierInformations;
import xtensus.entity.Annotation;
import xtensus.entity.Armoire;
import xtensus.entity.Confidentialite;
import xtensus.entity.Courrier;
import xtensus.entity.CourrierDonneeSupplementaire;
import xtensus.entity.CourrierDossier;
import xtensus.entity.CourrierDossierId;
import xtensus.entity.CourrierLiens;
import xtensus.entity.DonneeSupplementaireNature;
import xtensus.entity.Dossier;
import xtensus.entity.Etages;
import xtensus.entity.Etat;
import xtensus.entity.Expdest;
import xtensus.entity.Expdestexterne;
import xtensus.entity.Lienscourriers;
import xtensus.entity.Nature;
import xtensus.entity.NatureCategorie;
import xtensus.entity.Pm;
import xtensus.entity.Pp;
import xtensus.entity.Transaction;
import xtensus.entity.TransactionAnnotation;
import xtensus.entity.TransactionAnnotationId;
import xtensus.entity.TransactionDestination;
import xtensus.entity.TransactionDestinationId;
import xtensus.entity.TransactionDestinationReelle;
import xtensus.entity.Transmission;
import xtensus.entity.Typedossier;
import xtensus.entity.Typetransaction;
import xtensus.entity.Urgence;
import xtensus.entity.Utilisateur;
import xtensus.entity.Variables;
import xtensus.entity.Workflow;
import xtensus.ldap.business.LdapOperation;
import xtensus.ldap.model.Person;
import xtensus.ldap.model.Unit;
import xtensus.services.ApplicationManager;
import xtensus.services.Export;
import xtensus.workflow.beans.JBPMAccessProcessBean;
import xtensus.workflow.handlers.TraitementEtapeSuivant;

@Component
@Scope("request")
public class CourrierDetailsBean {

	private ApplicationManager appMgr;
	private Export export;
	private Courrier courrier;
	private Dossier dossier;
	private TransactionAnnotation cA;
	private TransactionAnnotationId cI;
	private boolean status;
	private boolean statusCloturer;
	private boolean statusActive;
	private boolean status1;
	private boolean status2;
	private boolean status3;
	private boolean showDonneSupp = false;
	private Date date;
	private Date date1;
	private Transaction transaction;
	private TransactionDestination transactionDestination;
	private TransactionAnnotation transactionAnnotation;
	private Nature nature;
	private NatureCategorie categorieNature;
	private Transmission transmission;
	private Confidentialite confidentialite;
	private Urgence urgence;
	private Expdestexterne expdestexterne;
	private List<Expdestexterne> listDestExpdestexternes;
	private Utilisateur utilisateur;
	private List<CourrierConsulterInformations> courrierConsulterInformations;
	private Date dateReception;
	private Date dateReponse;
	@Autowired
	private VariableGlobale vb;
	@Autowired
	private LanguageManagerBean lm;
	@Autowired
	private MessageSource messageSource;
	private String message;
	private Confidentialite cf;

	private String etatTransaction;
	private List<String> selectedItemsAnnotation;
	List<Annotation> listAnnotations;
	private String reponse1;
	private String annotationResult;
	private boolean select1 = false;

	private boolean statusClassement;
	private boolean statusNonClasse;
	private boolean statusClasseSucces;
	private boolean statusClasseErreur;
	private String messageInfoCourrierClassement;
	private String selectedItemArmoire;
	private String selectedItemEtages;
	private List<Armoire> listArmoire;
	private List<Etages> listEtages;

	private boolean etatDescription;
	private boolean etatEnvoyerAuxAutre;
	private boolean etatDateReponse;
	private boolean etatDescriptionTransaction;
	private boolean etatkeywords;
	private boolean accuseReception;
	private String lienOutput;
	private boolean showMonitoringButton;
	private LdapOperation ldapOperation;

	private boolean notLinkedMail;
	private boolean linkedMail;
	private long nbrCourrierLies;

	private boolean affichageDocument;
	private boolean affichageDetailsAccuse;
	// [JS] 2019-07-24
	private boolean affichageReceptionPhysique;
	// Fin [JS]
	private boolean statusAccuseReception;
	private boolean showResponseButton;
	private boolean showModificationButton;
	private boolean hideResponseButton;
	private String align;
	private Etages etages;
	private Armoire armoire;
	private boolean showUpdateClassement;
	// private boolean EtageChanged;
	private Etages ancienEtages;
	private String from;
	private boolean showForValidate;
	private CourrierInformations ci;
	private String codeUniqueCourrier = "";
	private String expditeurUnite;
	private List<Variables> var;
	private String cupSRV;
	private String messageModif;
	private boolean statusCanModif;

	private String boutonBordereau;
	private DataModel listeDestinatairesDM;
	private String type;
	private int idBoc;
	private boolean statV1;
	private boolean statV2;
	// KHA
	private List<ListeDestinatairesModel> destinataireRepondre;
	private Boolean etatReceptionPhysique;
	// [JS]
	private List<DonneeSupplementaireNature> listDSN;
	private Properties msg;
	private ComposantDynamique composantDynamique;
	private List<ComposantDynamique> D;
	private CourrierDonneeSupplementaire courrierDS;
	private CourrierDonneeSupplementaire cds;
	private List<ComposantDynamique> listCD;
	private Boolean affichePanelReceptionPhysique;

	// /
	@Autowired
	public CourrierDetailsBean(
			@Qualifier("applicationManager") ApplicationManager appMgr,
			@Qualifier("export") Export export) {
		this.appMgr = appMgr;
		this.export = export;
		courrier = new Courrier();
		dossier = new Dossier();
		// *** kha
		ci = new CourrierInformations();
		transaction = new Transaction();
		transactionDestination = new TransactionDestination();
		transactionAnnotation = new TransactionAnnotation();
		nature = new Nature();
		transmission = new Transmission();
		confidentialite = new Confidentialite();
		urgence = new Urgence();
		expdestexterne = new Expdestexterne();
		listDestExpdestexternes = new ArrayList<Expdestexterne>();
		utilisateur = new Utilisateur();
		courrierConsulterInformations = new ArrayList<CourrierConsulterInformations>();
		listArmoire = new ArrayList<Armoire>();
		listEtages = new ArrayList<Etages>();
		date = new Date();
		date1 = new Date();
		selectedItemsAnnotation = new ArrayList<String>();
		cA = new TransactionAnnotation();
		cI = new TransactionAnnotationId();
		listAnnotations = new ArrayList<Annotation>();
		ldapOperation = new LdapOperation();
		// [JS]
		listDSN = new ArrayList<DonneeSupplementaireNature>();
		listCD = new ArrayList<ComposantDynamique>();
		courrierDS = new CourrierDonneeSupplementaire();
		cds = new CourrierDonneeSupplementaire();
		categorieNature = new NatureCategorie();
		// /
		System.out
				.println("****** BeanInjecte CourrierDetailsBean ******");
	}

	@PostConstruct
	public void Initialize() {

		// vb.getListSelectedItem().clear();
		// kha 12-02-2019
		destinataireRepondre = new ArrayList<ListeDestinatairesModel>();
		transaction = vb.getTransaction();
		System.out.println("repeat");
	
		statusCloturer = false;
		statusActive = false;
		System.out.println("****************************************");
		System.out.println(vb.getCourrier().getCourrierEtatCloture());
		System.out.println("****************************************");
		etatReceptionPhysique = false;
		ci = vb.getCourDossConsulterInformations();
		//2019-07-27
		affichePanelReceptionPhysique=false;
		//Fin
		showModificationButton=true;

		Expdest cupExpDest1;
		cupExpDest1 = new Expdest();
		if (transaction != null){
		List<Expdest> listExpDestByIdExpDest = appMgr.getListExpDestByIdExpDest(transaction.getExpdest().getIdExpDest());

		cupExpDest1 = listExpDestByIdExpDest.get(0);}
		//L'utilisateur n'a pas le droit de modifier courrier après l'exécution 
		if(ci != null){
			System.out.println("ci.getTransactionDestination().getTransactionDestDateConsultation() "+ci.getTransactionDestination().getTransactionDestDateConsultation() );
        //Enveloppe :BOCT peut modifier que le mode de transmission 
		if((ci.getTransaction().getEtat().getEtatId()!=6) 
		&& ((vb.getPerson().isBoc()) ||	(vb.getPerson().getAssociatedDirection().getIdUnit().equals(cupExpDest1.getIdExpDestLdap())))){
			System.out.println("showModificationButton = true ");
			showModificationButton=true;
		//	System.out.println("ci.getTransmission().getTransmissionId() "+ci.getTransmission().getTransmissionId());

				vb.setShowReceptionPhysique(true);
		}else{
			System.out.println("showModificationButton = false ");

			showModificationButton=false;}
		}
		// codeUniqueCourrier=vb.getCopyExpReelNom();
		if (vb.getPerson().isBoc()) {
			if (vb.getCourrier().getCourrierEtatCloture() == 1) {
				statusCloturer = false;
				statusActive = true;
			} else {
				statusCloturer = true;
				statusActive = false;
			}
		}
		System.out.println("****************************************");
		System.out.println(statusCloturer);
		System.out.println("****************************************");
	

		if (vb.getLocale().equals("ar")) {
			align = "right";
		} else {
			align = "left";
		}
		// *** AC
		System.out.println("----vb.getRedirect()--- : " + vb.getRedirect());
		from = vb.getRedirect();
		System.out.println("----from initialize--- : " + from);
		vb.setRedirect("");
		// **
		setEtatDescription(false);
		setEtatEnvoyerAuxAutre(false);
		etatDateReponse = false;
		etatDescriptionTransaction = false;
		etatkeywords = false;
		accuseReception = false;
		showMonitoringButton = vb.isShowMonitoringButtonForDest();
		affichageDocument = false;
		affichageDetailsAccuse = false;
		affichageReceptionPhysique=false;
		try {
			try {
				if (ci.getCourrierRecu() == 1) {
					showResponseButton = true;
					hideResponseButton = false;
				} else {
					showResponseButton = false;
					hideResponseButton = true;
				}
				if (ci.getCourrierAValider() == 1) {
					showForValidate = true;
				}
			} catch (Exception e) {
				showResponseButton = false;
				hideResponseButton = true;
				showForValidate = false;
			}

			annotationResult = "";
			courrier = vb.getCourrier();
			// XTE : On ajoute le test Type !=null, car si le courrier est
			// ajouté par un non Boc, il aura le type à NULL-------------
			/*
			 * if (courrier.getCourrierType()!=null &&
			 * courrier.getCourrierType().equals("D")) { boutonBordereau =
			 * "false"; } else { boutonBordereau = "true"; }
			 */
			// ----------------------- KHA : ROLE_BORDEREAU_ENVOI : ajouté le
			// 15-03-2019
			if (!vb.isRoleBordereau()) {
				boutonBordereau = "false";
			} else {
				if (courrier.getCourrierType() != null
						&& courrier.getCourrierType().equals("D")) {
					boutonBordereau = "true";
				} else {
					boutonBordereau = "false";
				}
			}
			// ----------------------- Fin KHA
			if (courrier == null) {
				if (ci.getCourrier() == null) {
					courrier = appMgr.getCourrierByIdCourrier(
							ci.getCourrierID()).get(0);
				} else {
					courrier = ci.getCourrier();
				}
				vb.setCourrier(courrier);
			}

			nature = appMgr.getNatureById(courrier.getNature().getNatureId())
					.get(0);
			categorieNature = nature.getNatureCategorie();
			
			// [JS]
			System.out.println("Nature Sélectionné :" + nature);
			// Load fichier Properties
			ExternalContext jsfContext = FacesContext.getCurrentInstance()
					.getExternalContext();
			ServletContext servletContext = (ServletContext) jsfContext
					.getContext();
			System.out.println("Contenu de variable local :" + vb.getLocalFr());
			String webContentRoot = servletContext.getRealPath("/");
			String pathConfigFile = webContentRoot + File.separator + "WEB-INF"
					+ File.separator + "classes" + File.separator + "messages_"
					+ vb.getLocalFr() + ".properties";
			msg = new Properties();
			System.out.println("Path Fichier :" + pathConfigFile);
			try {
				msg.load(new FileInputStream(pathConfigFile));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}

			listDSN = appMgr.getListDonneeSupplementaireNatureAffectes(nature
					.getNatureId());
			listCD = new ArrayList<ComposantDynamique>();
			Class aClass = cds.getClass();
			courrierDS = appMgr.getDonneeSupplementaireCourrier(courrier
					.getIdCourrier());

			if (listDSN != null && listDSN.size() > 0) {
				showDonneSupp = true;
				for (int i = 0; i < listDSN.size(); i++) {
					composantDynamique = new ComposantDynamique();
					System.out.println("==================================");
					String libelle = listDSN.get(i).getLibelleDonnee();
					System.out.println("Libellé " + libelle);
					String libelleNature = msg.getProperty(libelle);
					System.out.println("Libellé :" + libelleNature);
					System.out.println("==================================");
					composantDynamique.setName(libelleNature);
					composantDynamique.setType(listDSN.get(i)
							.getDonneeSupplementaire()
							.getTypeDonneeSupplementaire());
					composantDynamique.setIdChamps(listDSN.get(i).getDonneeSupplementaire()
							.getIdDonneeSupplementaire());

					listCD.add(composantDynamique);
					int idchamp = listCD.get(i).getIdChamps();
					String typeChamp = listCD.get(i).getType();

					String methodName = "getColonne" + idchamp;
					Method m = null;
					m = aClass.getMethod(methodName);
					System.out.format("Methode : %s%n", m.toGenericString());
					Object resultat = m.invoke(courrierDS, new Object[0]);
					System.out.println("Resultat :" + resultat);
					if (typeChamp.equals("RADIO")) {
						if (resultat.equals("true")) {
							resultat = "Oui";
						} else
							resultat = "Non";
					}
					composantDynamique.setColonne(resultat);

				}

			}
			// [JS]

			vb.setNature(nature);

			confidentialite = appMgr.getConfidentialiteById(
					courrier.getConfidentialite().getConfidentialiteId())
					.get(0);
			vb.setConfidentialite(confidentialite);

			urgence = appMgr.getUrgenceById(
					courrier.getUrgence().getUrgenceId()).get(0);
			vb.setUrgence(urgence);

			transmission = appMgr.getTransmissionById(
					courrier.getTransmission().getTransmissionId()).get(0);
			vb.setTransmission(transmission);

			listArmoire = appMgr.listArmoireByEtat("Libre");

			CourrierDossier courrierDossier = new CourrierDossier();
			courrierDossier = appMgr.getCourrierDossierByIdCourrier(
					courrier.getIdCourrier()).get(0);
			int refDossier = courrierDossier.getId().getDossierId();
			vb.setReferenceDossier(refDossier);
			
			if (transaction == null) {
				transaction = appMgr.getListTransactionByIdTransaction(
						ci.getTransactionID()).get(0);
				vb.setTransaction(transaction);

			}
			int refTransaction = transaction.getTransactionId();
			List<TransactionAnnotation> annotations = new ArrayList<TransactionAnnotation>();
			annotations = appMgr.getAnnotationByIdTransaction(refTransaction);

			int refEtat = transaction.getEtat().getEtatId();
			if (vb.getLocale().equals("ar")) {
				etatTransaction = appMgr.listEtatByRef(refEtat).get(0)
						.getEtatLibelleAr();
			} else {
				etatTransaction = appMgr.listEtatByRef(refEtat).get(0)
						.getEtatLibelle();
			}

			/***** Acces gestion accses reception ***/
			if (vb.getPerson().isBoc()) {
				accuseReception = true;
			}
			if (appMgr.accuseReceptionByIdCourrier(courrier.getIdCourrier())
					.size() != 0) {
				setAffichageDetailsAccuse(true);
			}
			//[JS] 2019-07-24
			//courrier en cours admet une récéption physique 
			System.out.println(" 2019-07-24 : "+appMgr.getListCourrierAvecReceptionPhysique(courrier.getIdCourrier()).size());
			if(appMgr.getListCourrierAvecReceptionPhysique(courrier.getIdCourrier()).size() !=0)
			{ 
//			if(vb.getPerson().isBoc() || vb.get){
				affichageReceptionPhysique=true;
			}
//			}
			
			
			/***** Affichage listDocument *******/

			int nbDoc = appMgr
					.getDocumentByIdCourrier(courrier.getIdCourrier()).size();
			if (nbDoc != 0) {
				setAffichageDocument(true);
			}

			String annotationLibelle;
			int lastIndex;
			int refAnnotation;
			// AH : affecter à chaque Destinataire ses Annotations

			List<ListeDestinatairesModel> list = vb.getListeDestinataire();
			List<Integer> listeIdDest = new ArrayList<Integer>();
			List<Integer> listeIdMembresBOc=new ArrayList<Integer>();
			if(vb.getPerson().isBoc()){
			List<Person> listMembresBoc = vb.getPerson().getAssociatedBOC().getMembersBOC();
			for(Person membres:listMembresBoc){

				listeIdMembresBOc.add(membres.getId());
			}
			}
			
			for (ListeDestinatairesModel d : list) {
				int idDest = 0;
				// KHA reception physique
				if (vb.getPerson().isResponsable()) {
					System.out.println(" personne connectee responsable");
					if (vb.getPerson().getAssociatedDirection().getIdUnit() == d
							.getDestinataireId()) {
						idDest = vb.getPerson().getId();
					} else {
						System.out
								.println(" personne connectee n'est pas responsable");
						idDest = d.getDestinataireId();
					}
				}
				listeIdDest.add(idDest);
				//

				List<String> l = new ArrayList<String>();
				l = d.getListeAnnotations();
				// [Modifcation] le 2019-06-26
				if (l != null && l.size() > 0) {
					String concatenationAnnotation = "";
					System.out
							.println("KHA===> concatiner la liste des annotations : Debut");
					for (int i = 0; i < l.size(); i++) {
						Annotation annotation = appMgr
								.getAnnotationByIdAnotation(
										Integer.valueOf(l.get(i))).get(0);
						concatenationAnnotation += annotation
								.getAnnotationLibelle() + " / ";
					}
					System.out
							.println("KHA===> concatiner la liste des annotations : Fin");
					if (!concatenationAnnotation.equals("")) {
						int lastIndexBar = concatenationAnnotation
								.lastIndexOf("/");
						concatenationAnnotation = concatenationAnnotation
								.substring(0, lastIndexBar);
						System.out.println("KHA : concatenationAnnotation= "
								+ concatenationAnnotation);
					}
					d.setAnnotations(concatenationAnnotation);
				}
			}
			// List<Annotation> l =
			// appMgr.listeAnnotationsParDestinataireAndTransaction(d.getDestinataireId(),refDossier);
			/*
			 * List<Annotation> l =
			 * appMgr.listeAnnotationParDestinataireEtTransaction
			 * (d.getDestinataireId(),refDossier); // List<Annotation> l =
			 * appMgr
			 * .listeAnnotationsParDestinataireEtTransaction(d.getDestinataireId
			 * (),refDossier,"Externe"); // KHA
			 * 
			 * List<String> listeAnnotationDest= new ArrayList<String>();
			 * 
			 * 
			 * String concatenationAnnotation=""; for(Annotation t: l){
			 * System.out.println(t.getAnnotationLibelle());
			 * 
			 * // KHA
			 * listeAnnotationDest.add(String.valueOf(t.getAnnotationId()));
			 * concatenationAnnotation+=t.getAnnotationLibelle()+" / "; }
			 * if(!concatenationAnnotation.equals("")) { int lastIndexBar =
			 * concatenationAnnotation.lastIndexOf("/"); concatenationAnnotation
			 * = concatenationAnnotation.substring(0, lastIndexBar);
			 * System.out.println
			 * ("1 concatenationAnnotation"+concatenationAnnotation); }
			 * System.out
			 * .println("2 concatenationAnnotation"+concatenationAnnotation);
			 * 
			 * d.setAnnotations(concatenationAnnotation);
			 * System.out.println("d.destinataire= "+d.getDestinataireName());
			 * System
			 * .out.println("d.annotations= "+d.getAnnotations().toString());
			 * //KHA d.setListeAnnotations(listeAnnotationDest);
			 * 
			 * }
			 */

			listeDestinatairesDM = new ListDataModel();
			System.out.println("liste 2019-10-21 : "+list.size());
			listeDestinatairesDM.setWrappedData(list);

			// KHA :parcourir la liste des annotations à charger dans picklist
			List<Annotation> annotation = new ArrayList<Annotation>();
			try {
				annotation = appMgr.getAnnotationByIdAnotation(annotations
						.get(0).getId().getIdAnnotation());
				if (annotation.size() != 0) {
					if (annotation.get(0).getAnnotationLibelle()
							.equals("Autre")) {
						annotationResult = annotationResult
								+ transaction
										.getTransactionCommentaireAnnotation()
								+ " / ";
						selectedItemsAnnotation.add(transaction
								.getTransactionCommentaireAnnotation());
						listAnnotations.add(appMgr.getAnnotationByLibelle(
								"Autre").get(0));
					} else {
						if (vb.getLocale().equals("ar")) {
							for (TransactionAnnotation ta : annotations) {
								refAnnotation = ta.getId().getIdAnnotation();
								annotationLibelle = appMgr
										.getAnnotationByIdAnotation(
												refAnnotation).get(0)
										.getAnnotationLibelleAr();
								annotationResult = annotationResult
										+ annotationLibelle + " / ";
								selectedItemsAnnotation.add(annotationLibelle);
								listAnnotations.add(appMgr
										.getAnnotationByIdAnotation(
												refAnnotation).get(0));
							}
						} else {
							for (TransactionAnnotation ta : annotations) {
								refAnnotation = ta.getId().getIdAnnotation();
								annotationLibelle = appMgr
										.getAnnotationByIdAnotation(
												refAnnotation).get(0)
										.getAnnotationLibelle();
								annotationResult = annotationResult
										+ annotationLibelle + " / ";
								selectedItemsAnnotation.add(annotationLibelle);
								listAnnotations.add(appMgr
										.getAnnotationByIdAnotation(
												refAnnotation).get(0));
							}
						}
					}

					if (!annotationResult.equals("")) {
						lastIndex = annotationResult.lastIndexOf("/");
						annotationResult = annotationResult.substring(0,
								lastIndex);
					}
					vb.setListSelectedAnnotations(selectedItemsAnnotation);
					vb.setCopyAnnotationResult(annotationResult);
				}
			} catch (Exception e) {
				vb.setListSelectedAnnotations(new ArrayList<String>());
				vb.setCopyAnnotationResult("");
			}

			reponse1 = courrier.getCourrierNecessiteReponse();

			if (reponse1.equals("Oui")) {
				etatDateReponse = true;
			}

			if (courrier.getCourrierCommentaire() != null) {
				if (!(courrier.getCourrierCommentaire().equals(""))) {
					setEtatDescription(true);
				}
			}
			if (vb.getCopyOtherDest() != null) {
				if (!(vb.getCopyOtherDest().equals(""))) {
					setEtatEnvoyerAuxAutre(true);
				}
			}
			if (transaction.getTransactionCommentaire() != null) {
				if (!(transaction.getTransactionCommentaire().equals(""))) {
					etatDescriptionTransaction = true;
				}
			}
			if (courrier.getKeywords() != null) {
				if (!(courrier.getKeywords().equals(""))) {
					etatkeywords = true;
				}
			}
			verificationLienCourrier();

			// ***********************************************************************
			// --------------------------------------MM----------------------------------------------------------------------------------
			// --------------------------------------------------------------------------------------------------------------------------
			// Code Unique courrier
			// cup :: Code Unique Parametrable

			Expdest cupExpDest;
			cupExpDest = new Expdest();
			cupExpDest = appMgr.getListExpDestByIdExpDest(
					transaction.getExpdest().getIdExpDest()).get(0);
			

			System.out.println("courrier.getIdCourrier() "+courrier.getIdCourrier());
			CourrierDossier courrierDossier1 = appMgr.getCourrierDossierByIdCourrier(courrier.getIdCourrier())
			.get(0);

			int refdossier = courrierDossier1.getId().getDossierId();
			Transaction transactionn = new Transaction();
			List<Transaction> listTr = appMgr.getTransactionByIdDossier(refdossier);
			lastIndex=listTr.size();
			transactionn=listTr.get(lastIndex-1);
			int idEditeur=transactionn.getIdUtilisateur();
			System.out.println("Id Editeur ====>"+idEditeur);	


			// KHA
			System.out
					.println("===============================reception physique =========================================");
			if (courrier.getCourrierAvecDocumentPhysique() != null
					&& courrier.getCourrierAvecDocumentPhysique() == true ) {
				System.out.println("KHA ===> reception physique : oui ");
				System.out.println("vb.getPerson().isBoc() && !listeIdMembresBOc.contains(idEditeur)"+vb.getPerson().isBoc() );
				System.out.println(" !listeIdMembresBOc.contains(idEditeur)"+ !listeIdMembresBOc.contains(idEditeur) );
				System.out.println(" listeIdDest.contains(vb.getPerson().getId()) "+ listeIdDest.contains(vb.getPerson().getId()));
				System.out.println(" vb.getPerson().getId() "+ vb.getPerson().getId());
				System.out.println(" cupExpDest.getIdExpDestLdap()"+ cupExpDest.getIdExpDestLdap());



				if (vb.getPerson().isResponsable()  && !vb.getPerson().isBoc()) {
					if (cupExpDest.getIdExpDestLdap() != null
							&& vb.getPerson().getAssociatedDirection()
									.getIdUnit() == cupExpDest
									.getIdExpDestLdap())
						System.out
								.println("si l'expediteur est le responsable du direction");
					// si l'expediteur est le responsable du direction
					etatReceptionPhysique = true;
					System.out.println("###1");


				}		

				//is BOC et n'est pas l'editeur de courrier 
				
				else if ((vb.getPerson().isBoc() && !listeIdMembresBOc.contains(idEditeur) )
						|| listeIdDest.contains(vb.getPerson().getId())
						|| vb.getPerson().getId() == cupExpDest
								.getIdExpDestLdap()){
					// si le connectee est l'expediteur, le destinataire reel ou le
				// BO
				etatReceptionPhysique = true;
				System.out.println("###2");


				}

			}
//			System.out.println("[JS] => : "+appMgr.getListCourrierAvecReceptionPhysiqueByEtat(courrier.getIdCourrier()).size());
			if(courrier.getCourrierAvecDocumentPhysique() != null
					&& courrier.getCourrierAvecDocumentPhysique() == true && appMgr.getListCourrierAvecReceptionPhysiqueByEtat(courrier.getIdCourrier()).size() !=0){
				System.out.println("###3");
				etatReceptionPhysique = false;

			}
			if(courrier.getCourrierAvecDocumentPhysique() != null
					&& courrier.getCourrierAvecDocumentPhysique() != true){
				System.out.println("KHA ===> reception physique : non ");
				etatReceptionPhysique = false;
				System.out.println("###4");


			}
//			System.out.println("[JS] etatReceptionPhysique : "+etatReceptionPhysique);
//			System.out
//					.println("===============================reception physique FIN =========================================");

			if (cupExpDest!=null && cupExpDest.getTypeExpDest().equals("Interne-Person")&& cupExpDest.getIdExpDestLdap() != null) {
				System.out.println("++cupExpDest+++ : " + cupExpDest.getIdExpDestLdap().intValue());
				int MonID;
				int j = 0;
				boolean findPerson = false;

				do {
					MonID = vb.getCopyLdapListUser().get(j).getId();
					System.out.println("++MONID+++ : " + MonID);
					if (MonID == cupExpDest.getIdExpDestLdap().intValue()) {
						findPerson = true;
						vb.setPersonCodeUnique(vb.getCopyLdapListUser().get(j));
						// vbn.setPerson(vb.getCopyLdapListUser().get(j));
					} else {
						j++;
					}
				} while (!findPerson && j < vb.getCopyLdapListUser().size());
				//
				// cupSRV=MonID+"";
//				System.out.println("vb.getPersonCodeUnique() : "
//						+ vb.getPersonCodeUnique().getCn());
				if (vb.getPersonCodeUnique()!= null && vb.getPersonCodeUnique().getAssociatedDirection() != null) {
					cupSRV = vb.getPersonCodeUnique().getAssociatedDirection()
							.getShortNameUnit();
					System.out.println("1" + cupSRV);
				}
				if (vb.getPersonCodeUnique()!= null && vb.getPersonCodeUnique().getAssociatedBOC() != null) {
					cupSRV = vb.getPersonCodeUnique().getAssociatedBOC()
							.getNameBOC();
					System.out.println("2" + cupSRV);
				}
				if (vb.getPersonCodeUnique()!= null && vb.getPersonCodeUnique().getAssociatedService() != null) {
					cupSRV = vb.getPersonCodeUnique().getAssociatedService()
							.getNameService();
					System.out.println("3" + cupSRV);
					cupSRV = vb.getPersonCodeUnique().getAssociatedService()
							.getAssociatedDirection().getNameDirection();
					System.out.println("4" + cupSRV);
				}

			} 
			else if (cupExpDest!=null && cupExpDest.getTypeExpDest().equals("Interne-Unité")&& cupExpDest.getIdExpDestLdap() != null) {
				System.out.println("++cupExpDest+++ : " + cupExpDest.getIdExpDestLdap().intValue());
				int MonID;
				int j = 0;
				boolean findunite = false;

				do {
					MonID = vb.getCopyLdapListUnit().get(j).getIdUnit();
					System.out.println("++MONID+++ : " + MonID);
					if (MonID == cupExpDest.getIdExpDestLdap().intValue()) {
						findunite = true;
					//	vb.setPersonCodeUnique(vb.getCopyLdapListUser().get(j));
						// vbn.setPerson(vb.getCopyLdapListUser().get(j));
						cupSRV=vb.getCopyLdapListUnit().get(j).getShortNameUnit();
						break;
					} else {
						j++;
					}
				} while (!findunite && j < vb.getCopyLdapListUnit().size());
				
			}
			
			
			
			else {
				System.out.println("-----Dans ELSE----");
				cupSRV = "XTRN";
			}

			
			codeUniqueCourrier=vb.getCodeUniqueCourrier();
			System.out.println("codeUniqueCourrier=====================>"+codeUniqueCourrier);
			// ***********************************************************************
			// --------------------------------------MM----------------------------
			// Test
			// var=appMgr.getListVariableByLibelle();
			/*
			 * Commenter le 2019-10-12
			 */
//			var = appMgr
//					.listVariablesByLibelle("code_courrier_unique_personnalisable");
//             System.out.println("2019-10-12 : "+ci.getTransaction().getCourrierReferenceCorrespondant());
//			codeUniqueCourrier = var.get(0).getVaraiablesValeur();
//			codeUniqueCourrier = codeUniqueCourrier.replace("[ID]", ci.getTransaction().getCourrierReferenceCorrespondant() + "");
//			codeUniqueCourrier = codeUniqueCourrier.replace("[Annee]",
//					new Date().getYear() + 1900 + "");
//			codeUniqueCourrier = codeUniqueCourrier.replace("[Mois]",
//					new Date().getMonth() + 1 + "");
//			// XTE : Si le courrier est ajouté par un non Boc, il aura le type à
//			// NULL--------------------------------------------------
//			if (ci.getTransaction().getCourrierType() != null) {
//				codeUniqueCourrier = codeUniqueCourrier.replace("[Sens]", 
//						ci.getTransaction().getCourrierType());
//			} else {
//				codeUniqueCourrier = codeUniqueCourrier.replace("[Sens]", "I");
//			}
//			System.out.println("courrier type = "
//					+ ci.getTransaction().getCourrierType() );
//			System.out.println("cupSRV================> "+cupSRV);
//			codeUniqueCourrier = codeUniqueCourrier.replace("[SRV]", cupSRV);
			// KHA====
			// vb.setCourrierCodeUnique(codeUniqueCourrier);
			// ====
			// [ID][Annee][Mois]//[SRV]/[Sens]/
			// ***********************************************************************
			// --------------------------------------MM----------------------------
			// Test

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void transfert() {
		vb.setFlagTransfert(true);
		vb.setListeDestinataire(new ArrayList<ListeDestinatairesModel>());
		vb.setCopyListSelectedUnit(new ArrayList<Unit>());
		if(vb.getPerson().isBoc()){
			System.out.println("BOC Connecté");
			
			vb.getPerson().setNom(vb.getPerson().getAssociatedBOC().getNameBOC());
			vb.getPerson().setPrenom(null);
		}
	}

	public void verificationLienCourrier() {
		Courrier courrier1;
		nbrCourrierLies = 0;
		vb.setListCourriersAffectes(new ArrayList<CourrierDossierListe>());
		List<Lienscourriers> liensCourriers = new ArrayList<Lienscourriers>();
		List<CourrierLiens> courrierLiens;
		liensCourriers = appMgr.getListCourrierLiensByIdCourrier(courrier
				.getIdCourrier());
		if (!liensCourriers.isEmpty()) {
			notLinkedMail = false;
			linkedMail = true;
			CourrierDossierListe courrierDossierListe;
			System.out.println("size Lien1 : " + liensCourriers.size());
			for (Lienscourriers lienscourriers : liensCourriers) {
				courrierLiens = new ArrayList<CourrierLiens>();
				courrierLiens = appMgr
						.getListLiensCourrierByIdCourrierLien(lienscourriers
								.getLiensCourrier());
				for (CourrierLiens courrierLiens2 : courrierLiens) {
					courrierDossierListe = new CourrierDossierListe();
					nbrCourrierLies = nbrCourrierLies + 1;
					courrier1 = new Courrier();
					courrier1 = appMgr.getCourrierByIdCourrier(
							courrierLiens2.getId().getIdCourrier()).get(0);
					System.out.println("Courrier ref : "
							+ courrier1.getCourrierReferenceCorrespondant());
					System.out.println("Courrier Id  : "
							+ courrier1.getIdCourrier());
					courrierDossierListe.setCourrier(courrier1);
					courrierDossierListe.setConfidentialite(appMgr
							.getConfidentialiteById(
									courrier1.getConfidentialite()
											.getConfidentialiteId()).get(0));
					courrierDossierListe.setUrgence(appMgr.getUrgenceById(
							courrier1.getUrgence().getUrgenceId()).get(0));
					courrierDossierListe.setTransmission(appMgr
							.getTransmissionById(
									courrier1.getTransmission()
											.getTransmissionId()).get(0));
					courrierDossierListe.setNature(appMgr.getNatureById(
							courrier1.getNature().getNatureId()).get(0));
					vb.getListCourriersAffectes().add(courrierDossierListe);
				}
			}
			if (nbrCourrierLies == 0) {
				notLinkedMail = true;
				linkedMail = false;
			}
		} else {
			notLinkedMail = true;
			linkedMail = false;
		}
	}

	public void reply() {
		try {
			// modifier a cause de redeveloppement de la liste courriers
			// CourrierConsulterInformations consulterInformations = new
			// CourrierConsulterInformations();
			// consulterInformations = vb.getCourDossConsulterInformations();
			// courrier = consulterInformations.getCourrier();
			// vb.setCourDossConsulterInformations(consulterInformations);
			CourrierInformations consulterInformations = new CourrierInformations();
			consulterInformations = vb.getCourDossConsulterInformations();
			if (consulterInformations.getCourrier() == null) {
				consulterInformations.setCourrier(appMgr
						.getCourrierByIdCourrier(
								consulterInformations.getCourrierID()).get(0));
			}
			// [JS]: 2019-05-20 Afficher référence dans transaction
			if (consulterInformations.getTransaction() == null) {
				consulterInformations.setTransaction(appMgr
						.getListTransactionByIdTransaction(
								consulterInformations.getTransactionID())
						.get(0));

			}
			courrier = consulterInformations.getCourrier();
			vb.setCourDossConsulterInformations(consulterInformations);
			// fin modifier a cause de redeveloppement de la liste courriers
			vb.setCourrier(courrier);
			// if (consulterInformations.getCourrierExpediteurObjet() instanceof
			// Person) {
			// Person person = new Person();
			// person = (Person) consulterInformations
			// .getCourrierExpediteurObjet();
			// vb.setCopyListSelectedPerson(new ArrayList<Person>());
			// vb.getCopyListSelectedPerson().add(
			// ldapOperation.getPersonalisedUserById(person.getId()));
			// vb.setDestNom(person.getCn());
			// } else if (consulterInformations.getCourrierExpediteurObjet()
			// instanceof Unit) {
			// Unit unit = new Unit();
			// unit = (Unit) consulterInformations
			// .getCourrierExpediteurObjet();
			// vb.setCopyListSelectedUnit(new ArrayList<Unit>());
			// vb.getCopyListSelectedUnit().add(unit);
			// vb.setDestNom(unit.getNameUnit());
			// }
			transaction = consulterInformations.getTransaction();
			
			vb.setCopyDestNom(consulterInformations
					.getCourrierDestinataireReelle());
			vb.setCopyExpNom(consulterInformations.getCourrierExpediteur());
			vb.setCopyCourrierCommentaire(consulterInformations
					.getCourrierCommentaire());
			vb.setToReplay(true);
			// C* search the real expediteur :
			if (consulterInformations.getCourrierAllTransactions() == null) {
				List<Transaction> allTransactions = appMgr
						.getTransactionByIdDossier(consulterInformations
								.getDossierID());
				consulterInformations
						.setCourrierAllTransactions(allTransactions);
			}
			Transaction firstTransaction = consulterInformations
					.getCourrierAllTransactions().get(
							consulterInformations.getCourrierAllTransactions()
									.size() - 1);
			Expdest realExpediteur = appMgr.getListExpDestByIdExpDest(
					firstTransaction.getExpdest().getIdExpDest()).get(0);
			consulterInformations.setExpDest(realExpediteur);
			if (realExpediteur.getTypeExpDest().equals("Interne-Person")) {
				// Person person =
				// vb.getHashMapAllUser().get(courrierInformations.getExpDest().getIdExpDestLdap());
				Person person = ldapOperation
						.getPersonalisedUserById(consulterInformations
								.getExpDest().getIdExpDestLdap());
				vb.getCopyListSelectedPerson().add(person);
				vb.setDestNom(person.getCn());
				// *** kha- ajoute 12-02-2019
				vb.setDestinataireId(person.getId());
				ListeDestinatairesModel dest = new ListeDestinatairesModel();
				dest.setDestinataireId(person.getId());
				dest.setDestinataireName(person.getCn());
				destinataireRepondre.add(dest);
				vb.setListeDestinataire(destinataireRepondre);

			} else if (realExpediteur.getTypeExpDest().equals("Interne-Unité")) {
				Unit unit = vb.getHashMapUnit().get(
						consulterInformations.getExpDest().getIdExpDestLdap());
				vb.getCopyListSelectedUnit().add(unit);
				vb.setDestNom(unit.getNameUnit());
				// *** kha- ajoute 12-02-2019
				vb.setDestinataireId(unit.getIdUnit());
				ListeDestinatairesModel dest = new ListeDestinatairesModel();
				dest.setDestinataireId(unit.getIdUnit());
				dest.setDestinataireName(unit.getNameUnit());

				destinataireRepondre.add(dest);
				vb.setListeDestinataire(destinataireRepondre);
				// }
				// else if (realExpediteur.getTypeExpDest()
				// .equals("Interne-Boc")) {
				// expediteur.append(vb.getCentralBoc().getNameBOC());

			} else if (realExpediteur.getTypeExpDest().equals("Externe")) {
				Expdestexterne realExpediteurExterne = appMgr
						.getExpediteurById(
								realExpediteur.getExpdestexterne()
										.getIdExpDestExterne()).get(0);
				if (realExpediteurExterne.getTypeutilisateur()
						.getTypeUtilisateurLibelle().equals("PP")) {
					Pp pp = appMgr.getPPByReferenceExpediteur(
							realExpediteurExterne.getIdExpDestExterne()).get(0);
					pp.setExpdestexterne(realExpediteurExterne);
					vb.getCopyListPP().add(pp);
					vb.setDestNom(realExpediteurExterne.getExpDestExterneNom()
							+ " "
							+ realExpediteurExterne.getExpDestExternePrenom());
					// *** kha- ajoute 12-02-2019
					vb.setDestinataireId(pp.getExpdestexterne()
							.getIdExpDestExterne());
					ListeDestinatairesModel dest = new ListeDestinatairesModel();
					dest.setDestinataireId(pp.getExpdestexterne()
							.getIdExpDestExterne());
					dest.setDestinataireName(pp.getExpdestexterne()
							.getExpDestExterneNom());

					destinataireRepondre.add(dest);
					vb.setListeDestinataire(destinataireRepondre);
				} else {
					Pm pm = appMgr.getPMByReferenceExpediteur(
							realExpediteurExterne.getIdExpDestExterne()).get(0);
					pm.setExpdestexterne(realExpediteurExterne);
					// pm.setExpdestexterne(expdestexterne)
					vb.getCopyListPM().add(pm);
					vb.setDestNom(realExpediteur.getExpdestexterne()
							.getExpDestExterneNom());
					// *** kha- ajoute 12-02-2019
					vb.setDestinataireId(pm.getExpdestexterne()
							.getIdExpDestExterne());
					ListeDestinatairesModel dest = new ListeDestinatairesModel();
					dest.setDestinataireId(pm.getExpdestexterne()
							.getIdExpDestExterne());
					dest.setDestinataireName(pm.getExpdestexterne()
							.getExpDestExterneNom());
					destinataireRepondre.add(dest);
					vb.setListeDestinataire(destinataireRepondre);
				}
			}
			System.out.println("jalila : "+vb.getDestNom());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void modify() {
		System.out.println("modiiiiif");
		vb.setDestNom(vb.getDestinataireReel());
		vb.setExpNom(vb.getCopyExpReelNom());
		status = false;
		statusCanModif = false;

		String result = "";
		Expdest expDest;
		System.out.println("AH  :  " + transaction.getTransactionId());
		System.out.println(vb.getDestinataireReel());
		List<TransactionDestination> transactionDestinations = new ArrayList<TransactionDestination>();
		transactionDestinations = appMgr
				.getDestinationByIdTransaction(transaction.getTransactionId());
		// List<Transaction> listTransaction =
		// appMgr.getTransactionByIdDossier(transaction
		// .getDossier().getDossierId());
		// !vb.getPerson().isBoc()
		// && listTransaction.size() != 1
		try {
			System.out.println("courrier ++"
					+ vb.getCourrier().getCourrierCircuit());
			if ((vb.getCourrier().getCourrierCircuit()
					.equalsIgnoreCase("workflow"))
					|| vb.getCourrier().getCourrierEtatCloture() == 1) {
				status = true;

				if (vb.getCourrier().getCourrierEtatCloture() == 1) {
					setMessage(messageSource.getMessage(
							"cantModifyCourrierCloturer", new Object[] {},
							lm.createLocal()));
				} else {
					setMessage(messageSource.getMessage(
							"cantModifyCourrierWorkflow", new Object[] {},
							lm.createLocal()));
				}

			} 
			else {
				
				System.out.println("transaction +++"
						+ transaction.getIdUtilisateur());
			
				if (transaction.getIdUtilisateur() != vb.getPerson().getId()) {
				
					 if(!vb.getPerson().isBoc()){
							// Vous n'avez pas le droit de modifier ce courrier.vous
							// n'étes pas son Editeur.
							setMessage(messageSource.getMessage("cannotModifyMail",
									new Object[] {}, lm.createLocal()));
							status = true;
					 }else{
						 status=false;
						 vb.setModeEnveloppe(true);
					 }
				} else {
					
					

					if (!transaction.getTransactionDateConsultation().equals(
							null)
							&& !transactionDestinations.get(0)
									.getTransactionDestDateConsultation()
									.equals(null)) {

						setMessage(messageSource.getMessage(
								"cantModifyCourrier", new Object[] {},
								lm.createLocal()));
						status = true;

					} else {

						System.out.println("transactionDestinations +++"
								+ transactionDestinations.isEmpty());
						for (TransactionDestination transactionDestination : transactionDestinations) {
							expDest = new Expdest();
							expDest = appMgr.getListExpDestByIdExpDest(
									transactionDestination.getId()
											.getIdExpDest()).get(0);
							System.out.println("expdest ++" + expDest);
							if (expDest.getTypeExpDest().equals(
									"Interne-Person")) {
								result = result
										+ ldapOperation.getCnById(
												ldapOperation.CONTEXT_USER,
												"uid",
												expDest.getIdExpDestLdap())
										+ " / ";
							} else if (expDest.getTypeExpDest().equals(
									"Interne-Unité")) {
								result = result
										+ ldapOperation.getCnById(
												ldapOperation.CONTEXT_UNIT,
												"departmentNumber",
												expDest.getIdExpDestLdap())
										+ " / ";
							} else if (expDest.getTypeExpDest().equals(
									"Externe")) {
								if (expDest.getExpdestexterne()
										.getTypeutilisateur()
										.getTypeUtilisateurLibelle()
										.equals("PP")) {
									result = result
											+ expDest.getExpdestexterne()
													.getExpDestExterneNom()
											+ " "
											+ expDest.getExpdestexterne()
													.getExpDestExternePrenom()
											+ " (PP)" + " / ";
								} else {
									result = result
											+ expDest.getExpdestexterne()
													.getExpDestExterneNom()
											+ " (PM)" + " / ";
								}
							}
							// #!transactionDestination.getTransactionDestTypeIntervenant().equals("boc_1")"
							// ajouté pour donner l'exception au courrier
							// d'arrivé
							// qui sont envoyé automatiquement au nom du Bureau
							// d'ordre en premier lieu

							// if
							// (!transactionDestination.getTransactionDestTypeIntervenant().equals("boc_1")
							// && transactionDestination
							// .getTransactionDestDateConsultation() != null) {
							// status = true;
							// setMessage(messageSource.getMessage(
							// "confirmModifyMail", new Object[] {},
							// lm.createLocal()));
							// break;
							// }
						}
						if (transaction.getIdUtilisateur() == vb.getPerson()
								.getId() && !status) {
							if (!result.equals("")) {
								int lastIndex = result.lastIndexOf("/");
								result = result.substring(0, lastIndex);
								vb.setDestNom(result);
							}
							if (vb.getPerson().isBoc()) {
								vb.setExpNom(vb.getCopyExpNom());
								vb.setDestNom(vb.getDestinataireReel());
								// vb.setExpNom(vb.getCourDossConsulterInformations()
								// .getCourrierExpediteur());
							}

							System.out
									.println(vb.getDestNom()
											+ "::::::::::::::::::::::"
											+ vb.getExpNom());
							System.out.println(vb.getCopyExpNom()
									+ "::::::::::::::::::::::"
									+ vb.getDestinataireReel());
						}
					}
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
			System.out.println(e.toString());
		}
	}

	public void classement() {
		statusClassement = false;
		statusNonClasse = false;
		selectedItemArmoire = "";
		selectedItemEtages = "";
		if (courrier.getEtages() == null) {
			setMessage(messageSource.getMessage("ClassementCourrierNonFait",
					new Object[] {}, lm.createLocal()));
			statusNonClasse = true;
		} else {
			// Etages etages = new Etages();
			// Armoire armoire = new Armoire();
			int refEtage = courrier.getEtages().getIdetages();
			etages = appMgr.listEtagesById(refEtage).get(0);
			vb.setEtages(etages);
			int refArmoire = etages.getArmoire().getIdarmoire();
			armoire = appMgr.listArmoireById(refArmoire).get(0);
			vb.setArmoire(armoire);
			setMessage(messageSource.getMessage("ClassementCourrierFait",
					new Object[] {}, lm.createLocal()));
			String ar = messageSource.getMessage("Armoire", new Object[] {},
					lm.createLocal());
			String et = messageSource.getMessage("Etages", new Object[] {},
					lm.createLocal());

			messageInfoCourrierClassement = ar + " : "
					+ armoire.getArmoireLibelle() + " => " + et + " : "
					+ etages.getEtagesLibelle();
			statusClassement = true;
		}
	}

	public void updateClassement() {

		selectedItemArmoire = armoire.getIdarmoire().toString();
		listEtages = appMgr.listEtagesByIdArmoire(Integer
				.valueOf(selectedItemArmoire));
		selectedItemEtages = etages.getIdetages().toString();
		showUpdateClassement = true;
	}

	public void validateUpdateClassement() {
		statusClasseSucces = false;
		statusClasseErreur = false;

		if (selectedItemArmoire != "" && selectedItemEtages != "") {
			try {
				courrier.setCourrierDateClassement(new Date());
				appMgr.update(courrier);
				/******************** Changement etat Etages && Armoires ***********************/
				// decrementation de nombre de dossier de l'ancienne etage
				etages.setEtagesNombreDossiers(etages.getEtagesNombreDossiers() - 1);
				appMgr.update(etages);
				// incrementation de nombre de dossier de la nouvelle etage
				// int refEtage = courrier.getEtages().getIdetages();
				Etages et = appMgr.listEtagesById(
						Integer.valueOf(selectedItemEtages)).get(0);
				int nbDossier = et.getEtagesNombreDossiers();
				nbDossier++;
				et.setEtagesNombreDossiers(nbDossier);
				appMgr.update(et);

			} catch (Exception e) {
				e.printStackTrace();
			}
			setMessage(messageSource.getMessage(
					"changerClassementCourrierSucces", new Object[] {},
					lm.createLocal()));
			statusClasseSucces = true;
		} else {
			setMessage(messageSource.getMessage(
					"changerClassementCourrierErreur", new Object[] {},
					lm.createLocal()));
			statusClasseErreur = true;
		}
	}

	public void getConfirmDeclassement() {
		setMessage(messageSource.getMessage("declassementConfirmation",
				new Object[] {}, lm.createLocal()));
	}

	public void deleteClassement() {
		try {
			courrier.setEtages(null);
			appMgr.update(courrier);
			// decrementation de nombre de dossier de l'ancienne etage
			etages.setEtagesNombreDossiers(etages.getEtagesNombreDossiers() - 1);
			appMgr.update(etages);
			setMessage(messageSource.getMessage("declassementCourrierSucces",
					new Object[] {}, lm.createLocal()));
		} catch (Exception e) {
			setMessage(messageSource.getMessage("declassementCourrierErreur",
					new Object[] {}, lm.createLocal()));
			e.printStackTrace();
		}
	}

	// fonction de selection des armoire
	public List<SelectItem> getSelectItemsArmoire() {
		String libelle;
		List<SelectItem> selectItemsArmoire = new ArrayList<SelectItem>();
		selectItemsArmoire.add(new SelectItem(""));
		for (int j = 0; j <= listArmoire.size() - 1; j++) {
			Integer idArmoire = listArmoire.get(j).getIdarmoire();
			if (vb.getLocale().equals("ar")) {
				libelle = listArmoire.get(j).getArmoireLibelleAr();
			} else {
				libelle = listArmoire.get(j).getArmoireLibelle();
			}
			// selectItemsArmoire.add(new SelectItem(listArmoire.get(j)
			// .getArmoireLibelle()));
			selectItemsArmoire.add(new SelectItem(String.valueOf(idArmoire),
					libelle));
		}
		return selectItemsArmoire;
	}

	public void chargerEtages(ActionEvent evt) {

		listEtages = new ArrayList<Etages>();
		listEtages = appMgr.listEtagesByIdArmoire(Integer
				.valueOf(selectedItemArmoire));
		System.out.println("selectedItemArmoire : " + selectedItemArmoire);
		getSelectItemsEtages();
		System.out.println("@" + evt.getComponent().getId());
		if (evt.getComponent().getId().equals("suppUpdateChargeEtages")) {
			selectedItemEtages = "";
		}

	}

	public void chargerSelectedEtages(ActionEvent evt) {
		if (evt.getComponent().getId().equals("supportEtages")) {
			// EtageChanged = true;
			// setAncienEtages(etages);
		}
		Etages et = appMgr.listEtagesById(Integer.valueOf(selectedItemEtages))
				.get(0);
		courrier.setEtages(et);
	}

	public List<SelectItem> getSelectItemsEtages() {
		String libelle;
		List<SelectItem> selectItemsEtages = new ArrayList<SelectItem>();
		selectItemsEtages.add(new SelectItem(""));
		for (int j = 0; j <= listEtages.size() - 1; j++) {
			Integer idEtage = listEtages.get(j).getIdetages();
			if (vb.getLocale().equals("ar")) {
				libelle = listEtages.get(j).getEtagesLibelleAr();
			} else {
				libelle = listEtages.get(j).getEtagesLibelle();
			}
			selectItemsEtages.add(new SelectItem(String.valueOf(idEtage),
					libelle));
		}
		// The values are the keys passed to the selectItem property.
		// The labels are those what you see on the menu.
		return selectItemsEtages;

	}

	public void classementCourrier() {
		statusClasseSucces = false;
		statusClasseErreur = false;

		if (selectedItemArmoire != "" && selectedItemEtages != "") {
			try {

				courrier.setCourrierDateClassement(new Date());
				appMgr.update(courrier);
				/******************** Changement etat Etages && Armoires ***********************/
				// int refEtage = courrier.getEtages().getIdetages();
				Etages et = appMgr.listEtagesById(
						Integer.valueOf(selectedItemEtages)).get(0);
				int nbDossier = et.getEtagesNombreDossiers();
				nbDossier++;
				et.setEtagesNombreDossiers(nbDossier);
				appMgr.update(et);

			} catch (Exception e) {
				System.out.println("erreur mettre ajour courrier");
				e.printStackTrace();
			}
			setMessage(messageSource.getMessage("ClassementCourrierSucces",
					new Object[] {}, lm.createLocal()));
			statusClasseSucces = true;
		} else {
			setMessage(messageSource.getMessage("ClassementCourrierErreur",
					new Object[] {}, lm.createLocal()));
			statusClasseErreur = true;
		}

	}

	public void evenementChoixTransfert(ActionEvent evt) {
		if (reponse1.equals("Non")) {
			setSelect1(false);
		} else {
			setSelect1(true);
		}
	}

	public String accesAccuseReception() {
		String res = "NoPass";
		courrier = vb.getCourrier();
		statusAccuseReception = false;
		int r = transaction.getEtat().getEtatId();
		if (appMgr.listEtatByRef(r).get(0).getEtatId().equals(6)) {
			if (appMgr.accuseReceptionByIdCourrier(courrier.getIdCourrier())
					.size() == 0) {
				res = "passAjouter";
			} else {
				res = "passConsulter";
			}
		} /*
		 * else { setMessage(messageSource.getMessage(
		 * "AccuseReceptionVerificationTraitement", new Object[] {},
		 * lm.createLocal())); statusAccuseReception = true; }
		 */
		return res;
	}

	public String goToValidate() {
		return "fromCourrierDetails";
	}

	// *** AC: Fonction retour en arriere
	public String backwardPage() {
		vb.setOldPage(true);
		System.out.println("-----from-------- : " + from);
		if (from.equals("rechercheToCourrierDetails")) {
			System.out.println("---------recherche----------");
			return "rechercheToCourrierDetails";
		} else {
			System.out.println("---------liste----------");
			if (vb.getSelectedListCourrier().equals("CRjour")) {
				vb.setSelectedListCourrier("CRjour");
			} else if (vb.getSelectedListCourrier().equals("CRmois")) {
				vb.setSelectedListCourrier("CRmois");
			} else {
				vb.setSelectedListCourrier("CRannee");
			}
			return "courrierDetailsToListeCourrier";
		}
	}

	// --------------------------------------------------------------------------------------------------------------------------------
	// ----------------------------------------------------------------------MM--------------------------------------------------------
	// --------------------------------------------------------------------------------------------------------------------------------
	// -----Cest une methode pour reactiver un courrier
	// -------------------------------------------------------------------------------

	public void cloturerCourrier() throws Exception {
		Courrier courrierClot = new Courrier();
		courrierClot = vb.getCourrier();
		courrierClot.setCourrierEtatCloture(1);
		appMgr.update(courrierClot);
		LogClass logClass = new LogClass();
		logClass.addTrack("Cloture d'un courrier",
				"Evénement de log de cloture d'un courrier "
						+ vb.getCourrier().getIdCourrier() + "-"
						+ vb.getCourrier().getCourrierReferenceCorrespondant(),
				vb.getPerson(), "INFO", appMgr);

	}

	// --------------------------------------------------------------------------------------------------------------------------------
	// ----------------------------------------------------------------------MM--------------------------------------------------------
	// --------------------------------------------------------------------------------------------------------------------------------
	// -----Cest une methode pour cloturer un
	// courrier---------------------------------------------------------------------------------

	public void reactiverCourrier() throws Exception {
		Courrier courrierClot = new Courrier();
		courrierClot = vb.getCourrier();
		courrierClot.setCourrierEtatCloture(0);
		appMgr.update(courrierClot);
		LogClass logClass = new LogClass();
		logClass.addTrack("Réactivation d'un courrier",
				"Evénement de log de réactivation d'un courrier "
						+ vb.getCourrier().getIdCourrier() + "-"
						+ vb.getCourrier().getCourrierObjet(), vb.getPerson(),
				"INFO", appMgr);
	}

	// MM
	// Methode pour la copie d'un courrier
	//
	public void copierCourrier() {
		courrier = new Courrier();

		Dossier dossier = new Dossier();
		Typedossier typedossier = new Typedossier();
		Transaction nouvelleTransaction = new Transaction();
		Etat etat = new Etat();
		TransactionDestinationId id;
		TransactionDestination trDest;
		Expdest expdest;
		Typetransaction typetransaction;
		Transaction copyNouvelleTransaction;
		TransactionDestinationReelle transactionDestinationReelle;
		id = new TransactionDestinationId();
		try {

			// C*
			Variables passageCourrierArriveAuDG = appMgr.listVariablesById(13)
					.get(0);
			// C*

			courrier.setCourrierDateReception(vb.getCourrier()
					.getCourrierDateReception());
			courrier.setCourrierDateReceptionReelle(vb.getCourrier()
					.getCourrierDateReceptionReelle());
			courrier.setNature(vb.getCourrier().getNature()); // **
			courrier.setTransmission(vb.getCourrier().getTransmission());
			courrier.setConfidentialite(vb.getCourrier().getConfidentialite());
			courrier.setUrgence(vb.getCourrier().getUrgence());
			courrier.setCourrierNecessiteReponse(vb.getCourrier()
					.getCourrierNecessiteReponse());
			courrier.setCourrierDateSysteme(new Date());
			courrier.setCourrierSupprime(true);
			courrier.setCourrierCircuit("Libre");
			courrier.setCourrierObjet(vb.getCourrier().getCourrierObjet());
			courrier.setKeywords(vb.getCourrier().getKeywords());
			courrier.setCourrierflagArchive(0);
			courrier.setCourrierReferenceCorrespondant(vb.getCourrier()
					.getCourrierReferenceCorrespondant());
			courrier.setCourrierCommentaire(vb.getCourrier()
					.getCourrierCommentaire());
			courrier.setCourrierOldDateOper(vb.getCourrier()
					.getCourrierOldDateOper());
			courrier.setCourrierCommentaireAr(vb.getCourrier()
					.getCourrierObjetAr());
			courrier.setCourrierDateArchivage(vb.getCourrier()
					.getCourrierDateArchivage());
			courrier.setCourrierDateClassement(vb.getCourrier()
					.getCourrierDateClassement());
			courrier.setCourrierOldNum(vb.getCourrier().getCourrierOldNum());
			courrier.setCourrierType(vb.getCourrier().getCourrierType());
			courrier.setCourrierTypeOrdre(vb.getCourrier()
					.getCourrierTypeOrdre());

			// -----------------------------------------------------------------------------------------------------------------------------
			// MM : Dossier début
			// ==========================================================================================================
			/**** Ajout Dossier *******/

			// dossier.setDossierDateCreation(new Date());
			// dossier.setDossierDescription(courrier.getCourrierCommentaire());
			// dossier.setDossierIntitule("Courrier_" +
			// courrier.getCourrierReferenceCorrespondant());
			// dossier.setDossierSupprime(true);
			// typedossier = appMgr.getTypeDossierById(1).get(0);
			// dossier.setTypedossier(typedossier);
			// appMgr.insert(dossier);

			// MM:Fin Insersion dans la table Dossier

			// vb.setDossier(dossier);
			// MM : Dossier fin
			// ============================================================================================================
			// -----------------------------------------------------------------------------------------------------------------------------

			courrier.setCourrierOldDateOper(2016);
			// courrier.setIdCourrier(null);
			// courrier.setIdCourrier(new
			// Integer(vb.getCourrier().getIdCourrier()+5));
			// courrier.setIdCourrier(vb.getCourrier().getIdCourrier()+3);
			// MM: Fin insersion Courrier

			dossier.setConfidentialite(vb.getCourrier().getConfidentialite());
			dossier.setDossierDateCreation(new Date());
			dossier.setDossierDescription(vb.getCourrier()
					.getCourrierCommentaire());
			dossier.setDossierIntitule("Courrier_"
					+ vb.getCourrier().getCourrierReferenceCorrespondant());
			dossier.setDossierSupprime(true);
			typedossier = appMgr.getTypeDossierById(1).get(0);
			dossier.setTypedossier(typedossier);
			appMgr.insert(dossier);
			vb.setDossier(dossier);
			// MM: Fin insersion Courrier
			appMgr.insert(courrier);
			// ansien courrier
			CourrierDossier courrierDoss = appMgr
					.getCourrierDossierByIdCourrier(
							vb.getCourrier().getIdCourrier()).get(0);
			int refdossier = courrierDoss.getId().getDossierId();
			List<Transaction> transactionList = new ArrayList<Transaction>();
			transactionList = appMgr.getTransactionByIdDossier(refdossier);
			Transaction transaction = new Transaction();
			transaction.setDossier(dossier);

			// copy courrier
			CourrierDossierId courrierDossierId = new CourrierDossierId();
			CourrierDossier courrierDossier = new CourrierDossier();
			courrierDossierId.setDossierId(dossier.getDossierId());
			courrierDossierId.setIdCourrier(courrier.getIdCourrier());
			courrierDossier.setId(courrierDossierId);
			// MM: insersion dans la table CourrierDossier.

			appMgr.insert(courrierDossier);
			// zone 2

			List<TransactionDestinationReelle> transactDestReel = appMgr
					.listTransactionDestinationReelByDossierID(vb.getCourrier()
							.getIdCourrier());
			TransactionDestinationReelle transactDestReelOreginal = new TransactionDestinationReelle();
			TransactionDestinationReelle transactDestReelCopy;

			if (transactDestReel.size() > 0) {
				transactDestReelOreginal = transactDestReel.get(0);
				transactDestReelCopy = new TransactionDestinationReelle();
				transactDestReelCopy
						.setTransactionDestinationReelleDateReception(transactDestReelOreginal
								.getTransactionDestinationReelleDateReception());
				transactDestReelCopy
						.setTransactionDestinationReelleDateTraitement(transactDestReelOreginal
								.getTransactionDestinationReelleDateTraitement());
				transactDestReelCopy
						.setTransactionDestinationReelleIdDestinataire(transactDestReelOreginal
								.getTransactionDestinationReelleIdDestinataire());
				transactDestReelCopy
						.setTransactionDestinationReelleTypeDestinataire(transactDestReelOreginal
								.getTransactionDestinationReelleTypeDestinataire());
				appMgr.insert(transactDestReelCopy);

			}

			// fin

			expdest = new Expdest();
			List<Expdest> expdestListTest = new ArrayList<Expdest>();
			List<TransactionDestination> listTransactionDestination = new ArrayList<TransactionDestination>();
			for (Transaction transaction2 : transactionList) {
				int refExped = transaction2.getExpdest().getIdExpDest();
				int refTransacation = transaction2.getTransactionId();
				expdestListTest.addAll(appMgr
						.getListExpDestByIdExpDest(refExped));
				transaction.setExpdest(expdestListTest.get(0));
				listTransactionDestination
						.addAll(appMgr
								.getListTransactionDestinationByIdTransaction(refTransacation));
			}
			for (Expdest e : expdestListTest) {
				Transaction t = new Transaction();
				t = appMgr.getListTransactionByIdExpDest(e.getIdExpDest()).get(
						0);
				appMgr.insert(e);
				t.setExpdest(e);
				t.setDossier(dossier);
				appMgr.insert(t);
				id.setIdTransaction(t.getTransactionId());
			}
			expdestListTest = new ArrayList<Expdest>();
			for (TransactionDestination transactionDestination : listTransactionDestination) {
				int refExped = transactionDestination.getId().getIdExpDest();
				expdestListTest.addAll(appMgr
						.getListExpDestByIdExpDest(refExped));
			}
			appMgr.insert(transaction);
			for (Expdest e : expdestListTest) {
				trDest = new TransactionDestination();
				trDest = appMgr.getListTransactionDestinationByIdExpDest(
						e.getIdExpDest()).get(0);
				appMgr.insert(e);
				id.setIdExpDest(e.getIdExpDest());
				trDest.setId(id);
				appMgr.insert(trDest);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public void copierCourrier12() throws Exception {
		Courrier courrierAnsien = new Courrier();
		Courrier courrierNouv = new Courrier();
		courrierAnsien = vb.getCourrier();
		courrierNouv = vb.getCourrier();
		courrierNouv.setCourrierReferenceCorrespondant(vb.getCourrier()
				.getCourrierReferenceCorrespondant());
		Dossier dossier = new Dossier();
		Typedossier typedossier = new Typedossier();
		Transaction nouvelleTransaction = new Transaction();
		Etat etat = new Etat();
		TransactionDestinationId id;
		id = new TransactionDestinationId();
		TransactionDestination trDest;
		Expdest expdest;
		Typetransaction typetransaction;
		Transaction copyNouvelleTransaction;
		TransactionDestinationReelle transactionDestinationReelle;
		try {
			Variables passageCourrierArriveAuDG = appMgr.listVariablesById(13)
					.get(0);
			dossier.setConfidentialite(courrierAnsien.getConfidentialite());
			dossier.setDossierDateCreation(new Date());
			dossier.setDossierDescription(courrierAnsien
					.getCourrierCommentaire());
			dossier.setDossierIntitule("Courrier_"
					+ courrierAnsien.getCourrierReferenceCorrespondant());
			dossier.setDossierSupprime(true);
			typedossier = appMgr.getTypeDossierById(1).get(0);
			dossier.setTypedossier(typedossier);
			appMgr.insert(dossier);
			vb.setDossier(dossier);
			// MM: Fin insersion Courrier
			vb.setCourrier(courrierNouv);
			// ansien courrier
			CourrierDossier courrierDoss = appMgr
					.getCourrierDossierByIdCourrier(
							courrierAnsien.getIdCourrier()).get(0);
			int refdossier = courrierDoss.getId().getDossierId();
			List<Transaction> transactionList = new ArrayList<Transaction>();
			transactionList = appMgr.getTransactionByIdDossier(refdossier);
			// copy courrier
			CourrierDossierId courrierDossierId = new CourrierDossierId();
			CourrierDossier courrierDossier = new CourrierDossier();
			courrierDossierId.setDossierId(dossier.getDossierId());
			courrierDossierId.setIdCourrier(courrierNouv.getIdCourrier());
			courrierDossier.setId(courrierDossierId);
			// MM: insersion dans la table CourrierDossier.
			appMgr.insert(courrierDossier);
			expdest = new Expdest();
			List<Expdest> expdestListTest = new ArrayList<Expdest>();
			List<TransactionDestination> listTransactionDestination = new ArrayList<TransactionDestination>();
			for (Transaction transaction2 : transactionList) {
				int refExped = transaction2.getExpdest().getIdExpDest();
				int refTransacation = transaction2.getTransactionId();
				expdestListTest.addAll(appMgr
						.getListExpDestByIdExpDest(refExped));
				listTransactionDestination
						.addAll(appMgr
								.getListTransactionDestinationByIdTransaction(refTransacation));
			}
			for (Expdest e : expdestListTest) {
				Transaction t = new Transaction();
				t = appMgr.getListTransactionByIdExpDest(e.getIdExpDest()).get(
						0);
				appMgr.insert(e);
				t.setExpdest(e);
				t.setDossier(dossier);
				appMgr.insert(t);
				id.setIdTransaction(t.getTransactionId());
			}
			expdestListTest = new ArrayList<Expdest>();
			for (TransactionDestination transactionDestination : listTransactionDestination) {
				int refExped = transactionDestination.getId().getIdExpDest();
				expdestListTest.addAll(appMgr
						.getListExpDestByIdExpDest(refExped));
			}
			for (Expdest e : expdestListTest) {
				trDest = new TransactionDestination();
				trDest = appMgr.getListTransactionDestinationByIdExpDest(
						e.getIdExpDest()).get(0);
				appMgr.insert(e);
				id.setIdExpDest(e.getIdExpDest());
				trDest.setId(id);
				appMgr.insert(trDest);
			}
		} catch (Exception e) {

		}
		//
		// CourrierDossier courrierDossier =
		// appMgr.getCourrierDossierByIdCourrier(vb.getCourrier().getIdCourrier()).get(0);
		//
		// int refdossier = courrierDossier.getId().getDossierId();
		// List<Transaction> transactionList = new ArrayList<Transaction>();
		// /*********************** transaction By dossier
		// ***********************/
		// transactionList = appMgr.getTransactionByIdDossier(refdossier);
		// System.out.println("taille transaction Liste" +
		// transactionList.size());
		// /*********************** transaction dest Reel By dossier
		// ***********************/
		// List<TransactionDestinationReelle> transactDestReel44 =
		// appMgr.listTransactionDestinationReelByDossierID(vb.getCourrier().getIdCourrier());
		// List<TransactionDestinationReelle> transactDestReel = new
		// ArrayList<TransactionDestinationReelle>();
		// if (transactDestReel44.size() > 0) {
		//
		// for (TransactionDestinationReelle tt : transactDestReel44) {
		// if (transactDestReel.size() == 0) {
		// transactDestReel.add(tt);
		// }
		// }
		// }
		//
		// else {
		// TransactionDestinationReelle tr = new TransactionDestinationReelle();
		// tr.setTransactionDestinationReelleTypeDestinataire("");
		// transactDestReel.add(tr);
		// }
		//
		//
		// List<Expdest> expdestListTest = new ArrayList<Expdest>();
		// List<TransactionDestination> listTransactionDestination = new
		// ArrayList<TransactionDestination>();
		// for (Transaction transaction2 : transactionList) {
		// int refExped = transaction2.getExpdest().getIdExpDest();
		// int refTransacation = transaction2.getTransactionId();
		// expdestListTest.addAll(appMgr.getListExpDestByIdExpDest(refExped));
		// listTransactionDestination.addAll(appMgr.getListTransactionDestinationByIdTransaction(refTransacation));
		// }
		// for (TransactionDestination transactionDestination :
		// listTransactionDestination) {
		// int refExped = transactionDestination.getId().getIdExpDest();
		// expdestListTest.addAll(appMgr.getListExpDestByIdExpDest(refExped));
		// }
		// List<Expdestexterne> expdestExt2 = new ArrayList<Expdestexterne>();
		// for (Expdest expd : expdestListTest) {
		// List<Expdestexterne> expdestExt = new ArrayList<Expdestexterne>();
		// if (expd.getExpdestexterne() != null) {
		// expdestExt2.addAll(appMgr.getExpediteurById(expd.getExpdestexterne().getIdExpDestExterne()));
		// }
		// }
		// System.out.println("size : " + expdestExt2.size());
		// if (expdestExt2.size() == 0) {
		// Expdestexterne exp = new Expdestexterne();
		// exp.setExpDestExterneAdresse("");
		// expdestExt2.add(exp);
		// }
	}

	public void ouvrirfile() throws Exception {
		File pdfFile = new File(
				"C:/Users/Marouane Maalaoui/Desktop/cc rendu/cc rendu/7.pdf");
		Desktop.getDesktop().open(pdfFile);
	}

	// ** KHA
	public void executeJour() {
		Courrier courrierr = new Courrier();

		ci = vb.getCourDossConsulterInformations();
		if (ci.getCourrier() == null) {
			ci.setCourrier(appMgr.getCourrierByIdCourrier(ci.getCourrierID())
					.get(0));
		}
		courrierr = ci.getCourrier();
		Etat etat = new Etat();
		etat = appMgr.listEtatByRef(ci.getEtatID()).get(0);
		if (etat.getEtatLibelle().equals("Faire suivre")) {
			String circuitCourrier = courrierr.getCourrierCircuit();
			if (circuitCourrier.equals("workflow")) {
				System.out.println("**Faire suivre-workflow");
				int refNature = courrierr.getNature().getNatureId();
				int etatActuelle = courrierr.getCourrierEtatActuelleWorkflow();
				Workflow workflow = new Workflow();
				int nb = appMgr.listWorkflowByIdNature(refNature).size();
				if (nb != 0) {
					/********* WorkFlow Request ********/
					workflow = appMgr.listWorkflowByIdNature(refNature).get(0);
					String processId = workflow.getWorkflowTitre();
					int idLastNode = workflow.getWorkflowIdLastNode();
					if (etatActuelle == idLastNode) {
						if (ci.getTransaction() == null) {
							ci.setTransaction(appMgr
									.getListTransactionByIdTransaction(
											ci.getTransactionID()).get(0));
						}

						validerFinProcessus(ci.getTransaction());

					} else {
						if (ci.getTransaction() == null) {
							ci.setTransaction(appMgr
									.getListTransactionByIdTransaction(
											ci.getTransactionID()).get(0));
						}

						TraitementEtapeSuivant etapeSuivant = new TraitementEtapeSuivant();
						JBPMAccessProcessBean jbpmAccessProcessBean = new JBPMAccessProcessBean();
						etapeSuivant = jbpmAccessProcessBean
								.startProcessTraitementCourrier(processId,
										etatActuelle);
						List<TransactionDestination> listTrDest = appMgr
								.getListTransactionDestinationByIdTransaction(ci
										.getTransactionID());
						validateWorkflow(etapeSuivant, ci.getTransaction(),
								listTrDest.get(listTrDest.size() - 1),
								courrierr);
					}
				}
			}
		} else {
			// C*
			for (Transaction transaction : ci.getCourrierAllTransactions()) {
				System.out.println("####" + transaction.getTransactionId());
				TransactionDestinationReelle destinataionReel = appMgr
						.getTransactionDestinationReelById(transaction
								.getTransactionDestinationReelle()
								.getTransactionDestinationReelleId());
				if (destinataionReel != null) {

					if (!destinataionReel
							.getTransactionDestinationReelleTypeDestinataire()
							.equals("Externe")) {

						// c'est un courrier d'arrivé depuis l'exterieur (PP ou
						// PM) vers l'interne, donc il faut l'executer pour que
						// le courrier s'entre dans le circuit de validation
						// hierarchique
						// ( validation hierarchique depend de la variable de
						// parametrage
						// #passage_hierarchique_courrier_arrive_apres_directeur_generale#
						validateTransactionToDestinationReel(transaction,
								destinataionReel);
						// if(destinataionReel.getTransactionDestinationReelleResponsableReponse()
						// != null){
						// validateTransactionToDestinationReel(selectedCourrier.getTransaction(),
						// destinataionReel);
						// }else{
						// setShowResponsableResponse(true);
						// }
					} else {
						// c'est un courrier d'un personne ou unité interne vers
						// l'exterieur, juste il faut l'executer pour ajouter la
						// transaction de depart d'un courrier
						executeOneTransaction(ci);
						break;
					}
				}
			}
			// C*
			// executeOneTransaction(courrierInformations); // commenté a cause
			// de // C*
		}

	}

	public void validerFinProcessus(Transaction transaction) {
		statV1 = false;
		statV2 = false;
		try {
			Etat etat = new Etat();
			etat = appMgr.listEtatByLibelle("Validé").get(0);
			transaction.setEtat(etat);
			transaction.setTransactionDateReponse(new Date());
			appMgr.update(transaction);
			statV1 = true;
		} catch (Exception e) {
			statV2 = true;
			e.printStackTrace();
		}
	}

	private void executeOneTransaction(CourrierInformations courrierInformations) {
		if (courrierInformations.getCourrier() == null) {
			courrierInformations.setCourrier(appMgr.getCourrierByIdCourrier(
					courrierInformations.getCourrierID()).get(0));
		}
		if (courrierInformations.getTransaction() == null) {
			courrierInformations.setTransaction(appMgr
					.getListTransactionByIdTransaction(
							courrierInformations.getTransactionID()).get(0));
		}
		statV1 = false;
		statV2 = false;
		Transaction transaction = new Transaction();
		transaction = courrierInformations.getTransaction();
		Transaction newTransaction;
		Transaction transactionExpediteur;
		List<Transaction> listTransaction = new ArrayList<Transaction>();
		try {
			if (transaction.getTransactionDestinationReelle() != null) {
				newTransaction = new Transaction();
				transactionExpediteur = new Transaction();

				transactionExpediteur = appMgr
						.getTransactionExpediteurByIdTransactionDestinationReelle(
								transaction.getTransactionDestinationReelle()
										.getTransactionDestinationReelleId(), 1)
						.get(0);

				listTransaction = appMgr
						.getTransactionByIdTransactionDestinationReelle(transaction
								.getTransactionDestinationReelle()
								.getTransactionDestinationReelleId());
				Etat etat = new Etat();
				Expdest expdest = new Expdest();
				Typetransaction typetransaction = new Typetransaction();
				TransactionDestinationId id = new TransactionDestinationId();
				TransactionDestination trDest = new TransactionDestination();
				etat = appMgr.listEtatByLibelle("Traité").get(0);
				newTransaction.setExpdest(transactionExpediteur.getExpdest());
				newTransaction.setIdUtilisateur(vb.getPerson().getId());
				newTransaction.setTransactionDateTransaction(new Date());
				typetransaction = appMgr.getTypeTransactionByLibelle("Envoi")
						.get(0);
				newTransaction.setTypetransaction(typetransaction);
				newTransaction.setEtat(etat);
				newTransaction.setTransactionSupprimer(true);
				int newOrderNumber = transaction.getTransactionOrdre();
				newOrderNumber++;
				newTransaction.setTransactionOrdre(newOrderNumber);
				newTransaction.setDossier(transaction.getDossier());
				newTransaction.setTransactionDestinationReelle(transaction
						.getTransactionDestinationReelle());
				newTransaction.setTransactionFirst(transaction
						.getTransactionId());
				appMgr.insert(newTransaction);

				expdest = new Expdest();
				Expdestexterne expDestExterne = new Expdestexterne();
				TransactionDestinationReelle transactionDestinationReelle = appMgr
						.getTransactionDestinationReelById(transaction
								.getTransactionDestinationReelle()
								.getTransactionDestinationReelleId());
				expdest.setTypeExpDest("Externe");
				expDestExterne = appMgr
						.getExpediteurById(
								transactionDestinationReelle
										.getTransactionDestinationReelleIdDestinataire())
						.get(0);
				expdest.setExpdestexterne(expDestExterne);
				transactionDestinationReelle
						.setTransactionDestinationReelleDateTraitement(new Date());
				appMgr.update(transactionDestinationReelle);
				appMgr.insert(expdest);

				id = new TransactionDestinationId();
				trDest = new TransactionDestination();
				id.setIdTransaction(newTransaction.getTransactionId());
				id.setIdExpDest(expdest.getIdExpDest());
				trDest.setTransactionDestTypeIntervenant(type);
				trDest.setId(id);
				appMgr.insert(trDest);

				List<TransactionAnnotation> transactionAnnotation = new ArrayList<TransactionAnnotation>();
				transactionAnnotation = appMgr
						.getAnnotationByIdTransaction(transaction
								.getTransactionId());
				TransactionAnnotationId cI = new TransactionAnnotationId();
				TransactionAnnotation cA = new TransactionAnnotation();
				for (TransactionAnnotation tr : transactionAnnotation) {
					cI.setIdAnnotation(tr.getId().getIdAnnotation());
					cI.setIdTransaction(newTransaction.getTransactionId());
					cA.setId(cI);
					appMgr.insert(cA);
					cA = new TransactionAnnotation();
					cI = new TransactionAnnotationId();
				}

				for (Transaction transaction1 : listTransaction) {
					transaction1.setEtat(etat);
					appMgr.update(transaction1);
				}
				Calendar cal = Calendar.getInstance();
				cal.setTime(courrierInformations
						.getCourrierDateReceptionEnvoi());
				int year = cal.get(Calendar.YEAR);
				// mettre a jour la reference pour indiquer qu'il est un
				// courrier de depart
				Integer lastId = appMgr.getCourrierLastIdByTypeOrdreAndAnnee(
						"D", year);
				courrierInformations.getCourrier().setCourrierType("D");
				if (lastId == null || lastId == 0) {
					courrierInformations.getCourrier().setCourrierTypeOrdre(1);
				} else {
					courrierInformations.getCourrier().setCourrierTypeOrdre(
							lastId + 1);
				}
				courrierInformations.getCourrier()
						.setCourrierReferenceCorrespondant(
								courrierInformations.getCourrier()
										.getCourrierType()
										+ courrierInformations.getCourrier()
												.getCourrierTypeOrdre());
				// courrierInformations.getCourrier().setCourrierReferenceCorrespondant("D"+courrierInformations.getCourrier().getIdCourrier());
				appMgr.update(courrierInformations.getCourrier());
				Dossier dossier = appMgr.getDossierByIdDossier(
						transaction.getDossier().getDossierId()).get(0);
				dossier.setDossierIntitule("Courrier_"
						+ courrierInformations.getCourrier().getIdCourrier());
				appMgr.update(dossier);
				// mettre a jour la reference pour indiquer qu'il est un
				// courrier de depart
				// mettre a jour la colonne #courrierDateReponseSysteme# pour
				// indiquer que le courrier originale a été repondu
				// trouvez le courrier original
				List<Lienscourriers> liensCourriers = appMgr
						.getListCourrierLiensByIdCourrier(courrierInformations
								.getCourrier().getIdCourrier());
				if (!liensCourriers.isEmpty()) {
					List<Integer> listIdLien = new ArrayList<Integer>();
					for (Lienscourriers liens : liensCourriers) {
						listIdLien.add(liens.getLiensCourrier());
					}
					CourrierLiens courrierLiens = appMgr
							.getCourrierLienByListIdLienAndTypeLien(listIdLien,
									1);
					if (courrierLiens != null) {
						Courrier courrierOriginal = appMgr
								.getCourrierByIdCourrier(
										courrierLiens.getId().getIdCourrier())
								.get(0);
						courrierOriginal
								.setCourrierDateReponseSysteme(new Date());
						appMgr.update(courrierOriginal);
					}
				}
				// trouver le courrier original
				// mettre a jour la colonne #courrierDateReponseSysteme# pour
				// indiquer que le courrier originale a été repondu
				// inséré la date de traitement
				TransactionDestination trDestination = courrierInformations
						.getTransactionDestination();
				System.out.println("trDestination"
						+ trDestination.getTransactionDestIdIntervenant());
				if (trDestination.getTransactionDestDateTransfert() == null) {
					trDestination.setTransactionDestDateTransfert(new Date());
					appMgr.update(trDestination);
				}
				// inséré la date de traitement
				// inséré la date de consultation
				if (trDestination.getTransactionDestDateConsultation() == null) {
					trDestination
							.setTransactionDestDateConsultation(new Date());
					appMgr.update(trDestination);
				}
				// inséré la date de consultation
			}
			statV1 = true;

		} catch (Exception e) {
			statV2 = true;
			e.printStackTrace();
		}
	}

	public void validateWorkflow(TraitementEtapeSuivant etapeSuivant,
			Transaction transaction,
			TransactionDestination transactionDestination, Courrier courrier) {
		;
		statV1 = false;
		statV2 = false;
		try {
			if (transactionDestination != null) {
				if (transactionDestination.getTransactionDestDateConsultation() == null) {
					transactionDestination
							.setTransactionDestDateConsultation(new Date());
				}
			}
			transactionDestination.setTransactionDestDateTransfert(new Date());
			appMgr.update(transactionDestination);
			Transaction newTransaction = new Transaction();
			Etat etat = new Etat();
			Expdest expdest = new Expdest();
			Typetransaction typetransaction = new Typetransaction();
			TransactionDestinationId id = new TransactionDestinationId();
			TransactionDestination trDest = new TransactionDestination();
			etat = appMgr.listEtatByLibelle("Validé").get(0);
			transaction.setEtat(etat);
			transaction.setTransactionDateReponse(new Date());
			appMgr.update(transaction);
			/**************************************************************/
			expdest.setTypeExpDest("Interne-Person");
			expdest.setIdExpDestLdap(vb.getPerson().getId());
			appMgr.insert(expdest);
			if (vb.getPerson().isResponsable()) {
				newTransaction.setTransactionTypeIntervenant("sub_"
						+ String.valueOf(vb.getPerson().getId()));
			} else if (vb.getPerson().isSecretary()) {
				newTransaction.setTransactionTypeIntervenant("secretary_"
						+ String.valueOf(vb.getPerson().getId()));
			}
			newTransaction.setExpdest(expdest);
			newTransaction.setIdUtilisateur(vb.getPerson().getId());
			newTransaction.setTransactionDateTransaction(new Date());
			typetransaction = appMgr.getTypeTransactionByLibelle("Envoi")
					.get(0);
			newTransaction.setTypetransaction(typetransaction);
			// Faire suivre
			etat = appMgr.listEtatByLibelle("Faire suivre").get(0);
			newTransaction.setEtat(etat);
			newTransaction.setTransactionSupprimer(true);
			int newOrderNumber = transaction.getTransactionOrdre();
			newOrderNumber++;
			newTransaction.setTransactionOrdre(newOrderNumber);
			newTransaction.setDossier(transaction.getDossier());
			// C * // dupliquer le destinataire reel du workflow au niveau de la
			// nouvelle transaction
			newTransaction.setTransactionDestinationReelle(transaction
					.getTransactionDestinationReelle());
			// C * // dupliquer le destinataire reel du workflow au niveau de la
			// nouvelle transaction
			newTransaction.setTransactionFirst(transaction.getTransactionId());
			appMgr.insert(newTransaction);

			/********** Workflow **********/

			long resultat = etapeSuivant.getIdNodeSuivante();
			int etatActuelle = (int) resultat;
			courrier.setCourrierEtatActuelleWorkflow(etatActuelle);
			appMgr.update(courrier);

			String result = "";
			Unit u = new Unit();
			String unite = etapeSuivant.getEtatSuivant();
			// Unite
			u = ldapOperation.getUnitByShortName(unite);

			/*
			 * Person pr = new Person(); // Person pr = u.getResponsibleUnit();
			 * // Envoi Responsable result = result + pr.getCn() + " / ";
			 * expdest = new Expdest(); id = new TransactionDestinationId();
			 * trDest = new TransactionDestination();
			 * expdest.setTypeExpDest("Interne-Person");
			 * expdest.setIdExpDestLdap(pr.getId()); appMgr.insert(expdest);
			 * id.setIdTransaction(newTransaction.getTransactionId());
			 * id.setIdExpDest(expdest.getIdExpDest()); trDest.setId(id);
			 * trDest.setTransactionDestTypeIntervenant("sub_" +
			 * String.valueOf(pr.getId()));
			 * trDest.setTransactionDestDateReponse(
			 * transactionDestination.getTransactionDestDateReponse());
			 * appMgr.insert(trDest);
			 */
			// Envoi Unité
			result = result + u.getNameUnit() + " / ";
			expdest = new Expdest();
			id = new TransactionDestinationId();
			trDest = new TransactionDestination();
			if (unite.equals("BOC")) {
				if (vb.getPerson().getAssociatedDirection() != null) {
					getIdBocByUnit(vb.getPerson().getAssociatedDirection());
				} else {
					idBoc = vb.getPerson().getAssociatedBOC().getIdBOC();
				}
				expdest.setTypeExpDest("Interne-Boc");
				expdest.setIdExpDestLdap(idBoc);
				appMgr.insert(expdest);
				id.setIdTransaction(newTransaction.getTransactionId());
				id.setIdExpDest(expdest.getIdExpDest());
				trDest.setId(id);
				trDest.setTransactionDestTypeIntervenant("boc_" + idBoc);
			} else {
				expdest.setTypeExpDest("Interne-Unité");
				expdest.setIdExpDestLdap(u.getIdUnit());
				appMgr.insert(expdest);
				id.setIdTransaction(newTransaction.getTransactionId());
				id.setIdExpDest(expdest.getIdExpDest());
				trDest.setId(id);
				trDest.setTransactionDestTypeIntervenant("unit_"
						+ String.valueOf(u.getIdUnit()));
			}
			appMgr.insert(trDest);

			TransactionAnnotationId cI = new TransactionAnnotationId();
			TransactionAnnotation cA = new TransactionAnnotation();
			List<TransactionAnnotation> transactionAnnotation = new ArrayList<TransactionAnnotation>();
			transactionAnnotation = appMgr
					.getAnnotationByIdTransaction(transaction
							.getTransactionId());
			for (TransactionAnnotation tr : transactionAnnotation) {
				cI.setIdAnnotation(tr.getId().getIdAnnotation());
				cI.setIdTransaction(newTransaction.getTransactionId());
				cA.setId(cI);
				appMgr.insert(cA);
				cA = new TransactionAnnotation();
				cI = new TransactionAnnotationId();
			}
			statV1 = true;

		} catch (Exception e) {
			statV2 = true;
			e.printStackTrace();
		}
	}

	private void getIdBocByUnit(Unit unit) {
		if (unit.getAssociatedUnit() != null) {
			getIdBocByUnit(unit.getAssociatedUnit());
		} else {
			idBoc = unit.getAssociatedBOC().getIdBOC();
		}
	}

	private void validateTransactionToDestinationReel(Transaction transaction,
			TransactionDestinationReelle trDestinationReelle) {
		try {
			Variables variable = appMgr.listVariablesById(12).get(0);
			Variables variableToDGEN = appMgr.listVariablesById(13).get(0);
			boolean passageDGEN = false;
			Person generalDirector = null;
			Unit generalDirectorUnit = null;
			if (variableToDGEN.getVaraiablesValeur().equals("Oui")) {
				passageDGEN = true;
				// special pour le BOC dans le cas ou la vlalidation ne passe
				// pas par le DGEN pour la fonction #findIdDestinataireSuivant#
				generalDirectorUnit = ldapOperation.getUnitById(1);
				generalDirector = generalDirectorUnit.getResponsibleUnit();
				// special pour le BOC dans le cas ou la vlalidation ne passe
				// pas par le DGEN pour la fonction #findIdDestinataireSuivant#
			} else {
				// special pour le BOC dans le cas ou la vlalidation ne passe
				// pas par le DGEN pour la fonction #findIdDestinataireSuivant#
				generalDirectorUnit = ldapOperation.getUnitById(1);
				generalDirector = generalDirectorUnit.getResponsibleUnit();
				// special pour le BOC dans le cas ou la vlalidation ne passe
				// pas par le DGEN pour la fonction #findIdDestinataireSuivant#
			}
			statV1 = false;
			statV2 = false;
			TransactionDestination transactionDestination = ci
					.getTransactionDestination();
			if (variable.getVaraiablesValeur().equals("Oui")) {
				Integer idDestinataireReel = trDestinationReelle
						.getTransactionDestinationReelleIdDestinataire();
				if (trDestinationReelle
						.getTransactionDestinationReelleTypeDestinataire()
						.equals("Interne-Person")) {
					if (idDestinataireReel != generalDirector.getId()) {
						Integer idDestinataireSuivant = findIdDestinataireSuivant(
								idDestinataireReel, vb.getPerson().getId(),
								true, passageDGEN, generalDirector);
						System.out.println(idDestinataireSuivant);
						if (idDestinataireSuivant.equals(idDestinataireReel)) {
							validateTransactionDestinataireFinale(transaction,
									transactionDestination);
						} else {
							validateTransactionDestinataireSuivant(transaction,
									transactionDestination,
									idDestinataireSuivant);
						}
					} else {
						validateTransactionDestinataireFinale(transaction,
								transactionDestination);
					}
				} else if (trDestinationReelle
						.getTransactionDestinationReelleTypeDestinataire()
						.equals("Interne-Unité")) {
					if (idDestinataireReel != generalDirectorUnit.getIdUnit()) {
						Integer idDestinataireSuivant = findIdDestinataireSuivant(
								idDestinataireReel, vb.getPerson().getId(),
								false, passageDGEN, generalDirector);
						System.out.println(idDestinataireSuivant);
						Unit unit = ldapOperation
								.getUnitById(idDestinataireReel);
						if (idDestinataireSuivant.equals(unit
								.getResponsibleUnit().getId())) {
							validateTransactionDestinataireFinale(transaction,
									transactionDestination);
						} else {
							validateTransactionDestinataireSuivant(transaction,
									transactionDestination,
									idDestinataireSuivant);
						}
					} else {
						validateTransactionDestinataireFinale(transaction,
								transactionDestination);
					}
				}
			} else {
				validateTransactionDestinataireFinale(transaction,
						transactionDestination);
			}
			try {
				if (transactionDestination != null) {
					if (transactionDestination
							.getTransactionDestDateTransfert() == null) {
						transactionDestination
								.setTransactionDestDateTransfert(new Date());
					}
					if (transactionDestination
							.getTransactionDestDateConsultation() == null) {
						transactionDestination
								.setTransactionDestDateConsultation(new Date());
					}
					appMgr.update(transactionDestination);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			statV1 = true;
		} catch (Exception e) {
			statV2 = true;
			e.printStackTrace();
		}
	}

	private void validateTransactionDestinataireSuivant(
			Transaction transaction,
			TransactionDestination transactionDestination,
			Integer idDestinataireSuivant) throws Exception {
		List<TransactionAnnotation> transactionAnnotation = appMgr
				.getAnnotationByIdTransaction(transaction.getTransactionId());
		Transaction newTransaction = new Transaction();
		Etat etat = new Etat();
		Expdest expdest = new Expdest();
		Typetransaction typetransaction = new Typetransaction();
		TransactionDestinationId id = new TransactionDestinationId();
		TransactionDestination trDest = new TransactionDestination();
		etat = appMgr.listEtatByRef(4).get(0);
		transaction.setEtat(etat);
		if (transaction.getTransactionOrdre() == null) {
			transaction.setTransactionOrdre(1);
		}
		appMgr.update(transaction);
		expdest.setTypeExpDest("Interne-Person");
		expdest.setIdExpDestLdap(vb.getPerson().getId());
		appMgr.insert(expdest);
		newTransaction.setTransactionTypeIntervenant("sub_"
				+ vb.getPerson().getId());
		// newTransaction.setTransactionCommentaire(commentaireTransaction);
		newTransaction.setExpdest(expdest);
		newTransaction.setIdUtilisateur(vb.getPerson().getId());
		newTransaction.setTransactionDateTransaction(new Date());
		typetransaction = appMgr.getTypeTransactionByLibelle("Envoi").get(0);
		newTransaction.setTypetransaction(typetransaction);
		etat = appMgr.listEtatByRef(2).get(0);
		newTransaction.setEtat(etat);
		newTransaction.setTransactionSupprimer(true);
		int ordreTransaction = transaction.getTransactionOrdre();
		newTransaction.setTransactionOrdre(++ordreTransaction);
		newTransaction.setDossier(transaction.getDossier());
		newTransaction.setTransactionDestinationReelle(transaction
				.getTransactionDestinationReelle());
		newTransaction.setTransactionFirst(transaction.getTransactionId());
		appMgr.insert(newTransaction);
		Expdest expdestSuivant = new Expdest();

		expdestSuivant.setTypeExpDest("Interne-Person");
		expdestSuivant.setIdExpDestLdap(idDestinataireSuivant);
		appMgr.insert(expdestSuivant);
		String type = "sub_" + idDestinataireSuivant;
		id = new TransactionDestinationId();
		trDest = new TransactionDestination();
		id.setIdTransaction(newTransaction.getTransactionId());
		id.setIdExpDest(expdestSuivant.getIdExpDest());
		trDest.setTransactionDestTypeIntervenant(type);
		trDest.setId(id);
		trDest.setTransactionDestDateReponse(transactionDestination
				.getTransactionDestDateReponse());
		appMgr.insert(trDest);
		TransactionAnnotationId cI = new TransactionAnnotationId();
		TransactionAnnotation cA = new TransactionAnnotation();
		for (TransactionAnnotation tr : transactionAnnotation) {
			cI.setIdAnnotation(tr.getId().getIdAnnotation());
			cI.setIdTransaction(newTransaction.getTransactionId());
			cA.setId(cI);
			appMgr.insert(cA);
			cA = new TransactionAnnotation();
			cI = new TransactionAnnotationId();
		}
	}

	private void validateTransactionDestinataireFinale(Transaction transaction,
			TransactionDestination transactionDestination) throws Exception {
		List<TransactionAnnotation> transactionAnnotation = appMgr
				.getAnnotationByIdTransaction(transaction.getTransactionId());
		Transaction newTransaction = new Transaction();
		Etat etat = new Etat();
		Expdest expdest = new Expdest();
		Typetransaction typetransaction = new Typetransaction();
		TransactionDestinationId id = new TransactionDestinationId();
		TransactionDestination trDest = new TransactionDestination();
		etat = appMgr.listEtatByRef(6).get(0);
		transaction.setEtat(etat);
		// transaction.setTransactionDateReponse(new Date());
		if (transaction.getTransactionOrdre() == null) {
			transaction.setTransactionOrdre(1);
		}
		vb.setTransaction(transaction);
		appMgr.update(transaction);
		expdest.setTypeExpDest("Interne-Person");
		expdest.setIdExpDestLdap(vb.getPerson().getId());
		appMgr.insert(expdest);
		// newTransaction.setTransactionTypeIntervenant("sub_"
		// + vb.getPerson().getId());
		newTransaction.setExpdest(expdest);
		newTransaction.setIdUtilisateur(vb.getPerson().getId());
		newTransaction.setTransactionDateTransaction(new Date());
		typetransaction = appMgr.getTypeTransactionByLibelle("Envoi").get(0);
		newTransaction.setTypetransaction(typetransaction);
		etat = appMgr.listEtatByRef(6).get(0);
		newTransaction.setEtat(etat);
		newTransaction.setTransactionSupprimer(true);
		int ordreTransaction = transaction.getTransactionOrdre();
		newTransaction.setTransactionOrdre(++ordreTransaction);
		newTransaction.setDossier(transaction.getDossier());
		newTransaction.setTransactionDestinationReelle(transaction
				.getTransactionDestinationReelle());
		newTransaction.setTransactionFirst(transaction.getTransactionId());
		appMgr.insert(newTransaction);
		String type = "";
		Expdest expdestFinal = new Expdest();
		if (transaction.getTransactionDestinationReelle()
				.getTransactionDestinationReelleTypeDestinataire()
				.equals("Interne-Person")) {
			Person personDestinationReel = ldapOperation
					.getPersonalisedUserById(transaction
							.getTransactionDestinationReelle()
							.getTransactionDestinationReelleIdDestinataire());
			expdestFinal.setTypeExpDest("Interne-Person");
			expdestFinal.setIdExpDestLdap(transaction
					.getTransactionDestinationReelle()
					.getTransactionDestinationReelleIdDestinataire());
			if (personDestinationReel.isResponsable()) {
				type = "sub_" + personDestinationReel.getId();
			} else if (personDestinationReel.isSecretary()) {
				type = "secretary_" + personDestinationReel.getId();
			} else {
				type = "agent_" + personDestinationReel.getId();
			}
		} else if (transaction.getTransactionDestinationReelle()
				.getTransactionDestinationReelleTypeDestinataire()
				.equals("Interne-Unité")) {
			// Unit unit =
			// ldapOperation.getUnitById(transaction.getTransactionDestinationReelle().getTransactionDestinationReelleIdDestinataire());
			expdestFinal.setTypeExpDest("Interne-Unité");
			expdestFinal.setIdExpDestLdap(transaction
					.getTransactionDestinationReelle()
					.getTransactionDestinationReelleIdDestinataire());
			type = "unit_"
					+ transaction.getTransactionDestinationReelle()
							.getTransactionDestinationReelleIdDestinataire();
		}
		appMgr.insert(expdestFinal);
		id = new TransactionDestinationId();
		trDest = new TransactionDestination();
		id.setIdTransaction(newTransaction.getTransactionId());
		id.setIdExpDest(expdestFinal.getIdExpDest());
		trDest.setTransactionDestTypeIntervenant(type);
		trDest.setId(id);
		trDest.setTransactionDestDateReponse(transactionDestination
				.getTransactionDestDateReponse());
		appMgr.insert(trDest);
		TransactionAnnotationId cI = new TransactionAnnotationId();
		TransactionAnnotation cA = new TransactionAnnotation();
		for (TransactionAnnotation tr : transactionAnnotation) {
			cI.setIdAnnotation(tr.getId().getIdAnnotation());
			cI.setIdTransaction(newTransaction.getTransactionId());
			cA.setId(cI);
			appMgr.insert(cA);
			cA = new TransactionAnnotation();
			cI = new TransactionAnnotationId();
		}
	}

	private Integer findIdDestinataireSuivant(Integer idDestinataireReel,
			Integer idConnectedPerson, Boolean destinataireReelIsPerson,
			boolean passageDGEN, Person generalDirector) {

		Person person;
		if (destinataireReelIsPerson) {
			person = ldapOperation.getPersonalisedUserById(idDestinataireReel);
		} else {
			Unit unit = ldapOperation.getUnitById(idDestinataireReel);
			person = ldapOperation.getPersonalisedUserById(unit
					.getResponsibleUnit().getId());
		}
		System.out.println(person.getAssociatedDirection().getShortNameUnit());
		Unit superiorUnit;
		if (person.isResponsable()) {
			superiorUnit = person.getAssociatedDirection().getAssociatedUnit();
		} else {
			superiorUnit = person.getAssociatedDirection();
		}
		if (passageDGEN) {
			if (superiorUnit.getResponsibleUnit().getId() != idConnectedPerson) {
				System.out.println(superiorUnit.getResponsibleUnit().getId());
				return findIdDestinataireSuivant(superiorUnit
						.getResponsibleUnit().getId(), idConnectedPerson, true,
						passageDGEN, generalDirector);
			}
		} else {
			// if (person.getId() != generalDirector.getId()) {
			if (superiorUnit.getResponsibleUnit().getId() != idConnectedPerson
					&& superiorUnit.getResponsibleUnit().getId() != generalDirector
							.getId()) {
				System.out.println(superiorUnit.getResponsibleUnit().getId());
				return findIdDestinataireSuivant(superiorUnit
						.getResponsibleUnit().getId(), idConnectedPerson, true,
						passageDGEN, generalDirector);
			}
			// }else{
			// }
		}
		return person.getId();
	}

	// ************Getter & Setter********************

	public VariableGlobale getVb() {
		return vb;
	}

	public void setVb(VariableGlobale vb) {
		this.vb = vb;
	}

	public Export getExport() {
		return export;
	}

	public void setExport(Export export) {
		this.export = export;
	}

	public Courrier getCourrier() {
		return courrier;
	}

	public void setCourrier(Courrier courrier) {
		this.courrier = courrier;
	}

	public boolean isStatus() {
		return status;
	}

	public void setStatus(boolean status) {
		this.status = status;
	}

	public Date getDate() {
		return date;
	}

	public void setDate(Date date) {
		this.date = date;
	}

	public Transaction getTransaction() {
		return transaction;
	}

	public void setTransaction(Transaction transaction) {
		this.transaction = transaction;
	}

	public TransactionDestination getTransactionDestination() {
		return transactionDestination;
	}

	public void setTransactionDestination(
			TransactionDestination transactionDestination) {
		this.transactionDestination = transactionDestination;
	}

	public TransactionAnnotation getTransactionAnnotation() {
		return transactionAnnotation;
	}

	public void setTransactionAnnotation(
			TransactionAnnotation transactionAnnotation) {
		this.transactionAnnotation = transactionAnnotation;
	}

	public Nature getNature() {
		return nature;
	}

	public void setNature(Nature nature) {
		this.nature = nature;
	}

	public Transmission getTransmission() {
		return transmission;
	}

	public void setTransmission(Transmission transmission) {
		this.transmission = transmission;
	}

	public Confidentialite getConfidentialite() {
		return confidentialite;
	}

	public void setConfidentialite(Confidentialite confidentialite) {
		this.confidentialite = confidentialite;
	}

	public Expdestexterne getExpdestexterne() {
		return expdestexterne;
	}

	public void setExpdestexterne(Expdestexterne expdestexterne) {
		this.expdestexterne = expdestexterne;
	}

	public List<Expdestexterne> getListDestExpdestexternes() {
		return listDestExpdestexternes;
	}

	public void setListDestExpdestexternes(
			List<Expdestexterne> listDestExpdestexternes) {
		this.listDestExpdestexternes = listDestExpdestexternes;
	}

	public LanguageManagerBean getLm() {
		return lm;
	}

	public void setLm(LanguageManagerBean lm) {
		this.lm = lm;
	}

	public MessageSource getMessageSource() {
		return messageSource;
	}

	public void setMessageSource(MessageSource messageSource) {
		this.messageSource = messageSource;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public Urgence getUrgence() {
		return urgence;
	}

	public void setUrgence(Urgence urgence) {
		this.urgence = urgence;
	}

	public Date getDateReception() {
		return dateReception;
	}

	public void setDateReception(Date dateReception) {
		this.dateReception = dateReception;
	}

	public Date getDateReponse() {
		return dateReponse;
	}

	public void setDateReponse(Date dateReponse) {
		this.dateReponse = dateReponse;
	}

	public void setUtilisateur(Utilisateur utilisateur) {
		this.utilisateur = utilisateur;
	}

	public Utilisateur getUtilisateur() {
		return utilisateur;
	}

	public void setDossier(Dossier dossier) {
		this.dossier = dossier;
	}

	public Dossier getDossier() {
		return dossier;
	}

	public void setCourrierConsulterInformations(
			List<CourrierConsulterInformations> courrierConsulterInformations) {
		this.courrierConsulterInformations = courrierConsulterInformations;
	}

	public List<CourrierConsulterInformations> getCourrierConsulterInformations() {
		return courrierConsulterInformations;
	}

	public boolean isStatus1() {
		return status1;
	}

	public void setStatus1(boolean status1) {
		this.status1 = status1;
	}

	public boolean isStatus2() {
		return status2;
	}

	public void setStatus2(boolean status2) {
		this.status2 = status2;
	}

	public boolean isStatus3() {
		return status3;
	}

	public void setStatus3(boolean status3) {
		this.status3 = status3;
	}

	public void setSelectedItemsAnnotation(List<String> selectedItemsAnnotation) {
		this.selectedItemsAnnotation = selectedItemsAnnotation;
	}

	public List<String> getSelectedItemsAnnotation() {
		return selectedItemsAnnotation;
	}

	public void setDate1(Date date1) {
		this.date1 = date1;
	}

	public Date getDate1() {
		return date1;
	}

	public void setReponse1(String reponse1) {
		this.reponse1 = reponse1;
	}

	public String getReponse1() {
		return reponse1;
	}

	public void setSelect1(boolean select1) {
		this.select1 = select1;
	}

	public boolean isSelect1() {
		return select1;
	}

	public TransactionAnnotation getcA() {
		return cA;
	}

	public void setcA(TransactionAnnotation cA) {
		this.cA = cA;
	}

	public TransactionAnnotationId getcI() {
		return cI;
	}

	public void setcI(TransactionAnnotationId cI) {
		this.cI = cI;
	}

	public List<Annotation> getListAnnotations() {
		return listAnnotations;
	}

	public void setListAnnotations(List<Annotation> listAnnotations) {
		this.listAnnotations = listAnnotations;
	}

	public void setAnnotationResult(String annotationResult) {
		this.annotationResult = annotationResult;
	}

	public String getAnnotationResult() {
		return annotationResult;
	}

	public void setEtatTransaction(String etatTransaction) {
		this.etatTransaction = etatTransaction;
	}

	public String getEtatTransaction() {
		return etatTransaction;
	}

	public void setStatusClassement(boolean statusClassement) {
		this.statusClassement = statusClassement;
	}

	public boolean isStatusClassement() {
		return statusClassement;
	}

	public void setStatusNonClasse(boolean statusNonClasse) {
		this.statusNonClasse = statusNonClasse;
	}

	public boolean isStatusNonClasse() {
		return statusNonClasse;
	}

	public void setMessageInfoCourrierClassement(
			String messageInfoCourrierClassement) {
		this.messageInfoCourrierClassement = messageInfoCourrierClassement;
	}

	public String getMessageInfoCourrierClassement() {
		return messageInfoCourrierClassement;
	}

	public void setStatusClasseSucces(boolean statusClasseSucces) {
		this.statusClasseSucces = statusClasseSucces;
	}

	public boolean isStatusClasseSucces() {
		return statusClasseSucces;
	}

	public void setSelectedItemArmoire(String selectedItemArmoire) {
		this.selectedItemArmoire = selectedItemArmoire;
	}

	public String getSelectedItemArmoire() {
		System.out.println("getSelectedItemArmoire" + selectedItemArmoire);
		return selectedItemArmoire;
	}

	public void setSelectedItemEtages(String selectedItemEtages) {
		this.selectedItemEtages = selectedItemEtages;
	}

	public String getSelectedItemEtages() {
		System.out.println("getSelectedItemEtages" + selectedItemEtages);
		return selectedItemEtages;
	}

	public void setListArmoire(List<Armoire> listArmoire) {
		this.listArmoire = listArmoire;
	}

	public List<Armoire> getListArmoire() {
		return listArmoire;
	}

	public void setListEtages(List<Etages> listEtages) {
		this.listEtages = listEtages;
	}

	public List<Etages> getListEtages() {
		return listEtages;
	}

	public void setStatusClasseErreur(boolean statusClasseErreur) {
		this.statusClasseErreur = statusClasseErreur;
	}

	public boolean isStatusClasseErreur() {
		return statusClasseErreur;
	}

	public void setEtatDescription(boolean etatDescription) {
		this.etatDescription = etatDescription;
	}

	public boolean isEtatDescription() {
		return etatDescription;
	}

	public void setEtatEnvoyerAuxAutre(boolean etatEnvoyerAuxAutre) {
		this.etatEnvoyerAuxAutre = etatEnvoyerAuxAutre;
	}

	public boolean isEtatEnvoyerAuxAutre() {
		return etatEnvoyerAuxAutre;
	}

	public void setEtatDateReponse(boolean etatDateReponse) {
		this.etatDateReponse = etatDateReponse;
	}

	public boolean isEtatDateReponse() {
		return etatDateReponse;
	}

	public void setEtatDescriptionTransaction(boolean etatDescriptionTransaction) {
		this.etatDescriptionTransaction = etatDescriptionTransaction;
	}

	public boolean isEtatDescriptionTransaction() {
		return etatDescriptionTransaction;
	}

	public void setEtatkeywords(boolean etatkeywords) {
		this.etatkeywords = etatkeywords;
	}

	public boolean isEtatkeywords() {
		return etatkeywords;
	}

	public void setLienOutput(String lienOutput) {
		this.lienOutput = lienOutput;
	}

	public String getLienOutput() {
		return lienOutput;
	}

	public void setAccuseReception(boolean accuseReception) {
		this.accuseReception = accuseReception;
	}

	public boolean isAccuseReception() {
		return accuseReception;
	}

	public void setShowMonitoringButton(boolean showMonitoringButton) {
		this.showMonitoringButton = showMonitoringButton;
	}

	public boolean isShowMonitoringButton() {
		return showMonitoringButton;
	}

	public LdapOperation getLdapOperation() {
		return ldapOperation;
	}

	public void setLdapOperation(LdapOperation ldapOperation) {
		this.ldapOperation = ldapOperation;
	}

	public void setNotLinkedMail(boolean notLinkedMail) {
		this.notLinkedMail = notLinkedMail;
	}

	public boolean isNotLinkedMail() {
		return notLinkedMail;
	}

	public void setLinkedMail(boolean linkedMail) {
		this.linkedMail = linkedMail;
	}

	public boolean isLinkedMail() {
		return linkedMail;
	}

	public void setNbrCourrierLies(long nbrCourrierLies) {
		this.nbrCourrierLies = nbrCourrierLies;
	}

	public long getNbrCourrierLies() {
		return nbrCourrierLies;
	}

	public void setAffichageDocument(boolean affichageDocument) {
		this.affichageDocument = affichageDocument;
	}

	public boolean isAffichageDocument() {
		return affichageDocument;
	}

	public void setAffichageDetailsAccuse(boolean affichageDetailsAccuse) {
		this.affichageDetailsAccuse = affichageDetailsAccuse;
	}

	public boolean isAffichageDetailsAccuse() {
		return affichageDetailsAccuse;
	}

	public void setStatusAccuseReception(boolean statusAccuseReception) {
		this.statusAccuseReception = statusAccuseReception;
	}

	public boolean isStatusAccuseReception() {
		return statusAccuseReception;
	}

	public void setShowResponseButton(boolean showResponseButton) {
		this.showResponseButton = showResponseButton;
	}

	public boolean isShowResponseButton() {
		return showResponseButton;
	}

	public void setHideResponseButton(boolean hideResponseButton) {
		this.hideResponseButton = hideResponseButton;
	}

	public boolean isHideResponseButton() {
		return hideResponseButton;
	}

	public String getAlign() {
		return align;
	}

	public void setAlign(String align) {
		this.align = align;
	}

	public Etages getEtages() {
		return etages;
	}

	public void setEtages(Etages etages) {
		this.etages = etages;
	}

	public Armoire getArmoire() {
		return armoire;
	}

	public void setArmoire(Armoire armoire) {
		this.armoire = armoire;
	}

	public void setShowUpdateClassement(boolean showUpdateClassement) {
		this.showUpdateClassement = showUpdateClassement;
	}

	public boolean isShowUpdateClassement() {
		return showUpdateClassement;
	}

	public void setAncienEtages(Etages ancienEtages) {
		this.ancienEtages = ancienEtages;
	}

	public Etages getAncienEtages() {
		return ancienEtages;
	}

	public void setShowForValidate(boolean showForValidate) {
		this.showForValidate = showForValidate;
	}

	public boolean isShowForValidate() {
		return showForValidate;
	}

	public CourrierInformations getCi() {
		return ci;
	}

	public void setCi(CourrierInformations ci) {
		this.ci = ci;
	}

	public boolean isStatusCloturer() {
		return statusCloturer;
	}

	public void setStatusCloturer(boolean statusCloturer) {
		this.statusCloturer = statusCloturer;
	}

	public boolean isStatusActive() {
		return statusActive;
	}

	public void setStatusActive(boolean statusActive) {
		this.statusActive = statusActive;
	}

	public String getCodeUniqueCourrier() {
		return codeUniqueCourrier;
	}

	public void setCodeUniqueCourrier(String codeUniqueCourrier) {
		this.codeUniqueCourrier = codeUniqueCourrier;
	}

	public String getMessageModif() {
		return messageModif;
	}

	public void setMessageModif(String messageModif) {
		this.messageModif = messageModif;
	}

	public boolean isStatusCanModif() {
		return statusCanModif;
	}

	public void setStatusCanModif(boolean statusCanModif) {
		this.statusCanModif = statusCanModif;
	}

	public void setBoutonBordereau(String boutonBordereau) {
		this.boutonBordereau = boutonBordereau;
	}

	public String getBoutonBordereau() {
		return boutonBordereau;
	}

	public void setStatV2(boolean statV2) {
		this.statV2 = statV2;
	}

	public boolean isStatV2() {
		return statV2;
	}

	public void setStatV1(boolean statV1) {
		this.statV1 = statV1;
	}

	public boolean isStatV1() {
		return statV1;
	}

	public int getIdBoc() {
		return idBoc;
	}

	public void setIdBoc(int idBoc) {
		this.idBoc = idBoc;
	}

	public DataModel getListeDestinatairesDM() {
		return listeDestinatairesDM;
	}

	public void setListeDestinatairesDM(DataModel listeDestinatairesDM) {
		this.listeDestinatairesDM = listeDestinatairesDM;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public Boolean getEtatReceptionPhysique() {
		System.out.println("etatReceptionPhysique dans get "+etatReceptionPhysique);
		return etatReceptionPhysique;
	}

	public void setEtatReceptionPhysique(Boolean etatReceptionPhysique) {
		System.out.println("etatReceptionPhysique dans set "+etatReceptionPhysique);

		this.etatReceptionPhysique = etatReceptionPhysique;
	}

	public List<ListeDestinatairesModel> getDestinataireRepondre() {
		return destinataireRepondre;
	}

	public void setDestinataireRepondre(
			List<ListeDestinatairesModel> destinataireRepondre) {
		this.destinataireRepondre = destinataireRepondre;
	}

	public List<DonneeSupplementaireNature> getListDSN() {
		return listDSN;
	}

	public void setListDSN(List<DonneeSupplementaireNature> listDSN) {
		this.listDSN = listDSN;
	}

	public ComposantDynamique getComposantDynamique() {
		return composantDynamique;
	}

	public void setComposantDynamique(ComposantDynamique composantDynamique) {
		this.composantDynamique = composantDynamique;
	}

	public List<ComposantDynamique> getListCD() {
		return listCD;
	}

	public void setListCD(List<ComposantDynamique> listCD) {
		this.listCD = listCD;
	}

	public CourrierDonneeSupplementaire getCourrierDS() {
		return courrierDS;
	}

	public void setCourrierDS(CourrierDonneeSupplementaire courrierDS) {
		this.courrierDS = courrierDS;
	}

	public CourrierDonneeSupplementaire getCds() {
		return cds;
	}

	public void setCds(CourrierDonneeSupplementaire cds) {
		this.cds = cds;
	}

	public void setCategorieNature(NatureCategorie categorieNature) {
		this.categorieNature = categorieNature;
	}

	public NatureCategorie getCategorieNature() {
		return categorieNature;
	}

	public void setShowDonneSupp(boolean showDonneSupp) {
		this.showDonneSupp = showDonneSupp;
	}

	public boolean isShowDonneSupp() {
		return showDonneSupp;
	}

	public void setAffichageReceptionPhysique(boolean affichageReceptionPhysique) {
		this.affichageReceptionPhysique = affichageReceptionPhysique;
	}

	public boolean isAffichageReceptionPhysique() {
		return affichageReceptionPhysique;
	}

	public void setAffichePanelReceptionPhysique(
			Boolean affichePanelReceptionPhysique) {
		this.affichePanelReceptionPhysique = affichePanelReceptionPhysique;
	}

	public Boolean getAffichePanelReceptionPhysique() {
		return affichePanelReceptionPhysique;
	}
	
	public void setShowModificationButton(boolean showModificationButton) {
		this.showModificationButton = showModificationButton;
	}

	public boolean isShowModificationButton() {
		return showModificationButton;
	}

}