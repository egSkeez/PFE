package xtensus.gnl.entity;

// Generated 11 mai 2013 11:49:40 by Hibernate Tools 3.4.0.Beta1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import xtensus.entity.Entite;

/**
 * Xtelog generated by hbm2java
 */
@Entity
@Table(name = "xtelog")
public class Xtelog extends Entite implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 4535508600626644148L;
	private int logId;
	private Evenement evenement;
	private String logLibelle;
	private String logDescription;
	private Boolean logActivation;
	private Boolean logsuppression;
	private String logTemp;
	private Set<Trace> traces = new HashSet<Trace>(0);
	private Set<VariablesNotification> variablesNotifications = new HashSet<VariablesNotification>(
			0);
	private Set<Templatelog> templatelogs = new HashSet<Templatelog>(0);

	public Xtelog() {
	}

	public Xtelog(int logId) {
		this.logId = logId;
	}

	public Xtelog(Evenement evenement, String logLibelle,
			String logDescription, Boolean logActivation,
			Boolean logsuppression, String logTemp, Set<Trace> traces,
			Set<VariablesNotification> variablesNotifications,
			Set<Templatelog> templatelogs) {
		this.evenement = evenement;
		this.logLibelle = logLibelle;
		this.logDescription = logDescription;
		this.logActivation = logActivation;
		this.logsuppression = logsuppression;
		this.logTemp = logTemp;
		this.traces = traces;
		this.variablesNotifications = variablesNotifications;
		this.templatelogs = templatelogs;
	}

	@Id
	@Column(name = "logId", unique = true, nullable = false)
	public int getLogId() {
		return this.logId;
	}

	public void setLogId(int logId) {
		this.logId = logId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "evenementId")
	public Evenement getEvenement() {
		return this.evenement;
	}

	public void setEvenement(Evenement evenement) {
		this.evenement = evenement;
	}

	@Column(name = "logLibelle", length = 50)
	public String getLogLibelle() {
		return this.logLibelle;
	}

	public void setLogLibelle(String logLibelle) {
		this.logLibelle = logLibelle;
	}

	@Column(name = "logDescription", length = 65535)
	public String getLogDescription() {
		return this.logDescription;
	}

	public void setLogDescription(String logDescription) {
		this.logDescription = logDescription;
	}

	@Column(name = "logActivation")
	public Boolean getLogActivation() {
		return this.logActivation;
	}

	public void setLogActivation(Boolean logActivation) {
		this.logActivation = logActivation;
	}

	@Column(name = "logsuppression")
	public Boolean getLogsuppression() {
		return this.logsuppression;
	}

	public void setLogsuppression(Boolean logsuppression) {
		this.logsuppression = logsuppression;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "xtelog")
	public Set<Trace> getTraces() {
		return this.traces;
	}

	public void setTraces(Set<Trace> traces) {
		this.traces = traces;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "logvariable", catalog = "xtensusgnl", joinColumns = { @JoinColumn(name = "logId", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "variableId", nullable = false, updatable = false) })
	public Set<VariablesNotification> getVariables() {
		return this.variablesNotifications;
	}

	public void setVariables(Set<VariablesNotification> variablesNotifications) {
		this.variablesNotifications = variablesNotifications;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "xtelog")
	public Set<Templatelog> getTemplatelogs() {
		return this.templatelogs;
	}

	public void setTemplatelogs(Set<Templatelog> templatelogs) {
		this.templatelogs = templatelogs;
	}

	@Column(name = "logTemp", length = 65535)
	public String getLogTemp() {
		return logTemp;
	}

	public void setLogTemp(String logTemp) {
		this.logTemp = logTemp;
	}

}
