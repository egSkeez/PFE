package xtensus.beans.common.GBO;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import javax.servlet.ServletContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import xtensus.aop.LogClass;
import xtensus.beans.common.LanguageManagerBean;
import xtensus.beans.common.ListeDestinatairesModel;
import xtensus.beans.common.VariableGlobale;
import xtensus.beans.common.VariableGlobaleNotification;
import xtensus.beans.utils.ComposantDynamique;
import xtensus.beans.utils.Informations;
import xtensus.entity.Annotation;
import xtensus.entity.AoConsultation;
import xtensus.entity.Cheque;
import xtensus.entity.Confidentialite;
import xtensus.entity.Courrier;
import xtensus.entity.CourrierDonneeSupplementaire;
import xtensus.entity.DonneeSupplementaireNature;
import xtensus.entity.Dossier;
import xtensus.entity.Expdest;
import xtensus.entity.Expdestexterne;
import xtensus.entity.Nature;
import xtensus.entity.NatureCategorie;
import xtensus.entity.Pm;
import xtensus.entity.Pp;
import xtensus.entity.Transaction;
import xtensus.entity.TransactionAnnotation;
import xtensus.entity.TransactionAnnotationId;
import xtensus.entity.TransactionDestination;
import xtensus.entity.TransactionDestinationId;
import xtensus.entity.TransactionDestinationReelle;
import xtensus.entity.Transmission;
import xtensus.entity.Urgence;
import xtensus.entity.Variables;
import xtensus.ldap.business.LdapOperation;
import xtensus.ldap.model.BOC;
import xtensus.ldap.model.ItemSelected;
import xtensus.ldap.model.Person;
import xtensus.ldap.model.Unit;
import xtensus.services.ApplicationManager;
import xtensus.services.Export;

@Component
@Scope("request")
public class CourrierModificationBean {
	private String[] selectedAnnot;
	private ApplicationManager appMgr;
	private Export export;
	private Courrier courrier;
	private Dossier dossier;
	private Date date1;
	private Date dateReelle;
	@Autowired
	private VariableGlobale vb;
	@Autowired
	private LanguageManagerBean lm;
	@Autowired
	private MessageSource messageSource;
	private String message;
	private String selectedItemNature;
	private String selectedItemCategorie;
	private String selectedItemConf;
	private String selectedItemUg;
	private String selectedItemsTr;
	private boolean affichagePassageBO;
	private String passageParBO;
	private Transaction transaction;
	private Nature nature;
	private Transmission transmission;
	private Confidentialite confidentialite;
	private Urgence urgence;
	private List<String> selectedItemsAnnotation;
	private List<Nature> listNat;
	private boolean reponseBO;
	//[JS]
	private List<NatureCategorie> listNatCategorie;
	private List<Confidentialite> listCf;
	private List<Urgence> listUg;
	private List<Annotation> listAt;
	private List<Transmission> listTr;
	private String reponse1;
	private boolean select1 = false;
	private LdapOperation ldapOperation;
	private List<DonneeSupplementaireNature> listDSN;
	private Properties msg;
	private ComposantDynamique composantDynamique;
	private List<ComposantDynamique> listCD;
	private CourrierDonneeSupplementaire courrierDS;
	private CourrierDonneeSupplementaire cds;
	private String codeUniqueCourrier ;
	private List<Variables> var;
	private String cupSRV;
	private boolean afficheChampsSpecTansmission;
	private String selectedItemsTrAncien;
	private String selectedItemNatureAncien;
	private CourrierDonneeSupplementaire c;
	private String necessiteReceptionPhysique;
	private boolean affichageReceptionPhysique = true;
	private List<Expdestexterne> listExpdestExterne;
	///

	private String associatedUnit;
	private String associatedLabel;
	private String typeSender;
	ArrayList<SelectItem> selectItemsNat = new ArrayList<SelectItem>();
	private ArrayList<SelectItem> selectItemsNatCategorie = new ArrayList<SelectItem>();

	ArrayList<SelectItem> selectItemsTr = new ArrayList<SelectItem>();
	ArrayList<SelectItem> selectItemsConf = new ArrayList<SelectItem>();
	ArrayList<SelectItem> selectItemsUg = new ArrayList<SelectItem>();
	private String typeCourrier;
	private boolean showFacetUser;
	private boolean showFacetBoc;
	private boolean status;
	private boolean status1;
	private boolean disabledReceptionPhy;
	private boolean disabledPassageBO;
	private Informations info1, info2, info3, info4;
	private List<Informations> listInfo;
	private String typeNotification;
	private String chooseAnnotationType;
	private String otherAnnotation;
	@Autowired
	private VariableGlobaleNotification vbn;
	private boolean showTous;
	private String displayOther;
	private String displayPick;

	
	private List<ListeDestinatairesModel> destinataires;

	public List<ListeDestinatairesModel> getDestinataires() {
	//	destinataires = vb.getListeDestinataire();
		
		return destinataires;
	}

	public void setDestinataires(List<ListeDestinatairesModel> destinataires) {
		this.destinataires = destinataires;
	}
// KHA 
	private ListeDestinatairesModel listAnno;
	private List<DonneeSupplementaireNature> listDSNTransmission;
	private List<ComposantDynamique> listCDTransmission;
	private boolean showPanelAOC;
	
	/////////////KBS//////////
	private ListDataModel listCheques;
	private boolean showPanelCheque;
	private List<ChequeModel> listChequesTablo;
	private ArrayList<ChequeModel> listExpositionsTab2;
	private ArrayList<ChequeModel> listExpositionsTab3;
	private String numeroAoConsultation;
	private AoConsultation aoConsultation;
	private String heure1;
	private String heure3;
	private String heure2;
	private boolean passe;
	private boolean champDesabled;
	private boolean notExistAoConsultation;
	
	
	
	public CourrierModificationBean() {
	}

	@Autowired
	public CourrierModificationBean(
			@Qualifier("applicationManager") ApplicationManager appMgr) {
		this.appMgr = appMgr;
		courrier = new Courrier();
		dossier = new Dossier();
		listAt = new ArrayList<Annotation>();
		listNat = new ArrayList<Nature>();
		listNatCategorie=new ArrayList<NatureCategorie>();
		listTr = new ArrayList<Transmission>();
		listCf = new ArrayList<Confidentialite>();
		listUg = new ArrayList<Urgence>();
		transaction = new Transaction();
		nature = new Nature();
		transmission = new Transmission();
		confidentialite = new Confidentialite();
		urgence = new Urgence();
		date1 = new Date();
		dateReelle = new Date();
		selectedItemsAnnotation = new ArrayList<String>();

		listInfo = new ArrayList<Informations>();
		info1 = new Informations();
		info2 = new Informations();
		info3 = new Informations();
		//[JS]
		listDSN=new ArrayList<DonneeSupplementaireNature>();
		listCD=new ArrayList<ComposantDynamique>();
		courrierDS=new CourrierDonneeSupplementaire();
		cds=new CourrierDonneeSupplementaire();
		c = new CourrierDonneeSupplementaire();
		listExpdestExterne = new ArrayList<Expdestexterne>();
		///
		listCheques = new ListDataModel();
		listCDTransmission=new ArrayList<ComposantDynamique>();
		System.out
				.println("**************BeanInjecte CourrierModificationBean *********");
	}

	@PostConstruct
	public void Initialize() {
		
		try {
			vb.setNotAdd(true);
			System.out.println("Dans inititiliaze : "+vb.getListComposantDynamiqueTransmission() );
			//disabledReceptionPhy=false;
			disabledPassageBO=false;
			// *** Log && Notification ***//
			vbn.setEvenementNomVariableNotif("event_modif_courrier_notif");
			vbn.setNotificationNomVariablAdmin("modif_courrier_admin");
			vbn.setNotificationNomVariableDestinataire("modif_courrier_dest");
			vbn.setEvenementNomVariableLog("event_modif_courrier_log");
			vbn.setNomExpediteur("Administrator");
			vbn.setMailExpediteur("xtexte2@gmail.com");
			// ***Fin Log & notification***//
			vb.setNotAdd(false);
			vb.setNotAddCourrier(false);
			ldapOperation = new LdapOperation();			
			transaction = vb.getTransaction();
			courrier = vb.getCourrier();  
			date1 = courrier.getCourrierDateReception();
			dateReelle = courrier.getCourrierDateReceptionReelle();
			dossier = appMgr.getDossierByIdDossier(vb.getReferenceDossier()).get(0);
			nature = vb.getNature();
			Integer natureID = nature.getNatureId();

			Expdest cupExpDest;
			cupExpDest = new Expdest();
			cupExpDest = appMgr.getListExpDestByIdExpDest(
					transaction.getExpdest().getIdExpDest()).get(0);
			if (cupExpDest!=null && cupExpDest.getTypeExpDest().equals("Interne-Person")&& cupExpDest.getIdExpDestLdap() != null) {
				System.out.println("++cupExpDest+++ : " + cupExpDest.getIdExpDestLdap().intValue());
				int MonID;
				int j = 0;
				boolean findPerson = false;

				do {
					MonID = vb.getCopyLdapListUser().get(j).getId();
					System.out.println("++MONID+++ : " + MonID);
					if (MonID == cupExpDest.getIdExpDestLdap().intValue()) {
						findPerson = true;
						vb.setPersonCodeUnique(vb.getCopyLdapListUser().get(j));
					} else {
						j++;
					}
				} while (!findPerson && j < vb.getCopyLdapListUser().size());
			
				if (vb.getPersonCodeUnique()!= null && vb.getPersonCodeUnique().getAssociatedDirection() != null) {
					cupSRV = vb.getPersonCodeUnique().getAssociatedDirection()
							.getShortNameUnit();
				
				}
				if (vb.getPersonCodeUnique()!= null && vb.getPersonCodeUnique().getAssociatedBOC() != null) {
					cupSRV = vb.getPersonCodeUnique().getAssociatedBOC()
							.getNameBOC();
				}
				if (vb.getPersonCodeUnique()!= null && vb.getPersonCodeUnique().getAssociatedService() != null) {
					cupSRV = vb.getPersonCodeUnique().getAssociatedService()
							.getNameService();
					cupSRV = vb.getPersonCodeUnique().getAssociatedService()
							.getAssociatedDirection().getNameDirection();
				}

			} 
			else if (cupExpDest!=null && cupExpDest.getTypeExpDest().equals("Interne-Unité")&& cupExpDest.getIdExpDestLdap() != null) {
				int MonID;
				int j = 0;
				boolean findunite = false;

				do {
					MonID = vb.getCopyLdapListUnit().get(j).getIdUnit();
					if (MonID == cupExpDest.getIdExpDestLdap().intValue()) {
						findunite = true;
						cupSRV=vb.getCopyLdapListUnit().get(j).getShortNameUnit();
						break;
					} else {
						j++;
					}
				} while (!findunite && j < vb.getCopyLdapListUnit().size());
				
			}
			
			else {
				cupSRV = "EXT";
				vb.setCourrierRefOriginal(true);
			}

			codeUniqueCourrier=vb.getCodeUniqueCourrier();
			
			 
			 //Load fichier Properties
			ExternalContext jsfContext = FacesContext.getCurrentInstance().getExternalContext();
			ServletContext servletContext = (ServletContext) jsfContext.getContext();
			String webContentRoot = servletContext.getRealPath("/");
			String pathConfigFile = webContentRoot	
			+ File.separator + "WEB-INF" +File.separator+ "classes"+File.separator+ "messages_"+vb.getLocalFr()+".properties";
			msg= new Properties();
			try {
				msg.load(new FileInputStream(pathConfigFile));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}		
			
		
			confidentialite = vb.getConfidentialite();
			urgence = vb.getUrgence();
			transmission = vb.getTransmission();
			listAt = appMgr.getList(Annotation.class);
			if(courrier.getCourrierAvecDocumentPhysique()==true){
				necessiteReceptionPhysique="Oui";
			}else{
				necessiteReceptionPhysique="Non";

			}
	
		
			listTr = appMgr.getList(Transmission.class);
			listUg = appMgr.getList(Urgence.class);
			listCf = appMgr.getList(Confidentialite.class);
			System.out.println("");
		  if(vb.getFlagModif()==1){
			selectedItemNature = nature.getNatureId().toString();
			
			selectedItemCategorie=nature.getNatureCategorie().getNatureCategorieId().toString();
			//[JS] 2020-06-08
			vb.setSelectedItemCategorie(selectedItemCategorie);
			//==============
			vb.setSelectedItemNature(selectedItemNature);
			listExpositionsTab2=new ArrayList<ChequeModel>();
			List<Cheque> listeCheques = appMgr.getListeChequeByCourrier(courrier.getIdCourrier());
			ChequeModel fdm = new ChequeModel();
			int niveau=1;
			for ( Cheque cheque : listeCheques){
				fdm = new ChequeModel();
				fdm.setBoutonPlus(false);
				fdm.setBoutonSupprimer(true);
				fdm.setChequeBanque(cheque.getChequeBanque());
				fdm.setChequeBarre(cheque.getChequeBarre());
				fdm.setChequeBeneficiaire(cheque.getChequeBeneficiaire());
				fdm.setChequeDate(cheque.getChequeDate());
				fdm.setChequeMontant(cheque.getChequeMontant());
				fdm.setChequeNum(cheque.getChequeNum());
				fdm.setOperation(niveau);
				fdm.setChequeId(cheque.getChequeId());
				niveau++;
				
				listExpositionsTab2.add(fdm);
				
			}

			if(listExpositionsTab2!=null){
			for(int i=0; i<listExpositionsTab2.size();i++){
				listExpositionsTab2.get(i).setBoutonPlus(false);
				listExpositionsTab2.get(i).setBoutonSupprimer(true);
				listExpositionsTab2.get(i).setOperation(i+1);	
			}
			if(listExpositionsTab2.size()>0){
			listExpositionsTab2.get(listExpositionsTab2.size() - 1).setBoutonPlus(true);
			if(listExpositionsTab2.size()==1)
				listExpositionsTab2.get(0).setBoutonSupprimer(false);

					}
				}
			
			listExpositionsTab3 = listExpositionsTab2;
			listCheques.setWrappedData(listExpositionsTab2);
			
			
			listChequesTablo = (List<ChequeModel>) listCheques.getWrappedData();
			vb.setListChequesSave(listChequesTablo);
			
			//chargement Liste nature et catégorie 			
			listNat = appMgr.listNaturesByCategorie(Integer.valueOf(nature.getNatureCategorie().getNatureCategorieId()));
			listNatCategorie=appMgr.getList(NatureCategorie.class);
			
			selectedItemsTr = transmission.getTransmissionId().toString();
			selectedItemsTrAncien=selectedItemsTr;
			vb.setSelectedItemsTr(selectedItemsTr);
			listDSN = appMgr.getListDonneeSupplementaireNatureAffectes(Integer.valueOf(selectedItemNature));
			listCD=new ArrayList<ComposantDynamique>();
			Class aClass=cds.getClass();
			courrierDS=appMgr.getDonneeSupplementaireCourrier(courrier.getIdCourrier());
            vb.setCourrierDonneeSupplementaire(courrierDS);
			if(listDSN != null && listDSN.size()>0){
				for(int i=0; i<listDSN.size();i++)
				{
					composantDynamique=new ComposantDynamique();
					String libelle=listDSN.get(i).getLibelleDonnee();
					String libelleNature= msg.getProperty(libelle);
					composantDynamique.setName(libelleNature);
					composantDynamique.setType(listDSN.get(i).getDonneeSupplementaire().getTypeDonneeSupplementaire());
					composantDynamique.setIdChamps(listDSN.get(i).getDonneeSupplementaire().getIdDonneeSupplementaire());							
					
					listCD.add(composantDynamique);
					int idchamp=listCD.get(i).getIdChamps();
					String typeChamp=listCD.get(i).getType();
					
					String methodName = "getColonne"+idchamp; 
					Method m = null;	
					m = aClass.getMethod(methodName);
					Object resultat=m.invoke(courrierDS, new Object[0]);  
					if(typeChamp.equals("RADIO")){
						if(resultat.equals("true")){
							resultat="true";
						}else
							resultat="false";
					}
					composantDynamique.setColonne(resultat);

				}
				vb.setListComposantDynamiqueNature(listCD);
			}
		
			listDSNTransmission = appMgr.getListDonneeSupplementaireTransmissionAffectes(Integer.valueOf(selectedItemsTr));
			listCDTransmission=new ArrayList<ComposantDynamique>();
			aClass=cds.getClass();
			courrierDS=appMgr.getDonneeSupplementaireCourrier(courrier.getIdCourrier());
            vb.setCourrierDonneeSupplementaire(courrierDS);  
			if(listDSNTransmission != null && listDSNTransmission.size()>0){
			
				for(int i=0; i<listDSNTransmission.size();i++)
				{
					composantDynamique=new ComposantDynamique();
					String libelle=listDSNTransmission.get(i).getLibelleDonnee();
					String libelleNature= msg.getProperty(libelle);
					composantDynamique.setName(libelleNature);
					composantDynamique.setType(listDSNTransmission.get(i).getDonneeSupplementaire().getTypeDonneeSupplementaire());
					composantDynamique.setIdChamps(listDSNTransmission.get(i).getDonneeSupplementaire().getIdDonneeSupplementaire());							
					composantDynamique.setPattern(listDSNTransmission.get(i).getPattern());
					composantDynamique.setMessageAlerte(listDSNTransmission.get(i).getMessageAlerte());
					listCDTransmission.add(composantDynamique);
					int idchamp=listCDTransmission.get(i).getIdChamps();
					String typeChamp=listCDTransmission.get(i).getType();
					
					String methodName = "getColonne"+idchamp; 
					Method m = null;	
					m = aClass.getMethod(methodName);
					if(courrierDS !=null ){
					Object resultat=m.invoke(courrierDS, new Object[0]);  
					if(typeChamp.equals("RADIO")){
						if(resultat.equals("true")){
							resultat="true";
						}else
							resultat="false";
					}
					composantDynamique.setColonne(resultat);

						}
					}
				vb.setListComposantDynamiqueTransmission(listCDTransmission);
			}
			
			vb.setFlagModif(2);
		  }
			vb.setFlagModif(2);

			listExpdestExterne = appMgr.getList(Expdestexterne.class);
			destinataires = new ArrayList<ListeDestinatairesModel>();
			destinataires = vb.getListeDestinataire();
			//2020-06-08
			selectedItemsTr=vb.getSelectedItemsTr();
			if (destinataires != null && destinataires.size() > 0) {
				for(int cpt=0;cpt<destinataires.size();cpt++ ){
					System.out.println("destinataires ::: "+destinataires.get(cpt));
					System.out.println("Destinataire name "
						+ destinataires.get(cpt).getDestinataireName());
					System.out.println("Type annotation: "+ destinataires.get(cpt).getChooseAnnotationType());
					System.out.println("Annotation: "+ destinataires.get(cpt).getAnnotations());
					System.out.println("Annotation2: "+ destinataires.get(cpt).getListeAnnotations());
				if (destinataires.get(cpt).getChooseAnnotationType()!=null && destinataires.get(cpt).getChooseAnnotationType().equals("autre")) {
					destinataires.get(cpt).setDisplay("inline");
					destinataires.get(cpt).setDisplayListe("none");
				} else if(destinataires.get(cpt).getChooseAnnotationType()!=null && destinataires.get(cpt).getChooseAnnotationType().equals("tous")){
					destinataires.get(cpt).setDisplay("none");
					destinataires.get(cpt).setDisplayListe("inline");
					
				}
				else{
					destinataires.get(cpt).setChooseAnnotationType("tous");
					destinataires.get(cpt).setDisplay("none");
					destinataires.get(cpt).setDisplayListe("inline");
				}

//					for (int i = 0; i < listExpdestExterne.size(); i++) {
//						if (destinataires
//								.get(cpt)
//								.getDestinataireName()
//								.equals(listExpdestExterne.get(i)
//										.getExpDestExterneNom())
//								&& !vb.getPerson().isBoc()) {
//							affichageReceptionPhysique = true;
//							necessiteReceptionPhysique = "Non";
//							disabledPassageBO = true;
//							disabledReceptionPhy = true;
//							affichagePassageBO = true;
//							passageParBO = "Oui";
//							break;
//						}
//					}
				}
			}
			
			if(vb.getListChequesSave() != null  && selectedItemNature != null ){
				if(Integer.valueOf(selectedItemNature)==38 || Integer.valueOf(selectedItemNature)==59 || Integer.valueOf(selectedItemNature)==80 ){
				listChequesTablo=vb.getListChequesSave();
				listCheques.setWrappedData(listChequesTablo);
				showPanelCheque=true;

				} else {
					showPanelCheque = false;
				}
			}
						
			selectedItemConf = confidentialite.getConfidentialiteId().toString();
			selectedItemUg = urgence.getUrgenceId().toString();
			
			courrierDS=vb.getCourrierDonneeSupplementaire();
			reponse1 = courrier.getCourrierNecessiteReponse();
			
			if (reponse1.equals("Oui")) {
				select1 = true;
				Calendar cal = Calendar.getInstance();
				cal.setTime(courrier.getCourrierDateReponse());
				courrier.setCourrierDateReponse(cal.getTime());
			} else {
				reponse1 = "Non";
			}
			reponseBO=courrier.getCourrierNecessitePassageParBO();
			
			 selectedItemsAnnotation = vb.getListSelectedAnnotations();
			
			Expdest expdest = appMgr.getListExpDestByIdExpDest(
					transaction.getExpdest().getIdExpDest()).get(0);
			transaction.setExpdest(expdest);
			
			if (transaction.getExpdest().getTypeExpDest()
					.equals("Interne-Person")) {
				typeSender = "MoiMeme";
			} else {
				typeSender = "MonUnite";
			}
			if (vb.getPerson().getAssociatedDirection() != null) {
				associatedUnit = vb.getPerson().getAssociatedDirection()
						.getNameUnit();
				associatedLabel = "Au nom de mon Unité";
			} else {
				associatedUnit = vb.getPerson().getAssociatedBOC().getNameBOC();
				associatedLabel = "Au nom de mon BO";
			}
			showFacetUser = true;
			showFacetBoc = false;
			System.out.println("vb.getRedirect() "+vb.getRedirect());
			if (vb.getRedirect().equals("rediretFromCAExpDepToListSender")
					|| vb.getRedirect().equals(
							"rediretFromCADestDepToListSender")) {
				typeCourrier = "depart";
			} else {
				System.out.println("Modifier Type ");
				typeCourrier = "arrive";
			}

			if (courrier.getCourrierType().equals("D") || courrier.getCourrierType().equals("I")) {
				typeCourrier = "depart";
			} else {
				typeCourrier = "arrive";
			}
			if (vb.getPerson().isBoc()) {
				showFacetUser = false;
				showFacetBoc = true;
				affichagePassageBO = false;

				
			}
			else{
				for(int cpt=0; cpt<destinataires.size();cpt++){
				 for(int i=0;i<listExpdestExterne.size();i++){
						if (destinataires
								.get(cpt)
								.getDestinataireName()
								.equals(listExpdestExterne.get(i)
										.getExpDestExterneNom())
								&& !vb.getPerson().isBoc()) {
							
							affichageReceptionPhysique = true;
							necessiteReceptionPhysique="Non";
							disabledPassageBO=true;
							disabledReceptionPhy=true;
							affichagePassageBO=true;
							passageParBO="Oui";
							break;
						}
				 }
				}
				//2020-06-16
				if (selectedItemsTr != null || 	vb.getSelectedItemsTr()!= null) 
					if (Integer.valueOf(selectedItemsTr) == 10 || Integer.valueOf(vb.getSelectedItemsTr())==10 ){
						affichagePassageBO = false;
					}else{
			
					affichagePassageBO = true;
					passageParBO = "Oui";
					disabledPassageBO=true;
					
					}
				
		
				
			}
			
			try {
				listNatCategorie = appMgr.getList(NatureCategorie.class);
				if(vb.getSelectedItemCategorie() != null && !vb.getSelectedItemCategorie().equals("")){
					selectedItemCategorie=vb.getSelectedItemCategorie();
						listNat = appMgr.listNaturesByCategorie(Integer
								.valueOf(selectedItemCategorie));
				
					getSelectItemsNat();
				}
			
			} catch (Exception e1) {
				e1.printStackTrace();
			}
			if(vb.getListComposantDynamiqueTransmission() != null){
			listCDTransmission=vb.getListComposantDynamiqueTransmission();
			
		if (vb.getPerson().isBoc()) {
	
			
			if (selectedItemsTr != null || 	vb.getSelectedItemsTr()!= null) {
				if (Integer.valueOf(selectedItemsTr) == 1 || Integer.valueOf(vb.getSelectedItemsTr())==1) {

					if (typeCourrier.equals("arrive")) {
						afficheChampsSpecTansmission = true;

					} else
						afficheChampsSpecTansmission = false;
				} else {
				
					TransactionDestinationReelle destinataionReel = appMgr
					.getTransactionDestinationReelById(transaction
							.getTransactionDestinationReelle()
							.getTransactionDestinationReelleId());
					if(Integer.valueOf(selectedItemsTr) == 5 || Integer.valueOf(selectedItemsTr) == 6 ){
						
						if((cupExpDest.getTypeExpDest().equals("Externe") && typeCourrier.equals("arrive")) || (destinataionReel.getTransactionDestinationReelleTypeDestinataire().equals("Externe") && typeCourrier.equals("depart") ) ){
							afficheChampsSpecTansmission = true;
							
						}else{
							afficheChampsSpecTansmission = false;
					
						}
					}else{

					afficheChampsSpecTansmission = true;
					}
				}
			}
		} else {
		  
			TransactionDestinationReelle destinataionReel = appMgr
			.getTransactionDestinationReelById(transaction
					.getTransactionDestinationReelle()
					.getTransactionDestinationReelleId());
		  if((selectedItemsTr != null && (Integer.valueOf(selectedItemsTr)==5 || Integer.valueOf(selectedItemsTr)==6)) && (destinataionReel!=null && destinataionReel.getTransactionDestinationReelleTypeDestinataire().equals("Externe"))){
			  afficheChampsSpecTansmission = true;
					} else {
						if (Integer.valueOf(selectedItemsTr) == 7
								|| Integer.valueOf(selectedItemsTr) == 8) {
							afficheChampsSpecTansmission = true;
						} else {
							listCDTransmission = new ArrayList<ComposantDynamique>();
							vb.setListComposantDynamiqueTransmission(listCDTransmission);
							afficheChampsSpecTansmission = false;
						}
					}

				}
			}
			selectedItemNatureAncien=vb.getSelectedItemNature();
			selectedItemNature=vb.getSelectedItemNature();
			selectedItemsTrAncien=vb.getSelectedItemsTr();
			selectedItemsTr=vb.getSelectedItemsTr();
			if (selectedItemsTr != null) {
				if (Integer.valueOf(selectedItemsTr) == 9 || !vb.getCopyListPM().isEmpty() || !vb.getCopyListPP().isEmpty()) {
					affichageReceptionPhysique=true;
					necessiteReceptionPhysique="Non";
					disabledReceptionPhy=true;
				} else{
					disabledReceptionPhy=false;
				}
			}
			listCD=vb.getListComposantDynamiqueNature();
		
			showPanelAOC = false;
			System.out.println("selectedItemNature "+selectedItemNature);
			if(selectedItemNature!=null && selectedItemNature.length()>0 && (Integer.valueOf(selectedItemNature)== 44
					|| Integer.valueOf(selectedItemNature)== 46)){
				showPanelAOC = true;
			int idaoconsultation = 0;
			//2020-06-08
			if(vb.getAoConsultation()==null ){
				if(courrier.getAoConsultationId()!=null )			
				idaoconsultation=courrier.getAoConsultationId().getAoConsultationId();
				System.out.println("idaoconsultation 1===> "+idaoconsultation);
			}else{			
				idaoconsultation=vb.getAoConsultation().getAoConsultationId();
				System.out.println("idaoconsultation 2===> "+idaoconsultation);

			}
			if(idaoconsultation!=0){
			aoConsultation = appMgr.getListAoConsultation(idaoconsultation).get(0);
			numeroAoConsultation = aoConsultation.getAoConsultationNumero();
			heure1 =aoConsultation.getAoConsultationDateLimiteOffre().toString().substring(0,10) + " à "
			+ aoConsultation.getAoConsultationDateLimiteOffre().toString().substring(11,16);
			heure3 =aoConsultation.getAoConsultationDateSeanceCommission().toString().substring(0,10) + " à "
			+ aoConsultation.getAoConsultationDateSeanceCommission().toString().substring(11,16);
			if(aoConsultation.getAoConsultationDelaisProlongation()!=null)
			heure2 =aoConsultation.getAoConsultationDelaisProlongation().toString().substring(0,10) + " à "
			+ aoConsultation.getAoConsultationDelaisProlongation().toString().substring(11,16);
			else
				heure2="";
			}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
public void onBlur() {
		

		List<AoConsultation> listeAoConsultation = new ArrayList<AoConsultation>();
		if (numeroAoConsultation != null && numeroAoConsultation.length() > 0) {
			listeAoConsultation = appMgr.getAOByRef(numeroAoConsultation);
			if (listeAoConsultation != null && listeAoConsultation.size() > 0) {
				aoConsultation = listeAoConsultation.get(0);
				notExistAoConsultation=false;
				if(aoConsultation.getAoConsultationDateLimiteOffre()!=null){
				heure1 =aoConsultation.getAoConsultationDateLimiteOffre().toString().substring(0,10) + " à "
				+ aoConsultation.getAoConsultationDateLimiteOffre().toString().substring(11,16);
				}
				if(aoConsultation.getAoConsultationDateSeanceCommission() !=null){
				heure3 =aoConsultation.getAoConsultationDateSeanceCommission().toString().substring(0,10) + " à "
				+ aoConsultation.getAoConsultationDateSeanceCommission().toString().substring(11,16);
				}
				if(aoConsultation.getAoConsultationDelaisProlongation()!=null)
					heure2 =aoConsultation.getAoConsultationDelaisProlongation().toString().substring(0,10) + " à "
				+ aoConsultation.getAoConsultationDelaisProlongation().toString().substring(11,16);
				
				
			}else{
				notExistAoConsultation=true;
				aoConsultation=new AoConsultation();
			    heure1="";
				heure2="";
				heure3="";
			}
		}
		vb.setAoConsultation(aoConsultation);
	}
	public void goToListAoConsultation() {
		vb.setCourrier(courrier);
		
		passe = false;
		try {
			passe = true;
			vb.setFlagAjout(false);
			vb.setPagePrecedente("modif");
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// *** Log && Notification ***//
	public void chargementNotification() {

		Date dateSystem = new Date();
		SimpleDateFormat formaterDate = null;
		formaterDate = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");

//		String infoCourrier = "La réference de ce courrier est : "
//
//		+ courrier.getCourrierReferenceCorrespondant();
		String infoCourrier = "La réference de ce courrier est : "+codeUniqueCourrier;
		vbn.setInfo(infoCourrier);
		vbn.setNomClass(CourrierAjoutBean.class.getName());
		vbn.setTypeLog("INFO");

		// Chargement Hard Codé de les elements à remplir dans la classe
		// informations
		info1.setVar("#p");
		info1.setContenu(vb.getPerson().getNom());
		info2.setVar("#I");
		info2.setContenu(infoCourrier);
		info3.setVar("#d");
		info3.setContenu(formaterDate.format(dateSystem));
		listInfo.add(info1);
		listInfo.add(info2);
		listInfo.add(info3);
		vbn.setListInformations(listInfo);
		vbn.setTypeObject("TEST");
		vbn.setCopyListSelectedPersonNotif(vb.getCopyListSelectedPersonNotif());
		vbn.setCopyListSelectedUnitNotif(vb.getCopyListSelectedUnitNotif());
		vbn.setCopyListPMNotif(vb.getCopyListPMNotif());
		vbn.setCopyListPPNotif(vb.getCopyListPPNotif());
		vbn.setPerson(vb.getPerson());
	}

	public void changeTypeAnnotation(ActionEvent evt) {
		if (chooseAnnotationType.equals("tous")) {
			showTous = true;
		} else {
			showTous = false;
		}
	}

	public void update() {

		System.out.println(" #### Méthode Update  ###");
		boolean passe = true;
		boolean passeNumCheque=true;
//		System.out.println("### selectedItemNature ###");
//		System.out.println("### selectedItemNature   == " + selectedItemNature);
		if (selectedItemNature != null) {
			int natureID = Integer.valueOf(selectedItemNature);
		
				if (natureID == 38 || natureID == 59 || natureID == 80) {
					// /parcourir la liste des cheques et vérifier s'il montant
					// à 0
					System.out.println("Dans boucle Chaque");
					System.out.println("listCheques "+listCheques);
					listChequesTablo = (List<ChequeModel>) listCheques
							.getWrappedData();
					if (listChequesTablo.size() > 0) {
						for (ChequeModel chequeDateModel : listChequesTablo) {

							if (chequeDateModel.getChequeMontant() != null
									&& chequeDateModel.getChequeMontant()
											.doubleValue() <= 0)
								
							{
								passe = false;
								break;
							}
						}
						try {
							int numcheq=0;
							for (ChequeModel chequeDateModel : listChequesTablo) {
								
								 numcheq = Integer.parseInt(chequeDateModel.getChequeNum());
								
								
							}
						} catch (NumberFormatException e) {
							System.out.println("##### * N° Chèque doit ");
							passeNumCheque= false;
						}
					}
					
			}
				if (natureID == 44 || natureID == 46) {
					courrier.setAoConsultationId(vb.getAoConsultation());
					
				}else{
					courrier.setAoConsultationId(null);
				}
				
		}
		
		System.out.println("");
		if(passe && passeNumCheque && !vb.isNotAdd() && !vb.isNotAddCourrier()){
				System.out.println("Passer à la modification ");
		status = false;
		status1 = false;
		TransactionDestinationReelle transactionDestinationReelle;
		try {
			// **
			TransactionDestinationId id;
			TransactionDestination trDest;
			Expdest expdest;

			// nature
			// courrier.setNature(appMgr.getNatureByNom(selectedItemNature).get(0));
			courrier.setNature(appMgr.getNatureById(
					Integer.valueOf(selectedItemNature)).get(0));
			// Mode Transmission
			// courrier.setTransmission(appMgr.getTransmissionByNom(
			// selectedItemsTr).get(0));
			courrier.setTransmission(appMgr.getTransmissionById(
					Integer.valueOf(selectedItemsTr)).get(0));
			// Confidentialité
			// courrier.setConfidentialite(appMgr.getConfByNom(selectedItemConf)
			// .get(0));
			courrier.setConfidentialite(appMgr.getConfidentialiteById(
					Integer.valueOf(selectedItemConf)).get(0));
			// Urgence
			// courrier.setUrgence(appMgr.getUrgenceByNom(selectedItemUg).get(0));
			courrier.setUrgence(appMgr.getUrgenceById(
					Integer.valueOf(selectedItemUg)).get(0));
			// Necessite Reponse
			courrier.setCourrierNecessiteReponse(reponse1);
			//Necessite Passage Par BO
			courrier.setCourrierNecessitePassageParBO(reponseBO);
			/**** Ajout Dossier *******/
			dossier.setConfidentialite(courrier.getConfidentialite());
			dossier.setUrgence(courrier.getUrgence());
			dossier.setDossierDescription(courrier.getCourrierCommentaire());
			dossier.setDossierIntitule("Courrier_"
					+ courrier.getCourrierReferenceCorrespondant());
			// date reception
			courrier.setCourrierDateReception(date1);
			courrier.setCourrierDateReceptionReelle(dateReelle);
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(date1);
			courrier.setCourrierOldDateOper(calendar.get(Calendar.YEAR));
			courrier.setCourrierDateReceptionMois(date1.getMonth() + 1);
			
			//Réception physique 		
			
			
			if (necessiteReceptionPhysique != null
					&& necessiteReceptionPhysique.equals("Non")) {
				courrier.setCourrierAvecDocumentPhysique(false);

			} else if (necessiteReceptionPhysique != null
					&& necessiteReceptionPhysique.equals("Oui")) {
				courrier.setCourrierAvecDocumentPhysique(true);

			} else if (necessiteReceptionPhysique == null) {
				courrier.setCourrierAvecDocumentPhysique(false);
			}

			appMgr.update(dossier);
			appMgr.update(courrier);
			updateCheque();
			vb.setCourrier(courrier);
			
			// JS-------------------------------------------------------------------------------------------------------------
			//Méthode de Réflexion 							
			try {	
				
			
			if(courrierDS == null) {	
		
				courrierDS= new CourrierDonneeSupplementaire();
			}
			Class aClass=courrierDS.getClass();
			Class[] paramTypes = new Class[1];
			//System.out.println("####### listCD size == " + listCDTransmission.size());
//			listCD=vb.getListComposantDynamiqueNature();
			if(listCD != null && listCD.size()>0){
			for(int i=0;i<listCD.size();i++){
			if(listCD.get(i).getType().equals("RADIO")){
				paramTypes[0]=Boolean.class;
				listCD.get(i).setColonne(new Boolean(listCD.get(i).getColonne()+""));
			}else
			paramTypes[0] = listCD.get(i).getColonne().getClass();				
			int idchamp=listCD.get(i).getIdChamps();
			String methodName = "setColonne"+idchamp; // fieldName String
			Method m = null;			
			  m = aClass.getMethod(methodName, paramTypes);
			    String result = (String) m.invoke(courrierDS ,listCD.get(i).getColonne()); // field value
			    System.out.println("######"+result);
			} 
			}
			for(int i=0;i<listCDTransmission.size();i++){
				if(listCDTransmission.get(i).getType().equals("RADIO")){
					paramTypes[0]=Boolean.class;
					listCDTransmission.get(i).setColonne(new Boolean(listCDTransmission.get(i).getColonne()+""));
				}else
					if(listCDTransmission.get(i).getColonne() !=null)
				paramTypes[0] = listCDTransmission.get(i).getColonne().getClass();				
				int idchamp=listCDTransmission.get(i).getIdChamps();
				String methodName = "setColonne"+idchamp; // fieldName String
				Method m = null;			
				  m = aClass.getMethod(methodName, paramTypes);
				    String result = (String) m.invoke(courrierDS ,listCDTransmission.get(i).getColonne()); // field value
				    System.out.println("######"+result);
				} 
			}catch (IllegalAccessException iae) {
			    iae.printStackTrace();
			} catch (InvocationTargetException ite) {
			    ite.printStackTrace();
			} catch (SecurityException e) {
				e.printStackTrace();
			} catch (NoSuchMethodException e) {
				e.printStackTrace();
			}
			courrierDS.setIdCourrier(courrier);
			appMgr.update(courrierDS);


			// For Teste
//			List<TransactionDestination> transactionDestination = new ArrayList<TransactionDestination>();
//			transactionDestination = appMgr
//					.getDestinationByIdTransaction(transaction
//							.getTransactionId());
//			if (reponse1.equals("Oui")) {
//				for (TransactionDestination transactionDestination2 : transactionDestination) {
//					transactionDestination2
//							.setTransactionDestDateReponse(courrier
//									.getCourrierDateReponse());
//					appMgr.update(transactionDestination2);
//				}
//			} else {
//				for (TransactionDestination transactionDestination2 : transactionDestination) {
//					transactionDestination2.setTransactionDestDateReponse(null);
//					appMgr.update(transactionDestination2);
//				}
//			}

			vb.setCopyExpReelNom(vb.getExpNom());


			expdest = new Expdest();

//			expdest = transaction.getExpdest();
			
//			if (vb.getPerson().isBoc()) {
//				try {
//					System.out.println("vb.getCopyListSelectedObjectExp() == " + vb.getCopyListSelectedObjectExp().size());
//					if (vb.getCopyListSelectedObjectExp().get(0) instanceof Person) {
//						Person person = (Person) vb
//								.getCopyListSelectedObjectExp().get(0);
//						System.out.println("person ### 1===>"+person);
//						Person personSearch=ldapOperation.getPersonalisedUserById(person.getId());
//						System.out.println("person ###2====>"+personSearch);
//						expdest.setTypeExpDest("Interne-Person");
//						expdest.setIdExpDestLdap(person.getId());
//						vb.setCopyExpNom(person.getCn());
//						// a modifier
//						if (person.isResponsable()) {
//							transaction.setTransactionTypeIntervenant("sub_"
//									+ String.valueOf(person.getId()));
//							try {
//								if (vb.getPerson().getAssociatedDirection()
//										.getAssociatedUnit() != null) {
//									transaction
//											.setTransactionIdIntervenant(person
//													.getAssociatedDirection()
//													.getAssociatedUnit()
//													.getResponsibleUnit()
//													.getId());
//								}
//							} catch (NullPointerException e) {
//							}
//						} else if (person.isSecretary()) {
//							transaction
//									.setTransactionTypeIntervenant("secretary_"
//											+ String.valueOf(person.getId()));
//							transaction.setTransactionIdIntervenant(person
//									.getAssociatedDirection()
//									.getResponsibleUnit().getId());
//						} else {
//							transaction.setTransactionTypeIntervenant("agent_"
//									+ String.valueOf(person.getId()));
//							
//							transaction.setTransactionIdIntervenant(personSearch.getAssociatedDirection().getResponsibleUnit().getId());
//						}
//					} else if (vb.getCopyListSelectedObjectExp().get(0) instanceof Unit) {
//						Unit unit = (Unit) vb.getCopyListSelectedObjectExp()
//								.get(0);
//						expdest.setTypeExpDest("Interne-Unité");
//						expdest.setIdExpDestLdap(unit.getIdUnit());
//						vb.setCopyExpNom(unit.getNameUnit());
//						// A modifier
//						transaction.setTransactionTypeIntervenant("unit_"
//								+ String.valueOf(unit.getIdUnit()));
//						try {
//							if (unit.getAssociatedUnit() != null) {
//								transaction.setTransactionIdIntervenant(unit
//										.getAssociatedUnit().getIdUnit());
//							}
//						} catch (NullPointerException e) {
//							e.printStackTrace();
//						}
//					} else if (vb.getCopyListSelectedObjectExp().get(0) instanceof Pp) {
//						Pp pp = (Pp) vb.getCopyListSelectedObjectExp().get(0);
//						expdest.setTypeExpDest("Externe");
//						expdest.setExpdestexterne(pp.getExpdestexterne());
//						System.out.println("pp.getExpdestexterne(): "
//								+ pp.getExpdestexterne());
//						vb.setCopyExpNom(pp.getExpdestexterne()
//								.getExpDestExterneNom()
//								+ " "
//								+ pp.getExpdestexterne()
//										.getExpDestExternePrenom() + " (PP)");
//					} else if (vb.getCopyListSelectedObjectExp().get(0) instanceof Pm) {
//						Pm pm = (Pm) vb.getCopyListSelectedObjectExp().get(0);
//						expdest.setTypeExpDest("Externe");
//						expdest.setExpdestexterne(pm.getExpdestexterne());
//						System.out.println("pm.getExpdestexterne(): "
//								+ pm.getExpdestexterne());
//						vb.setCopyExpNom(pm.getExpdestexterne()
//								.getExpDestExterneNom() + " (PM)");
//					}
//				} catch (Exception e) {
//					e.printStackTrace();
//				}
//			}
//			if (chooseAnnotationType.equals("autre")) {
//				transaction
//						.setTransactionCommentaireAnnotation(otherAnnotation);
//			} else {
//				transaction.setTransactionCommentaireAnnotation(null);
//			}
		
//			appMgr.update(expdest);
//			transaction.setDossier(dossier);
//			appMgr.update(transaction);
//			vb.setTransaction(transaction);
			// Suppression Annotations
//			System.out.println("delete 1 exp");
//			System.out.println("transaction.getTransactionId()====>"+transaction
//					.getTransactionId());
			
			List<Transaction> allTransactions = vb.getAllTransactions();
			if(allTransactions!=null)
			System.out.println(" allTransactions " +allTransactions.size());
			else 
				System.out.println("allTransactions est NULL");
			List <Integer>listeIdTransaction=new ArrayList<Integer>();
			
			for(int i=0;allTransactions!=null &&i<allTransactions.size();i++){
				if(allTransactions.get(i)!=null &&allTransactions.get(i).getTransactionDestinationReelle()!=null){
				int idDestinataire=allTransactions.get(i).getTransactionDestinationReelle().getTransactionDestinationReelleIdDestinataire();
			System.out.println("l'ID Dest "+idDestinataire);
				for(int c=0; c<destinataires.size();c++){
					if(destinataires.get(c).getDestinataireId()==idDestinataire)
					destinataires.get(c).setTransactionId(allTransactions.get(i).getTransactionId().intValue());
				}}
				///suppresiion des annotation déjà existante
				System.out.println("val : "+allTransactions.get(i).getTransactionId().intValue());
				appMgr.deleteAnnotationsByIdTransaction(allTransactions.get(i).getTransactionId().intValue());
			}
			// // Ajout Annotations
			String result = "";
			TransactionAnnotation cA = new TransactionAnnotation();
			TransactionAnnotationId cI = new TransactionAnnotationId();
			System.out.println("selectedItemsAnnotation===>"+selectedItemsAnnotation);
//			 for (String string : selectedItemsAnnotation) {
//				 System.out.println("string===>"+string);
//			 int refAnnotation = appMgr.getAnnotationByIdAnotation(Integer.valueOf(string)).get(0).getAnnotationId();
//			 cI.setIdAnnotation(refAnnotation);
//			 cI.setIdTransaction(vb.getTransaction().getTransactionId());
//			 cA.setId(cI);
//			 appMgr.insert(cA);
//			 result = result + string + " / ";
//			 cA = new TransactionAnnotation();
//			 cI = new TransactionAnnotationId();
//			 }
			
			//Parcourir la liste des destinataire
			//vb.getTransaction().getTransactionDestinationReelle().getTransactionDestinationReelleIdDestinataire();
			
			
			
			
			for(int cpt=0; cpt<destinataires.size();cpt++){
				List<Transaction> tr=appMgr.getListTransactionByIdTransaction(destinataires.get(cpt).getTransactionId());
				Transaction transact=new Transaction();
				if(tr!=null && tr.size()>0)
				 transact=tr.get(0);
				if (destinataires.get(cpt).getChooseAnnotationType()!=null && destinataires.get(cpt).getChooseAnnotationType().equals("tous")) {
					List<String> listAnnotation = destinataires.get(cpt).getListeAnnotations();
					for (int j = 0; listAnnotation!=null && j < listAnnotation.size() ; j++) {
						System.out.println("selectedItemsAnnotation==========>"+listAnnotation.get(j));
						 int refAnnotation = appMgr.getAnnotationByIdAnotation(Integer.valueOf(listAnnotation.get(j))).get(0)
						 .getAnnotationId();
						 cI.setIdAnnotation(refAnnotation);
						cI.setIdAnnotation(Integer.valueOf(listAnnotation
								.get(j)));
						cI.setIdTransaction(destinataires.get(cpt).getTransactionId());
						cA.setId(cI);
//						System.out.println("inserte 1 exp");
//						System.out.println("####=======>"+vb.getTransaction().getTransactionId());
						appMgr.getAnnotationByIdTransaction(destinataires.get(cpt).getTransactionId());
						appMgr.insert(cA);
			
						result = result + listAnnotation.get(j) + " / ";
						cA = new TransactionAnnotation();
						cI = new TransactionAnnotationId();
					}
					
					
					transact.setTransactionCommentaireAnnotation(null);
					appMgr.update(transact);
				} else if(destinataires.get(cpt).getChooseAnnotationType()!=null){
//					 int refAnnotation = appMgr.getAnnotationByLibelle("Autre")
//					 .get(0).getAnnotationId();
//					 cI.setIdAnnotation(refAnnotation);
					cI.setIdAnnotation(10);
					cI.setIdTransaction(destinataires.get(cpt).getTransactionId());
					cA.setId(cI);
					System.out.println("inserte else 1 exp");
					appMgr.insert(cA);
					otherAnnotation=destinataires.get(cpt).getOtherAnnotation();
					System.out.println( "otherAnnotation  "+otherAnnotation);
					
					transact.setTransactionCommentaireAnnotation(otherAnnotation);
					appMgr.update(transact);

					result = otherAnnotation + " / ";
					cA = new TransactionAnnotation();
					cI = new TransactionAnnotationId();
				}
				if (!result.equals("")) {
					int lastIndex = result.lastIndexOf("/");
					if(lastIndex>0)
					result = result.substring(0, lastIndex);
				}
			
			}
			
			
			
			
//			if (chooseAnnotationType.equals("tous")) {
//				for (int j = 0; j < selectedItemsAnnotation.size(); j++) {
//					System.out.println("selectedItemsAnnotation==========>"+selectedItemsAnnotation.get(j));
//					 int refAnnotation = appMgr.getAnnotationByIdAnotation(Integer.valueOf(selectedItemsAnnotation.get(j))).get(0)
//					 .getAnnotationId();
//					 cI.setIdAnnotation(refAnnotation);
//					cI.setIdAnnotation(Integer.valueOf(selectedItemsAnnotation
//							.get(j)));
//					cI.setIdTransaction(vb.getTransaction().getTransactionId());
//					cA.setId(cI);
//					System.out.println("inserte 1 exp");
//					System.out.println("####=======>"+vb.getTransaction().getTransactionId());
//					appMgr.getAnnotationByIdTransaction(vb.getTransaction().getTransactionId());
//					appMgr.insert(cA);
//		
//					result = result + selectedItemsAnnotation.get(j) + " / ";
//					cA = new TransactionAnnotation();
//					cI = new TransactionAnnotationId();
//				}
//				vb.getTransaction().setTransactionCommentaireAnnotation(null);
//				appMgr.update(vb.getTransaction());
//			} else {
////				 int refAnnotation = appMgr.getAnnotationByLibelle("Autre")
////				 .get(0).getAnnotationId();
////				 cI.setIdAnnotation(refAnnotation);
//				cI.setIdAnnotation(10);
//				cI.setIdTransaction(vb.getTransaction().getTransactionId());
//				cA.setId(cI);
//				System.out.println("inserte else 1 exp");
//				appMgr.insert(cA);
//				System.out.println( "otherAnnotation  "+otherAnnotation);
//				vb.getTransaction().setTransactionCommentaireAnnotation(otherAnnotation);
//				appMgr.update(vb.getTransaction());
//
//				result = otherAnnotation + " / ";
//				cA = new TransactionAnnotation();
//				cI = new TransactionAnnotationId();
//			}
//			if (!result.equals("")) {
//				int lastIndex = result.lastIndexOf("/");
//				if(lastIndex>0)
//				result = result.substring(0, lastIndex);
//			}
			vb.setCopyAnnotationResult(result);
			result = "";
			// Destinataires
//			if (!vb.getCopyListPM().isEmpty() || !vb.getCopyListPP().isEmpty()
//					|| !vb.getCopyListSelectedPerson().isEmpty()
//					|| !vb.getCopyListSelectedBoc().isEmpty()
//					|| !vb.getCopyListSelectedUnit().isEmpty()) {
				// C*
				// List<TransactionDestinationReelle> listTrDestReele =
				// appMgr.listTransactionDestinationReelByDossierID(vb.getCourrier().getIdCourrier());
				// for (TransactionDestinationReelle trDestReele :
				// listTrDestReele) {
				//
				// for (Object object : vb.getCopyListSelectedObject()) {
				//
				// }
				// }
				// C*
				// Suppression des destinataires
//				System.out.println("delete 2 exp");
////				appMgr.deleteDestinatairesByIdTransaction(transaction
//						.getTransactionId());

//				if (!vb.getCopyListSelectedPerson().isEmpty()
//						|| !vb.getCopyListSelectedUnit().isEmpty()) {
//					if (!vb.getCopyListSelectedPerson().isEmpty()) {
//						for (int i = 0; i < vb.getCopyListSelectedPerson()
//								.size(); i++) {
//							result = result
//									+ vb.getCopyListSelectedPerson().get(i)
//											.getCn() + " / ";
//							expdest = new Expdest();
//							id = new TransactionDestinationId();
//							trDest = new TransactionDestination();
//							expdest.setTypeExpDest("Interne-Person");
//							expdest.setIdExpDestLdap(vb
//									.getCopyListSelectedPerson().get(i).getId());
//							System.out.println("inserte 2 exp");
//							appMgr.insert(expdest);
//							id.setIdTransaction(vb.getTransaction()
//									.getTransactionId());
//							id.setIdExpDest(expdest.getIdExpDest());
//							trDest.setId(id);
//							// A modifier
//							System.out.println("###1===>"+vb.getCopyListSelectedPerson().get(i).getNom() +" "+vb.getCopyListSelectedPerson().get(i).getPrenom());
//							Person p=ldapOperation.getPersonalisedUserById(vb.getCopyListSelectedPerson().get(i).getId());
//							System.out.println("###2===>"+p.getAssociatedDirection());
//							System.out.println("###3===>"+p.getAssociatedDirection().getAssociatedUnit());
//
//							if (vb.getCopyListSelectedPerson().get(i)
//									.isResponsable()) {
//								trDest.setTransactionDestTypeIntervenant("sub_"
//										+ String.valueOf(vb
//												.getCopyListSelectedPerson()
//												.get(i).getId()));
//								if (vb.getCopyListSelectedPerson().get(i)
//										.getAssociatedDirection()
//										.getAssociatedUnit() != null) {
//									trDest.setTransactionDestIdIntervenant(vb
//											.getCopyListSelectedPerson().get(i)
//											.getAssociatedDirection()
//											.getAssociatedUnit()
//											.getResponsibleUnit().getId());
//								}
//							} else if (vb.getCopyListSelectedPerson().get(i)
//									.isSecretary()) {
//								trDest.setTransactionDestTypeIntervenant("secretary_"
//										+ String.valueOf(vb
//												.getCopyListSelectedPerson()
//												.get(i).getId()));
//								trDest.setTransactionDestIdIntervenant(vb
//										.getCopyListSelectedPerson().get(i)
//										.getAssociatedDirection()
//										.getResponsibleUnit().getId());
//							} else {
//								trDest.setTransactionDestTypeIntervenant("agent_"
//										+ String.valueOf(vb
//												.getCopyListSelectedPerson()
//												.get(i).getId()));
//								if (vb.getCopyListSelectedPerson().get(i)
//										.getAssociatedDirection() != null) {
//								trDest.setTransactionDestIdIntervenant(p
//										.getAssociatedDirection()
//										.getResponsibleUnit().getId());
//								}
//							}
//							//
//							if (reponse1.equals("Oui")) {
//								trDest.setTransactionDestDateReponse(courrier
//										.getCourrierDateReponse());
//							}
//							System.out.println("inserte 3 exp");
//							appMgr.insert(trDest);
//
//							TransactionDestinationReelle trDestinationReelle = new TransactionDestinationReelle();
//							trDestinationReelle
//									.setTransactionDestinationReelleIdDestinataire(vb
//											.getCopyListSelectedPerson().get(i)
//											.getId());
//							trDestinationReelle
//									.setTransactionDestinationReelleTypeDestinataire("Interne-Person");
//							appMgr.insert(trDestinationReelle);
//							transaction
//									.setTransactionDestinationReelle(trDestinationReelle);
//							appMgr.update(transaction);
//						}
//					}

//					if (!vb.getCopyListSelectedUnit().isEmpty()) {
//						for (int i = 0; i < vb.getCopyListSelectedUnit().size(); i++) {
//							result = result
//									+ vb.getCopyListSelectedUnit().get(i)
//											.getNameUnit() + " / ";
//							if (!vb.getPerson().isBoc()) {
//								if (vb.getPerson().getAssociatedDirection()
//										.getIdUnit() != vb
//										.getCopyListSelectedUnit().get(i)
//										.getIdUnit()) {
//									expdest = new Expdest();
//									id = new TransactionDestinationId();
//									trDest = new TransactionDestination();
//									expdest.setTypeExpDest("Interne-Unité");
//									expdest.setIdExpDestLdap(vb
//											.getCopyListSelectedUnit().get(i)
//											.getIdUnit());
//									System.out.println("inserte 4 exp");
//									appMgr.insert(expdest);
//									id.setIdTransaction(vb.getTransaction()
//											.getTransactionId());
//									id.setIdExpDest(expdest.getIdExpDest());
//									trDest.setId(id);
//									// A modifier
//									trDest.setTransactionDestTypeIntervenant("unit_"
//											+ String.valueOf(vb
//													.getCopyListSelectedUnit()
//													.get(i).getIdUnit()));
//									if (vb.getCopyListSelectedUnit().get(i)
//											.getAssociatedUnit() != null) {
//										trDest.setTransactionDestIdIntervenant(vb
//												.getCopyListSelectedUnit()
//												.get(i).getAssociatedUnit()
//												.getResponsibleUnit().getId());
//									}
//									//
//									if (reponse1.equals("Oui")) {
//										trDest.setTransactionDestDateReponse(courrier
//												.getCourrierDateReponse());
//									}
//									appMgr.insert(trDest);
//								} else {
//									expdest = new Expdest();
//									id = new TransactionDestinationId();
//									trDest = new TransactionDestination();
//									expdest.setTypeExpDest("Interne-Unité");
//									expdest.setIdExpDestLdap(vb.getPerson()
//											.getAssociatedDirection()
//											.getIdUnit());
//									System.out.println("inserte 5 exp");
//									appMgr.insert(expdest);
//									id.setIdTransaction(vb.getTransaction()
//											.getTransactionId());
//									id.setIdExpDest(expdest.getIdExpDest());
//									trDest.setId(id);
//									// A modifier
//									trDest.setTransactionDestTypeIntervenant("unit_"
//											+ String.valueOf(vb
//													.getCopyListSelectedUnit()
//													.get(i).getIdUnit()));
//									if (vb.getCopyListSelectedUnit().get(i)
//											.getAssociatedUnit() != null) {
//										trDest.setTransactionDestIdIntervenant(vb
//												.getCopyListSelectedUnit()
//												.get(i).getAssociatedUnit()
//												.getResponsibleUnit().getId());
//									}
//									//
//									if (reponse1.equals("Oui")) {
//										trDest.setTransactionDestDateReponse(courrier
//												.getCourrierDateReponse());
//									}
//									appMgr.insert(trDest);
//								}
//								// TransactionDestinationReelle
//								// trDestinationReelle = new
//								// TransactionDestinationReelle();
//								// trDestinationReelle
//								// .setTransactionDestinationReelleIdDestinataire(vb
//								// .getCopyListSelectedUnit()
//								// .get(i).getId());
//								// trDestinationReelle
//								// .setTransactionDestinationReelleTypeDestinataire("Interne-Unité");
//								// appMgr.insert(trDestinationReelle);
//								// transaction
//								// .setTransactionDestinationReelle(trDestinationReelle);
//								// appMgr.update(transaction);
//							}
//
//							else {
//								expdest = new Expdest();
//								id = new TransactionDestinationId();
//								trDest = new TransactionDestination();
//								expdest.setTypeExpDest("Interne-Unité");
//								expdest.setIdExpDestLdap(vb
//										.getCopyListSelectedUnit().get(i)
//										.getIdUnit());
//								System.out.println("inserte 5else exp");
//								appMgr.insert(expdest);
//								id.setIdTransaction(vb.getTransaction()
//										.getTransactionId());
//								id.setIdExpDest(expdest.getIdExpDest());
//								trDest.setId(id);
//								// A modifier
//								trDest.setTransactionDestTypeIntervenant("unit_"
//										+ String.valueOf(vb
//												.getCopyListSelectedUnit()
//												.get(i).getIdUnit()));
//								if (vb.getCopyListSelectedUnit().get(i)
//										.getAssociatedUnit() != null) {
//									trDest.setTransactionDestIdIntervenant(vb
//											.getCopyListSelectedUnit().get(i)
//											.getAssociatedUnit()
//											.getResponsibleUnit().getId());
//								}
//								//
//								if (reponse1.equals("Oui")) {
//									trDest.setTransactionDestDateReponse(courrier
//											.getCourrierDateReponse());
//								}
//								System.out.println("inserte 6 exp");
//								// appMgr.insert(trDest);
//								// TransactionDestinationReelle
//								// trDestinationReelle = new
//								// TransactionDestinationReelle();
//								// trDestinationReelle
//								// .setTransactionDestinationReelleIdDestinataire(vb
//								// .getCopyListSelectedPerson()
//								// .get(i).getId());
//								// trDestinationReelle
//								// .setTransactionDestinationReelleTypeDestinataire("Interne-Unité");
//								// appMgr.insert(trDestinationReelle);
//								// transaction
//								// .setTransactionDestinationReelle(trDestinationReelle);
//								// appMgr.update(transaction);
//							}
//							TransactionDestinationReelle trDestinationReelle = new TransactionDestinationReelle();
//							trDestinationReelle
//									.setTransactionDestinationReelleIdDestinataire(vb
//											.getCopyListSelectedUnit().get(i)
//											.getIdUnit());
//							trDestinationReelle
//									.setTransactionDestinationReelleTypeDestinataire("Interne-Unité");
//							appMgr.insert(trDestinationReelle);
//							transaction
//									.setTransactionDestinationReelle(trDestinationReelle);
//							appMgr.update(transaction);
//						}
//
//					}
//				}
//				if (!vb.getCopyListPP().isEmpty()) {
//					for (int i = 0; i < vb.getCopyListPP().size(); i++) {
//						result = result
//								+ vb.getCopyListPP().get(i).getExpdestexterne()
//										.getExpDestExterneNom()
//								+ " "
//								+ vb.getCopyListPP().get(i).getExpdestexterne()
//										.getExpDestExternePrenom() + " / ";
//						if (!vb.getPerson().isBoc()) {
//							transactionDestinationReelle = new TransactionDestinationReelle();
//							transactionDestinationReelle = transaction
//									.getTransactionDestinationReelle();
//							transactionDestinationReelle
//									.setTransactionDestinationReelleIdDestinataire(vb
//											.getCopyListPP().get(i)
//											.getExpdestexterne()
//											.getIdExpDestExterne());
//							transactionDestinationReelle
//									.setTransactionDestinationReelleTypeDestinataire("Externe");
//							System.out.println("update 7 exp");
//							appMgr.update(transactionDestinationReelle);
//						}
//					}
//				}
//				if (!vb.getCopyListPM().isEmpty()) {
//					for (int i = 0; i < vb.getCopyListPM().size(); i++) {
//						result = result
//								+ vb.getCopyListPM().get(i).getExpdestexterne()
//										.getExpDestExterneNom() + " / ";
//						if (!vb.getPerson().isBoc()) {
//							transactionDestinationReelle = new TransactionDestinationReelle();
//							transactionDestinationReelle = transaction
//									.getTransactionDestinationReelle();
//							transactionDestinationReelle
//									.setTransactionDestinationReelleIdDestinataire(vb
//											.getCopyListPM().get(i)
//											.getExpdestexterne()
//											.getIdExpDestExterne());
//							transactionDestinationReelle
//									.setTransactionDestinationReelleTypeDestinataire("Externe");
//							System.out.println("update 8 exp");
//							appMgr.update(transactionDestinationReelle);
//						}
//					}
//				}
//				if (!result.equals("")) {
//					int lastIndex = result.lastIndexOf("/");
//					result = result.substring(0, lastIndex);
//				}
//				vb.setCopyDestNom(result);
//			}
			try {
				chargementNotification();
			} catch (Exception e) {
				e.printStackTrace();
			}

			LogClass logClass = new LogClass();
			logClass.addTrack(
					"modification",
					"Evénement de log de modification du courrier "
							+ courrier.getIdCourrier() + "-"
							+ courrier.getCourrierReferenceCorrespondant(),
					vb.getPerson(), "INFO", appMgr);

			courrier = new Courrier();
			//[JS] : 2020-05-07 
			System.out.println("vb.getCopyDestNom()"+vb.getCopyDestNom());
			System.out.println("vb.getDestNom() "+vb.getDestNom());
			//Modifier ligne 	vb.setDestinataireReel(vb.getCopyDestNom()) par vb.setDestinataireReel(vb.getDestNom()));
			vb.setDestinataireReel(vb.getDestNom());
			
			
			System.out
					.println("***************Succes Modification Courrier***************");
			System.out.println("dest aprés update : LDP "
					+ expdest.getIdExpDestLdap() + " id :" + expdest.getId()
					+ " id exp dest :" + expdest.getIdExpDest());
			vb.setCopyListSelectedPerson(new ArrayList<Person>());
			vb.setCopyListPP(new ArrayList<Pp>());
			vb.setCopyListPM(new ArrayList<Pm>());
			vb.setListSelectedItem(new ArrayList<ItemSelected>());
			vb.setCopyListSelectedBoc(new ArrayList<BOC>());
			vb.setCopyListSelectedUnit(new ArrayList<Unit>());
			vb.setCopyDestNom(vb.getDestNom());
			vb.setCopyListSelectedObject(new ArrayList<Object>());
			vb.setCopyListSelectedObjectExp(new ArrayList<Object>());
			vb.setDestNom(" ");
			vb.setExpNom(" ");
			vb.setListComposantDynamiqueTransmission(new ArrayList<ComposantDynamique>());
			vb.setListComposantDynamiqueNature(new ArrayList<ComposantDynamique>());
			vb.getListComposantDynamiqueTransmission();
			status = true;
		} catch (Exception e) {
			status1 = true;
			e.printStackTrace();
		}
}else{
	System.out.println("Existent des valeurs à 0");
	
//	String erreurMontantZero=messageSource.getMessage("erreurMontantZero",
//			new Object[] {}, lm.createLocal());
	
	if(!passe){
	setMessage(messageSource.getMessage("erreurMontantZero",
			new Object[] {}, lm.createLocal()));
	FacesContext.getCurrentInstance().addMessage(
			"messages",
			new FacesMessage(FacesMessage.SEVERITY_ERROR, message,
					""));
	}

if(!passeNumCheque){
		
		setMessage(messageSource.getMessage("erreurNumCheq",
				new Object[] {}, lm.createLocal()));
		FacesContext.getCurrentInstance().addMessage(
				"messages",
				new FacesMessage(FacesMessage.SEVERITY_ERROR, message,
						""));
		
	}
}
	}

	public String goToListSender() {
		if (vb.getPerson().isBoc()) {
			if (typeCourrier.equals("arrive")) {
				vb.setRedirect("rediretFromCMDestArrToListSender");
				return "rediretFromCMDestArrToListSender";
			} else {
				vb.setRedirect("rediretFromCMDestDepToListSender");
				return "rediretFromCMDestDepToListSender";
			}
		} else {
			vb.setRedirect("rediretFromCMToListSender");
			return "rediretFromCMToListSender";
		}
	}

	public String goToListSender1() {
		if (typeCourrier.equals("arrive")) {
			vb.setRedirect("rediretFromCMExpArrToListSender");
			vb.setCourrierRefOriginal(false);
			return "rediretFromCMExpArrToListSender";
		} else {
			vb.setRedirect("rediretFromCMExpDepToListSender");
			return "rediretFromCMExpDepToListSender";
		}
	}

	public void eventChooseTypeCourrier(ActionEvent evt) {
		System.out.println(typeCourrier);
	}

	public void eventChooseTypeSender(ActionEvent evt) {
		System.out.println(typeSender);
	}

	public void evenementChoixTransfert(ActionEvent evt) {
		if (reponse1.equals("Non")) {
			select1 = false;
			courrier.setCourrierDateReponse(null);
		} else {
			select1 = true;

		}
	}
	// KHA ===================== modification Courrier======================
	public void saveTempValue() {
		 

		try {
			Courrier courrierTemp = new Courrier();

			courrierTemp.setCourrierReferenceCorrespondant(courrier
					.getCourrierReferenceCorrespondant());
			courrierTemp.setCourrierObjet(courrier.getCourrierObjet());
			courrierTemp.setCourrierCommentaire(courrier
					.getCourrierCommentaire());
			courrierTemp.setCourrierDateReceptionReelle(dateReelle);
			courrierTemp.setCourrierRefOriginale(courrier.getCourrierRefOriginale());
			
			courrierTemp.setKeywords(courrier.getKeywords());
			courrierTemp.setCourrierDateReponse(courrier
					.getCourrierDateReponse());
			courrierTemp.setCourrierCircuit(courrier.getCourrierCircuit());
			System.out.println("dans save temp ===> "+selectedItemCategorie);
			vb.setSelectedItemCategorie(selectedItemCategorie);
			
			
			if (selectedItemsTr != null && !vb.getPerson().isBoc()) {
				if ( Integer.valueOf(selectedItemsTr)==9 || Integer.valueOf(selectedItemsTr)==11) {
					affichagePassageBO = true;
					disabledPassageBO=true;
					affichageReceptionPhysique=true;
					//necessiteReceptionPhysique="Non";
					//disabledReceptionPhy=true;
					System.out.println("### affichagePassageBO = False ###");
				} else{
					//disabledReceptionPhy=false;
					if(Integer.valueOf(selectedItemsTr)==10){
						affichagePassageBO = false;

					}else{
						affichagePassageBO = true;
						disabledPassageBO=true;
					}
				}

			}
			
			
			
			if (selectedItemsTr != null && !vb.getPerson().isBoc()) {
				if (Integer.valueOf(selectedItemsTr)==9) {
					affichageReceptionPhysique=true;
					necessiteReceptionPhysique="Non";
					disabledReceptionPhy=true;
					
				} else{
					disabledReceptionPhy=false;
				}

			}
			

			if(selectedItemsTr != null && vb.getPerson().isBoc()){
				if (Integer.valueOf(selectedItemsTr) == 9|| !vb.getCopyListPM().isEmpty() || !vb.getCopyListPP().isEmpty()) {
					necessiteReceptionPhysique="Non";
					disabledReceptionPhy=true;
				}else{
					disabledReceptionPhy=false;
				}
			}
		
			listCD=vb.getListComposantDynamiqueNature();
			
			listChequesTablo=vb.getListChequesSave();
			
			if(selectedItemNature != null){
				courrierTemp.setNature(appMgr.getNatureById(
						Integer.valueOf(selectedItemNature)).get(0));
			//Afficher Panel Chèque 
			 if(Integer.valueOf(selectedItemNature) == 38 || Integer.valueOf(selectedItemNature) == 59 || Integer.valueOf(selectedItemNature) == 80){
				 showPanelCheque=true;
				 //2020-06-06
				 necessiteReceptionPhysique="Oui";
				 passageParBO="Oui";
			}else{
				 showPanelCheque=false;
			}
				if (Integer.valueOf(selectedItemNature) == 44 || Integer.valueOf(selectedItemNature) == 46) {
					showPanelAOC = true;
					
				} else {
					showPanelAOC = false;
				}
			
			if(selectedItemNatureAncien!=null && selectedItemNatureAncien.equals(selectedItemNature)){
				
				try {
					Class aClass = c.getClass();
					Class[] paramTypes = new Class[1];					
					
					if(listCD != null && listCD.size()>0){
					if (listCD.size() > 0) {
						for (int i = 0; i < listCD
								.size(); i++) {
							if (listCD.get(i).getType()
									.equals("RADIO")) {
								paramTypes[0] = Boolean.class;
								listCD
										.get(i)
										.setColonne(
												new Boolean(
														listCD
																.get(i)
																.getColonne()
																+ ""));
							} else
								if ( listCD
										.get(i).getColonne() != null) {
								paramTypes[0] = listCD
										.get(i).getColonne().getClass();
							int idchamp = listCD.get(i)
									.getIdChamps();
							String methodName = "setColonne" + idchamp; // fieldName
																		// String
							Method m = null;
							m = aClass
									.getMethod(methodName, paramTypes);
							String result = (String) m.invoke(c,
									listCD.get(i)
											.getColonne()); // field
															// value
								}
						}
					}
					}
					listCheques.setWrappedData(vb.getListChequesSave());
				} catch (IllegalAccessException iae) {
					iae.printStackTrace();
				}
				
			}else{
				vb.setSelectedItemNature(selectedItemNature);
				selectedItemNatureAncien=selectedItemNature;
				
			// Charger les champs de façon dynamique selon le type de nature
			// sélectionné
			listDSN = appMgr
					.getListDonneeSupplementaireNatureAffectes(Integer
							.valueOf(selectedItemNature));
			
			listCD = new ArrayList<ComposantDynamique>();
			if (listDSN != null	&& listDSN.size() > 0) {
				for (int i = 0; i < listDSN.size(); i++) {

					composantDynamique = new ComposantDynamique();
					String libelle = listDSN.get(i)
							.getLibelleDonnee();
					boolean champObligatoire=listDSN.get(i).isObligatoire();
					
					composantDynamique.setChampOblig(champObligatoire);
					
					String s = msg
							.getProperty(listDSN
									.get(i).getLibelleDonnee());
					
				
					composantDynamique.setName(s);
					composantDynamique
							.setType(listDSN.get(i)
									.getDonneeSupplementaire()
									.getTypeDonneeSupplementaire());
					composantDynamique
							.setIdChamps(listDSN
									.get(i).getDonneeSupplementaire()
									.getIdDonneeSupplementaire());

					listCD.add(composantDynamique);
					
				}

			}
			listChequesTablo=new ArrayList<ChequeModel>();
			ChequeModel fdm = new ChequeModel();
			fdm.setOperation(1);
			fdm.setBoutonPlus(true);
			fdm.setBoutonSupprimer(false);
			listChequesTablo.add(fdm);
			listCheques.setWrappedData(listChequesTablo);
	
			}
			
			
			vb.setListComposantDynamiqueNature(listCD);
			vb.setListChequesSave(listChequesTablo);
			
			}else{
				vb.setSelectedItemNature(null);
				listCD = new ArrayList<ComposantDynamique>();	
				vb.setListComposantDynamiqueNature(listCD);
				listChequesTablo=new ArrayList<ChequeModel>();
				vb.setListChequesSave(listChequesTablo);
				listCheques.setWrappedData(listChequesTablo);
			}

	// Charger les champs de façon dynamique selon le type de transmission
	// sélectionné
		listCDTransmission=vb.getListComposantDynamiqueTransmission();
		if (selectedItemsTr != null) {
			
			if(selectedItemsTrAncien!=null && selectedItemsTrAncien.equals(selectedItemsTr)){
				
				try {
					if (listCDTransmission != null
							&& listCDTransmission
									.size() > 0) {
						Class aClass = c.getClass();
						Class[] paramTypes = new Class[1];
						if (listCDTransmission.size() > 0) {
							for (int i = 0; i < listCDTransmission
									.size(); i++) {

								if (listCDTransmission
										.get(i).getType()
										.equals("RADIO")) {
									paramTypes[0] = Boolean.class;
									listCDTransmission
											.get(i)
											.setColonne(
													new Boolean(
															listCDTransmission
																	.get(i)
																	.getColonne()
																	+ ""));
								} else

								if (listCDTransmission
										.get(i).getColonne() != null) {
									paramTypes[0] = listCDTransmission
											.get(i).getColonne()
											.getClass();
									int idchamp = listCDTransmission
											.get(i).getIdChamps();
									String methodName = "setColonne"
											+ idchamp; // fieldName
														// String
									Method m = null;
									m = aClass.getMethod(methodName,
											paramTypes);
									String result = (String) m.invoke(
											c,
											listCDTransmission
													.get(i)
													.getColonne()); // field
								}
							}
						}
					}
				} catch (IllegalAccessException iae) {
					iae.printStackTrace();
				}

				catch (InvocationTargetException ite) {
					ite.printStackTrace();
				} catch (SecurityException e) {
					e.printStackTrace();
				} catch (NoSuchMethodException e) {
					e.printStackTrace();
				}
				
				
			}else{
				vb.setSelectedItemsTr(selectedItemsTr);
				selectedItemsTrAncien=selectedItemsTr;
				
				//squelette
				listDSNTransmission = appMgr.getListDonneeSupplementaireTransmissionAffectes(Integer.valueOf(selectedItemsTr));
				
				listCDTransmission = new ArrayList<ComposantDynamique>();
					if (listDSNTransmission != null
							&& listDSNTransmission.size() > 0) {
						for (int i = 0; i < listDSNTransmission.size(); i++) {
							composantDynamique = new ComposantDynamique();
							String libelle = listDSNTransmission.get(i)
									.getLibelleDonnee();

							String s = msg
									.getProperty(listDSNTransmission
											.get(i).getLibelleDonnee());

							// set
							composantDynamique.setName(s);
							composantDynamique
									.setType(listDSNTransmission.get(i)
											.getDonneeSupplementaire()
											.getTypeDonneeSupplementaire());
							composantDynamique
									.setIdChamps(listDSNTransmission
											.get(i).getDonneeSupplementaire()
											.getIdDonneeSupplementaire());
							composantDynamique.setPattern(listDSNTransmission.get(i).getPattern());
							composantDynamique.setMessageAlerte(listDSNTransmission.get(i).getMessageAlerte());
							listCDTransmission.add(composantDynamique);
						}
						}
				
				
			}
			
			vb.setListComposantDynamiqueTransmission(listCDTransmission);
			Expdest cupExpDest;
			cupExpDest = new Expdest();
			cupExpDest = appMgr.getListExpDestByIdExpDest(
					transaction.getExpdest().getIdExpDest()).get(0);			
			TransactionDestinationReelle destinataionReel = appMgr
			.getTransactionDestinationReelById(transaction
					.getTransactionDestinationReelle()
					.getTransactionDestinationReelleId());
			if (vb.getPerson().isBoc()) {
				if (selectedItemsTr != null) {
					if (Integer.valueOf(selectedItemsTr) == 1) {

						if (typeCourrier.equals("arrive")) {
							afficheChampsSpecTansmission = true;
						} else
							afficheChampsSpecTansmission = false;
					} else {
						
						if(Integer.valueOf(selectedItemsTr) == 5 || Integer.valueOf(selectedItemsTr) == 6 ){
							
							if((cupExpDest!= null && cupExpDest.getTypeExpDest().equals("Externe") && typeCourrier.equals("arrive")) ||  
									((destinataionReel.getTransactionDestinationReelleTypeDestinataire().equals("Externe") && typeCourrier.equals("depart") ))){
								afficheChampsSpecTansmission = true;
							}else{
								afficheChampsSpecTansmission = false;
							}
						}else{

						afficheChampsSpecTansmission = true;
						}
					}
				}
			} else {
		
			  if((destinataionReel.getTransactionDestinationReelleTypeDestinataire().equals("Externe") && (Integer.valueOf(selectedItemsTr)==5 || Integer.valueOf(selectedItemsTr)==6)) || (Integer.valueOf(selectedItemsTr)==7 || Integer.valueOf(selectedItemsTr)==8) ){
				  afficheChampsSpecTansmission = true;
			  }else{
			  listCDTransmission = new ArrayList<ComposantDynamique>();	
				vb.setListComposantDynamiqueTransmission(listCDTransmission);
				afficheChampsSpecTansmission = false;
			  }
			}
			
		}else{
				vb.setSelectedItemsTr(null);
				listCDTransmission = new ArrayList<ComposantDynamique>();	
				vb.setListComposantDynamiqueTransmission(listCDTransmission);
				afficheChampsSpecTansmission=false;
			
			}
			vb.setTypeSender(typeSender);
			vb.setTypeCourrier(typeCourrier);
			vb.setOtherAnnotation(otherAnnotation);
			
			vb.setChooseAnnotation(chooseAnnotationType);
			vb.setSelectedAnnotationItems(selectedItemsAnnotation);
			
			if (listAnno != null) {
				if (selectedItemsAnnotation != null
						&& selectedItemsAnnotation.size() > 0)
					listAnno.setListeAnnotations(selectedItemsAnnotation);
				chooseAnnotationType = listAnno.getChooseAnnotationType();

				listAnno.setChooseAnnotationType(chooseAnnotationType);

				if (otherAnnotation != null)
					listAnno.setOtherAnnotation(otherAnnotation);

				if (listAnno.getChooseAnnotationType().equals("tous")) {

					listAnno.setDisplay("none");
					listAnno.setDisplayListe("inline");
				} else {
					listAnno.setDisplay("inline");
					listAnno.setDisplayListe("none");
				}
				listAnno = new ListeDestinatairesModel();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	// fonction de selection des annotations dans le listBox
	public List<SelectItem> getSelectItems1() {
		String libelle;
		List<SelectItem> selectItems1 = new ArrayList<SelectItem>();
		for (int j = 0; j <= listAt.size() - 1; j++) {
			Integer idAt = listAt.get(j).getAnnotationId();
			if (!idAt.equals(10)) {
				if (vb.getLocale().equals("ar")) {
					libelle = listAt.get(j).getAnnotationLibelleAr();
				} else {
					libelle = listAt.get(j).getAnnotationLibelle();
				}
				// selectItems1.add(new SelectItem(libelle));
				selectItems1.add(new SelectItem(String.valueOf(idAt), libelle));
			}
		}
		return selectItems1;
	}



	// fonction de selection des modes de transmission dans le listBox
	public List<SelectItem> getSelectItemsTr() {
		String libelle;
		List<SelectItem> selectItemsTr = new ArrayList<SelectItem>();
		selectItemsTr.add(new SelectItem(""));
		for (int j = 0; j <= listTr.size() - 1; j++) {
			Integer idTr = listTr.get(j).getTransmissionId();
			if (vb.getLocale().equals("ar")) {
				libelle = listTr.get(j).getTransmissionLibelleAr();
			} else {
				libelle = listTr.get(j).getTransmissionLibelle();
			}
			selectItemsTr.add(new SelectItem(String.valueOf(idTr), libelle));
		}
		return selectItemsTr;
	}

	// fonction de selection des degrés de confidentialité dans le listBox
	public List<SelectItem> getSelectItemsConf() {
		String libelle;
		List<SelectItem> selectItemsConf = new ArrayList<SelectItem>();
		selectItemsConf.add(new SelectItem(""));
		for (int j = 0; j <= listCf.size() - 1; j++) {
			Integer idCf = listCf.get(j).getConfidentialiteId();
			if (vb.getLocale().equals("ar")) {
				libelle = listCf.get(j).getConfidentialiteLibelleAr();
			} else {
				libelle = listCf.get(j).getConfidentialiteLibelle();
			}
			selectItemsConf.add(new SelectItem(String.valueOf(idCf), libelle));
		}
		return selectItemsConf;
	}
	
	// fonction de selection des degrés d'urgences dans le listBox
	public List<SelectItem> getSelectItemsUg() {
		String libelle;
		List<SelectItem> selectItemsUg = new ArrayList<SelectItem>();
		selectItemsUg.add(new SelectItem(""));
		for (int j = 0; j <= listUg.size() - 1; j++) {
			Integer idUg = listUg.get(j).getUrgenceId();
			if (vb.getLocale().equals("ar")) {
				libelle = listUg.get(j).getUrgenceLibelleAr();
			} else {
				libelle = listUg.get(j).getUrgenceLibelle();
			}
			selectItemsUg.add(new SelectItem(String.valueOf(idUg), libelle));

		}
		return selectItemsUg;
	}
	
	
	public void addCheque() {
		List<ChequeModel> listchequesTab1 = new ArrayList<ChequeModel>();
		ChequeModel fdm = new ChequeModel();
		
		fdm = (ChequeModel) listCheques.getRowData();
		
		listchequesTab1 = (List<ChequeModel>) listCheques.getWrappedData();
		vb.setListChequeTableau(listchequesTab1);
		listchequesTab1 = new ArrayList<ChequeModel>();
		int niveau = fdm.getOperation();
		String d1 = "";
		d1 = vb.getListChequeTableau().get(niveau - 1).getChequeNum();
		if (niveau == 1) {
			if (d1 != null) {
				fdm.setBoutonPlus(false);
				listchequesTab1.add(fdm);
				fdm = new ChequeModel();
				fdm.setOperation(niveau + 1);
				fdm.setBoutonPlus(true);
				fdm.setBoutonSupprimer(true);
				listchequesTab1.add(fdm);
			} else {
				setMessage(messageSource.getMessage("messageDate",
						new Object[] {}, lm.createLocal()));
				FacesContext.getCurrentInstance().addMessage(
						"messages",
						new FacesMessage(FacesMessage.SEVERITY_ERROR, message,
								""));
				listchequesTab1=vb.getListChequeTableau();
			}
		} else if (niveau > 1) {
			listchequesTab1 = vb.getListChequeTableau();
			
			listchequesTab1.get(niveau - 1).setBoutonPlus(false);
			fdm = new ChequeModel();
			fdm.setOperation(niveau + 1);
			fdm.setBoutonPlus(true);
			fdm.setBoutonSupprimer(true);
			listchequesTab1.add(fdm);
			
		}
		
		
		for(int i=0;i<listchequesTab1.size();i++){
			listchequesTab1.get(i).setBoutonPlus(false);
			listchequesTab1.get(i).setBoutonSupprimer(true);
			listchequesTab1.get(i).setOperation(i+1);	
		}
		listchequesTab1.get(listchequesTab1.size() - 1).setBoutonPlus(true);
		if(listchequesTab1.size()==1)
			listchequesTab1.get(0).setBoutonSupprimer(false);
		listCheques.setWrappedData(listchequesTab1);
		vb.setListChequesSave(listchequesTab1);
	}
	
	
	public void suppCheque()
	{	
		ChequeModel fdm = new ChequeModel();
		fdm = (ChequeModel) listCheques.getRowData();
		listExpositionsTab2.remove(fdm);
		listExpositionsTab2.get(listExpositionsTab2.size()-1).setBoutonPlus(true);
		if (listExpositionsTab2.size()==1)
		{
			listExpositionsTab2.get(0).setBoutonSupprimer(false);
		}
		int r=listExpositionsTab2.size();
		
	}
	
	@SuppressWarnings("unchecked")
	public void suppDate() {
		System.out.println("########## dans suppDate ");

		ChequeModel fdm = new ChequeModel();
		fdm = (ChequeModel) listCheques.getRowData();
		System.out.println("########## dans suppDate " + fdm.getOperation());
		int niveau = fdm.getOperation();

		List<ChequeModel> listChequesTab1 = new ArrayList<ChequeModel>();
		listChequesTab1 = (List<ChequeModel>) listCheques.getWrappedData();
		listChequesTab1.remove(niveau - 1);

//		if (niveau == 2) {
//			listChequesTab1.get(0).setBoutonPlus(true);
//			listChequesTab1.get(0).setBoutonSupprimer(false);
//		} else {
//			listChequesTab1.get(niveau - 2).setBoutonPlus(true);
//			listChequesTab1.get(niveau - 2).setBoutonSupprimer(true);
//		}
		
		//Mettre à jour le niveau des ligne du niveau jusqu'au la fin
		for(int i=niveau - 1;i<listChequesTab1.size();i++){
			listChequesTab1.get(i).setBoutonPlus(false);
			listChequesTab1.get(i).setBoutonSupprimer(true);
			listChequesTab1.get(i).setOperation(i+1);	
		}
		listChequesTab1.get(listChequesTab1.size() - 1).setBoutonPlus(true);
		if(listChequesTab1.size()==1)
		listChequesTab1.get(0).setBoutonSupprimer(false);
		listCheques.setWrappedData(listChequesTab1);

	}
	
	
	public void reintialiser() {
		System.out.println("######## listExpositionsTab3 size == " + listExpositionsTab3.size());
		listCheques.setWrappedData(listExpositionsTab3);
		if (listExpositionsTab3 != null && listExpositionsTab3.size() > 0){
		listExpositionsTab3.get(0).setBoutonPlus(true);
		listExpositionsTab3.get(0).setBoutonSupprimer(true);
		}
		if (listExpositionsTab3.size() == 1 ){
			listExpositionsTab3.get(0).setBoutonSupprimer(false);
		}
		
	}
	@SuppressWarnings("unchecked")
	public void updateCheque(){
		try {
		System.out.println("########## Dans saveCheque ##########");
		
		List<Cheque> listeCheques = appMgr.getListeChequeByCourrier(courrier.getIdCourrier());
		System.out.println("listeCheques================< "+listeCheques.size());
		if(listeCheques != null && listeCheques.size()>0){
			for (Cheque cheque : listeCheques){
				appMgr.delete(cheque);
			}
		listChequesTablo = (List<ChequeModel>) listCheques.getWrappedData();
		
		for (ChequeModel chequeDateModel : listChequesTablo) {
			
				Cheque cheque = new Cheque();
				cheque.setChequeBordereauTransmission(vb.getCourrier());
				cheque.setChequeBanque(chequeDateModel.getChequeBanque());
				cheque.setChequeBarre(chequeDateModel.getChequeBarre());
				cheque.setChequeBeneficiaire(chequeDateModel.getChequeBeneficiaire());
				cheque.setChequeDate(chequeDateModel.getChequeDate());
				cheque.setChequeNum(chequeDateModel.getChequeNum());
				cheque.setChequeMontant(chequeDateModel.getChequeMontant());
				appMgr.insert(cheque);
				
				
			
		}
		}else{
			try {

				listChequesTablo = (List<ChequeModel>) listCheques.getWrappedData();
//				System.out.println("########## listChequesTablo size == "
//						+ listChequesTablo.size());
//				System.out.println("exposition.getExpositionType():"
//						+ vb.getCourrier().getIdCourrier());

//				System.out.println("listExpositionsTablo "
//						+ listChequesTablo.size());
				if (listChequesTablo.size() > 0) {
					for (ChequeModel chequeDateModel : listChequesTablo) {

						Cheque cheque = new Cheque();
						cheque.setChequeBordereauTransmission(vb.getCourrier());
						cheque.setChequeBanque(chequeDateModel.getChequeBanque());
						cheque.setChequeBarre(chequeDateModel.getChequeBarre());
						cheque.setChequeBeneficiaire(chequeDateModel
								.getChequeBeneficiaire());
						cheque.setChequeDate(chequeDateModel.getChequeDate());
						cheque.setChequeNum(chequeDateModel.getChequeNum());
						cheque.setChequeMontant(chequeDateModel.getChequeMontant());
						appMgr.insert(cheque);

					}
				}
			} catch (Exception e) {
				System.out.println("########## erreur ajout cheque############");
				e.printStackTrace();
			}
		}
		
		
		
		}catch (Exception e) {
			System.out.println("########## erreur ajout cheque############");
			e.printStackTrace();
		}
	}
	


	// Getters & Setters

	public ApplicationManager getAppMgr() {
		return appMgr;
	}

	public void setAppMgr(ApplicationManager appMgr) {
		this.appMgr = appMgr;
	}

	public Export getExport() {
		return export;
	}

	public void setExport(Export export) {
		this.export = export;
	}

	public Courrier getCourrier() {
		return courrier;
	}

	public void setCourrier(Courrier courrier) {
		this.courrier = courrier;
	}

	public Date getDate1() {
		return date1;
	}

	public void setDate1(Date date1) {
		this.date1 = date1;
	}

	public VariableGlobale getVb() {
		return vb;
	}

	public void setVb(VariableGlobale vb) {
		this.vb = vb;
	}

	public LanguageManagerBean getLm() {
		return lm;
	}

	public void setLm(LanguageManagerBean lm) {
		this.lm = lm;
	}

	public MessageSource getMessageSource() {
		return messageSource;
	}

	public void setMessageSource(MessageSource messageSource) {
		this.messageSource = messageSource;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public String getSelectedItemNature() {
		return selectedItemNature;
	}

	public void setSelectedItemNature(String selectedItemNature) {
		this.selectedItemNature = selectedItemNature;
	}

	public String getSelectedItemConf() {
		return selectedItemConf;
	}

	public void setSelectedItemConf(String selectedItemConf) {
		this.selectedItemConf = selectedItemConf;
	}

	public String getSelectedItemUg() {
		return selectedItemUg;
	}

	public void setSelectedItemUg(String selectedItemUg) {
		this.selectedItemUg = selectedItemUg;
	}

	public String getSelectedItemsTr() {
		return selectedItemsTr;
	}

	public void setSelectedItemsTr(String selectedItemsTr) {
		this.selectedItemsTr = selectedItemsTr;
	}

	public List<String> getSelectedItemsAnnotation() {
		System.out.println("DANS GET selectedItemsAnnotation "+selectedItemsAnnotation);
		return selectedItemsAnnotation;
	}

	public void setSelectedItemsAnnotation(List<String> selectedItemsAnnotation) {
		this.selectedItemsAnnotation = selectedItemsAnnotation;
	}

	public List<Nature> getListNat() {
		return listNat;
	}

	public void setListNat(List<Nature> listNat) {
		this.listNat = listNat;
	}

	public List<Confidentialite> getListCf() {
		return listCf;
	}

	public void setListCf(List<Confidentialite> listCf) {
		this.listCf = listCf;
	}

	public List<Urgence> getListUg() {
		return listUg;
	}

	public void setListUg(List<Urgence> listUg) {
		this.listUg = listUg;
	}

	public List<Annotation> getListAt() {
		return listAt;
	}

	public void setListAt(List<Annotation> listAt) {
		this.listAt = listAt;
	}

	public List<Transmission> getListTr() {
		return listTr;
	}

	public void setListTr(List<Transmission> listTr) {
		this.listTr = listTr;
	}

	public String getReponse1() {
		return reponse1;
	}

	public void setReponse1(String reponse1) {
		this.reponse1 = reponse1;
	}

	public boolean isSelect1() {
		return select1;
	}

	public void setSelect1(boolean select1) {
		this.select1 = select1;
	}

	public LdapOperation getLdapOperation() {
		return ldapOperation;
	}

	public void setLdapOperation(LdapOperation ldapOperation) {
		this.ldapOperation = ldapOperation;
	}

	public String getAssociatedUnit() {
		return associatedUnit;
	}

	public void setAssociatedUnit(String associatedUnit) {
		this.associatedUnit = associatedUnit;
	}

	public String getAssociatedLabel() {
		return associatedLabel;
	}

	public void setAssociatedLabel(String associatedLabel) {
		this.associatedLabel = associatedLabel;
	}

	public String getTypeSender() {
		return typeSender;
	}

	public void setTypeSender(String typeSender) {
		this.typeSender = typeSender;
	}

	public void setSelectItemsNat(ArrayList<SelectItem> selectItemsNat) {
		this.selectItemsNat = selectItemsNat;
	}

	public void setSelectItemsTr(ArrayList<SelectItem> selectItemsTr) {
		this.selectItemsTr = selectItemsTr;
	}

	public void setSelectItemsConf(ArrayList<SelectItem> selectItemsConf) {
		this.selectItemsConf = selectItemsConf;
	}

	public void setSelectItemsUg(ArrayList<SelectItem> selectItemsUg) {
		this.selectItemsUg = selectItemsUg;
	}

	public String getTypeCourrier() {
		return typeCourrier;
	}

	public void setTypeCourrier(String typeCourrier) {
		this.typeCourrier = typeCourrier;
	}

	public boolean isShowFacetUser() {
		return showFacetUser;
	}

	public void setShowFacetUser(boolean showFacetUser) {
		this.showFacetUser = showFacetUser;
	}

	public boolean isShowFacetBoc() {
		return showFacetBoc;
	}

	public void setShowFacetBoc(boolean showFacetBoc) {
		this.showFacetBoc = showFacetBoc;
	}

	public void setNature(Nature nature) {
		this.nature = nature;
	}

	public Nature getNature() {
		return nature;
	}

	public void setTransmission(Transmission transmission) {
		this.transmission = transmission;
	}

	public Transmission getTransmission() {
		return transmission;
	}

	public void setUrgence(Urgence urgence) {
		this.urgence = urgence;
	}

	public Urgence getUrgence() {
		return urgence;
	}

	public void setConfidentialite(Confidentialite confidentialite) {
		this.confidentialite = confidentialite;
	}

	public Confidentialite getConfidentialite() {
		return confidentialite;
	}

	public void setTransaction(Transaction transaction) {
		this.transaction = transaction;
	}

	public Transaction getTransaction() {
		return transaction;
	}

	public void setStatus(boolean status) {
		this.status = status;
	}

	public boolean isStatus() {
		return status;
	}

	public void setStatus1(boolean status1) {
		this.status1 = status1;
	}

	public boolean isStatus1() {
		return status1;
	}

	public void setDossier(Dossier dossier) {
		this.dossier = dossier;
	}

	public Dossier getDossier() {
		return dossier;
	}

	public VariableGlobaleNotification getVbn() {
		return vbn;
	}

	public void setVbn(VariableGlobaleNotification vbn) {
		this.vbn = vbn;
	}

	public Informations getInfo1() {
		return info1;
	}

	public void setInfo1(Informations info1) {
		this.info1 = info1;
	}

	public Informations getInfo2() {
		return info2;
	}

	public void setInfo2(Informations info2) {
		this.info2 = info2;
	}

	public Informations getInfo3() {
		return info3;
	}

	public void setInfo3(Informations info3) {
		this.info3 = info3;
	}

	public Informations getInfo4() {
		return info4;
	}

	public void setInfo4(Informations info4) {
		this.info4 = info4;
	}

	public List<Informations> getListInfo() {
		return listInfo;
	}

	public void setListInfo(List<Informations> listInfo) {
		this.listInfo = listInfo;
	}

	public String getTypeNotification() {
		return typeNotification;
	}

	public void setTypeNotification(String typeNotification) {
		this.typeNotification = typeNotification;
	}

	public void setChooseAnnotationType(String chooseAnnotationType) {
		this.chooseAnnotationType = chooseAnnotationType;
	}

	public String getChooseAnnotationType() {
		return chooseAnnotationType;
	}

	public void setOtherAnnotation(String otherAnnotation) {
		this.otherAnnotation = otherAnnotation;
	}

	public String getOtherAnnotation() {
		return otherAnnotation;
	}

	public boolean isShowTous() {
		return showTous;
	}

	public void setShowTous(boolean showTous) {
		this.showTous = showTous;
	}

	public String[] getSelectedAnnot() {
		return selectedAnnot;
	}

	public void setSelectedAnnot(String[] selectedAnnot) {
		this.selectedAnnot = selectedAnnot;
	}

	public String getDisplayOther() {
		return displayOther;
	}

	public void setDisplayOther(String displayOther) {
		this.displayOther = displayOther;
	}

	public String getDisplayPick() {
		return displayPick;
	}

	public void setDisplayPick(String displayPick) {
		this.displayPick = displayPick;
	}

	public void setDateReelle(Date dateReelle) {
		this.dateReelle = dateReelle;
	}

	public Date getDateReelle() {
		return dateReelle;
	}

	public void setSelectedItemCategorie(String selectedItemCategorie) {
		this.selectedItemCategorie = selectedItemCategorie;
	}

	public String getSelectedItemCategorie() {
		return selectedItemCategorie;
	}


	public void setListNatCategorie(List<NatureCategorie> listNatCategorie) {
		this.listNatCategorie = listNatCategorie;
	}

	public List<NatureCategorie> getListNatCategorie() {
		return listNatCategorie;
	}

	public void setSelectItemsNatCategorie(ArrayList<SelectItem> selectItemsNatCategorie) {
		this.selectItemsNatCategorie = selectItemsNatCategorie;
	}

	public ArrayList<SelectItem> getSelectItemsNatCategorie() {
		String libelle;
		 ArrayList<SelectItem> selectItemsNatCategorie=new ArrayList<SelectItem>();
		selectItemsNatCategorie.add(new SelectItem(""));
		for (int j = 0; j <= listNatCategorie.size() - 1; j++) {
			Integer idNat = listNatCategorie.get(j).getNatureCategorieId();
			if (vb.getLocale().equals("ar")) {
				libelle = listNatCategorie.get(j).getCategorieLibelle_AR();
			} else {
				libelle = listNatCategorie.get(j).getCategorieLibelle();
			}
			selectItemsNatCategorie.add(new SelectItem(String.valueOf(idNat), libelle));
		}
		return selectItemsNatCategorie;
	}
	public void chargerNature(ActionEvent evt) {
		System.out.println("Charger nature");
		if (!selectedItemCategorie.equals("")) {
			listNat = appMgr.listNaturesByCategorie(Integer
					.valueOf(selectedItemCategorie));
			
		}
		showPanelAOC=false;
		showPanelCheque = false;
		getSelectItemsNat();

	}
	
	// fonction de selection des natures dans le listBox
	public List<SelectItem> getSelectItemsNat() {	
		
		List<SelectItem> selectItemsNat = new ArrayList<SelectItem>();

		String libelle;
		selectItemsNat.add(new SelectItem(""));
		for (int j = 0; j <= listNat.size() - 1; j++) {
			Integer idNature = listNat.get(j).getNatureId();
			libelle = listNat.get(j).getNatureLibelle();
			selectItemsNat.add(new SelectItem(String.valueOf(idNature),
					libelle));
		}
		return selectItemsNat;

	}

	public void setListDSN(List<DonneeSupplementaireNature> listDSN) {
		this.listDSN = listDSN;
	}

	public List<DonneeSupplementaireNature> getListDSN() {
		return listDSN;
	}

	public void setMsg(Properties msg) {
		this.msg = msg;
	}

	public Properties getMsg() {
		return msg;
	}

	public void setComposantDynamique(ComposantDynamique composantDynamique) {
		this.composantDynamique = composantDynamique;
	}

	public ComposantDynamique getComposantDynamique() {
		return composantDynamique;
	}

	public void setListCD(List<ComposantDynamique> listCD) {
		this.listCD = listCD;
	}

	public List<ComposantDynamique> getListCD() {
		return listCD;
	}

	public void setCourrierDS(CourrierDonneeSupplementaire courrierDS) {
		this.courrierDS = courrierDS;
	}

	public CourrierDonneeSupplementaire getCourrierDS() {
		return courrierDS;
	}

	public void setCds(CourrierDonneeSupplementaire cds) {
		this.cds = cds;
	}

	public CourrierDonneeSupplementaire getCds() {
		return cds;
	}

	public boolean isReponseBO() {
		return reponseBO;
	}

	public void setReponseBO(boolean reponseBO) {
		this.reponseBO = reponseBO;
	}

	public ListeDestinatairesModel getListAnno() {
		return listAnno;
	}

	public void setListAnno(ListeDestinatairesModel listAnno) {
		this.listAnno = listAnno;
	}

	public List<DonneeSupplementaireNature> getListDSNTransmission() {
		return listDSNTransmission;
	}

	public void setListDSNTransmission(
			List<DonneeSupplementaireNature> listDSNTransmission) {
		this.listDSNTransmission = listDSNTransmission;
	}


	public List<ComposantDynamique> getListCDTransmission() {
		return listCDTransmission;
	}

	public void setListCDTransmission(List<ComposantDynamique> listCDTransmission) {
		this.listCDTransmission = listCDTransmission;
	}

	public String getCodeUniqueCourrier() {
		return codeUniqueCourrier;
	}

	public void setCodeUniqueCourrier(String codeUniqueCourrier) {
		this.codeUniqueCourrier = codeUniqueCourrier;
	}

	public List<Variables> getVar() {
		return var;
	}

	public void setVar(List<Variables> var) {
		this.var = var;
	}

	public String getCupSRV() {
		return cupSRV;
	}

	public void setCupSRV(String cupSRV) {
		this.cupSRV = cupSRV;
	}

	public boolean isShowPanelAOC() {
		return showPanelAOC;
	}

	public void setShowPanelAOC(boolean showPanelAOC) {
		this.showPanelAOC = showPanelAOC;
	}

	public ListDataModel getListCheques() {
		return listCheques;
	}

	public void setListCheques(ListDataModel listCheques) {
		this.listCheques = listCheques;
	}

	public boolean isShowPanelCheque() {
		return showPanelCheque;
	}

	public void setShowPanelCheque(boolean showPanelCheque) {
		this.showPanelCheque = showPanelCheque;
	}

	public void setAfficheChampsSpecTansmission(boolean afficheChampsSpecTansmission) {
		this.afficheChampsSpecTansmission = afficheChampsSpecTansmission;
	}

	public boolean isAfficheChampsSpecTansmission() {
		return afficheChampsSpecTansmission;
	}

	public void setSelectedItemsTrAncien(String selectedItemsTrAncien) {
		this.selectedItemsTrAncien = selectedItemsTrAncien;
	}

	public String getSelectedItemsTrAncien() {
		return selectedItemsTrAncien;
	}

	public void setSelectedItemNatureAncien(String selectedItemNatureAncien) {
		this.selectedItemNatureAncien = selectedItemNatureAncien;
	}

	public String getSelectedItemNatureAncien() {
		return selectedItemNatureAncien;
	}

	public boolean isAffichagePassageBO() {
		return affichagePassageBO;
	}

	public void setAffichagePassageBO(boolean affichagePassageBO) {
		this.affichagePassageBO = affichagePassageBO;
	}

	public String getPassageParBO() {
		return passageParBO;
	}

	public void setPassageParBO(String passageParBO) {
		this.passageParBO = passageParBO;
	}

	public List<ChequeModel> getListChequesTablo() {
		return listChequesTablo;
	}

	public void setListChequesTablo(List<ChequeModel> listChequesTablo) {
		this.listChequesTablo = listChequesTablo;
	}

	public ArrayList<ChequeModel> getListExpositionsTab2() {
		return listExpositionsTab2;
	}

	public void setListExpositionsTab2(ArrayList<ChequeModel> listExpositionsTab2) {
		this.listExpositionsTab2 = listExpositionsTab2;
	}

	public ArrayList<ChequeModel> getListExpositionsTab3() {
		return listExpositionsTab3;
	}

	public void setListExpositionsTab3(ArrayList<ChequeModel> listExpositionsTab3) {
		this.listExpositionsTab3 = listExpositionsTab3;
	}

	public String getNumeroAoConsultation() {
		return numeroAoConsultation;
	}

	public void setNumeroAoConsultation(String numeroAoConsultation) {
		this.numeroAoConsultation = numeroAoConsultation;
	}

	public AoConsultation getAoConsultation() {
		return aoConsultation;
	}

	public void setAoConsultation(AoConsultation aoConsultation) {
		this.aoConsultation = aoConsultation;
	}

	public String getHeure1() {
		return heure1;
	}

	public void setHeure1(String heure1) {
		this.heure1 = heure1;
	}

	public String getHeure3() {
		return heure3;
	}

	public void setHeure3(String heure3) {
		this.heure3 = heure3;
	}

	public String getHeure2() {
		return heure2;
	}

	public void setHeure2(String heure2) {
		this.heure2 = heure2;
	}

	public boolean isPasse() {
		return passe;
	}

	public void setPasse(boolean passe) {
		this.passe = passe;
	}

	public void setC(CourrierDonneeSupplementaire c) {
		this.c = c;
	}

	public CourrierDonneeSupplementaire getC() {
		return c;
	}

	public void setNecessiteReceptionPhysique(String necessiteReceptionPhysique) {
		this.necessiteReceptionPhysique = necessiteReceptionPhysique;
	}

	public String getNecessiteReceptionPhysique() {
		return necessiteReceptionPhysique;
	}

	public void setAffichageReceptionPhysique(boolean affichageReceptionPhysique) {
		this.affichageReceptionPhysique = affichageReceptionPhysique;
	}

	public boolean isAffichageReceptionPhysique() {
		return affichageReceptionPhysique;
	}

	public boolean isDisabledReceptionPhy() {
		return disabledReceptionPhy;
	}

	public void setDisabledReceptionPhy(boolean disabledReceptionPhy) {
		this.disabledReceptionPhy = disabledReceptionPhy;
	}

	public boolean isDisabledPassageBO() {
		return disabledPassageBO;
	}

	public void setDisabledPassageBO(boolean disabledPassageBO) {
		this.disabledPassageBO = disabledPassageBO;
	}

	public void setChampDesabled(boolean champDesabled) {
		this.champDesabled = champDesabled;
	}

	public boolean isChampDesabled() {
		return champDesabled;
	}

	public boolean isNotExistAoConsultation() {
		return notExistAoConsultation;
	}

	public void setNotExistAoConsultation(boolean notExistAoConsultation) {
		this.notExistAoConsultation = notExistAoConsultation;
	}



	
}
