package xtensus.beans.common.GBO;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import javax.annotation.PostConstruct;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import javax.servlet.ServletContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import xtensus.aop.LogClass;
import xtensus.beans.common.LanguageManagerBean;
import xtensus.beans.common.ListeDestinatairesModel;
import xtensus.beans.common.VariableGlobale;
import xtensus.beans.utils.ComposantDynamique;
import xtensus.beans.utils.CourrierConsulterInformations;
import xtensus.entity.Annotation;
import xtensus.entity.AoConsultation;
import xtensus.entity.Cheque;
import xtensus.entity.Confidentialite;
import xtensus.entity.Courrier;
import xtensus.entity.CourrierDonneeSupplementaire;
import xtensus.entity.CourrierDossier;
import xtensus.entity.CourrierDossierId;
import xtensus.entity.CourrierLiens;
import xtensus.entity.CourrierLiensId;
import xtensus.entity.Document;
import xtensus.entity.DonneeSupplementaireNature;
import xtensus.entity.Dossier;
import xtensus.entity.Etat;
import xtensus.entity.Expdest;
import xtensus.entity.Expdestexterne;
import xtensus.entity.Lienscourriers;
import xtensus.entity.Nature;
import xtensus.entity.NatureCategorie;
import xtensus.entity.Pm;
import xtensus.entity.Pp;
import xtensus.entity.Transaction;
import xtensus.entity.TransactionAnnotation;
import xtensus.entity.TransactionAnnotationId;
import xtensus.entity.TransactionDestination;
import xtensus.entity.TransactionDestinationId;
import xtensus.entity.TransactionDestinationReelle;
import xtensus.entity.Transmission;
import xtensus.entity.Typedossier;
import xtensus.entity.Typetransaction;
import xtensus.entity.Urgence;
import xtensus.entity.Utilisateur;
import xtensus.entity.Variables;
import xtensus.ldap.model.BOC;
import xtensus.ldap.model.ItemSelected;
import xtensus.ldap.model.Person;
import xtensus.ldap.model.Unit;
import xtensus.services.ApplicationManager;
import xtensus.services.Export;

@Component
@Scope("request")
public class CourrierTransfereBean {

	private ApplicationManager appMgr;
	private Export export;
	private Courrier courrier;
	private Dossier dossier;
	private Transaction transaction;
	private TransactionDestination transactionDestination;
	private TransactionAnnotation transactionAnnotation;
	private TransactionAnnotation cA;
	private TransactionAnnotationId cI;
	public boolean status;
	public boolean status1;
	public boolean status2;
	public boolean status3;
	private Date date;
	private Date date1;
	private Nature nature;
	private Transmission transmission;
	private Confidentialite confidentialite;
	private Urgence urgence;
	private Expdestexterne expdestexterne;
	private List<Expdestexterne> listDestExpdestexternes;
	private Utilisateur utilisateur;
	private List<CourrierConsulterInformations> courrierConsulterInformations;
	private Date dateReception;
	private Date dateReponse;
	@Autowired
	private VariableGlobale vb;
	@Autowired
	private LanguageManagerBean lm;
	@Autowired
	private MessageSource messageSource;
	private String message;
	private List<Integer> listIdBocMembers;
	private CourrierDonneeSupplementaire c;
	private String selectedItemNature;
	private String selectedItemConf;
	private String selectedItemUg;
	private String selectedItemsTr;
	private String selectedItemsTrAncien;
	private String associatedUnit;
	private String associatedLabel;
	private String typeExpediteur;
	private List<String> selectedItemsAnnotation;
	List<Annotation> listAnnotations;
	private String necessiteReceptionPhysique;

	private List<Confidentialite> listCf;
	private List<Urgence> listUg;
	private List<Annotation> listAt;

	private String reponse1;
	private boolean select1 = false;
	private String typeSender;
	private Integer idBoc;
	private String typeCourrier;
	private boolean showFacetUser;
	private boolean showFacetBoc;
	private String courrierCommentaire;

	private String chooseAnnotationType;
	private String otherAnnotation;
	private String labelName;
	private String displayOther;
	private String displayPick;
	// C*
	private Courrier newCourrier;
	private Courrier ccc;
	private List<Transmission> listTr;
	// *** KHA
	private List<ListeDestinatairesModel> destinataires;
	private ListeDestinatairesModel listAnno;
	private boolean affichagePassageBO;
	// C*
	// [JS]
	private List<DonneeSupplementaireNature> listDSN;
	private Properties msg;
	private ComposantDynamique composantDynamique;
	private List<ComposantDynamique> listCD;
	private CourrierDonneeSupplementaire courrierDS;
	private CourrierDonneeSupplementaire courrierDSS;
	private CourrierDonneeSupplementaire cds;
	private boolean reponseBO;
	private String passageParBO;
	private Transaction copyNouvelleTransaction;
    private int premiereEntreeTransfert;
	private NatureCategorie categorieNature;
	@Autowired
	private CourrierAjoutBean ajoutBean;
	private List<DonneeSupplementaireNature> listDSNTransmission;
	private List<ComposantDynamique> listCDTransmission;
	private ListDataModel listCheques;
	private boolean showPanelCheque;
	private ArrayList<ChequeModel> listExpositionsTab2;
	private boolean afficheChampsSpecTansmission;
	private boolean showDonneSupp;
	private boolean sansDestinataire;

	// /
	@Autowired
	public CourrierTransfereBean(
			@Qualifier("applicationManager") ApplicationManager appMgr,
			@Qualifier("export") Export export) {
		this.appMgr = appMgr;
		this.export = export;
		typeExpediteur = "MoiMeme";
		courrier = new Courrier();
		dossier = new Dossier();
		transaction = new Transaction();
		transactionDestination = new TransactionDestination();
		transactionAnnotation = new TransactionAnnotation();
		nature = new Nature();
		transmission = new Transmission();
		confidentialite = new Confidentialite();
		urgence = new Urgence();
		expdestexterne = new Expdestexterne();
		listDestExpdestexternes = new ArrayList<Expdestexterne>();
		utilisateur = new Utilisateur();
		courrierConsulterInformations = new ArrayList<CourrierConsulterInformations>();
		setListAt(new ArrayList<Annotation>());
		listCf = new ArrayList<Confidentialite>();
		listUg = new ArrayList<Urgence>();
		date = new Date();
		date1 = new Date();
		selectedItemsAnnotation = new ArrayList<String>();
		cA = new TransactionAnnotation();
		cI = new TransactionAnnotationId();
		listAnnotations = new ArrayList<Annotation>();
		listAnno = new ListeDestinatairesModel();
		typeSender = "MonUnite";
		chooseAnnotationType = "tous";
		// C*
		newCourrier = new Courrier();
		ccc = new Courrier();
		listTr = new ArrayList<Transmission>();
		// C*
		// *** KHA
		destinataires = new ArrayList<ListeDestinatairesModel>();
		// vb.setListeDestinataire(destinataires);
		// [JS]
		listDSN = new ArrayList<DonneeSupplementaireNature>();
		listCD = new ArrayList<ComposantDynamique>();
		courrierDS = new CourrierDonneeSupplementaire();
		cds = new CourrierDonneeSupplementaire();
		listIdBocMembers = new ArrayList<Integer>();
		categorieNature = new NatureCategorie();
		listCheques= new ListDataModel();
		c = new CourrierDonneeSupplementaire();
		listCDTransmission=new ArrayList<ComposantDynamique>();
		// /
	}

	public ListeDestinatairesModel getListAnno() {
		return listAnno;
	}

	public void setListAnno(ListeDestinatairesModel listAnno) {
		this.listAnno = listAnno;
	}

	@PostConstruct
	public void Initialize() {
		try {
			// [JS] : tester l'accées à la page de transfert pour la prmière
			// fois
			// System.out.println("2019-12-04 vb.getDestNom() ::: "+vb.getDestNom() );
		//	System.out.println("premiereEntreeTransfert before if : "
				//	+ vb.getPremiereEntreeTransfert());
			if (vb.getPremiereEntreeTransfert() == 1) {
			//	System.out.println("Initialisation List Personne ");
				vb.setCopyListSelectedPerson(new ArrayList<Person>());
				vb.setListSelectedItem(new ArrayList<ItemSelected>());
				vb.setPremiereEntreeTransfert(vb.getPremiereEntreeTransfert() + 1);
				vb.setListeDestinataire(new ArrayList<ListeDestinatairesModel>());
				vb.setCopyListSelectedUnit(new ArrayList<Unit>());
				
			}
//			System.out.println("premiereEntreeTransfert after if : "
//					+ vb.getPremiereEntreeTransfert());
//			if (vb.getCopyListSelectedUnit() != null)
//				System.out.println("Dests "
//						+ vb.getCopyListSelectedUnit().size());
//			else {
//				System.out.println("Dests 00");
//			}
			
			// *** KHA
			destinataires = new ArrayList<ListeDestinatairesModel>();
			destinataires = vb.getListeDestinataire();
//			System.out.println(" DANS INIT "+destinataires.size());
		

			if (vb.getPerson().getAssociatedDirection() != null) {
				associatedUnit = vb.getPerson().getAssociatedDirection()
						.getNameUnit();
				associatedLabel = "Au nom de mon Unité";
			} else {
				associatedUnit = vb.getPerson().getAssociatedBOC().getNameBOC();
				associatedLabel = "Au nom de mon BO";
			}
			showFacetUser = true;
			showFacetBoc = false;
			if (vb.getRedirect().equals("rediretFromCTExpDepToListSender")
					|| vb.getRedirect().equals(
							"rediretFromCTDestDepToListSender")) {
				typeCourrier = "depart";
			} else {
				typeCourrier = "arrive";
			}
			if (vb.getPerson().isBoc()) {
//				System.out.println("c'est un membre d'un BO");
				showFacetUser = false;
				showFacetBoc = true;
			}
			courrier = vb.getCourrier();
//			System.out.println("############################################ "+courrier.getIdCourrier());
			nature = appMgr.getNatureById(courrier.getNature().getNatureId()).get(0);
			categorieNature = nature.getNatureCategorie();
			Integer natureID = nature.getNatureId();
//			 if(natureID == 38 || natureID == 59 || natureID == 80){
//				 showPanelCheque=true;
//				 System.out.println("2019-11-18 ; showPanelCheque == "+showPanelCheque);
//				 }else{
//					 showPanelCheque=false;
//				 }
//				 System.out.println("2019-11-18 out showPanelCheque == "+showPanelCheque);
//			System.out.println("Nature Sélectionné :" + nature.getNatureLibelle());
			// ****
			if (!vb.getPerson().isBoc()) {
//				System.out.println("compte connecté non BOC");

				affichagePassageBO = true;			
				//Destinataire PP ou PM => Masquer Affichage Panel Passage Par BO 
//				System.out.println("!vb.getCopyListPM().isEmpty() " +!vb.getCopyListPM().isEmpty());
//				System.out.println("!vb.getCopyListPP().isEmpty() " +!vb.getCopyListPP().isEmpty());
				if(!vb.getCopyListPM().isEmpty() || !vb.getCopyListPP().isEmpty()){
//					System.out.println("affichagePassageBO=false");
					affichagePassageBO=false;
			}

			} else {
				affichagePassageBO = false;
				passageParBO="Oui";

			}
			// Load fichier Properties
			ExternalContext jsfContext = FacesContext.getCurrentInstance()
					.getExternalContext();
			ServletContext servletContext = (ServletContext) jsfContext
					.getContext();
//			System.out.println("Contenu de variable local :" + vb.getLocalFr());
			String webContentRoot = servletContext.getRealPath("/");
			String pathConfigFile = webContentRoot + File.separator + "WEB-INF"
					+ File.separator + "classes" + File.separator + "messages_"
					+ vb.getLocalFr() + ".properties";
			msg = new Properties();
//			System.out.println("Path Fichier :" + pathConfigFile);
			try {
				msg.load(new FileInputStream(pathConfigFile));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			/*listDSNTransmission = appMgr.getListDonneeSupplementaireTransmissionAffectes(courrier.getTransmission().getTransmissionId());
			System.out.println("Liste DSN :"+listDSNTransmission.size());
			listCDTransmission=new ArrayList<ComposantDynamique>();
			aClass=cds.getClass();
			System.out.println("Id Courrier :"+courrier.getIdCourrier());
			courrierDS=appMgr.getDonneeSupplementaireCourrier(courrier.getIdCourrier());*/
          //  System.out.println(courrierDS.getColonne1());            
			/*if(listDSNTransmission != null && listDSNTransmission.size()>0){
				for(int i=0; i<listDSNTransmission.size();i++)
				{
					composantDynamique=new ComposantDynamique();
					System.out.println("==================================");
					String libelle=listDSNTransmission.get(i).getLibelleDonnee();
					System.out.println("Libellé "+libelle);
					String libelleNature= msg.getProperty(libelle);
					System.out.println("Libellé :"+libelleNature);
					System.out.println("==================================");
					composantDynamique.setName(libelleNature);
					composantDynamique.setType(listDSNTransmission.get(i).getDonneeSupplementaire().getTypeDonneeSupplementaire());
					composantDynamique.setIdChamps(listDSNTransmission.get(i).getDonneeSupplementaire().getIdDonneeSupplementaire());							
					
					listCDTransmission.add(composantDynamique);
					int idchamp=listCDTransmission.get(i).getIdChamps();
					String typeChamp=listCDTransmission.get(i).getType();
					
					String methodName = "getColonne"+idchamp; 
					Method m = null;	
					m = aClass.getMethod(methodName);
					System.out.format("Methode : %s%n", m.toGenericString());
					Object resultat=m.invoke(courrierDS, new Object[0]);  
					System.out.println("Resultat :" + resultat);
					if(typeChamp.equals("RADIO")){
						if(resultat.equals("true")){
							resultat="true";
						}else
							resultat="false";
					}
					composantDynamique.setColonne(resultat);

				}

			}*/
			// [JS]

			vb.setNature(nature);
			// [JS]
			// reponseBO = courrier.getCourrierNecessitePassageParBO();
			// System.out.println("reponseBO :" + reponseBO);
			// confidentialite = appMgr.getConfidentialiteById(
			// courrier.getConfidentialite().getConfidentialiteId())
			// .get(0);
			// vb.setConfidentialite(confidentialite);

			// urgence = appMgr.getUrgenceById(
			// courrier.getUrgence().getUrgenceId()).get(0);
			// vb.setUrgence(urgence);

			transmission = appMgr.getTransmissionById(
					courrier.getTransmission().getTransmissionId()).get(0);
			vb.setTransmission(transmission);

			// if (vb.isToReplay()) {
			// labelName = messageSource.getMessage("repondreCourrier",new
			// Object[] {}, lm.createLocal());
			// } else {
			labelName = messageSource.getMessage("FacetTransfer",new Object[] {}, lm.createLocal());
			// }

			listAt = appMgr.getList(Annotation.class);
			listUg = appMgr.getList(Urgence.class);
			listCf = appMgr.getList(Confidentialite.class);

			// selectedItemConf =
			// confidentialite.getConfidentialiteId().toString();
			// selectedItemUg = urgence.getUrgenceId().toString();

			if (vb.getLocale().equals("ar")) {
				selectedItemNature = nature.getNatureLibelleAr();
				// selectedItemsTr = transmission.getTransmissionLibelleAr();
			} else {
				selectedItemNature = nature.getNatureLibelle();
				// selectedItemsTr = transmission.getTransmissionLibelle();
			}
			CourrierDossier courrierDossier = new CourrierDossier();
			courrierDossier = appMgr.getCourrierDossierByIdCourrier(
					courrier.getIdCourrier()).get(0);
			int refDossier = courrierDossier.getId().getDossierId();
			dossier = appMgr.getDossierByIdDossier(refDossier).get(0);
			transaction = appMgr.getTransactionByIdDossier(refDossier).get(0);
			int refTransaction = transaction.getTransactionId();
			chooseAnnotationType = "tous";
			displayOther = "none";
			displayPick = "inline";

			// C*
			listTr = appMgr.getList(Transmission.class);
			newCourrier.setCourrierObjet("TR : " + courrier.getCourrierObjet());
			newCourrier.setCourrierCommentaire("TR : "
					+ courrier.getCourrierCommentaire());
			newCourrier.setCourrierCopyTransfere("TR");
			//selectedItemsTr = courrier.getTransmission().getTransmissionId().toString();
			selectedItemsTr=vb.getSelectedItemsTr();
//			System.out.println("###### selectedItemsTr " + selectedItemsTr);
//			System.out.println("###### vb.getTransmission() " + vb.getTransmission());
			selectedItemConf = courrier.getConfidentialite()
					.getConfidentialiteId().toString();
			selectedItemUg = courrier.getUrgence().getUrgenceId().toString();
			reponse1 = courrier.getCourrierNecessiteReponse();
			necessiteReceptionPhysique=String.valueOf(courrier.getCourrierAvecDocumentPhysique());
//			System.out.println("necessiteReceptionPhysique === > "+necessiteReceptionPhysique);
			if (reponse1.equals("Oui")) {
				dateReponse = courrier.getCourrierDateReponse();
				select1 = true;
				
			}
			 	listExpositionsTab2=new ArrayList<ChequeModel>();
				List<Cheque> listeCheques = appMgr.getListeChequeByCourrier(courrier.getIdCourrier());
				for ( Cheque cheque : listeCheques){
					ChequeModel fdm = new ChequeModel();
					fdm.setOperation(1);
					fdm.setBoutonPlus(true);
					fdm.setBoutonSupprimer(false);
					fdm.setChequeBanque(cheque.getChequeBanque());
					fdm.setChequeBarre(cheque.getChequeBarre());
					fdm.setChequeBeneficiaire(cheque.getChequeBeneficiaire());
					fdm.setChequeDate(cheque.getChequeDate());
					fdm.setChequeMontant(cheque.getChequeMontant());
					fdm.setChequeNum(cheque.getChequeNum());
					listExpositionsTab2.add(fdm);
					
				}
				
				listCheques.setWrappedData(listExpositionsTab2);
				// //[KBS] :Sowh Panel Chèque 2019-12-27 KBS
				if (listExpositionsTab2 != null && listExpositionsTab2.size()>0){
				 if(natureID == 38 || natureID == 59 || natureID == 80){
					 showPanelCheque=true;
					 }else{
						 showPanelCheque=false;
					 }
				}
				//selectedItemsTr=vb.getSelectedItemsTr();
				
				
				
				selectedItemsTrAncien=vb.getSelectedItemsTr();
//				System.out.println("##### selectedItemsTrAncien == " + selectedItemsTrAncien);
				listCDTransmission=vb.getListComposantDynamiqueTransmission();
//				System.out.println("##### listCDTransmission == " + listCDTransmission.size());
				if (selectedItemsTrAncien.equals(7)|| selectedItemsTrAncien.equals(8)){
					if(listCDTransmission!=null && listCDTransmission.size()>0){
						afficheChampsSpecTansmission=true;
				}
				}else{ 
					afficheChampsSpecTansmission=false;
					listCDTransmission= new ArrayList<ComposantDynamique>();
				}
//				System.out.println("##### afficheChampsSpecTansmission " + afficheChampsSpecTansmission);
				listCD = vb.getListComposantDynamiqueNature();
//				System.out.println("##### vb.getListComposantDynamiqueNature() == " + vb.getListComposantDynamiqueNature().size());
//				System.out.println("##### listCD size() == " + listCD.size());
				if(listCD!=null && listCD.size()>0){
					showDonneSupp=true;
				}
				else {
					showDonneSupp=false;
				}
//				System.out.println("##### showDonneSupp == " + showDonneSupp);
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	// C*
	// public void saveTempValue() {
	// try {
	// Courrier courrierTemp = new Courrier();
	// System.out.println("*** Dans la fonction saveTempValue ***");
	// courrierTemp.setCourrierReferenceCorrespondant(newCourrier
	// .getCourrierReferenceCorrespondant());
	// courrierTemp.setCourrierObjet(newCourrier.getCourrierObjet());
	// courrierTemp.setCourrierCommentaire(newCourrier
	// .getCourrierCommentaire());
	// courrierTemp.setCourrierDateReception(date1);
	// courrierTemp.setKeywords(newCourrier.getKeywords());
	// courrierTemp.setCourrierDateReponse(newCourrier
	// .getCourrierDateReponse());
	// courrierTemp.setCourrierCircuit(newCourrier.getCourrierCircuit());
	// if (selectedItemNature != null) {
	// courrierTemp.setNature(appMgr.getNatureById(
	// Integer.valueOf(selectedItemNature)).get(0));
	// }
	// if (selectedItemsTr != null) {
	// transmission = appMgr.getTransmissionById(
	// Integer.valueOf(selectedItemsTr)).get(0); // ** KS
	// courrierTemp.setTransmission(transmission);
	// }
	// if (selectedItemConf != null) {
	// cf = appMgr.getConfidentialiteById(
	// Integer.valueOf(selectedItemConf)).get(0); // ** KS
	// courrierTemp.setConfidentialite(cf);
	// }
	// if (selectedItemUg != null) {
	// urgence = appMgr
	// .getUrgenceById(Integer.valueOf(selectedItemUg)).get(0); // **
	// // KS
	// courrierTemp.setUrgence(urgence);
	// }
	// courrierTemp.setCourrierNecessiteReponse(reponse1);
	// //
	// vb.setTypeSender(typeSender);
	// vb.setTypeCourrier(typeCourrier);
	// vb.setOtherAnnotation(otherAnnotation);
	// vb.setChooseAnnotation(chooseAnnotationType);
	// vb.setSelectedAnnotationItems(selectedItems1);
	// vb.setCourrierTempValue(courrierTemp);
	// } catch (Exception e) {
	// e.printStackTrace();
	// }
	// System.out.println(date1);
	// }
	public void saveTempValue() {
		
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------
		// Fonction : saveTempValue
		// Date :
		// Auteur :
		// Description : Cette fonction permet de tester les données saisies
		// lors du transfer du courrier
		//
		//
		// -----------------------------------------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------------------------------------

		try {
			
//			System.out.println("#########Dans saveTempValue");
			Courrier courrierTemp = new Courrier();

			courrierTemp.setCourrierReferenceCorrespondant(courrier
					.getCourrierReferenceCorrespondant());
			courrierTemp.setCourrierObjet(courrier.getCourrierObjet());
			courrierTemp.setCourrierCommentaire(courrier
					.getCourrierCommentaire());
			courrierTemp.setCourrierDateReception(courrier
					.getCourrierDateReception());
			courrierTemp.setCourrierDateReceptionReelle(courrier
					.getCourrierDateReceptionReelle());
			courrierTemp.setKeywords(courrier.getKeywords());
			courrierTemp.setCourrierDateReponse(courrier
					.getCourrierDateReponse());
			courrierTemp.setCourrierCircuit(courrier.getCourrierCircuit());
//			System.out.println("selectedItemNature" + selectedItemNature);
			if (selectedItemNature != null) {
//				System.out.println("");
//				courrierTemp.setNature(vb.getNature());

				/*
				 * courrierTemp.setNature(appMgr.getNatureById(
				 * Integer.valueOf(selectedItemNature)).get(0));
				 */
			}
//			System.out.println("selectedItemNature" + courrierTemp.getNature());

			
			if (selectedItemConf != null) {
				confidentialite = appMgr.getConfidentialiteById(
						Integer.valueOf(selectedItemConf)).get(0);
				courrierTemp.setConfidentialite(confidentialite);
			}
			if (selectedItemUg != null) {
				urgence = appMgr
						.getUrgenceById(Integer.valueOf(selectedItemUg)).get(0);
				courrierTemp.setUrgence(urgence);
			}
			courrierTemp.setCourrierNecessiteReponse(courrier
					.getCourrierNecessiteReponse());
//			System.out.println("type Sender JS : "+typeSender);
			vb.setTypeSender(typeSender);
			vb.setTypeCourrier(typeCourrier);

			vb.setOtherAnnotation(otherAnnotation);
			vb.setChooseAnnotation(chooseAnnotationType);

			vb.setSelectedAnnotationItems(selectedItemsAnnotation);

			vb.setCourrierTempValue(courrierTemp);
			
			listAnno.setListeAnnotations(selectedItemsAnnotation);
			listAnno.setChooseAnnotationType(chooseAnnotationType);
			listAnno.setOtherAnnotation(otherAnnotation);
//			System.out.println("listAnno  ====> "+listAnno);

			listAnno = new ListeDestinatairesModel();
			
			
			//listCDTransmission=vb.getListComposantDynamiqueTransmission();

			if (selectedItemsTr != null) {
//				System.out.println("###### 111111111111111");
				transmission = appMgr.getTransmissionById(Integer.valueOf(selectedItemsTr)).get(0);
				courrierTemp.setTransmission(transmission);
//				System.out.println("selectedItemsTrAncien == " + selectedItemsTrAncien);
//				System.out.println("selectedItemsTr == " + selectedItemsTr);
				vb.setSelectedItemsTr(selectedItemsTr);
				if(selectedItemsTrAncien!=null && selectedItemsTrAncien.equals(selectedItemsTr)){
//					System.out.println("########### CREATION DE NOUVEAU");
//					System.out.println("###### 2222222222222222222222");

					try {
						if (listCDTransmission != null && listCDTransmission.size() > 0) {
//							System.out.println("##### c == " + c); 
							Class aClass = c.getClass();
//							System.out.println("##### aClass == " + aClass);
							Class[] paramTypes = new Class[1];
//							System.out.println("");
//							System.out.println("########### listCDTransmission == "	+ listCDTransmission.size());
//							
							if (listCDTransmission.size() > 0) {
								for (int i = 0; i < listCDTransmission.size(); i++) {


									if (listCDTransmission.get(i).getType().equals("RADIO")) {
										paramTypes[0] = Boolean.class;
										listCDTransmission.get(i).setColonne(new Boolean(listCDTransmission.get(i).getColonne()+ ""));
									} else if (listCDTransmission.get(i).getColonne() != null) {
										paramTypes[0] = listCDTransmission.get(i).getColonne().getClass();
										int idchamp = listCDTransmission.get(i).getIdChamps();
										String methodName = "setColonne"+ idchamp; // fieldName	// String
										Method m = null;
										if(aClass != null){
//										System.out.println("##### methodName == " + methodName);
										m = aClass.getMethod(methodName,paramTypes);
										String result = (String) m.invoke(c,listCDTransmission.get(i).getColonne()); // field
										
										// value
//										System.out.println(">>>>>>>>RESULTAT "+result);
									}
									}
//									System.out.println("===================== Champs ==================");
//									 System.out.println("=========>"+listCDTransmission.get(i).getColonne());
//									 System.out.println("Classe=========>"+listCDTransmission.get(i).getColonne().getClass());
//
//									 System.out.println("===================== Fin Champs ==================");
								}
							}
						}
					} catch (IllegalAccessException iae) {
						iae.printStackTrace();
					}
				}else{				
//					System.out.println("########### CREATION DE NOUVEAU");
//					System.out.println("###### 333333333333333333");

					vb.setSelectedItemsTr(selectedItemsTr);
					selectedItemsTrAncien=selectedItemsTr;
					// if mode de transmission Porteur
					if (selectedItemsTr != null) {
						int trans = Integer.valueOf(selectedItemsTr);
//						System.out.println("######### i'm hereee == " + selectedItemsTr +" " + trans);
						if (vb.getPerson().isBoc()) {
//							System.out.println("######### isboc == ");
						if (trans == 1 || trans == 5 || trans == 6) {
//							System.out
//									.println("typeCourrier======================> 1 "
//											+ typeCourrier);

							if (typeCourrier.equals("arrive")) {
								afficheChampsSpecTansmission = true;
//								System.out
//										.println("===============> afficheChampsSpecTansmission1== true ");
							} else
								afficheChampsSpecTansmission = false;
						} else if (trans == 7 || trans == 8){ 
							
							afficheChampsSpecTansmission = true;
						}
						}else{
//							System.out.println("not BOCT ");
							if (trans == 7 || trans == 8){ 
//								System.out.println("== 7 || trans == 8");
								afficheChampsSpecTansmission = true;
								
							}else{
//								System.out.println(" not == 7 || trans == 8");
							listCDTransmission = new ArrayList<ComposantDynamique>();	
							vb.setListComposantDynamiqueTransmission(listCDTransmission);
							afficheChampsSpecTansmission = false;
							}
						}
					}
					listDSNTransmission = appMgr.getListDonneeSupplementaireTransmissionAffectes(Integer.valueOf(selectedItemsTr));
//					System.out.println("######## listDSNTransmission == " + listDSNTransmission.size());
					listCDTransmission = new ArrayList<ComposantDynamique>();
						if (listDSNTransmission != null	&& listDSNTransmission.size() > 0) {
							for (int i = 0; i < listDSNTransmission.size(); i++) {
								composantDynamique = new ComposantDynamique();
								String libelle = listDSNTransmission.get(i)
										.getLibelleDonnee();
//								System.out.println("=============================");
//								System.out.println("Libelle Donnée :" + libelle);
//								System.out.println("Type Donnée :"
//										+ listDSNTransmission.get(i)
//												.getDonneeSupplementaire()
//												.getTypeDonneeSupplementaire());
//								System.out.println("ID Champ :"
//										+ listDSNTransmission.get(i)
//												.getDonneeSupplementaire().getIdDonneeSupplementaire());
//								System.out.println("=============================");

								String s = msg
										.getProperty(listDSNTransmission
												.get(i).getLibelleDonnee());

								// set
								composantDynamique.setName(s);
								composantDynamique
										.setType(listDSNTransmission.get(i)
												.getDonneeSupplementaire()
												.getTypeDonneeSupplementaire());
								composantDynamique
										.setIdChamps(listDSNTransmission
												.get(i).getDonneeSupplementaire()
												.getIdDonneeSupplementaire());

								listCDTransmission.add(composantDynamique);
//								System.out.println("Liste Composant dynamique :"
//										+ listCDTransmission.size());
								// composantDynamique.setName(name)
							}
							}
					
					
				}
				
				vb.setListComposantDynamiqueTransmission(listCDTransmission);
				

					
			//	} else {
//					System.out.println("not BOCT ");
//					listCDTransmission = new ArrayList<ComposantDynamique>();	
//					vb.setListComposantDynamiqueTransmission(listCDTransmission);
//					afficheChampsSpecTansmission = false;
//					
			//	}
//				System.out.println("afficheChampsSpecTansmission::::  "+afficheChampsSpecTansmission);
				
				
				
			}else{
//				System.out.println("DANS ELSSE TR sélectionné est NULL");
//				System.out.println("###### 444444444444444");
				vb.setSelectedItemsTr(null);
				listCDTransmission = new ArrayList<ComposantDynamique>();	
				vb.setListComposantDynamiqueTransmission(listCDTransmission);
				afficheChampsSpecTansmission=false;
				if (selectedItemsTr != null) {
				int trans = Integer.valueOf(selectedItemsTr);
				if (trans == 1 || trans == 5 || trans == 6) {
//					System.out
//							.println("typeCourrier======================> 1 "
//									+ typeCourrier);

					if (typeCourrier.equals("arrive")) {
						afficheChampsSpecTansmission = true;
//						System.out
//								.println("===============> afficheChampsSpecTansmission1== true ");
					} else
						afficheChampsSpecTansmission = false;
				} else if (trans == 7 || trans == 8){ 
					
					afficheChampsSpecTansmission = true;
					
				}else{

//					System.out.println("not BOCT ");
					listCDTransmission = new ArrayList<ComposantDynamique>();	
					vb.setListComposantDynamiqueTransmission(listCDTransmission);
					afficheChampsSpecTansmission = false;
				}
				}
			}
		
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// C*
	// fonction de selection des annotations dans le listBox
	public List<SelectItem> getSelectItems1() {
		String libelle;
		List<SelectItem> selectItems1 = new ArrayList<SelectItem>();
		for (int j = 0; j <= listAt.size() - 1; j++) {
			Integer idAt = listAt.get(j).getAnnotationId();
			if (!idAt.equals(10)) {
				if (vb.getLocale().equals("ar")) {
					libelle = listAt.get(j).getAnnotationLibelleAr();
				} else {
					libelle = listAt.get(j).getAnnotationLibelle();
				}
				// selectItems1.add(new SelectItem(libelle));
				selectItems1.add(new SelectItem(String.valueOf(idAt), libelle));
			}
		}
		return selectItems1;
	}

	// fonction de selection des degrés de confidentialité dans le listBox
	public List<SelectItem> getSelectItemsConf() {
		String libelle;
		List<SelectItem> selectItemsConf = new ArrayList<SelectItem>();
		selectItemsConf.add(new SelectItem(""));
		for (int j = 0; j <= listCf.size() - 1; j++) {
			Integer idCf = listCf.get(j).getConfidentialiteId();
			if (vb.getLocale().equals("ar")) {
				libelle = listCf.get(j).getConfidentialiteLibelleAr();
			} else {
				libelle = listCf.get(j).getConfidentialiteLibelle();
			}
			selectItemsConf.add(new SelectItem(String.valueOf(idCf), libelle));
			// selectItemsConf.add(new SelectItem(listCf.get(j)
			// .getConfidentialiteLibelle()));

		}
		return selectItemsConf;
	}

	// fonction de selection des degrés d'urgences dans le listBox
	public List<SelectItem> getSelectItemsUg() {
		String libelle;
		List<SelectItem> selectItemsUg = new ArrayList<SelectItem>();
		selectItemsUg.add(new SelectItem(""));
		for (int j = 0; j <= listUg.size() - 1; j++) {
			Integer idUg = listUg.get(j).getUrgenceId();
			if (vb.getLocale().equals("ar")) {
				libelle = listUg.get(j).getUrgenceLibelleAr();
			} else {
				libelle = listUg.get(j).getUrgenceLibelle();
			}
			selectItemsUg.add(new SelectItem(String.valueOf(idUg), libelle));
			// selectItemsUg
			// .add(new SelectItem(listUg.get(j).getUrgenceLibelle()));

		}
		return selectItemsUg;
	}

	public void evenementChoixTransfert(ActionEvent evt) {
		if (reponse1.equals("Non")) {
			setSelect1(false);
		} else {
			setSelect1(true);
		}
	}

	public String goToListSender() {
		vb.setAfficheTitre("Choix des destinataires");
		vb.setAfficheTitreList("Liste des destinataires choisis");

		if (vb.getPerson().isBoc()) {
			if (typeCourrier.equals("arrive")) {
				vb.setRedirect("rediretFromCTDestArrToListSender");
				return "rediretFromCTDestArrToListSender";
			} else {
//				System.out.println("repondre gotolistsender");
				vb.setRedirect("rediretFromCTDestDepToListSender");
				return "rediretFromCTDestDepToListSender";
			}
		} else {
			vb.setRedirect("rediretFromCTToListSender");
			return "rediretFromCTToListSender";
		}

	}

	public String goToListSender1() {
//		System.out.println("verify typeCourrier : " + typeCourrier);
		if (typeCourrier.equals("arrive")) {
			vb.setRedirect("rediretFromCTExpArrToListSender");
			return "rediretFromCTExpArrToListSender";
		} else {
			vb.setRedirect("rediretFromCTExpDepToListSender");
			return "rediretFromCTExpDepToListSender";
		}
	}

	public void eventChooseTypeSender(ActionEvent evt) {
//		System.out.println(typeSender);
	}

	public void eventChooseTypeCourrier(ActionEvent evt) {
//		System.out.println(typeCourrier);
	}
	public void transferCourrier(){
		status = false;
		status1 = false;
		try{

			
			ajoutBean.setPassageParBO(passageParBO);
			ajoutBean.setSelectedItemsTr(selectedItemsTr);

			ajoutBean.setSelectedItemUg(selectedItemUg);

			ajoutBean.setSelectedItemsAnnotation(selectedItemsAnnotation);

//			ajoutBean.setSelectedItemNat(selectedItemNature);
			ajoutBean.setSelectedItemNature(nature.getNatureId().toString());
			ajoutBean.setSelectedItemConf(selectedItemConf);
			vb.setAoConsultation(null);
			ajoutBean.setNecessiteReceptionPhysique(necessiteReceptionPhysique);
			ajoutBean.setNecessiteReponse(reponse1);
	
			ajoutBean.getCourrier().setCourrierDateReception(newCourrier.getCourrierDateReception());
			ajoutBean.getCourrier().setCourrierObjet(newCourrier.getCourrierObjet());
			ajoutBean.getCourrier().setCourrierCommentaire(newCourrier.getCourrierCommentaire());
			ajoutBean.setListComposantDynamiqueTransmission(listCDTransmission);
			ajoutBean.setListComposantDynamique(listCD);
			ajoutBean.setDestinataires(destinataires);
//			System.out.println("destinataires >>>>>> "+destinataires);
//			System.out.println("destinataires size()>>>>>> "+destinataires.size());
			if (listExpositionsTab2 != null && listExpositionsTab2.size() == 0){
			vb.setFlagCheque(false);
			}
			ajoutBean.setListCheques(listCheques);
//			System.out.println("###### vb.getDestNom() == " + vb.getDestNom());
			if (vb.getDestNom()!= null){
				if (!vb.getDestNom().equalsIgnoreCase("") && !vb.getDestNom().equalsIgnoreCase(" ")) {
				sansDestinataire = false;
				ajoutBean.save();
				Lienscourriers lc = new Lienscourriers();
				Lienscourriers lcn;
				CourrierLiens cl;
				CourrierLiensId clI;
				List<Courrier> courriers = appMgr.getCourrierByIdCourrier(vb.getCourrier().getIdCourrier());
				Courrier cr=new Courrier();
				if(courriers != null){
					 cr=courriers.get(0);
				}
		//*************************
			
				lc.setCourrier(courrier);
				
				appMgr.insert(lc);
				cl = new CourrierLiens();
				clI = new CourrierLiensId(cr.getIdCourrier(),
						lc.getLiensCourrier());
				cl.setId(clI);
				appMgr.insert(cl);

				// nouveau courrier ---> courrier original
				lc = new Lienscourriers();
				lc.setCourrier(cr);
				appMgr.insert(lc);

				cl = new CourrierLiens();

				clI = new CourrierLiensId(courrier.getIdCourrier(),
						lc.getLiensCourrier());
				cl.setId(clI);
				appMgr.insert(cl);

				// FIN inserer les liens
				
				//****************************
				status=true;
			}else {
				sansDestinataire = true;
			}
			}else{
				sansDestinataire = true;
				
			
			}
			
			
		}catch (Exception e) {
			e.printStackTrace();
			status1 = true;

		}
	}

	public void transferer() {

		//Initialisation de la liste des Membre de BO Connecté
		if (vb.getPerson().isBoc()) {

			List<Person> listBocMembers = vb.getPerson().getAssociatedBOC().getMembersBOC();

			for (Person person : listBocMembers) {
				listIdBocMembers.add(person.getId());
			}
		}
//		System.out.println("reponseBO : "+reponseBO);
		status = false;
		status1 = false;
		status2 = false;
		status3 = false;
		
		Dossier dossier = new Dossier();
		Transaction nouvelleTransaction = new Transaction();
		Etat etat = new Etat();
		TransactionDestinationId id;
		TransactionDestination trDest;
		Expdest expdest;
		Typetransaction typetransaction;
		TransactionDestinationReelle transactionDestinationReelle;
		 Date aujourdhui = new Date();
		
		if (vb.getDestNom() != null) {
			if (!vb.getDestNom().equalsIgnoreCase("") && !vb.getDestNom().equalsIgnoreCase(" ")) {

				try {
					
					
					// XTE : Insertion dans Table 
					// Courrier-----------------------------------------------

					//Date transfert prend la date d'aujourd'hui et non pas date de courrier envoyé
//					System.out.println("aujord'hui=========>" +aujourdhui);
					newCourrier.setCourrierDateReception(aujourdhui);
					newCourrier.setCourrierDateReceptionReelle(aujourdhui);
					status1 = false;
					status = true;
					newCourrier.setNature(nature);
					Transmission transmission = appMgr.getTransmissionById(
							Integer.valueOf(selectedItemsTr)).get(0);
					newCourrier.setTransmission(transmission);
					// Confidentialité
					confidentialite = appMgr.getConfidentialiteById(
							Integer.valueOf(selectedItemConf)).get(0);
					newCourrier.setConfidentialite(confidentialite);
					// Urgence
					urgence = appMgr.getUrgenceById(
							Integer.valueOf(selectedItemUg)).get(0);
					newCourrier.setUrgence(urgence);
					// Necessite Reponse
					newCourrier.setCourrierNecessiteReponse(reponse1);
					if (reponse1.equals("Oui")) {
						newCourrier.setCourrierDateReponse(dateReponse);
					}
					// Necessite Passage Par BO
					newCourrier.setCourrierNecessitePassageParBO(reponseBO);
					newCourrier.setCourrierDateSysteme(new Date());
					newCourrier.setCourrierSupprime(true);
					newCourrier.setCourrierCircuit("Libre");
					newCourrier.setCourrierflagArchive(0);
					
					
					// XTE : Insertion dans Table 
					// Dossier-----------------------------------------------

					dossier.setConfidentialite(confidentialite);
					dossier.setDossierDateCreation(new Date());
					dossier.setDossierDescription(newCourrier
							.getCourrierCommentaire());
					dossier.setDossierIntitule("Courrier_"
							+ newCourrier.getCourrierReferenceCorrespondant());
					dossier.setDossierSupprime(true);
					Typedossier typedossier = appMgr.getTypeDossierById(1).get(
							0);
					dossier.setTypedossier(typedossier);
					appMgr.insert(dossier);
					vb.setDossier(dossier);

					Calendar calendar = Calendar.getInstance();
					calendar.setTime(date1);
					newCourrier.setCourrierOldDateOper(calendar
							.get(Calendar.YEAR));
					newCourrier
							.setCourrierDateReceptionMois(aujourdhui.getMonth() + 1);

					appMgr.insert(newCourrier);
					Courrier ccc = vb.getCourrier();
					vb.setCourrier(newCourrier);

					// ajouté lors du changement #afficher l'id sequentiel de la
					// table courrier comme une reference#
				
					
					// XTE : Connecté is 
					// BOC-----------------------------------------------
					if (vb.getPerson().isBoc()) {

						Calendar cal = Calendar.getInstance();
						cal.setTime(newCourrier.getCourrierDateReception());
						int year = cal.get(Calendar.YEAR);
//						System.out.println(String.valueOf(vb
//															.getPerson()
//															.getAssociatedBOC()
//															.getIdBOC()));
						// XTE : type Courrier 
						// Arrivé-----------------------------------------------
//						System.out.println("type Courrier ====>"+typeCourrier);
						if (typeCourrier.equals("arrive")) {
							Integer lastId = appMgr
									.CountAllCourrierBOCByTransaction(
											"A",
											year,
											"boc_"
													+ String.valueOf(vb
															.getPerson()
															.getAssociatedBOC()
															.getIdBOC()),
											listIdBocMembers);
							newCourrier.setCourrierType("A");
//							System.out.println("last ID : " + lastId);
							
							if (lastId != null) {
								newCourrier.setCourrierTypeOrdre(lastId + 1);
							} else {
								newCourrier.setCourrierTypeOrdre(1);
								lastId=1;
							}
						}
						// XTE : type Courrier 
						// Départ-----------------------------------------------
						else if (typeCourrier.equals("depart")) {
							Integer lastId = appMgr
									.CountAllCourrierBOCByTransaction(
											"D",
											year,
											"boc_"
													+ String.valueOf(vb
															.getPerson()
															.getAssociatedBOC()
															.getIdBOC()),
											listIdBocMembers);
							newCourrier.setCourrierType("D");
							if (lastId != null ) {
								newCourrier.setCourrierTypeOrdre(lastId + 1);
								
							} else {
								newCourrier.setCourrierTypeOrdre(1);
							}
						}
						newCourrier
								.setCourrierReferenceCorrespondant(newCourrier
										.getCourrierType()
										+ newCourrier.getCourrierTypeOrdre());
					} 
					else {
						// XTE : La personne connecté n'est pas BO
						
						Variables variable = new Variables();

						List<Variables> variables = appMgr
								.listVariablesByLibelle("courrier_interne_reference_initialisation_annuelle");
					
						// XTE : Si la variable globale de réinitialisation du référence courrier "I" chaque Année est à oui
						if (variables != null && variables.size() > 0) {
							variable = variables.get(0);
							
							if (variable.getVaraiablesValeur().equals("Oui")) {
								newCourrier.setCourrierType("I");
								Calendar calendar2 = Calendar.getInstance();
								calendar2.setTime(newCourrier
										.getCourrierDateReception());
								int annee = calendar2.get(Calendar.YEAR);
								Integer lastId = appMgr
										.CountAllCourrierRefIByTransaction("I",
												annee);
								if (lastId != null) {
									newCourrier
											.setCourrierTypeOrdre(lastId + 1);
								} else {

									newCourrier.setCourrierTypeOrdre(1);
								}
								newCourrier
										.setCourrierReferenceCorrespondant(newCourrier
												.getCourrierType()
												+ newCourrier
														.getCourrierTypeOrdre());
							}
						} 
						else {
							// XTE : Si la variable globale de réinitialisation du référence courrier "I"  chaque Année est à non
							newCourrier.setCourrierReferenceCorrespondant("I"
									+ newCourrier.getIdCourrier());
						}

					}
					dossier.setDossierIntitule("Courrier_"
							+ newCourrier.getCourrierReferenceCorrespondant());
					appMgr.update(dossier);
					appMgr.update(newCourrier);

					
					// XTE : Début Insertion Courrier Dossier
					CourrierDossierId courrierDossierId = new CourrierDossierId();
					CourrierDossier courrierDossier = new CourrierDossier();
					courrierDossierId.setDossierId(dossier.getDossierId());
					courrierDossierId.setIdCourrier(newCourrier.getIdCourrier());
					courrierDossier.setId(courrierDossierId);
					appMgr.insert(courrierDossier);
					// XTE : Fin Insertion Courrier Dossier
					
					
					// XTE : Mise à jour de la date transfert au niveau de l'ancien courrier dans la table transactionDest
					TransactionDestination transactionDestination = new TransactionDestination();
					try {
						if (!vb.getPerson().isBoc()) {
							if (vb.getCourDossConsulterInformations()
									.getTransactionDestination() != null) {
								transactionDestination = vb
										.getCourDossConsulterInformations()
										.getTransactionDestination();
								if (transactionDestination
										.getTransactionDestDateTransfert() == null) {
									transactionDestination
											.setTransactionDestDateTransfert(new Date());
									appMgr.update(transactionDestination);
								}
							}
						}

					} catch (NullPointerException e) {
					}
					
					// XTE : Début ExpDest
					expdest = new Expdest();
					
					// XTE : 1/ User Is BOC
					// ===============================================================================================================
					// -------------------------------------------------------------------------
					if (vb.getPerson().isBoc()) {
						expdest.setTypeExpDest("Interne-Person");
						expdest.setIdExpDestLdap(vb.getPerson().getId());
						
					} 
					// XTE : 2/ User Is Not BOC
					// ==========================================================================================================
					// ---------------------------------------------------------------------------------------------------------
					else {
						// XTE : 2.1/ Expéditeur Personne connecté
						// ==========================================================================================
						// ----------------------------------------------------------------------------------------------
//						System.out.println("type sender : "+typeSender);
						if (typeSender.equals("MoiMeme")) {
							
							expdest.setTypeExpDest("Interne-Person");
							expdest.setIdExpDestLdap(vb.getPerson().getId());
							
							vb.setCopyExpNom(vb.getPerson().getCn());
							vb.setCopyExpReelNom(vb.getPerson().getCn());
							
							//Responsable 
							if (vb.getPerson().isResponsable()) {
								nouvelleTransaction
										.setTransactionTypeIntervenant("sub_"
												+ String.valueOf(vb.getPerson()
														.getId()));
								try {
									if (vb.getPerson().getAssociatedDirection()
											.getAssociatedUnit() != null) {
										nouvelleTransaction
												.setTransactionIdIntervenant(vb
														.getPerson()
														.getAssociatedDirection()
														.getAssociatedUnit()
														.getResponsibleUnit()
														.getId());
									}
								} catch (NullPointerException e) {
								}
							} 
							
							//Secretaire
							else if (vb.getPerson().isSecretary()) {
								nouvelleTransaction
										.setTransactionTypeIntervenant("secretary_"
												+ String.valueOf(vb.getPerson()
														.getId()));
								nouvelleTransaction
										.setTransactionIdIntervenant(vb
												.getPerson()
												.getAssociatedDirection()
												.getResponsibleUnit().getId());
							} 
							//Agent
							else {
								nouvelleTransaction
										.setTransactionTypeIntervenant("agent_"
												+ String.valueOf(vb.getPerson()
														.getId()));
								nouvelleTransaction
										.setTransactionIdIntervenant(vb
												.getPerson()
												.getAssociatedDirection()
												.getResponsibleUnit().getId());
							}
						} 
						
						// XTE : 2.2/ Expéditeur Mon Unite
						// ==================================================================================================
						// ------------------------------------------------------------------------------------------------
						else {
//							System.out.println("get direction : "+vb.getPerson().getAssociatedDirection() );
							if (vb.getPerson().getAssociatedDirection() != null) {

								expdest.setTypeExpDest("Interne-Unité");
								expdest.setIdExpDestLdap(vb.getPerson()
										.getAssociatedDirection().getIdUnit());
								vb.setCopyExpNom(vb.getPerson()
										.getAssociatedDirection().getNameUnit());
								// C*
								//Ajouté le 2019-07-29 (on set nom unité au lieu personne)
								vb.setCopyExpReelNom(vb.getPerson().getAssociatedDirection().getNameUnit());

								nouvelleTransaction
										.setTransactionTypeIntervenant("unit_"
												+ String.valueOf(vb
														.getPerson()
														.getAssociatedDirection()
														.getIdUnit()));
								try {
									if (vb.getPerson().getAssociatedDirection()
											.getAssociatedUnit() != null) {
										nouvelleTransaction
												.setTransactionIdIntervenant(vb
														.getPerson()
														.getAssociatedDirection()
														.getAssociatedUnit()
														.getIdUnit());
									}
								} catch (NullPointerException e) {
								}
							} else {
								// XTE : Code non logique (à Supprimer?)
								expdest.setTypeExpDest("Interne-Boc");
								expdest.setIdExpDestLdap(vb.getPerson()
										.getAssociatedBOC().getIdBOC());
								vb.setCopyExpNom(vb.getPerson()
										.getAssociatedBOC().getNameBOC());

								nouvelleTransaction
										.setTransactionTypeIntervenant("boc_"
												+ String.valueOf(vb.getPerson()
														.getAssociatedBOC()
														.getIdBOC()));
							}
						}
					}

					appMgr.insert(expdest);
					// XTE : FIN ExpDest
					
					// XTE : Debut Transaction
					nouvelleTransaction.setExpdest(expdest);

					nouvelleTransaction
							.setIdUtilisateur(vb.getPerson().getId());
					nouvelleTransaction.setDossier(dossier);
					nouvelleTransaction
							.setTransactionDateTransaction(new Date());
					nouvelleTransaction.setTransactionDateReponse(newCourrier
							.getCourrierDateReponse());
					typetransaction = new Typetransaction();
					typetransaction = appMgr.getTypeTransactionByLibelle(
							"Envoi").get(0);
					nouvelleTransaction.setTypetransaction(typetransaction);
					nouvelleTransaction
							.setTransactionCommentaire(courrierCommentaire);
					nouvelleTransaction.setTransactionSupprimer(true);

					List<String> resultatAnnotation = new ArrayList<String>();
					
					// XTE : récupérer la liste des annotations
					// sélectionnées-----------------------------------------------------------------------------
					
					for (int j = 0; j <= selectedItemsAnnotation.size() - 1; j++) {
						resultatAnnotation.add(new String(
								selectedItemsAnnotation.get(j)));
					}

					String result = "";
					for (String string : resultatAnnotation) {
						result = result + string + " / ";
					}
					if (!result.equals("")) {
						int lastIndex = result.lastIndexOf("/");
						result = result.substring(0, lastIndex);
					}

					vb.setCopyAnnotationResult(result);
					result = "";
					
					// -----------------------------------------------------------------------------------------------------------------------------------


					// -----------------------------------------------------------------------------------------------------------------------------------
					// XTE : Insertion de la destinataire
					// -----------------------------------------------------------------------------------------------------------------------------------

					// XTE : 1/ Destinataire est interne:
					// ==============================================================================================
					
//					System.out.println("vb.getCopyListSelectedPerson() 1 : "+vb.getCopyListSelectedPerson().size());
//					System.out.println("vb.getCopyListSelectedUnit() 222: "+vb.getCopyListSelectedUnit().size());
					if (!vb.getCopyListSelectedPerson().isEmpty()
							|| !vb.getCopyListSelectedUnit().isEmpty()) {
						
					
						if (!vb.getCopyListSelectedPerson().isEmpty()) {
							
							// XTE : Boucle sur les destinataires Person 
							for (int i = 0; i < vb.getCopyListSelectedPerson().size(); i++) 
							{
//								System.out.println("vb.getCopyListSelectedPerson() 2 : "+vb.getCopyListSelectedPerson().get(i).getNom());


								// XTE : Ajout Dans Table 
								// Transactionn ----------------------------------------------- 
								copyNouvelleTransaction=new Transaction();
								
								copyNouvelleTransaction
										.setExpdest(nouvelleTransaction
												.getExpdest());
								copyNouvelleTransaction
										.setIdUtilisateur(nouvelleTransaction
												.getIdUtilisateur());
								copyNouvelleTransaction
										.setDossier(nouvelleTransaction
												.getDossier());
								copyNouvelleTransaction
										.setTransactionDateTransaction(nouvelleTransaction
												.getTransactionDateTransaction());
								copyNouvelleTransaction
										.setTransactionDateReponse(nouvelleTransaction
												.getTransactionDateReponse());
								copyNouvelleTransaction
										.setTransactionCommentaire(nouvelleTransaction
												.getTransactionCommentaire());
								copyNouvelleTransaction
										.setTransactionSupprimer(nouvelleTransaction
												.getTransactionSupprimer());
								copyNouvelleTransaction
										.setCourrierReferenceCorrespondant(newCourrier
												.getCourrierReferenceCorrespondant());
								copyNouvelleTransaction
										.setCourrierDateReceptionAnnee(newCourrier
												.getCourrierOldDateOper());
								copyNouvelleTransaction
										.setCourrierType(newCourrier
												.getCourrierType());
								copyNouvelleTransaction
										.setCourrierTypeOrdre(newCourrier
												.getCourrierTypeOrdre());

								copyNouvelleTransaction
										.setTransactionIdIntervenant(nouvelleTransaction
												.getTransactionIdIntervenant());
								copyNouvelleTransaction
										.setTransactionTypeIntervenant(nouvelleTransaction
												.getTransactionTypeIntervenant());

								typetransaction = appMgr
										.getTypeTransactionByLibelle("Envoi")
										.get(0);
								copyNouvelleTransaction
										.setTypetransaction(typetransaction);
								
								if (vb.getPerson().isBoc()) {
									etat = appMgr.listEtatByLibelle("Traité")
											.get(0);
									copyNouvelleTransaction.setEtat(etat);
								} else {
									etat = appMgr.listEtatByRef(1).get(0);
									copyNouvelleTransaction.setEtat(etat);
								}
								copyNouvelleTransaction.setTransactionOrdre(1);

								appMgr.insert(copyNouvelleTransaction);

								copyNouvelleTransaction
										.setTransactionFirst(copyNouvelleTransaction
												.getTransactionId());
//								System.out.println("Reponse BO : "+reponseBO);
								
								//[JS] mettre à jour Etat de 1 transaction créer lorsque liste destinataire plusque 2
								if (reponseBO==true) {									
									etat = appMgr.listEtatByLibelle("Non traité").get(0);
									copyNouvelleTransaction.setEtat(etat);
								}
								appMgr.update(copyNouvelleTransaction);
								
								
								vb.setTransaction(copyNouvelleTransaction);
								
								
								// XTE :  
								// Annotation ----------------------------------------------- 
								
								List<String> listAnnotationParDest = new ArrayList<String>();
								chooseAnnotationType = "tous";
								otherAnnotation = "";
								for (ListeDestinatairesModel dest : destinataires) {

									if (dest.getDestinataireId() == vb
											.getCopyListSelectedPerson().get(i)
											.getId()) {
										listAnnotationParDest = dest
												.getListeAnnotations();
										chooseAnnotationType = dest
												.getChooseAnnotationType();
										otherAnnotation = dest
												.getOtherAnnotation();
										break;
									}
								}

								if (chooseAnnotationType != null
										&& chooseAnnotationType.equals("tous")) {

									for (int j = 0; listAnnotationParDest != null
											&& j < listAnnotationParDest.size(); j++) {

										cI.setIdAnnotation(Integer
												.valueOf(listAnnotationParDest
														.get(j)));

										cI.setIdTransaction(vb.getTransaction()
												.getTransactionId());
										cA.setId(cI);
										appMgr.insert(cA);
										cA = new TransactionAnnotation();
										cI = new TransactionAnnotationId();
									}
								}
								else if (chooseAnnotationType != null
										&& chooseAnnotationType.equals("autre")) {

									cI.setIdAnnotation(10);
									cI.setIdTransaction(vb.getTransaction()
											.getTransactionId());
									cA.setId(cI);
									appMgr.insert(cA);
									copyNouvelleTransaction
											.setTransactionCommentaireAnnotation(otherAnnotation);
									appMgr.update(copyNouvelleTransaction);
									cA = new TransactionAnnotation();
									cI = new TransactionAnnotationId();

								}
								
								
								

								// XTE : Insertion dans la table
								// TransactionDestinationReelle-------------------------------------------------------------------------

								TransactionDestinationReelle trDestinationReelle = new TransactionDestinationReelle();
								trDestinationReelle
										.setTransactionDestinationReelleIdDestinataire(vb
												.getCopyListSelectedPerson()
												.get(i).getId());
								trDestinationReelle
										.setTransactionDestinationReelleTypeDestinataire("Interne-Person");
								appMgr.insert(trDestinationReelle);

								// XTE : Fin d'insertion dans la table
								// TransactionDestinationReelle
								// ------------------

								copyNouvelleTransaction
										.setTransactionDestinationReelle(trDestinationReelle);
								appMgr.update(copyNouvelleTransaction);

							}
							
//							System.out.println("Copy List Selected Person : "+vb.getCopyListSelectedPerson().size());
							for (int i = 0; i < vb.getCopyListSelectedPerson().size(); i++) {
//								System.out.println("=================> "+vb.getCopyListSelectedPerson().get(i).getNom()+vb.getCopyListSelectedPerson().get(i).getPrenom());
								result = result
										+ vb.getCopyListSelectedPerson().get(i)
												.getCn() + " / ";
								
								
								expdest = new Expdest();
								id = new TransactionDestinationId();
								trDest = new TransactionDestination();
								
								
							
								
								// ========== Récupérer boc expéditeur ================================//
								
								if(getIdPersonbyId(	vb.getPerson().getId()).getAssociatedDirection()!=null)
									getIdBocByUnit(getIdPersonbyId(	vb.getPerson().getId()).getAssociatedDirection());
								else if(getIdPersonbyId(vb.getPerson().getId()).getAssociatedBOC()!=null){
									idBoc=getIdPersonbyId(vb.getPerson().getId()).getAssociatedBOC().getIdBOC();
								}
								else{
									idBoc=0;
//									System.out.println("AH >>>>>>>>>>>>>>>> PBL recupérer boc expéditeur");
								}
								
								// ========== FIN recupérer boc expéditeur ================================//
								
								//[XTE] : passage par BO
								
								if (reponseBO==true) {
									
									//[XTE] : insertion dans ExpDest
									expdest.setTypeExpDest("Interne-Boc");									
									expdest.setIdExpDestLdap(idBoc);									
									appMgr.insert(expdest);
									
									id.setIdTransaction(vb.getTransaction().getTransactionId());										
								    id.setIdExpDest(expdest.getIdExpDest());
								    trDest.setId(id); 								
								
									trDest.setTransactionDestTypeIntervenant("boc_"
											+ String.valueOf(idBoc));
									trDest.setTransactionDestIdIntervenant(idBoc);

                                    //[XTE] : Mettre à jour Etat transaction (Simple ID = 1 => Non Traité ID=5)
									etat = appMgr.listEtatByLibelle("Non traité").get(0);
									copyNouvelleTransaction.setEtat(etat);
//									System.out.println("udate etat : "+copyNouvelleTransaction.getTransactionId());
									appMgr.update(copyNouvelleTransaction);
									
									appMgr.insert(trDest);
									vb.setTransaction(copyNouvelleTransaction);


								} 
								else{
								// ========== Fin						
								
//								System.out.println("pas de passage par BO");
								

								expdest.setTypeExpDest("Interne-Person");
								expdest.setIdExpDestLdap(vb
										.getCopyListSelectedPerson().get(i)
										.getId());

								appMgr.insert(expdest);
								
								id.setIdTransaction(vb.getTransaction()
										.getTransactionId());
										
								id.setIdExpDest(expdest.getIdExpDest());
								trDest.setId(id);

								if (vb.getCopyListSelectedPerson().get(i)
										.isResponsable()) {
									trDest.setTransactionDestTypeIntervenant("sub_"
											+ String.valueOf(vb
													.getCopyListSelectedPerson()
													.get(i).getId()));
									if (vb.getCopyListSelectedPerson().get(i)
											.getAssociatedDirection()
											.getAssociatedUnit() != null) {
										
										try {
											trDest.setTransactionDestIdIntervenant(vb
													.getCopyListSelectedPerson()
													.get(i)
													.getAssociatedDirection()
													.getAssociatedUnit()
													.getResponsibleUnit()
													.getId());
										} catch (NullPointerException e) {

										}
									}
								} else if (vb.getCopyListSelectedPerson()
										.get(i).isSecretary()) {

									trDest.setTransactionDestTypeIntervenant("secretary_"
											+ String.valueOf(vb
													.getCopyListSelectedPerson()
													.get(i).getId()));
									
									trDest.setTransactionDestIdIntervenant(vb
											.getCopyListSelectedPerson().get(i)
											.getAssociatedDirection()
											.getResponsibleUnit().getId());
								} else {

									trDest.setTransactionDestTypeIntervenant("agent_"
											+ String.valueOf(vb
													.getCopyListSelectedPerson()
													.get(i).getId()));
									
									Person p = vb
											.getLdapOperation()
											.getPersonalisedUserById(
													vb.getCopyListSelectedPerson()
															.get(i).getId());
															
									trDest.setTransactionDestIdIntervenant(p
											.getAssociatedDirection()
											.getResponsibleUnit().getId());
								}
								//
								if (reponse1.equals("Oui")) {
									trDest.setTransactionDestDateReponse(dateReponse);
								}

								appMgr.insert(trDest);
							}

						}
						}
//							System.out.println("vb.getCopyListSelectedUnit() 3 : ");
						// [XTE] : Parcour de la liste des destinataire Unité
						if (!vb.getCopyListSelectedUnit().isEmpty()) {
//							System.out.println("vb.getCopyListSelectedUnit() "+vb.getCopyListSelectedUnit().size());

							for (int i = 0; i < vb.getCopyListSelectedUnit().size(); i++) {
								copyNouvelleTransaction = new Transaction();
								copyNouvelleTransaction.setExpdest(nouvelleTransaction.getExpdest());
								copyNouvelleTransaction.setIdUtilisateur(nouvelleTransaction.getIdUtilisateur());
								copyNouvelleTransaction.setDossier(nouvelleTransaction.getDossier());
								copyNouvelleTransaction.setTransactionDateTransaction(nouvelleTransaction.getTransactionDateTransaction());
								copyNouvelleTransaction.setTransactionDateReponse(nouvelleTransaction.getTransactionDateReponse());
								copyNouvelleTransaction.setTransactionCommentaire(nouvelleTransaction.getTransactionCommentaire());
								copyNouvelleTransaction.setTransactionSupprimer(nouvelleTransaction.getTransactionSupprimer());
								copyNouvelleTransaction.setCourrierReferenceCorrespondant(newCourrier.getCourrierReferenceCorrespondant());
								copyNouvelleTransaction.setCourrierDateReceptionAnnee(newCourrier.getCourrierOldDateOper());
								copyNouvelleTransaction.setCourrierType(newCourrier.getCourrierType());
								copyNouvelleTransaction.setCourrierTypeOrdre(newCourrier.getCourrierTypeOrdre());
								copyNouvelleTransaction.setTransactionIdIntervenant(nouvelleTransaction.getTransactionIdIntervenant());
								copyNouvelleTransaction.setTransactionTypeIntervenant(nouvelleTransaction.getTransactionTypeIntervenant());

								typetransaction = appMgr.getTypeTransactionByLibelle("Envoi").get(0);
								copyNouvelleTransaction.setTypetransaction(typetransaction);

								if (vb.getPerson().isBoc()) {
									etat = appMgr.listEtatByLibelle("Traité")
											.get(0);
									copyNouvelleTransaction.setEtat(etat);
								} 
								else {
									etat = appMgr.listEtatByLibelle("Simple")
											.get(0);
									copyNouvelleTransaction.setEtat(etat);
								}
								copyNouvelleTransaction.setTransactionOrdre(1);


								appMgr.insert(copyNouvelleTransaction);
//								System.out.println("Insertion transaction pour destinataire "+copyNouvelleTransaction
//												.getTransactionId());
								copyNouvelleTransaction
										.setTransactionFirst(copyNouvelleTransaction
												.getTransactionId());
								appMgr.update(copyNouvelleTransaction);
								vb.setTransaction(copyNouvelleTransaction);

								List<String> listAnnotationParDest = new ArrayList<String>();
								chooseAnnotationType = "tous";
								otherAnnotation = "";
								for (ListeDestinatairesModel dest : destinataires) {

									if (dest.getDestinataireId() == vb
											.getCopyListSelectedUnit().get(i)
											.getIdUnit()) {
										listAnnotationParDest = dest
												.getListeAnnotations();

										chooseAnnotationType = dest
												.getChooseAnnotationType();
										otherAnnotation = dest
												.getOtherAnnotation();
										break;
									}
								}

								if (chooseAnnotationType != null
										&& chooseAnnotationType.equals("tous")) {
									for (int j = 0; j < listAnnotationParDest
											.size(); j++) {

										cI.setIdAnnotation(Integer
												.valueOf(listAnnotationParDest
														.get(j)));
										cI.setIdTransaction(vb.getTransaction()
												.getTransactionId());
										cA.setId(cI);
										appMgr.insert(cA);
										cA = new TransactionAnnotation();
										cI = new TransactionAnnotationId();
									}
								} 
								else if (chooseAnnotationType != null
										&& chooseAnnotationType.equals("autre")) {

									cI.setIdAnnotation(10);
									cI.setIdTransaction(vb.getTransaction()
											.getTransactionId());
									cA.setId(cI);
									appMgr.insert(cA);
									copyNouvelleTransaction
											.setTransactionCommentaireAnnotation(otherAnnotation);
									appMgr.update(copyNouvelleTransaction);
									cA = new TransactionAnnotation();
									cI = new TransactionAnnotationId();
								}
								// XTE : Insertion dans table
								// TransactionDestinationReelle----------------------------------------------------------------------------

								TransactionDestinationReelle trDestinationReelle = new TransactionDestinationReelle();
								trDestinationReelle
										.setTransactionDestinationReelleIdDestinataire(vb
												.getCopyListSelectedUnit()
												.get(i).getIdUnit());
								trDestinationReelle
										.setTransactionDestinationReelleTypeDestinataire("Interne-Unité");
								appMgr.insert(trDestinationReelle);
								// XTE :Fin d'insertion dans table
								// TransactionDestinationReelle

								copyNouvelleTransaction
										.setTransactionDestinationReelle(trDestinationReelle);
								appMgr.update(copyNouvelleTransaction);

							}

							typetransaction = new Typetransaction();
							etat = new Etat();

							for (int i = 0; i < vb.getCopyListSelectedUnit()
									.size(); i++) {

								result = result
										+ vb.getCopyListSelectedUnit().get(i)
												.getNameUnit() + " / ";

								// XTE : Début insertion
								// Expéditeur---------------------------------------------------------------------------------------------------
								expdest = new Expdest();
								id = new TransactionDestinationId();								
								trDest = new TransactionDestination();
								
								expdest.setTypeExpDest("Interne-Unité");
								if (!vb.getPerson().isBoc()) {

									if (vb.getPerson().getAssociatedDirection()
											.getIdUnit() != vb
											.getCopyListSelectedUnit().get(i)
											.getIdUnit()) {

										try {
											if (vb.getPerson()
													.getAssociatedDirection()
													.getAssociatedUnit()
													.getIdUnit() == vb
													.getCopyListSelectedUnit()
													.get(i).getIdUnit()) {
												Transaction transaction = new Transaction();
												transaction = vb
														.getTransaction();
												etat = appMgr
														.listEtatByLibelle(
																"A valider")
														.get(0);
												transaction.setEtat(etat);
												appMgr.update(transaction);
												vb.setTransaction(transaction);
											}
										} catch (NullPointerException e) {
											//???
											etat = appMgr.listEtatByLibelle(
													"Simple").get(0);
											// copyNouvelleTransaction
											// .setEtat(etat);
										}
										
										
										
										expdest = new Expdest();
										id = new TransactionDestinationId();
										trDest = new TransactionDestination();
										//[JS] Ajouté le 2019-07-31 
										
										// ==========recupérer boc expéditeur
										if(getIdPersonbyId(	vb.getPerson().getId()).getAssociatedDirection()!=null)
											getIdBocByUnit(getIdPersonbyId(	vb.getPerson().getId()).getAssociatedDirection());
										else if(getIdPersonbyId(vb.getPerson().getId()).getAssociatedBOC()!=null){
											idBoc=getIdPersonbyId(vb.getPerson().getId()).getAssociatedBOC().getIdBOC();
										}
										else{
											idBoc=0;
//											System.out.println("AH >>>>>>>>>>>>>>>> PBL recupérer boc expéditeur");
										}
										
//										System.out.println("reponseBO =============>"+reponseBO);

										if (reponseBO==true) {
											
//											System.out.println("id BOC ============> "+idBoc);
											expdest.setTypeExpDest("Interne-Boc");
											expdest.setIdExpDestLdap(idBoc);
											appMgr.insert(expdest);
											
											trDest.setTransactionDestTypeIntervenant("boc_"
													+ String.valueOf(idBoc));
											trDest.setTransactionDestIdIntervenant(idBoc);

											// ========= le courrier à executer
											// =========
											// a ajouter par JS

											// ============ JS

											etat = appMgr.listEtatByLibelle(
													"Non traité").get(0);
											transaction
													.setEtat(etat);
											appMgr.update(transaction);
											vb.setTransaction(transaction);

											// JS : insertion dans la table
											// Transaction Destinataire
											// Reelle------------------------------------------------------------------------------------------

											transactionDestinationReelle = new TransactionDestinationReelle();
//											System.out
//													.println("Id Selected Person :"
//															+ vb.getCopyListSelectedPerson()
//																	.get(i)
//																	.getId());

											// set Id de la destinataire Réelle
											transactionDestinationReelle
													.setTransactionDestinationReelleIdDestinataire(vb
															.getCopyListSelectedPerson()
															.get(i).getId());

											// [JS] Distinataire =lise des
											// personnes
											transactionDestinationReelle
													.setTransactionDestinationReelleTypeDestinataire("Interne-Person");
											appMgr.insert(transactionDestinationReelle);

											// JS : Fin insertion dans la table
											// Transaction Destinataire
											// Reelle---------------------------------------------------------------------------------

											transaction
													.setTransactionDestinationReelle(transactionDestinationReelle);
											appMgr.update(transaction);

										} else{
										
										expdest.setTypeExpDest("Interne-Unité");
										expdest.setIdExpDestLdap(vb
												.getCopyListSelectedUnit()
												.get(i).getIdUnit());
										appMgr.insert(expdest);

										id.setIdTransaction(vb.getTransaction()
												.getTransactionId());
										id.setIdExpDest(expdest.getIdExpDest());
										trDest.setId(id);
										// A modifier
										trDest.setTransactionDestTypeIntervenant("unit_"
												+ String.valueOf(vb
														.getCopyListSelectedUnit()
														.get(i).getIdUnit()));
										if (vb.getCopyListSelectedUnit().get(i)
												.getAssociatedUnit() != null) {
											trDest.setTransactionDestIdIntervenant(vb
													.getCopyListSelectedUnit()
													.get(i).getAssociatedUnit()
													.getResponsibleUnit()
													.getId());
										}
										//
										}if (reponse1.equals("Oui")) {
											trDest.setTransactionDestDateReponse(dateReponse);
										}
										appMgr.insert(trDest);

									} else {

										expdest = new Expdest();
										id = new TransactionDestinationId();
										trDest = new TransactionDestination();
										expdest.setTypeExpDest("Interne-Unité");
										expdest.setIdExpDestLdap(vb.getPerson()
												.getAssociatedDirection()
												.getIdUnit());
										appMgr.insert(expdest);
										id.setIdTransaction(vb.getTransaction()
												.getTransactionId());
										id.setIdExpDest(expdest.getIdExpDest());
										trDest.setId(id);
										// A modifier
										trDest.setTransactionDestTypeIntervenant("unit_"
												+ String.valueOf(vb
														.getCopyListSelectedUnit()
														.get(i).getIdUnit()));
										if (vb.getCopyListSelectedUnit().get(i)
												.getAssociatedUnit() != null) {
											trDest.setTransactionDestIdIntervenant(vb
													.getCopyListSelectedUnit()
													.get(i).getAssociatedUnit()
													.getResponsibleUnit()
													.getId());
										}
										//
										if (reponse1.equals("Oui")) {
											trDest.setTransactionDestDateReponse(dateReponse);
										}
										appMgr.insert(trDest);

									}
								}
								else {
									expdest = new Expdest();
									id = new TransactionDestinationId();
									trDest = new TransactionDestination();
									
									
									expdest.setTypeExpDest("Interne-Unité");
									expdest.setIdExpDestLdap(vb
											.getCopyListSelectedUnit().get(i)
											.getIdUnit());
									appMgr.insert(expdest);
									id.setIdTransaction(vb.getTransaction()
											.getTransactionId());
									id.setIdExpDest(expdest.getIdExpDest());
									trDest.setId(id);
									// A modifier
									trDest.setTransactionDestTypeIntervenant("unit_"
											+ String.valueOf(vb
													.getCopyListSelectedUnit()
													.get(i).getIdUnit()));
									if (vb.getCopyListSelectedUnit().get(i)
											.getAssociatedUnit() != null) {
										if (vb.getCopyListSelectedUnit().get(i)
												.getAssociatedUnit()
												.getResponsibleUnit() == null) {

											trDest.setTransactionDestIdIntervenant(null);

										} else {
											trDest.setTransactionDestIdIntervenant(vb
													.getCopyListSelectedUnit()
													.get(i).getAssociatedUnit()
													.getResponsibleUnit()
													.getId());
										}

									}
								}
								//
								if (reponse1.equals("Oui")) {
									trDest.setTransactionDestDateReponse(dateReponse);
								}
								appMgr.insert(trDest);

							}

						}else
						{
//							System.out.println("List Unite vide");
						}
					}

					// [XTE] : Parcour de la liste des PP
					// Code à supprimer car on ne peut pas transférer un courrier à l'externe
					  if (!vb.getCopyListPP().isEmpty()) {

						typetransaction = new Typetransaction();
						etat = new Etat();
						for (int i = 0; i < vb.getCopyListPP().size(); i++) {

							result = result
									+ vb.getCopyListPP().get(i)
											.getExpdestexterne()
											.getExpDestExterneNom() + " / ";
							copyNouvelleTransaction = new Transaction();
							copyNouvelleTransaction
									.setExpdest(nouvelleTransaction
											.getExpdest());
							copyNouvelleTransaction
									.setIdUtilisateur(nouvelleTransaction
											.getIdUtilisateur());
							copyNouvelleTransaction
									.setDossier(nouvelleTransaction
											.getDossier());
							copyNouvelleTransaction
									.setTransactionDateTransaction(nouvelleTransaction
											.getTransactionDateTransaction());
							copyNouvelleTransaction
									.setTransactionDateReponse(nouvelleTransaction
											.getTransactionDateReponse());
							copyNouvelleTransaction
									.setTransactionCommentaire(nouvelleTransaction
											.getTransactionCommentaire());
							copyNouvelleTransaction
									.setTransactionSupprimer(nouvelleTransaction
											.getTransactionSupprimer());
							copyNouvelleTransaction
									.setTransactionTypeIntervenant(nouvelleTransaction
											.getTransactionTypeIntervenant());

							typetransaction = appMgr
									.getTypeTransactionByLibelle("Envoi")
									.get(0);
							copyNouvelleTransaction
									.setTypetransaction(typetransaction);
							etat = appMgr.listEtatByLibelle("Traité").get(0);
							copyNouvelleTransaction.setEtat(etat);
							if (!vb.getPerson().isBoc()) {
								etat = appMgr.listEtatByLibelle("A valider")
										.get(0);
								copyNouvelleTransaction.setEtat(etat);
								copyNouvelleTransaction.setTransactionOrdre(1);
								transactionDestinationReelle = new TransactionDestinationReelle();
								transactionDestinationReelle
										.setTransactionDestinationReelleIdDestinataire(vb
												.getCopyListPP().get(i)
												.getExpdestexterne()
												.getIdExpDestExterne());
								transactionDestinationReelle
										.setTransactionDestinationReelleTypeDestinataire("Externe");
								appMgr.insert(transactionDestinationReelle);
								copyNouvelleTransaction
										.setTransactionDestinationReelle(transactionDestinationReelle);
							}

							if (chooseAnnotationType.equals("autre")) {

								copyNouvelleTransaction
										.setTransactionCommentaireAnnotation(otherAnnotation);
							}

							appMgr.insert(copyNouvelleTransaction);
							copyNouvelleTransaction
									.setTransactionFirst(copyNouvelleTransaction
											.getTransactionId());
							appMgr.update(copyNouvelleTransaction);
							vb.setTransaction(copyNouvelleTransaction);

							// **** kha **** insertion annotation ********
							List<String> listAnnotationParDest = new ArrayList<String>();
							chooseAnnotationType = "tous";
							otherAnnotation = "";
							for (ListeDestinatairesModel dest : destinataires) {
								if (dest.getDestinataireId() == vb
										.getCopyListPP().get(i).getPpid()) {
									listAnnotationParDest = dest
											.getListeAnnotations();
									chooseAnnotationType = dest
											.getChooseAnnotationType();
									otherAnnotation = dest.getOtherAnnotation();
									break;
								}
							}
							if (chooseAnnotationType.equals("tous")) {

								for (int j = 0; j < listAnnotationParDest
										.size(); j++) {

									cI.setIdAnnotation(Integer
											.valueOf(listAnnotationParDest
													.get(j)));
									cI.setIdTransaction(vb.getTransaction()
											.getTransactionId());
									cA.setId(cI);
									appMgr.insert(cA);
									cA = new TransactionAnnotation();
									cI = new TransactionAnnotationId();
								}
							} else {
								//
								cI.setIdAnnotation(10);
								cI.setIdTransaction(vb.getTransaction()
										.getTransactionId());
								cA.setId(cI);
								appMgr.insert(cA);

								cA = new TransactionAnnotation();
								cI = new TransactionAnnotationId();
							}
							if (!vb.getPerson().isBoc()) {
								Variables variable = new Variables();
								variable = appMgr
										.listVariablesByLibelle(
												"validation_hierarchique_des_courriers")
										.get(0);
								if (variable.getVaraiablesValeur()
										.equals("Non")) {
									idBoc = null;
									expdest = new Expdest();
									id = new TransactionDestinationId();
									trDest = new TransactionDestination();
									getIdBocByUnit(vb.getPerson()
											.getAssociatedDirection());
//									System.out
//											.println("verif IdBoc : " + idBoc);
									expdest.setTypeExpDest("Interne-Boc");
									expdest.setIdExpDestLdap(idBoc);
									String typeIntervenant = "boc_"
											+ String.valueOf(idBoc);
									appMgr.insert(expdest);
									etat = appMgr.listEtatByLibelle(
											"Non traité").get(0);
									copyNouvelleTransaction.setEtat(etat);
									appMgr.update(copyNouvelleTransaction);
									vb.setTransaction(copyNouvelleTransaction);
									id.setIdTransaction(vb.getTransaction()
											.getTransactionId());
									id.setIdExpDest(expdest.getIdExpDest());
									trDest.setId(id);
									// A modifier
									trDest.setTransactionDestTypeIntervenant(typeIntervenant);
									//
									if (reponse1.equals("Oui")) {
										trDest.setTransactionDestDateReponse(dateReponse);
									}
									appMgr.insert(trDest);
								} else {
									expdest = new Expdest();
									id = new TransactionDestinationId();
									trDest = new TransactionDestination();
									String typeIntervenant = "";
									if (vb.getPerson().isAgent()) {
										if (vb.getPerson()
												.getAssociatedDirection() != null) {
											expdest.setTypeExpDest("Interne-Person");
											expdest.setIdExpDestLdap(vb
													.getPerson()
													.getAssociatedDirection()
													.getResponsibleUnit()
													.getId());
											typeIntervenant = "sub_"
													+ String.valueOf(vb
															.getPerson()
															.getAssociatedDirection()
															.getResponsibleUnit()
															.getId());
											appMgr.insert(expdest);
										} else {
											expdest.setTypeExpDest("Externe");
											expdest.setExpdestexterne(vb
													.getCopyListPP().get(i)
													.getExpdestexterne());
											appMgr.insert(expdest);
										}
									} else if (vb.getPerson().isSecretary()) {
										expdest.setTypeExpDest("Interne-Person");
										expdest.setIdExpDestLdap(vb.getPerson()
												.getAssociatedDirection()
												.getResponsibleUnit().getId());
										typeIntervenant = "sub_"
												+ String.valueOf(vb
														.getPerson()
														.getAssociatedDirection()
														.getResponsibleUnit()
														.getId());
										appMgr.insert(expdest);
									} else {
										if (vb.getPerson()
												.getAssociatedDirection()
												.getAssociatedUnit() != null) {
											expdest.setTypeExpDest("Interne-Person");
											expdest.setIdExpDestLdap(vb
													.getPerson()
													.getAssociatedDirection()
													.getAssociatedUnit()
													.getResponsibleUnit()
													.getId());
											typeIntervenant = "sub_"
													+ String.valueOf(vb
															.getPerson()
															.getAssociatedDirection()
															.getAssociatedUnit()
															.getResponsibleUnit()
															.getId());
											appMgr.insert(expdest);
										} else {
											expdest.setTypeExpDest("Interne-Boc");
											expdest.setIdExpDestLdap(vb
													.getPerson()
													.getAssociatedDirection()
													.getAssociatedBOC()
													.getIdBOC());
											typeIntervenant = "boc_"
													+ String.valueOf(vb
															.getPerson()
															.getAssociatedDirection()
															.getAssociatedBOC()
															.getIdBOC());
											appMgr.insert(expdest);
											etat = appMgr.listEtatByLibelle(
													"Non traité").get(0);
											copyNouvelleTransaction
													.setEtat(etat);
											appMgr.update(copyNouvelleTransaction);
											vb.setTransaction(copyNouvelleTransaction);
										}
									}
									id.setIdTransaction(vb.getTransaction()
											.getTransactionId());
									id.setIdExpDest(expdest.getIdExpDest());
									trDest.setId(id);
									// A modifier
									trDest.setTransactionDestTypeIntervenant(typeIntervenant);
									//
									if (reponse1.equals("Oui")) {
										trDest.setTransactionDestDateReponse(dateReponse);
									}
									appMgr.insert(trDest);
								}
							} else {
								expdest = new Expdest();
								id = new TransactionDestinationId();
								trDest = new TransactionDestination();
								Expdestexterne expDestExterne = new Expdestexterne();
								expdest.setTypeExpDest("Externe");
								expDestExterne = vb.getCopyListPP().get(i)
										.getExpdestexterne();
								expdest.setExpdestexterne(expDestExterne);
								appMgr.insert(expdest);
								id.setIdTransaction(vb.getTransaction()
										.getTransactionId());
								id.setIdExpDest(expdest.getIdExpDest());
								trDest.setId(id);
								if (reponse1.equals("Oui")) {
									trDest.setTransactionDestDateReponse(dateReponse);
								}
								appMgr.insert(trDest);
							}

						}

					}

					// [XTE] : Parcour de la liste des PM
					// Code à supprimer car on ne peut pas transférer un courrier à l'externe
					if (!vb.getCopyListPM().isEmpty()) {
						typetransaction = new Typetransaction();
						etat = new Etat();

						for (int i = 0; i < vb.getCopyListPM().size(); i++) {
							result = result
									+ vb.getCopyListPM().get(i)
											.getExpdestexterne()
											.getExpDestExterneNom() + " / ";

							copyNouvelleTransaction = new Transaction();
							copyNouvelleTransaction
									.setExpdest(nouvelleTransaction
											.getExpdest());
							copyNouvelleTransaction
									.setIdUtilisateur(nouvelleTransaction
											.getIdUtilisateur());
							copyNouvelleTransaction
									.setDossier(nouvelleTransaction
											.getDossier());
							copyNouvelleTransaction
									.setTransactionDateTransaction(nouvelleTransaction
											.getTransactionDateTransaction());
							copyNouvelleTransaction
									.setTransactionDateReponse(nouvelleTransaction
											.getTransactionDateReponse());
							copyNouvelleTransaction
									.setTransactionCommentaire(nouvelleTransaction
											.getTransactionCommentaire());
							copyNouvelleTransaction
									.setTransactionSupprimer(nouvelleTransaction
											.getTransactionSupprimer());
							typetransaction = appMgr
									.getTypeTransactionByLibelle("Envoi")
									.get(0);
							copyNouvelleTransaction
									.setTypetransaction(typetransaction);
							// A modifier
							copyNouvelleTransaction
									.setTransactionTypeIntervenant(nouvelleTransaction
											.getTransactionTypeIntervenant());
							//
							typetransaction = appMgr
									.getTypeTransactionByLibelle("Envoi")
									.get(0);
							copyNouvelleTransaction
									.setTypetransaction(typetransaction);
							etat = appMgr.listEtatByLibelle("Traité").get(0);
							copyNouvelleTransaction.setEtat(etat);

							if (!vb.getPerson().isBoc()) {
								etat = appMgr.listEtatByLibelle("A valider")
										.get(0);
								copyNouvelleTransaction.setEtat(etat);
								copyNouvelleTransaction.setTransactionOrdre(1);
								transactionDestinationReelle = new TransactionDestinationReelle();
								transactionDestinationReelle
										.setTransactionDestinationReelleIdDestinataire(vb
												.getCopyListPM().get(i)
												.getExpdestexterne()
												.getIdExpDestExterne());
								transactionDestinationReelle
										.setTransactionDestinationReelleTypeDestinataire("Externe");
								appMgr.insert(transactionDestinationReelle);
								copyNouvelleTransaction
										.setTransactionDestinationReelle(transactionDestinationReelle);
							}

							if (chooseAnnotationType.equals("autre")) {
								copyNouvelleTransaction
										.setTransactionCommentaireAnnotation(otherAnnotation);
							}

							appMgr.insert(copyNouvelleTransaction);

							copyNouvelleTransaction
									.setTransactionFirst(copyNouvelleTransaction
											.getTransactionId());
							appMgr.update(copyNouvelleTransaction);
							vb.setTransaction(copyNouvelleTransaction);

							List<String> listAnnotationParDest = new ArrayList<String>();
							chooseAnnotationType = "tous";
							otherAnnotation = "";
							for (ListeDestinatairesModel dest : destinataires) {
								if (dest.getDestinataireId() == vb
										.getCopyListPM().get(i)
										.getExpdestexterne()
										.getIdExpDestExterne()) {
									listAnnotationParDest = dest
											.getListeAnnotations();
									chooseAnnotationType = dest
											.getChooseAnnotationType();
									otherAnnotation = dest.getOtherAnnotation();
									break;
								}
							}

							if (chooseAnnotationType.equals("tous")) {
								for (int j = 0; j < listAnnotationParDest
										.size(); j++) {

									cI.setIdAnnotation(Integer
											.valueOf(listAnnotationParDest
													.get(j)));
									cI.setIdTransaction(vb.getTransaction()
											.getTransactionId());
									cA.setId(cI);
									appMgr.insert(cA);

									cA = new TransactionAnnotation();
									cI = new TransactionAnnotationId();
								}
							} else {
								//
								cI.setIdAnnotation(10);
								cI.setIdTransaction(vb.getTransaction()
										.getTransactionId());
								cA.setId(cI);
								appMgr.insert(cA);

								cA = new TransactionAnnotation();
								cI = new TransactionAnnotationId();
							}

							if (!vb.getPerson().isBoc()) {
								Variables variable = new Variables();
								List<Variables> listVariable = appMgr
										.listVariablesByLibelle(
												"validation_hierarchique_des_courriers");
								if(listVariable != null && listVariable.size()!=0){
									variable=listVariable.get(0);
							
								if (variable.getVaraiablesValeur()
										.equals("Non")) {
									idBoc = null;
									expdest = new Expdest();
									id = new TransactionDestinationId();
									trDest = new TransactionDestination();
									getIdBocByUnit(vb.getPerson()
											.getAssociatedDirection());
//									System.out
//											.println("verif IdBoc : " + idBoc);
									expdest.setTypeExpDest("Interne-Boc");
									expdest.setIdExpDestLdap(idBoc);
									String typeIntervenant = "boc_"
											+ String.valueOf(idBoc);
									appMgr.insert(expdest);
									etat = appMgr.listEtatByLibelle(
											"Non traité").get(0);
									copyNouvelleTransaction.setEtat(etat);
									appMgr.update(copyNouvelleTransaction);
									vb.setTransaction(copyNouvelleTransaction);
									id.setIdTransaction(vb.getTransaction()
											.getTransactionId());
									id.setIdExpDest(expdest.getIdExpDest());
									trDest.setId(id);
									// A modifier
									trDest.setTransactionDestTypeIntervenant(typeIntervenant);
									//
									if (reponse1.equals("Oui")) {
										trDest.setTransactionDestDateReponse(dateReponse);
									}
									appMgr.insert(trDest);
								} else {
									expdest = new Expdest();
									id = new TransactionDestinationId();
									trDest = new TransactionDestination();
									String typeIntervenant = "";
									if (vb.getPerson().isAgent()) {
										if (vb.getPerson()
												.getAssociatedDirection() != null) {
											expdest.setTypeExpDest("Interne-Person");
											expdest.setIdExpDestLdap(vb
													.getPerson()
													.getAssociatedDirection()
													.getResponsibleUnit()
													.getId());
											typeIntervenant = "sub_"
													+ String.valueOf(vb
															.getPerson()
															.getAssociatedDirection()
															.getResponsibleUnit()
															.getId());
											appMgr.insert(expdest);
										} else {
											expdest.setTypeExpDest("Externe");
											expdest.setExpdestexterne(vb
													.getCopyListPM().get(i)
													.getExpdestexterne());
											appMgr.insert(expdest);
										}
									} else if (vb.getPerson().isSecretary()) {
										expdest.setTypeExpDest("Interne-Person");
										expdest.setIdExpDestLdap(vb.getPerson()
												.getAssociatedDirection()
												.getResponsibleUnit().getId());
										typeIntervenant = "sub_"
												+ String.valueOf(vb
														.getPerson()
														.getAssociatedDirection()
														.getResponsibleUnit()
														.getId());
										appMgr.insert(expdest);
									} else {
										if (vb.getPerson()
												.getAssociatedDirection()
												.getAssociatedUnit() != null) {
											expdest.setTypeExpDest("Interne-Person");
											expdest.setIdExpDestLdap(vb
													.getPerson()
													.getAssociatedDirection()
													.getAssociatedUnit()
													.getResponsibleUnit()
													.getId());
											typeIntervenant = "sub_"
													+ String.valueOf(vb
															.getPerson()
															.getAssociatedDirection()
															.getAssociatedUnit()
															.getResponsibleUnit()
															.getId());
											appMgr.insert(expdest);
										} else {
											expdest.setTypeExpDest("Interne-Boc");
											expdest.setIdExpDestLdap(vb
													.getPerson()
													.getAssociatedDirection()
													.getAssociatedBOC()
													.getIdBOC());
											typeIntervenant = "boc_"
													+ String.valueOf(vb
															.getPerson()
															.getAssociatedDirection()
															.getAssociatedBOC()
															.getIdBOC());
											appMgr.insert(expdest);
											etat = appMgr.listEtatByLibelle(
													"Non traité").get(0);
											copyNouvelleTransaction
													.setEtat(etat);
											appMgr.update(copyNouvelleTransaction);
											vb.setTransaction(copyNouvelleTransaction);
										}
									}
									id.setIdTransaction(vb.getTransaction()
											.getTransactionId());
									id.setIdExpDest(expdest.getIdExpDest());
									trDest.setId(id);
									// A modifier
									trDest.setTransactionDestTypeIntervenant(typeIntervenant);
									//
									if (reponse1.equals("Oui")) {
										trDest.setTransactionDestDateReponse(dateReponse);
									}
									appMgr.insert(trDest);
								}
							} else {
								expdest = new Expdest();
								id = new TransactionDestinationId();
								trDest = new TransactionDestination();
								Expdestexterne expDestExterne = new Expdestexterne();
								expdest.setTypeExpDest("Externe");
								expDestExterne = vb.getCopyListPM().get(i)
										.getExpdestexterne();
								expdest.setExpdestexterne(expDestExterne);
								appMgr.insert(expdest);
								id.setIdTransaction(vb.getTransaction()
										.getTransactionId());
								id.setIdExpDest(expdest.getIdExpDest());
								trDest.setId(id);
								if (reponse1.equals("Oui")) {
									trDest.setTransactionDestDateReponse(dateReponse);
								}
								appMgr.insert(trDest);
							}

							}}

					}
					
					// [XTE] : Parcour de la liste des BOC
					// Code à supprimer car on ne peut pas transférer un courrier au BOC
					if (!vb.getCopyListSelectedBoc().isEmpty()) {

						copyNouvelleTransaction = new Transaction();
						copyNouvelleTransaction.setExpdest(nouvelleTransaction
								.getExpdest());
						copyNouvelleTransaction
								.setIdUtilisateur(nouvelleTransaction
										.getIdUtilisateur());
						copyNouvelleTransaction.setDossier(nouvelleTransaction
								.getDossier());
						copyNouvelleTransaction
								.setTransactionDateTransaction(nouvelleTransaction
										.getTransactionDateTransaction());
						copyNouvelleTransaction
								.setTransactionDateReponse(nouvelleTransaction
										.getTransactionDateReponse());
						copyNouvelleTransaction
								.setTransactionCommentaire(nouvelleTransaction
										.getTransactionCommentaire());
						copyNouvelleTransaction
								.setTransactionSupprimer(nouvelleTransaction
										.getTransactionSupprimer());
						typetransaction = appMgr.getTypeTransactionByLibelle(
								"Envoi").get(0);
						copyNouvelleTransaction
								.setTypetransaction(typetransaction);
						etat = appMgr.listEtatByLibelle("A valider").get(0);
						copyNouvelleTransaction.setEtat(etat);
						if (chooseAnnotationType.equals("autre")) {

							copyNouvelleTransaction
									.setTransactionCommentaireAnnotation(otherAnnotation);
						}
						appMgr.insert(copyNouvelleTransaction);
						copyNouvelleTransaction
								.setTransactionFirst(copyNouvelleTransaction
										.getTransactionId());
						appMgr.update(copyNouvelleTransaction);
						vb.setTransaction(copyNouvelleTransaction);

						if (chooseAnnotationType.equals("tous")) {
							for (int j = 0; j < resultatAnnotation.size(); j++) {
								//
								cI.setIdAnnotation(Integer
										.valueOf(resultatAnnotation.get(j)));
								cI.setIdTransaction(vb.getTransaction()
										.getTransactionId());
								cA.setId(cI);
								appMgr.insert(cA);

								cA = new TransactionAnnotation();
								cI = new TransactionAnnotationId();
							}
						} else {

							cI.setIdAnnotation(10);
							cI.setIdTransaction(vb.getTransaction()
									.getTransactionId());
							cA.setId(cI);
							appMgr.insert(cA);

							cA = new TransactionAnnotation();
							cI = new TransactionAnnotationId();
						}

						for (int i = 0; i < vb.getCopyListSelectedBoc().size(); i++) {
							result = result
									+ vb.getCopyListSelectedBoc().get(i)
											.getNameBOC() + " / ";
							if (vb.getPerson().isResponsable()) {
								expdest = new Expdest();
								id = new TransactionDestinationId();
								trDest = new TransactionDestination();
								expdest.setTypeExpDest("Interne-Boc");
								expdest.setIdExpDestLdap(vb
										.getCopyListSelectedBoc().get(i)
										.getIdBOC());
								appMgr.insert(expdest);
								id.setIdTransaction(vb.getTransaction()
										.getTransactionId());
								id.setIdExpDest(expdest.getIdExpDest());
								trDest.setId(id);
								appMgr.insert(trDest);
							} else {
								expdest = new Expdest();
								id = new TransactionDestinationId();
								trDest = new TransactionDestination();
								expdest.setTypeExpDest("Externe");
								expdest.setIdExpDestLdap(vb
										.getCopyListSelectedBoc().get(i)
										.getIdBOC());
								appMgr.insert(expdest);
								id.setIdTransaction(vb.getTransaction()
										.getTransactionId());
								id.setIdExpDest(expdest.getIdExpDest());
								trDest.setId(id);
								appMgr.insert(trDest);
							}

						}

					}

					
					if (!result.equals("")) {
						int lastIndex = result.lastIndexOf("/");
						result = result.substring(0, lastIndex);
					}
					
					vb.setCopyDestNom(result);
					
					if (vb.getCopyListPM().isEmpty()
							&& vb.getCopyListPP().isEmpty()
							&& vb.getCopyListSelectedPerson().isEmpty()
							&& vb.getCopyListSelectedBoc().isEmpty()
							&& vb.getCopyListSelectedUnit().isEmpty()) {
//						System.out.println("NON LOGIQUE");
						typetransaction = new Typetransaction();
						typetransaction = appMgr.getTypeTransactionByLibelle(
								"Départ").get(0);
						nouvelleTransaction.setTypetransaction(typetransaction);
						appMgr.insert(nouvelleTransaction);
						nouvelleTransaction
								.setTransactionFirst(nouvelleTransaction
										.getTransactionId());
						appMgr.update(nouvelleTransaction);
						
						vb.setTransaction(nouvelleTransaction);

						if (chooseAnnotationType.equals("tous")) {
							for (int j = 0; j < resultatAnnotation.size(); j++) {

								cI.setIdAnnotation(Integer
										.valueOf(resultatAnnotation.get(j)));
								cI.setIdTransaction(vb.getTransaction()
										.getTransactionId());
								cA.setId(cI);
								appMgr.insert(cA);

								cA = new TransactionAnnotation();
								cI = new TransactionAnnotationId();
							}
						} 
						else {

							cI.setIdAnnotation(10);
							cI.setIdTransaction(vb.getTransaction()
									.getTransactionId());
							cA.setId(cI);
							appMgr.insert(cA);

							cA = new TransactionAnnotation();
							cI = new TransactionAnnotationId();
						}
					}
					
					vb.setDestinataireReel(vb.getDestNom());

					Lienscourriers lc = new Lienscourriers();
					Lienscourriers lcn;
					CourrierLiens cl;
					CourrierLiensId clI;
					lc.setCourrier(courrier);
					
					appMgr.insert(lc);
//					System.out.println("inert LiensCourriers1");
					cl = new CourrierLiens();
//					System.out.println("newCourrier.getIdCourrier() 1===>"+newCourrier.getIdCourrier());
					clI = new CourrierLiensId(newCourrier.getIdCourrier(),
							lc.getLiensCourrier());
					cl.setId(clI);
					appMgr.insert(cl);
//					System.out.println("inert LiensCourriers2");

					// nouveau courrier ---> courrier original
					lc = new Lienscourriers();
					lc.setCourrier(newCourrier);
					appMgr.insert(lc);
//					System.out.println("inert LiensCourriers3");

					cl = new CourrierLiens();
//					System.out.println("courrier.getIdCourrier()) 2===>"+courrier.getIdCourrier());

					clI = new CourrierLiensId(courrier.getIdCourrier(),
							lc.getLiensCourrier());
					cl.setId(clI);
					appMgr.insert(cl);
//					System.out.println("inert LiensCourriers4");

					// FIN inserer les liens
					// duplication des documents du courrier originale pour le
					// courrier transferer
					List<Document> originalDocuments = appMgr
							.getDocumentByIdCourrier(courrier.getIdCourrier());
					Document copieDocumentForTR;
					for (Document document : originalDocuments) {
						copieDocumentForTR = new Document();
						copieDocumentForTR.setDocumentType(document
								.getDocumentType());
						copieDocumentForTR.setCourrier(newCourrier);
						copieDocumentForTR.setDocumentCategorie(document
								.getDocumentCategorie());
						copieDocumentForTR.setDocumentDateInsertion(new Date());
						copieDocumentForTR.setDocumentProprietaire(vb
								.getPerson().getId());
						copieDocumentForTR.setDocumentSupprime(true);
						copieDocumentForTR.setDocumentParent(document
								.getDocumentParent());
						copieDocumentForTR.setDocumentReference(document
								.getDocumentReference());
						copieDocumentForTR.setDocumentObjet(document
								.getDocumentObjet());
						copieDocumentForTR.setDocumentNom(document
								.getDocumentNom());
						copieDocumentForTR.setDocumentCommentaire(document
								.getDocumentCommentaire());
						// pour garder le meme path l'ors du transfere du
						// courrier de celui du courrier original
						if (document.getDocumentIdCourrierOriginal() != null) {

							copieDocumentForTR
									.setDocumentIdDocumentOriginal(document
											.getDocumentIdDocumentOriginal());
							copieDocumentForTR
									.setDocumentIdCourrierOriginal(document
											.getDocumentIdCourrierOriginal());
						} else {
							copieDocumentForTR
									.setDocumentIdDocumentOriginal(document
											.getIdDocument());
							copieDocumentForTR
									.setDocumentIdCourrierOriginal(courrier
											.getIdCourrier());
						}
						appMgr.insert(copieDocumentForTR);

					}

					LogClass logClass = new LogClass();
					logClass.addTrack(
							"transfert",
							"Evénement de log de transfert du courrier "
									+ courrier.getIdCourrier()
									+ "-"
									+ courrier
											.getCourrierReferenceCorrespondant(),
							vb.getPerson(), "INFO", appMgr);

					courrier = new Courrier();

					vb.setCopyListSelectedPerson(new ArrayList<Person>());
//					System.out.println("vb.getCopyListSelectedPerson :"+vb.getCopyListSelectedPerson().size());
					vb.setCopyListPP(new ArrayList<Pp>());
					vb.setCopyListPM(new ArrayList<Pm>());
					vb.setListSelectedItem(new ArrayList<ItemSelected>());
					vb.setCopyListSelectedBoc(new ArrayList<BOC>());
					vb.setCopyListSelectedUnit(new ArrayList<Unit>());
					vb.setCopyDestNom(vb.getDestNom());
					vb.setCopyListSelectedObject(new ArrayList<Object>());
					vb.setCopyListSelectedObjectExp(new ArrayList<Object>());
					vb.setDestNom(" ");
					vb.setExpNom(" ");
					vb.setToReplay(false);
					vb.setTransactionDestination(new TransactionDestination());
					status2 = false;
					

				
					} catch (Exception e) {
					
					e.printStackTrace();
					status = false;
					status3 = true;
				}
			} else {
				status1 = true;
			}
		} else {
			status1 = true;
		}

	}
	private void getIdBocByUnit(Unit unit) {
		if (unit.getAssociatedUnit() != null) {
			getIdBocByUnit(unit.getAssociatedUnit());
		} else {
			idBoc = unit.getAssociatedBOC().getIdBOC();
		}

	}

	// C*
	// fonction de selection des modes de transmission dans le listBox
	public List<SelectItem> getSelectItemsTr() {
		String libelle;
		List<SelectItem> selectItemsTr = new ArrayList<SelectItem>();
		selectItemsTr.add(new SelectItem(""));
		for (int j = 0; j <= listTr.size() - 1; j++) {
			Integer idTr = listTr.get(j).getTransmissionId();
			if (vb.getLocale().equals("ar")) {
				libelle = listTr.get(j).getTransmissionLibelleAr();
			} else {
				libelle = listTr.get(j).getTransmissionLibelle();
			}
			// selectItemsTr.add(new SelectItem(libelle));
			selectItemsTr.add(new SelectItem(String.valueOf(idTr), libelle));

		}
		return selectItemsTr;
	}
	public void inserer() {
			courrier.setIdCourrier(vb.getCourrier().getIdCourrier());
	}

	// C*
	// ************Getter & Setter********************

	public VariableGlobale getVb() {
		return vb;
	}

	public void setVb(VariableGlobale vb) {
		this.vb = vb;
	}

	public Export getExport() {
		return export;
	}

	public void setExport(Export export) {
		this.export = export;
	}

	public Courrier getCourrier() {
		return courrier;
	}

	public void setCourrier(Courrier courrier) {
		this.courrier = courrier;
	}

	public boolean isStatus() {
		return status;
	}

	public void setStatus(boolean status) {
		this.status = status;
	}

	public Date getDate() {
		return date;
	}

	public void setDate(Date date) {
		this.date = date;
	}

	public Transaction getTransaction() {
		return transaction;
	}

	public void setTransaction(Transaction transaction) {
		this.transaction = transaction;
	}

	public TransactionDestination getTransactionDestination() {
		return transactionDestination;
	}

	public void setTransactionDestination(
			TransactionDestination transactionDestination) {
		this.transactionDestination = transactionDestination;
	}

	public TransactionAnnotation getTransactionAnnotation() {
		return transactionAnnotation;
	}

	public void setTransactionAnnotation(
			TransactionAnnotation transactionAnnotation) {
		this.transactionAnnotation = transactionAnnotation;
	}

	public Nature getNature() {
		return nature;
	}

	public void setNature(Nature nature) {
		this.nature = nature;
	}

	public Transmission getTransmission() {
		return transmission;
	}

	public void setTransmission(Transmission transmission) {
		this.transmission = transmission;
	}

	public Confidentialite getConfidentialite() {
		return confidentialite;
	}

	public void setConfidentialite(Confidentialite confidentialite) {
		this.confidentialite = confidentialite;
	}

	public Expdestexterne getExpdestexterne() {
		return expdestexterne;
	}

	public void setExpdestexterne(Expdestexterne expdestexterne) {
		this.expdestexterne = expdestexterne;
	}

	public List<Expdestexterne> getListDestExpdestexternes() {
		return listDestExpdestexternes;
	}

	public void setListDestExpdestexternes(
			List<Expdestexterne> listDestExpdestexternes) {
		this.listDestExpdestexternes = listDestExpdestexternes;
	}

	public LanguageManagerBean getLm() {
		return lm;
	}

	public void setLm(LanguageManagerBean lm) {
		this.lm = lm;
	}

	public MessageSource getMessageSource() {
		return messageSource;
	}

	public void setMessageSource(MessageSource messageSource) {
		this.messageSource = messageSource;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public Urgence getUrgence() {
		return urgence;
	}

	public void setUrgence(Urgence urgence) {
		this.urgence = urgence;
	}

	public Date getDateReception() {
		return dateReception;
	}

	public void setDateReception(Date dateReception) {
		this.dateReception = dateReception;
	}

	public Date getDateReponse() {
		return dateReponse;
	}

	public void setDateReponse(Date dateReponse) {
		this.dateReponse = dateReponse;
	}

	public void setUtilisateur(Utilisateur utilisateur) {
		this.utilisateur = utilisateur;
	}

	public Utilisateur getUtilisateur() {
		return utilisateur;
	}

	public void setDossier(Dossier dossier) {
		this.dossier = dossier;
	}

	public Dossier getDossier() {
		return dossier;
	}

	public void setCourrierConsulterInformations(
			List<CourrierConsulterInformations> courrierConsulterInformations) {
		this.courrierConsulterInformations = courrierConsulterInformations;
	}

	public List<CourrierConsulterInformations> getCourrierConsulterInformations() {
		return courrierConsulterInformations;
	}

	public boolean isStatus1() {
		return status1;
	}

	public void setStatus1(boolean status1) {
		this.status1 = status1;
	}

	public boolean isStatus2() {
		return status2;
	}

	public void setStatus2(boolean status2) {
		this.status2 = status2;
	}

	public boolean isStatus3() {
		return status3;
	}

	public void setStatus3(boolean status3) {
		this.status3 = status3;
	}

	public String getSelectedItemNature() {
		return selectedItemNature;
	}

	public void setSelectedItemNature(String selectedItemNature) {
		this.selectedItemNature = selectedItemNature;
	}

	public String getSelectedItemConf() {
		return selectedItemConf;
	}

	public void setSelectedItemConf(String selectedItemConf) {
		this.selectedItemConf = selectedItemConf;
	}

	public String getSelectedItemUg() {
		return selectedItemUg;
	}

	public void setSelectedItemUg(String selectedItemUg) {
		this.selectedItemUg = selectedItemUg;
	}

	public String getSelectedItemsTr() {
		return selectedItemsTr;
	}

	public void setSelectedItemsTr(String selectedItemsTr) {
		this.selectedItemsTr = selectedItemsTr;
	}

	public List<Confidentialite> getListCf() {
		return listCf;
	}

	public void setListCf(List<Confidentialite> listCf) {
		this.listCf = listCf;
	}

	public List<Urgence> getListUg() {
		return listUg;
	}

	public void setListUg(List<Urgence> listUg) {
		this.listUg = listUg;
	}

	public List<Annotation> getListAt() {
		return listAt;
	}

	public void setListAt(List<Annotation> listAt) {
		this.listAt = listAt;
	}

	public void setSelectedItemsAnnotation(List<String> selectedItemsAnnotation) {
		this.selectedItemsAnnotation = selectedItemsAnnotation;
	}

	public List<String> getSelectedItemsAnnotation() {
		return selectedItemsAnnotation;
	}

	public void setDate1(Date date1) {
		this.date1 = date1;
	}

	public Date getDate1() {
		return date1;
	}

	public void setReponse1(String reponse1) {
		this.reponse1 = reponse1;
	}

	public String getReponse1() {
		return reponse1;
	}

	public void setSelect1(boolean select1) {
		this.select1 = select1;
	}

	public boolean isSelect1() {
		return select1;
	}

	public TransactionAnnotation getcA() {
		return cA;
	}

	public void setcA(TransactionAnnotation cA) {
		this.cA = cA;
	}

	public TransactionAnnotationId getcI() {
		return cI;
	}

	public void setcI(TransactionAnnotationId cI) {
		this.cI = cI;
	}

	public List<Annotation> getListAnnotations() {
		return listAnnotations;
	}

	public void setListAnnotations(List<Annotation> listAnnotations) {
		this.listAnnotations = listAnnotations;
	}

	public void setAssociatedUnit(String associatedUnit) {
		this.associatedUnit = associatedUnit;
	}

	public String getAssociatedUnit() {
		return associatedUnit;
	}

	public void setTypeExpediteur(String typeExpediteur) {
		this.typeExpediteur = typeExpediteur;
	}

	public String getTypeExpediteur() {
		return typeExpediteur;
	}

	public void setTypeSender(String typeSender) {
		this.typeSender = typeSender;
	}

	public String getTypeSender() {
		return typeSender;
	}

	public void setIdBoc(Integer idBoc) {
		this.idBoc = idBoc;
	}

	public Integer getIdBoc() {
		return idBoc;
	}

	public void setAssociatedLabel(String associatedLabel) {
		this.associatedLabel = associatedLabel;
	}

	public String getAssociatedLabel() {
		return associatedLabel;
	}

	public void setTypeCourrier(String typeCourrier) {
		this.typeCourrier = typeCourrier;
	}

	public String getTypeCourrier() {
		return typeCourrier;
	}

	public void setShowFacetUser(boolean showFacetUser) {
		this.showFacetUser = showFacetUser;
	}

	public boolean isShowFacetUser() {
		return showFacetUser;
	}

	public void setShowFacetBoc(boolean showFacetBoc) {
		this.showFacetBoc = showFacetBoc;
	}

	public boolean isShowFacetBoc() {
		return showFacetBoc;
	}

	public void setCourrierCommentaire(String courrierCommentaire) {
		this.courrierCommentaire = courrierCommentaire;
	}

	public String getCourrierCommentaire() {
		return courrierCommentaire;
	}

	public void setChooseAnnotationType(String chooseAnnotationType) {
		this.chooseAnnotationType = chooseAnnotationType;
	}

	public String getChooseAnnotationType() {
		return chooseAnnotationType;
	}

	public void setOtherAnnotation(String otherAnnotation) {
		this.otherAnnotation = otherAnnotation;
	}

	public String getOtherAnnotation() {
		return otherAnnotation;
	}

	public void setLabelName(String labelName) {
		this.labelName = labelName;
	}

	public String getLabelName() {
		return labelName;
	}

	public String getDisplayOther() {
		return displayOther;
	}

	public void setDisplayOther(String displayOther) {
		this.displayOther = displayOther;
	}

	public String getDisplayPick() {
		return displayPick;
	}

	public void setDisplayPick(String displayPick) {
		this.displayPick = displayPick;
	}

	public Courrier getNewCourrier() {
		return newCourrier;
	}

	public void setNewCourrier(Courrier newCourrier) {
		this.newCourrier = newCourrier;
	}

	public void setDestinataires(List<ListeDestinatairesModel> destinataires) {
		this.destinataires = destinataires;
	}

	public List<ListeDestinatairesModel> getDestinataires() {
		destinataires = vb.getListeDestinataire();
		
//		if (destinataires != null)
//			System.out.println("Get ----- nbr destinataires = "
//					+ destinataires.size());
	
		return destinataires;
	}

	public List<DonneeSupplementaireNature> getListDSN() {
		return listDSN;
	}

	public void setListDSN(List<DonneeSupplementaireNature> listDSN) {
		this.listDSN = listDSN;
	}

	public ComposantDynamique getComposantDynamique() {
		return composantDynamique;
	}

	public void setComposantDynamique(ComposantDynamique composantDynamique) {
		this.composantDynamique = composantDynamique;
	}

	public List<ComposantDynamique> getListCD() {
		return listCD;
	}

	public void setListCD(List<ComposantDynamique> listCD) {
		this.listCD = listCD;
	}

	public CourrierDonneeSupplementaire getCourrierDS() {
		return courrierDS;
	}

	public void setCourrierDS(CourrierDonneeSupplementaire courrierDS) {
		this.courrierDS = courrierDS;
	}

	public CourrierDonneeSupplementaire getCds() {
		return cds;
	}

	public void setCds(CourrierDonneeSupplementaire cds) {
		this.cds = cds;
	}

	public void setReponseBO(boolean reponseBO) {
		this.reponseBO = reponseBO;
	}

	public boolean isReponseBO() {
		return reponseBO;
	}

	public boolean isAffichagePassageBO() {
		return affichagePassageBO;
	}

	public void setAffichagePassageBO(boolean affichagePassageBO) {
		this.affichagePassageBO = affichagePassageBO;
	}

	public String getPassageParBO() {
		return passageParBO;
	}

	public void setPassageParBO(String passageParBO) {
		this.passageParBO = passageParBO;
	}
	
	// KHA ====== recuperer les donnees d'une personne =============
	public Person getIdPersonbyId(int idUserDest) {
//		System.out.println(" Dans getIdPersonbyId ");

		int id1;
		Person personneRecherche = new Person();
		boolean findPerson = false;
		int j = 0;
		do {
			id1 = vb.getCopyLdapListUser().get(j).getId();
			if (id1 == idUserDest) {
				findPerson = true;
				personneRecherche = vb.getCopyLdapListUser().get(j);
			} else {
				j++;
			}
		} while (!findPerson && j < vb.getCopyLdapListUser().size());
//		System.out.println("#Connected recherché : " + personneRecherche);

		return personneRecherche;
	}

	public void setCopyNouvelleTransaction(Transaction copyNouvelleTransaction) {
		this.copyNouvelleTransaction = copyNouvelleTransaction;
	}

	public Transaction getCopyNouvelleTransaction() {
		return copyNouvelleTransaction;
	}

	public int getPremiereEntreeTransfert() {
		return premiereEntreeTransfert;
	}

	public void setPremiereEntreeTransfert(int premiereEntreeTransfert) {
		this.premiereEntreeTransfert = premiereEntreeTransfert;
	}

	public void setCategorieNature(NatureCategorie categorieNature) {
		this.categorieNature = categorieNature;
	}

	public NatureCategorie getCategorieNature() {
		return categorieNature;
	}

	public void setNecessiteReceptionPhysique(String necessiteReceptionPhysique) {
		this.necessiteReceptionPhysique = necessiteReceptionPhysique;
	}

	public String getNecessiteReceptionPhysique() {
		return necessiteReceptionPhysique;
	}

	public void setAjoutBean(CourrierAjoutBean ajoutBean) {
		this.ajoutBean = ajoutBean;
	}

	public CourrierAjoutBean getAjoutBean() {
		return ajoutBean;
	}

	public List<DonneeSupplementaireNature> getListDSNTransmission() {
		return listDSNTransmission;
	}

	public void setListDSNTransmission(
			List<DonneeSupplementaireNature> listDSNTransmission) {
		this.listDSNTransmission = listDSNTransmission;
	}

	public List<ComposantDynamique> getListCDTransmission() {
		return listCDTransmission;
	}

	public void setListCDTransmission(List<ComposantDynamique> listCDTransmission) {
		this.listCDTransmission = listCDTransmission;
	}

	public void setAfficheChampsSpecTansmission(boolean afficheChampsSpecTansmission) {
		this.afficheChampsSpecTansmission = afficheChampsSpecTansmission;
	}

	public boolean isAfficheChampsSpecTansmission() {
		return afficheChampsSpecTansmission;
	}

	public ListDataModel getListCheques() {
		return listCheques;
	}

	public void setListCheques(ListDataModel listCheques) {
		this.listCheques = listCheques;
	}

	public boolean isShowPanelCheque() {
		return showPanelCheque;
	}

	public void setShowPanelCheque(boolean showPanelCheque) {
		this.showPanelCheque = showPanelCheque;
	}

	public ArrayList<ChequeModel> getListExpositionsTab2() {
		return listExpositionsTab2;
	}

	public void setListExpositionsTab2(ArrayList<ChequeModel> listExpositionsTab2) {
		this.listExpositionsTab2 = listExpositionsTab2;
	}

	public boolean isShowDonneSupp() {
		return showDonneSupp;
	}

	public void setShowDonneSupp(boolean showDonneSupp) {
		this.showDonneSupp = showDonneSupp;
	}

	public boolean isSansDestinataire() {
		return sansDestinataire;
	}

	public void setSansDestinataire(boolean sansDestinataire) {
		this.sansDestinataire = sansDestinataire;
	}

	
}