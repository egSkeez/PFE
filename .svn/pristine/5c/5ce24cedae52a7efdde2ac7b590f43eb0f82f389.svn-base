package xtensus.beans.common;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
import java.util.List;
import java.util.Map.Entry;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.servlet.ServletContext;

import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;


public class FaxUtil {
	private static Properties prop = new Properties();
	public static boolean status;

	public FaxUtil() {

	}

	public static boolean checkConnection() {
		
		try {

			Resource rsrc = new ClassPathResource("../MailFax/fax.properties");
			String pathConfigFile = rsrc.getFile().getAbsolutePath();

			Properties props = new Properties();
			try {
				getProp().load(new FileInputStream(pathConfigFile));
				props.load(new FileInputStream(pathConfigFile));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			// smtp properties

			// SUBSTITUTE YOUR ISP'S MAIL SERVER HERE
			String host = getProp().getProperty("mail.smtp.host");
			String user = getProp().getProperty("mail.session.user");
			String pwd = getProp().getProperty("mail.session.pass");

			// props.put("mail.smtp.host", host);

			// Get a session
			Session session = Session.getInstance(props,
					new GMAILAuthenticator(user, pwd));

			// Get a Transport object to send e-mail
			Transport bus = session.getTransport("smtp");
			bus.connect(host, user, pwd);
			//AH  j'ai commenté le false
			//return false;
			return true;
		} catch (Exception mex) {
			// Prints all nested (chained) exceptions as well
			mex.printStackTrace();
			//AH  j'ai commenté le true
			//return true;
			return false;
		}
	}

	public void sendEmailSSL(String subject, String content, String numFax,
			String nomExpediteur, String mailExpediteur)
			throws AddressException, MessagingException {
		try {
			long startTime = System.currentTimeMillis();
			Resource rsrc = new ClassPathResource("../MailFax/fax.properties");
			String pathConfigFile = rsrc.getFile().getAbsolutePath();
			System.out.println("*" + pathConfigFile);
			Properties props = new Properties();
			props.load(new FileInputStream(pathConfigFile));
			String faxFrom = props.getProperty("mailFrom");
			String acronimAdress = props.getProperty("mail.acronim.domain");
			String user = props.getProperty("mail.session.user");
			String pwd = props.getProperty("mail.session.pass");
			Session session = Session.getInstance(props, new GMAILAuthenticator(user, pwd));
			Message msg = new MimeMessage(session);
			InternetAddress address =  new InternetAddress(numFax 
					+ acronimAdress);
			msg.setRecipient(Message.RecipientType.TO, address);
			String nameExpedituerFax = faxFrom.substring(0,
					faxFrom.lastIndexOf("@"));
			msg.setFrom(new InternetAddress(faxFrom, nameExpedituerFax));
			System.out.println("ADRESS : " + numFax + acronimAdress);
			msg.setSubject(subject);
			msg.setSentDate(new Date());
			msg.setContent(content, "text/plain");
			msg.saveChanges();
			Transport.send(msg);
			status = true;
		} catch (Exception e) {
			status = false;
			e.printStackTrace();
		}

	}

	public void sendEmailSSL(String subject, String content, String pathFile,
			String numFax, String nomExpediteur, String mailExpediteur)
			throws AddressException, MessagingException {
		long startTime = System.currentTimeMillis();
		/**
		 * Ressource contenant les éléments statiques liés é la création et
		 * l'envoi d'un email.
		 */

		// **
		ExternalContext jsfContext = FacesContext.getCurrentInstance()
				.getExternalContext();
		ServletContext servletContext = (ServletContext) jsfContext
				.getContext();
		String webContentRoot = servletContext.getRealPath("/");
		String pathConfigFile = webContentRoot
				+ "\\WEB-INF\\MailFax\\mail.properties";
		// **
		try {
			getProp().load(new FileInputStream(pathConfigFile));
		} catch (FileNotFoundException e) {
			System.err.println("Pas de fichier");
		} catch (IOException e) {
			System.err.println("Erreur");
		}
		// smtp properties
		Properties props = new Properties();
		// SUBSTITUTE YOUR ISP'S MAIL SERVER HERE
		String host = getProp().getProperty("mail.smtp.host");
		String user = getProp().getProperty("mail.session.user");
		String pwd = getProp().getProperty("mail.session.pass");
		String acronimAdress = getProp().getProperty("fax.acronim.domain");

		// props.put("mail.smtp.host", host);

		// Get a session
		Session session = Session.getInstance(props);

		try {
			// Get a Transport object to send e-mail
			Transport bus = session.getTransport("smtp");
			bus.connect(host, user, pwd);
			// Instantiate a message
			Message msg = new MimeMessage(session);
			// Set message attributes
			msg.setFrom(new InternetAddress(user));

			InternetAddress[] address = { new InternetAddress(numFax + "@"
					+ acronimAdress) };
			msg.setRecipients(Message.RecipientType.TO, address);
			msg.setSubject(subject);
			msg.setSentDate(new Date());
			// Create the message part
			BodyPart messageBodyPart = new MimeBodyPart();
			// Fill the message
			messageBodyPart.setContent(content, "text/html");
			// Create a multipar message
			Multipart multipart = new MimeMultipart();
			// Set text message part
			multipart.addBodyPart(messageBodyPart);
			// Part two is attachment
			messageBodyPart = new MimeBodyPart();
			DataSource source = new FileDataSource(pathFile);
			messageBodyPart.setDataHandler(new DataHandler(source));
			messageBodyPart.setFileName(pathFile);
			multipart.addBodyPart(messageBodyPart);
			// Send the complete message parts
			msg.setContent(multipart);
			msg.saveChanges();
			bus.sendMessage(msg, address);

			bus.close();

		} catch (MessagingException mex) {
			// Prints all nested (chained) exceptions as well
			mex.printStackTrace();
			// How to access nested exceptions
			while (mex.getNextException() != null) {
				// Get next exception in chain
				Exception ex = mex.getNextException();
				ex.printStackTrace();
				if (!(ex instanceof MessagingException))
					break;
				else
					mex = (MessagingException) ex;
			}
		}
	}

	public void sendEmailSSLWithAttachemnt(String subject, String content,
			List<String> listDestinataire) throws AddressException,
			MessagingException {
		/**
		 * Ressource contenant les éléments statiques liés é la création et
		 * l'envoi d'un email.
		 */
		// get context path
		// ExternalContext jsfContext = FacesContext.getCurrentInstance()
		// .getExternalContext();
		// ServletContext servletContext = (ServletContext) jsfContext
		// .getContext();
		// String webContentRoot = servletContext.getRealPath("/");
		// String res = webContentRoot.substring(0, 13) + "GBO_v1.k";
		// // System.out.println(res);
		// webContentRoot = res;
		// // fichier xml
		// String pathConfigFile = webContentRoot
		// + "\\WebContent\\WEB-INF\\GEDConfig\\smtp.properties";
		// **
		ExternalContext jsfContext = FacesContext.getCurrentInstance()
				.getExternalContext();
		ServletContext servletContext = (ServletContext) jsfContext
				.getContext();
		String webContentRoot = servletContext.getRealPath("/");
		String pathConfigFile = webContentRoot
				+ "\\WEB-INF\\MailFax\\mail.properties";
		// **
		try {
			getProp().load(new FileInputStream(pathConfigFile));
		} catch (FileNotFoundException e) {
			System.err.println("Pas de fichier");
		} catch (IOException e) {
			System.err.println("Erreur");
		}
		// smtp properties
		Properties props = new Properties();
		props.put("mail.smtp.host", getProp().getProperty("mail.smtp.host"));
		props.put("mail.smtp.socketFactory.port",
				getProp().getProperty("mail.smtp.socketFactory.port"));
		props.put("mail.smtp.socketFactory.class",
				getProp().getProperty("mail.smtp.socketFactory.class"));
		props.put("mail.smtp.auth", getProp().getProperty("mail.smtp.auth"));
		props.put("mail.smtp.port", getProp().getProperty("mail.smtp.port"));

		// authentification
		Session session = Session.getDefaultInstance(props,
				new javax.mail.Authenticator() {
					protected PasswordAuthentication getPasswordAuthentication() {
						return new PasswordAuthentication(getProp()
								.getProperty("mail.session.user"), getProp()
								.getProperty("mail.session.pass"));
					}
				});
		// construct message
		for (String to : listDestinataire) {
			Message message = new MimeMessage(session);
			message.setRecipients(Message.RecipientType.TO,
					InternetAddress.parse(to));
			message.setSubject(subject + " - " + new Date());
			// Create the message part
			BodyPart messageBodyPart = new MimeBodyPart();
			// Fill the message
			messageBodyPart.setContent(content, "text/html");
			// Create a multipar message
			Multipart multipart = new MimeMultipart();
			// Set text message part
			multipart.addBodyPart(messageBodyPart);
			// Part two is attachment
			messageBodyPart = new MimeBodyPart();
			String filename = pathConfigFile;
			DataSource source = new FileDataSource(filename);
			messageBodyPart.setDataHandler(new DataHandler(source));
			messageBodyPart.setFileName(filename);
			multipart.addBodyPart(messageBodyPart);
			// Send the complete message parts
			message.setContent(multipart);
			// send email
			Transport.send(message);
		}
	}

	public static void setProp(Properties prop) {
		FaxUtil.prop = prop;
	}

	public static Properties getProp() {
		return prop;
	}
}
