package xtensus.faxmail.beans;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.annotation.PostConstruct;
import javax.faces.context.FacesContext;
import javax.mail.internet.MimeUtility;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import xtensus.beans.common.LanguageManagerBean;
import xtensus.beans.common.VariableGlobale;
import xtensus.entity.Expdestexterne;
import xtensus.entity.Mail;
import xtensus.entity.Pm;
import xtensus.entity.Pp;
import xtensus.entity.Unite;
import xtensus.faxmail.utils.GedUtils;
import xtensus.faxmail.utils.MailConnection;
import xtensus.ldap.model.Unit;
import xtensus.services.ApplicationManager;

@Component
@Scope("request")
public class DetailsMailBean {

	private GedUtils gedUtils;
	@Autowired
	private VariableGlobale vb;
	private ApplicationManager appMgr;
	private Mail selectedMail;
	private AttachmentFileBean selectedAttachmentFileBean;
	private boolean status = false;
	private List<AttachmentFileBean> attachmentFileBeanList;
	private static boolean flag = false;
	@Autowired
	private LanguageManagerBean lm;
	@Autowired
	private MessageSource messageSource;
	private String message;
	public boolean status1;

	@Autowired
	public DetailsMailBean(
			@Qualifier("applicationManager") ApplicationManager appMgr) {
		this.setAppMgr(appMgr);
		selectedMail = new Mail();
		gedUtils = new GedUtils();
		attachmentFileBeanList = new ArrayList<AttachmentFileBean>();
	}

	@PostConstruct
	public void Initialize() {
		selectedMail = new Mail();
		selectedMail = vb.getMail();
		
		attachmentFileBeanList.clear();
		System.out.println("ID Mail :: "+selectedMail.getMailId());
		List<AttachmentFileBean> attachmentFileBeanListInter = appMgr.listeMailAttachementFilesByIdMessage(selectedMail.getMailId());
		for(AttachmentFileBean l:attachmentFileBeanListInter){
			String str=l.getName();
			try {
				str=MimeUtility.decodeText(l.getName().replace("iso?8859?1", "iso-8859-1"));
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
			l.setName(str);
			attachmentFileBeanList.add(l);
		}
		
//		attachmentFileBeanList=
		
		
		
		// recupérer de la liste mail_mailheaders by Id Mail
		
//		if (selectedMail.getMailAttachmentFiles() != null) {
//
//			for (Entry<String, Integer> entry : selectedMail
//					.getMailAttachmentFiles().entrySet()) {
//				
//				if(!entry.getKey().equals("smime.p7s")){
//				attachmentFileBeanList.add(new AttachmentFileBean(entry
//						.getKey(), entry.getValue()));
//				System.out.println("Ajout de " + entry.getKey()
//						+ " a la liste des attachments ...");
//			}}
//		}
//		
//		else{
//			//vérifier si existe attachement dans la BD le récupérer 
//			
//			
//		}
	}

	public void traiter() {
		try {
			selectedMail.setMailIs_treated(1);
			appMgr.update(selectedMail);
			gedUtils = vb.getGedUtils();
			gedUtils.saveMail(selectedMail);
			setStatus(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public String transfereMail() {
		String res = "nopass";
		status = false;
		try {

			if (selectedMail.getMailIs_treated() == 0) {

				String mailPPPM = selectedMail.getMailFromAddress();
				Pp pp = new Pp();
				Pm pm = new Pm();
				Expdestexterne expdestexterne = new Expdestexterne();
				int nb = appMgr.listExpdestexterneByMail(mailPPPM).size();
				if (nb == 0) {
					setMessage(messageSource.getMessage("erreurTransfereMail",
							new Object[] {}, lm.createLocal()));
					status1 = true;
				} else {
					List<Object> copyListSelectedObjectExp = new ArrayList<Object>();
					expdestexterne = appMgr.listExpdestexterneByMail(mailPPPM)
							.get(0);
					int refExp = expdestexterne.getIdExpDestExterne();
					int nbPP = appMgr.getPPByReferenceExpediteur(refExp).size();
					int nbPM = appMgr.getPMByReferenceExpediteur(refExp).size();
					if (nbPP != 0) {
						pp = appMgr.getPPByReferenceExpediteur(refExp).get(0);
						copyListSelectedObjectExp.add(pp);
					}
					if (nbPM != 0) {
						pm = appMgr.getPMByReferenceExpediteur(refExp).get(0);
						copyListSelectedObjectExp.add(pm);
					}
					vb.setCopyListSelectedObjectExp(copyListSelectedObjectExp);
					//*** AC 
					vb.setMail(selectedMail);
					vb.setRedirect("FromMail");
					res = "pass";
				}
			} else {
				setMessage(messageSource.getMessage("confirmTransfereMail",
						new Object[] {}, lm.createLocal()));
				status1 = true;
			}
			System.out.println("*******SelectionSucces*********");
		} catch (Exception e) {
			System.out.println("*******ErreurDeSelection*******");
			e.printStackTrace();
		}
		return res;
	}

	public void downloadAttachmentFile() {
		try {
			System.out.println(selectedMail);
			List<AttachmentHeadBean> listHeader = appMgr.getMailHederByIdMail(selectedMail.getMailId());
			System.out.println(selectedMail.getMailHeaders());
			String messageId ="";
			if(listHeader!=null && listHeader.size()>0){
				for(int i=0;i<listHeader.size();i++){
					if(listHeader.get(i).getCle().equals("Message-ID")){
						messageId= listHeader.get(i).getValeur();
					}
				}
				
			}
			System.out.println("Message-ID="+messageId);
		String filename = selectedAttachmentFileBean.getName();
		
		
		//String filename = "AH TEST";
		
		System.out.println("Starting download file : " + filename
				+ " form mail with messageId size : " + messageId + " ...");

			InputStream inputStream = null;

	
			// AH: à modifier par les paramètres de mail de connecté
			//MailConnection mailConnection = new MailConnection();
			MailConnection mailConnection=avoirConnection();
			byte[] byteArray = mailConnection.downloadAttachmentFile(messageId,filename);
			inputStream = new ByteArrayInputStream(byteArray);

			FacesContext context = FacesContext.getCurrentInstance();
			HttpServletResponse response = (HttpServletResponse) context
					.getExternalContext().getResponse();
			response.setContentType("application/download");
			//*** Original code
			//response.setHeader("Content-Disposition", "attachment; filename="+ filename);
			//*** AC - my code 
			response.setHeader("Content-Disposition","attachment; filename=\"" + filename + "\"");
			OutputStream outputStream = response.getOutputStream();

			int b;
			while ((b = inputStream.read()) != -1) {
				outputStream.write(b);
			}

			outputStream.flush();
			outputStream.close();

			context.responseComplete();

		} catch (IOException e) {
			e.printStackTrace();
		}catch (Exception e) {
			System.out.println("*******download attachment file*******");
			e.printStackTrace();
		}
	}
	
	public MailConnection avoirConnection(){
		
		MailConnection mailConnection = null;
		if(vb.getPerson().isBoc()){
		
			List<Unite> bo=appMgr.getListeBoParId(vb.getPerson().getAssociatedBOC().getIdBOC()+"");

			
			if(bo!=null && bo.size()>0){
		
			 Unite boConected = bo.get(0);
				
				if(bo!=null && boConected.getUniteMailUser()!=null && boConected.getUniteMailUser().trim().length()>0 
					&& boConected.getUniteMailPass()!=null && boConected.getUniteMailPass().trim().length()>0)
				{	
					if(boConected.getUniteMailUser().contains("gmail"))
						mailConnection =new MailConnection("recent:"+boConected.getUniteMailUser(), boConected.getUniteMailPass());
					else{
						mailConnection =new MailConnection(boConected.getUniteMailUser(), boConected.getUniteMailPass());
					}
					
				}
				else{
				
					System.out.println("cette User n'pas d'adresse Mail");
				}
			}
			
			
		}else
		{
			Unit unite=vb.getPerson().getAssociatedDirection();
		
			String CodeString =unite.getIdUnit().toString();
			
			for(int i=CodeString.length();i<8;i++)
				CodeString="0"+CodeString;
			for(int i=CodeString.length();i<12;i++)
				CodeString=" "+CodeString;
		
			Unite u=appMgr.getUniteConnecteeById(CodeString);
			System.out.println(u);
			if(u!=null &&u.getUniteMailUser()!=null && u.getUniteMailUser().trim().length()>0 
				&& u.getUniteMailPass()!=null && u.getUniteMailPass().trim().length()>0)
			{	
			if(u.getUniteMailUser().contains("gmail"))
				mailConnection =new MailConnection("recent:"+u.getUniteMailUser(), u.getUniteMailPass());
			else{
				mailConnection =new MailConnection(u.getUniteMailUser(), u.getUniteMailPass());
			}
			}
			else{
				
				System.out.println("cette User n'pas d'adresse Mail");
			}
			
		}
		return mailConnection;
	}

	public String retour() {
		return "retour";
	}

	public ApplicationManager getAppMgr() {
		return appMgr;
	}

	public void setAppMgr(ApplicationManager appMgr) {
		this.appMgr = appMgr;
	}

	public boolean isStatus() {
		return status;
	}

	public void setStatus(boolean status) {
		this.status = status;
	}

	public List<AttachmentFileBean> getAttachmentFileBeanList() {
		return attachmentFileBeanList;
	}

	public void setAttachmentFileBeanList(
			ArrayList<AttachmentFileBean> attachmentFileBeanList) {
		this.attachmentFileBeanList = attachmentFileBeanList;
	}

	public AttachmentFileBean getSelectedAttachmentFileBean() {
		return selectedAttachmentFileBean;
	}

	public void setSelectedAttachmentFileBean(
			AttachmentFileBean selectedAttachmentFileBean) {
		this.selectedAttachmentFileBean = selectedAttachmentFileBean;
	}

	public boolean isFlag() {
		return flag;
	}

	public void setFlag(boolean flag) {

		System.out.println("mise du flag a " + flag + " ...");

		DetailsMailBean.flag = flag;
	}

	public void setVb(VariableGlobale vb) {
		this.vb = vb;
	}

	public VariableGlobale getVb() {
		return vb;
	}

	public void setGedUtils(GedUtils gedUtils) {
		this.gedUtils = gedUtils;
	}

	public GedUtils getGedUtils() {
		return gedUtils;
	}

	public LanguageManagerBean getLm() {
		return lm;
	}

	public void setLm(LanguageManagerBean lm) {
		this.lm = lm;
	}

	public MessageSource getMessageSource() {
		return messageSource;
	}

	public void setMessageSource(MessageSource messageSource) {
		this.messageSource = messageSource;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public boolean isStatus1() {
		return status1;
	}

	public void setStatus1(boolean status1) {
		this.status1 = status1;
	}

	public void setAttachmentFileBeanList(
			List<AttachmentFileBean> attachmentFileBeanList) {
		this.attachmentFileBeanList = attachmentFileBeanList;
	}

	public void setSelectedMail(Mail selectedMail) {
		this.selectedMail = selectedMail;
	}

	public Mail getSelectedMail() {

		return selectedMail;
	}

}
