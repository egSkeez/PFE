package xtensus.beans.common.GBO;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import xtensus.aop.LogClass;
import xtensus.beans.common.VariableGlobale;
import xtensus.beans.utils.SuiviCourrier;
import xtensus.beans.utils.SuiviCourrierCourrier;
import xtensus.entity.Confidentialite;
import xtensus.entity.Dossier;
import xtensus.entity.Expdest;
import xtensus.entity.Expdestexterne;
import xtensus.entity.Transaction;
import xtensus.entity.TransactionAnnotation;
import xtensus.entity.TransactionDestination;
import xtensus.entity.TransactionDestinationReelle;
import xtensus.entity.Typetransaction;
import xtensus.entity.Urgence;
import xtensus.ldap.model.Person;
import xtensus.services.ApplicationManager;
import xtensus.services.Export;

@Component
@Scope("request")
public class DossierSuiviBean {

	private ApplicationManager appMgr;
	private Export export;
	private Dossier dossier;
	private Transaction transaction;
	private DataModel listTransactionCourrier;
	private long records = 0;
	private Confidentialite confidentialite;
	private Urgence urgence;
	private List<SuiviCourrierCourrier> suiviCourriers;
	private List<Transaction> transactions;
	@Autowired
	private VariableGlobale vb;

	public DossierSuiviBean() {
	}

	@Autowired
	public DossierSuiviBean(
			@Qualifier("applicationManager") ApplicationManager appMgr,
			@Qualifier("export") Export export) {
		this.appMgr = appMgr;
		this.export = export;
		dossier = new Dossier();
		transaction = new Transaction();
		confidentialite = new Confidentialite();
		urgence = new Urgence();
		suiviCourriers = new ArrayList<SuiviCourrierCourrier>();
		transactions = new ArrayList<Transaction>();
		listTransactionCourrier = new ListDataModel();
		System.out
				.println("**************BeanInjecte CourrierSuiviBean *********");
	}

	@PostConstruct
	public void Initialize() {
		try {
			dossier = vb.getDossier();
			/** **/
//			confidentialite = vb.getConfidentialite();
			confidentialite = appMgr.getConfidentialiteById(dossier.getConfidentialite().getConfidentialiteId()).get(0);
//			urgence = vb.getUrgence();
			urgence = appMgr.getUrgenceById(dossier.getUrgence().getUrgenceId()).get(0);
//			transaction = vb.getTransaction();
			transaction = appMgr.getTransactionByIdDossier(dossier.getDossierId()).get(0);
			for (Person element : vb.getCopyLdapListUser()) {
				System.out.println(element.getId()+" - "+element.getCn());
				if(transaction.getExpdest().getIdExpDestLdap() == element.getId()){
					vb.setCopyExpNom(element.getCn());
				}
				if(dossier.getDossierProprietaireId() == element.getId()){
					vb.setCopyDestNom(element.getCn());
					vb.setCopyExpReelNom(element.getCn());
				}
			}
			transactions = appMgr.getTransactionByIdDossier(dossier
					.getDossierId());
			//*AC: pour afficher les annotations
			List<TransactionAnnotation> annotations = new ArrayList<TransactionAnnotation>();
			annotations = appMgr.getAnnotationByIdTransaction(transaction.getTransactionId());
			String annotationLibelle;
			int lastIndexAnnotation;
			int refAnnotation;
			String result = "";
			for (TransactionAnnotation ta : annotations) {
				refAnnotation = ta.getId().getIdAnnotation();
				annotationLibelle = appMgr
						.getAnnotationByIdAnotation(refAnnotation).get(0)
						.getAnnotationLibelle();
				result = result + annotationLibelle + " / ";
			}
			if (!result.equals("")) {
				lastIndexAnnotation = result.lastIndexOf("/");
				result = result.substring(0, lastIndexAnnotation);
			}
			vb.setCopyAnnotationResult(result);
			//*
			SuiviCourrierCourrier suiviCourrier;
			Expdest expDest;
			int refTypeTr;
			String listDestinataire;
			int i;
			boolean findPerson;
			for (Transaction tr : transactions) {
				suiviCourrier = new SuiviCourrierCourrier();
				suiviCourrier.setTransaction(tr);
				refTypeTr = tr.getTypetransaction().getTypeTransactionId();
				Typetransaction typetransaction = new Typetransaction();
				typetransaction = appMgr.getTypeTransactionById(refTypeTr).get(
						0);
				suiviCourrier.setTypeTransaction(typetransaction);
				listDestinataire = "";
				expDest = new Expdest();
				expDest = appMgr.getListExpDestByIdExpDest(
						tr.getExpdest().getIdExpDest()).get(0);
				if (expDest.getTypeExpDest().equals("Interne-Person")) {
					i = 0;
					findPerson = false;
					do {
						if (vb.getCopyLdapListUser().get(i).getId() == expDest
								.getIdExpDestLdap()) {
							suiviCourrier.setExpediteur(vb
									.getCopyLdapListUser().get(i).getCn());
							findPerson = true;
						} else {
							i++;
						}
					} while (!findPerson && i < vb.getCopyLdapListUser().size());
				} else if (expDest.getTypeExpDest().equals("Interne-Unité")) {
					i = 0;
					findPerson = false;
					do {
						if (vb.getCopyLdapListUnit().get(i).getIdUnit() == expDest
								.getIdExpDestLdap()) {
							suiviCourrier
									.setExpediteur(vb.getCopyLdapListUnit()
											.get(i).getNameUnit());
							findPerson = true;
						} else {
							i++;
						}
					} while (!findPerson && i < vb.getCopyLdapListUnit().size());
				}
				if (tr.getTransactionDestinationReelle() != null) {
					TransactionDestinationReelle transactionDestinationReelle = new TransactionDestinationReelle();
					Expdestexterne expDestExterne;
					transactionDestinationReelle = tr
							.getTransactionDestinationReelle();
					if (transactionDestinationReelle
							.getTransactionDestinationReelleTypeDestinataire()
							.equals("Externe")) {
						expDestExterne = new Expdestexterne();
						expDestExterne = appMgr
								.getExpediteurById(
										transactionDestinationReelle
												.getTransactionDestinationReelleIdDestinataire())
								.get(0);
						if (expDestExterne.getTypeutilisateur()
								.getTypeUtilisateurLibelle().equals("PP")) {
							suiviCourrier.setDestinataireReelle(expDestExterne
									.getExpDestExterneNom() + " (PP)");
						} else {
							suiviCourrier.setDestinataireReelle(expDestExterne
									.getExpDestExterneNom() + " (PM)");
						}
						TransactionDestination transactionDestination = new TransactionDestination();
						transactionDestination = appMgr
								.getListTransactionDestinationByIdTransaction(
										tr.getTransactionId()).get(0);
						expDest = new Expdest();
						expDest = appMgr.getListExpDestByIdExpDest(
								transactionDestination.getId().getIdExpDest())
								.get(0);
						if (expDest.getTypeExpDest().equals("Interne-Person")) {
							i = 0;
							findPerson = false;
							do {
								if (vb.getCopyLdapListUser().get(i).getId() == expDest
										.getIdExpDestLdap()) {
									suiviCourrier.setListDestinataire(vb
											.getCopyLdapListUser().get(i)
											.getCn());
									findPerson = true;
								} else {
									i++;
								}
							} while (!findPerson
									&& i < vb.getCopyLdapListUser().size());
						}
					}
				} else {
					List<TransactionDestination> listTransactionDestination = new ArrayList<TransactionDestination>();
					listTransactionDestination = appMgr
							.getListTransactionDestinationByIdTransaction(tr
									.getTransactionId());
					for (TransactionDestination transactionDestination : listTransactionDestination) {
						expDest = new Expdest();
						expDest = appMgr.getListExpDestByIdExpDest(
								transactionDestination.getId().getIdExpDest())
								.get(0);
						if (expDest.getTypeExpDest().equals("Interne-Person")) {
							i = 0;
							findPerson = false;
							do {
								if (vb.getCopyLdapListUser().get(i).getId() == expDest
										.getIdExpDestLdap()) {
									listDestinataire = listDestinataire
											+ vb.getCopyLdapListUser().get(i)
													.getCn() + " / ";
									findPerson = true;
								} else {
									i++;
								}
							} while (!findPerson
									&& i < vb.getCopyLdapListUser().size());
						} else if (expDest.getTypeExpDest().equals(
								"Interne-Unité")) {
							i = 0;
							findPerson = false;
							do {
								if (vb.getCopyLdapListUnit().get(i).getIdUnit() == expDest
										.getIdExpDestLdap()) {
									listDestinataire = listDestinataire
											+ vb.getCopyLdapListUnit().get(i)
													.getNameUnit() + " / ";
									findPerson = true;
								} else {
									i++;
								}
							} while (!findPerson
									&& i < vb.getCopyLdapListUnit().size());
						} else if (expDest.getTypeExpDest().equals("Externe")) {
							if (expDest.getExpdestexterne()
									.getTypeutilisateur()
									.getTypeUtilisateurLibelle().equals("PP")) {
								listDestinataire = listDestinataire
										+ expDest.getExpdestexterne()
												.getExpDestExterneNom()
										+ " (PP)" + " / ";
							} else {
								listDestinataire = listDestinataire
										+ expDest.getExpdestexterne()
												.getExpDestExterneNom()
										+ " (PM)" + " / ";
							}
						}
					}
					if (!listDestinataire.equals("")) {
						int lastIndex = listDestinataire.lastIndexOf("/");
						listDestinataire = listDestinataire.substring(0,
								lastIndex);
					}
					suiviCourrier.setListDestinataire(listDestinataire);
					suiviCourrier.setDestinataireReelle(listDestinataire);
				}
				suiviCourriers.add(suiviCourrier);
			}
			records = suiviCourriers.size();
			listTransactionCourrier.setWrappedData(suiviCourriers);
			LogClass logClass = new LogClass();
			logClass.addTrack(
					"consultation",
					"Evénement de log de consultation de suivi du dossier "
							+ dossier.getDossierId() + "-"
							+ dossier.getDossierReference(), vb.getPerson(),
					"INFO", appMgr);

			System.out
					.println("*******ChargementAvecSucces   CourrierSuiviBean******");
		} catch (Exception e) {
			System.out
					.println("*******ErreurDeChargement CourrierSuiviBean*******");
		}

	}

	// ************Getter & Setter********************
	@SuppressWarnings("unchecked")
	public long getRecords() {
//		if (listTransactionCourrier == null
//				&& listTransactionCourrier.getWrappedData() == null)
//			records = 0;
//		else
//			records = ((List<SuiviCourrier>) listTransactionCourrier
//					.getWrappedData()).size();
		return records;
	}

	public VariableGlobale getVb() {
		return vb;
	}

	public void setVb(VariableGlobale vb) {
		this.vb = vb;
	}

	public Export getExport() {
		return export;
	}

	public void setExport(Export export) {
		this.export = export;
	}

	public Transaction getTransaction() {
		return transaction;
	}

	public void setTransaction(Transaction transaction) {
		this.transaction = transaction;
	}

	public Confidentialite getConfidentialite() {
		return confidentialite;
	}

	public void setConfidentialite(Confidentialite confidentialite) {
		this.confidentialite = confidentialite;
	}

	public Urgence getUrgence() {
		return urgence;
	}

	public void setUrgence(Urgence urgence) {
		this.urgence = urgence;
	}

	public void setSuiviCourriers(List<SuiviCourrierCourrier> suiviCourriers) {
		this.suiviCourriers = suiviCourriers;
	}

	public List<SuiviCourrierCourrier> getSuiviCourriers() {
		return suiviCourriers;
	}

	public void setTransactions(List<Transaction> transactions) {
		this.transactions = transactions;
	}

	public List<Transaction> getTransactions() {
		return transactions;
	}

	public void setListTransactionCourrier(DataModel listTransactionCourrier) {
		this.listTransactionCourrier = listTransactionCourrier;
	}

	public DataModel getListTransactionCourrier() {
		return listTransactionCourrier;
	}

	public void setDossier(Dossier dossier) {
		this.dossier = dossier;
	}

	public Dossier getDossier() {
		return dossier;
	}
}