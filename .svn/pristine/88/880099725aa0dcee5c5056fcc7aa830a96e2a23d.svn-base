package xtensus.beans.common.GBO;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;

import org.apache.commons.lang.ArrayUtils;
import org.apache.tomcat.util.buf.TimeStamp;
import org.jbpm.api.NewDeployment;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import xtensus.aop.LogClass;
import xtensus.beans.common.LanguageManagerBean;
import xtensus.beans.common.ListeDestinatairesModel;
import xtensus.beans.common.VariableGlobale;
import xtensus.beans.utils.ComparatorTransaction;
import xtensus.beans.utils.RapportCourrier;
import xtensus.beans.utils.RapportExpediteurDestinataire;
import xtensus.beans.utils.RapportSociete;
import xtensus.beans.utils.SuiviCourrier;
import xtensus.beans.utils.SuiviCourrierCourrier;
import xtensus.entity.Annotation;
import xtensus.entity.Commentaire;
import xtensus.entity.Confidentialite;
import xtensus.entity.Courrier;
import xtensus.entity.CourrierDossier;
import xtensus.entity.CourrierLiens;
import xtensus.entity.Document;
import xtensus.entity.Dossier;
import xtensus.entity.Expdest;
import xtensus.entity.Expdestexterne;
import xtensus.entity.Lienscourriers;
import xtensus.entity.Nature;
import xtensus.entity.NatureCategorie;
import xtensus.entity.Transaction;
import xtensus.entity.TransactionAnnotation;
import xtensus.entity.TransactionDestination;
import xtensus.entity.TransactionDestinationReelle;
import xtensus.entity.Transmission;
import xtensus.entity.Urgence;
import xtensus.entity.Variables;
import xtensus.ldap.business.LdapOperation;
import xtensus.ldap.model.BOC;
import xtensus.services.ApplicationManager;
import xtensus.services.Export;

@Component
@Scope("request")
public class CourrierSuiviDestinataireBean {

	private long CONST_DURATION_OF_DAY = 1000l * 60 * 60 * 24;
	private ApplicationManager appMgr;
	private Export export;
	private Courrier courrier;
	private DataModel listTransactionCourrier;
	private long records = 0;
	private Nature nature;
	private NatureCategorie natureCategorie;
	private String etatTransaction;
	private Transmission transmission;
	private Confidentialite confidentialite;
	private Urgence urgence;
	private List<SuiviCourrierCourrier> suiviCourriers;
	private List<Transaction> transactions;
	private LdapOperation ldapOperation;
	private Transaction transaction;
	@Autowired
	private VariableGlobale vb;
	@Autowired
	private LanguageManagerBean lm;
	@Autowired
	private MessageSource messageSource;
	private String align;
	List<Annotation> listAnnotations;
	private List<RapportExpediteurDestinataire> rapportExpediteurDestinatairelist;
	private RapportExpediteurDestinataire rapportExpediteurDestinataire;
	// *** AC
	private String decision;
	private String dateString;
	private String comment;
	private Integer[] arrayOfIdEtatAccepter = { 1, 4, 6 };
	private Integer[] arrayOfIdEtatRefuser = { 3 };
	private Integer[] arrayOfIdEtatEncour = { 2, 5, 10 };
	private Integer dureeTotalTraitemnent;
	private Integer courrierEtat; // courrier pas encore repondu : cas 1 : dans
									// les délais => bleu <=> courrierEtat=1
									// cas 2 : délais dépassé => rouge <=>
									// courrierEtat=2
	private String repond;
	private List<RapportSociete>listeSociete= new ArrayList<RapportSociete>();
	// [KA]
	@Autowired
	private VariableGlobale vg;
	private DataModel listeDestinatairesDM;

	@Autowired
	public CourrierSuiviDestinataireBean(
			@Qualifier("applicationManager") ApplicationManager appMgr,
			@Qualifier("export") Export export) {
		this.appMgr = appMgr;
		this.export = export;
		courrier = new Courrier();
		nature = new Nature();
		transmission = new Transmission();
		confidentialite = new Confidentialite();
		urgence = new Urgence();
		suiviCourriers = new ArrayList<SuiviCourrierCourrier>();
		transactions = new ArrayList<Transaction>();
		listTransactionCourrier = new ListDataModel();
		transaction = new Transaction();
		natureCategorie=new NatureCategorie();
		System.out
				.println("**************BeanInjecte CourrierSuiviBean *********");
	}

	@SuppressWarnings("deprecation")
	@PostConstruct
	public void Initialize() {
		if (vb.getLocale().equals("ar")) {
			setAlign("right");
		} else {
			setAlign("left");
		}
		try {
			dureeTotalTraitemnent = 0;
			int rangeForDuree = 0; // c'est
									// variableCalculJourOuvrable.getVaraiablesValeur().equals("Non")
			// Variables variableCalculJourOuvrable =
			// appMgr.listVariablesById(14).get(0);
			// if(variableCalculJourOuvrable.getVaraiablesValeur().equals("Oui")){
			// rangeForDuree=1;
			// }else{
			// rangeForDuree=0;
			// }
			courrier = vb.getCourrier();
			Courrier courrierOriginal = vb.getCourrier();
			nature = vb.getNature();
			natureCategorie=nature.getNatureCategorie();
			transmission = vb.getTransmission();
			confidentialite = vb.getConfidentialite();
			urgence = vb.getUrgence();
			transaction = vb.getTransaction();
			ldapOperation = new LdapOperation();
			int refEtat = transaction.getEtat().getEtatId();
			if (vb.getLocale().equals("ar")) {
				etatTransaction = appMgr.listEtatByRef(refEtat).get(0).getEtatLibelleAr();
			} else {
				etatTransaction = appMgr.listEtatByRef(refEtat).get(0).getEtatLibelle();
				}

			SuiviCourrierCourrier suiviCourrier;
			Expdest expDest;
			Transaction transactionExpediteur;
			TransactionDestination transactionDestinationExpediteur;
			Date dateJour = new Date();

			List<TransactionDestination> listTransactionDestination;
			List<Transaction> listTransaction = new ArrayList<Transaction>();
//			listTransaction = appMgr.getTransactionByIdDossier(transaction
//					.getDossier().getDossierId());
			
			
			List<Integer> listIdTransaction = appMgr.getTransactionByIdDossierPourSuivi(transaction
					.getDossier().getDossierId());
			
			
			
			
			for (int i = 0; i < listIdTransaction.size(); i++) {

				List<Transaction> tr = appMgr
						.getListTransactionByIdTransaction(listIdTransaction
								.get(i).intValue());
				if (tr != null && tr.size() > 0)
					listTransaction.add(tr.get(0));
			}
			
			
			// trouvez le courrier de reponse s'il existe;
			List<Lienscourriers> liensCourriers = appMgr
					.getListCourrierLiensByIdCourrier(courrierOriginal
							.getIdCourrier());
			List<Integer> listIdLien = new ArrayList<Integer>();
			for (Lienscourriers liens : liensCourriers) {
				listIdLien.add(liens.getLiensCourrier());
			}
			if (!listIdLien.isEmpty()) {
				CourrierLiens courrierLiens = appMgr
						.getCourrierLienByListIdLienAndTypeLien(listIdLien, 1);
				if (courrierLiens != null) {
					Courrier courrierLier = appMgr.getCourrierByIdCourrier(
							courrierLiens.getId().getIdCourrier()).get(0);
					Dossier dossier = appMgr
							.getDossierByIdCourrierAndIdTypeDossier(
									courrierLiens.getId().getIdCourrier(), 1);
					List<Transaction> listTransactionCourrierReponse = appMgr
							.getTransactionByIdDossier(dossier.getDossierId());
					
					listTransaction.addAll(listTransactionCourrierReponse); // add
																			// Courrier
																			// Reponse
																			// transaction
																			// to
																			// courrier
																			// originale
																			// transaction
					if (courrierOriginal.getIdCourrier() > courrierLier
							.getIdCourrier()) {
						courrierOriginal = courrierLier;
					}
				}
			}
			Collections.sort(listTransaction, new ComparatorTransaction());
			Collections.reverse(listTransaction);
			// fin trouvez le courrier de reponse s'il existe;
			boolean courrierReachDestinataireExterne = false;
			System.out.println("2019-06-11 listTransaction : "+listTransaction.size());
			for (Transaction transaction : listTransaction) {
				System.out.println("2019-06-11 ID transaction : "+transaction.getTransactionId());
				listTransactionDestination = new ArrayList<TransactionDestination>();
				listTransactionDestination = appMgr
						.getListTransactionDestinationByIdTransaction(transaction
								.getTransactionId());
//				for(TransactionDestination t :listTransactionDestination){
//					System.out.println("2019-06-11 id transaction : "+t.getId().getIdTransaction());
//					System.out.println("2019-06-11 Dest Id Intervenant : "+t.getTransactionDestIdIntervenant());
//
//				}
				String expediteur = "";
				expDest = new Expdest();
				System.out.println("id Expd Dest : "+transaction.getExpdest().getIdExpDest());
				expDest = appMgr.getListExpDestByIdExpDest(
						transaction.getExpdest().getIdExpDest()).get(0);
				System.out.println("expDest : "+expDest.getIdExpDest());
				System.out.println("type Expdest : "+expDest.getTypeExpDest());
				if (expDest.getTypeExpDest().equals("Interne-Person")) {
					expediteur = ldapOperation.getCnById(
							ldapOperation.CONTEXT_USER, "uid",
							expDest.getIdExpDestLdap());
				} else if (expDest.getTypeExpDest().equals("Interne-Unité")) {
					expediteur = ldapOperation.getCnById(
							ldapOperation.CONTEXT_UNIT, "departmentNumber",
							expDest.getIdExpDestLdap());
				} else if (expDest.getTypeExpDest().equals("Interne-Boc")) {
					
					BOC boc=ldapOperation.getBocByID(expDest.getIdExpDestLdap().intValue());
					
					if(boc!=null)
					expediteur=boc.getNameBOC();
					
//					expediteur = ldapOperation.getCnById(
//							ldapOperation.CONTEXT_BOC, "departmentNumber",
//							expDest.getIdExpDestLdap());
				} else if (expDest.getTypeExpDest().equals("Externe")) {
					Expdestexterne expDestExte = new Expdestexterne();
					expDestExte = appMgr.getExpediteurById(
							expDest.getExpdestexterne().getIdExpDestExterne())
							.get(0);
					if (expDestExte.getTypeutilisateur()
							.getTypeUtilisateurLibelle().equals("PP")) {
						expediteur = expDestExte.getExpDestExterneNom() + " "
								+ expDestExte.getExpDestExternePrenom()
								+ " (PP)";
					} else {
						expediteur = expDestExte.getExpDestExterneNom()+ " (PM)";
					}
				}
				//System.out.println("tr// " + transaction.getTransactionId());
				for (TransactionDestination transactionDestination : listTransactionDestination) {
					suiviCourrier = new SuiviCourrierCourrier();
					suiviCourrier.setExpediteur(expediteur);
					suiviCourrier.setTransaction(transaction);
					Date d=transactionDestination.getTransactionDestDateReceptionPhysique();
					suiviCourrier.setTransactionDestDateReceptionPhysique(d);
					
//					System.out.println("dest// "
//							+ transactionDestination
//									.getTransactionDestDateConsultation());
					if (transactionDestination
							.getTransactionDestDateConsultation() != null) {
						suiviCourrier
								.setDateConsultation(convertDateToString(transactionDestination
										.getTransactionDestDateConsultation()));
					} else {
						suiviCourrier
								.setDateConsultation("Pas encore consulté");
					}
					expDest = new Expdest();
					expDest = appMgr.getListExpDestByIdExpDest(
							transactionDestination.getId().getIdExpDest()).get(
							0);
					System.out.println("************** : "+expDest.getTypeExpDest());
					if (expDest.getTypeExpDest().equals("Interne-Person")) {
						
//						System.out.println("2019-06-11 ID expdest Ldap : "+expDest.getIdExpDestLdap());
						suiviCourrier.setListDestinataire(ldapOperation
								.getCnById(ldapOperation.CONTEXT_USER, "uid",
										expDest.getIdExpDestLdap()));
						
						
					} else if (expDest.getTypeExpDest().equals("Interne-Unité")) {
						suiviCourrier.setListDestinataire(ldapOperation
								.getCnById(ldapOperation.CONTEXT_UNIT,
										"departmentNumber",
										expDest.getIdExpDestLdap()));
						
					} else if (expDest.getTypeExpDest().equals("Interne-Boc")) {
						// chercher le BO par son ID
						BOC boc=ldapOperation.getBocByID(expDest.getIdExpDestLdap().intValue());
						
					if(boc!=null)
						suiviCourrier.setListDestinataire(boc.getNameBOC());
//						String chaine="cn=Bureau d'Ordre Central,";
//						
//						
//						suiviCourrier.setListDestinataire(ldapOperation.getCnById(chaine+ldapOperation.CONTEXT_BOC,"departmentNumber",expDest.getIdExpDestLdap()));
						
					} else if (expDest.getTypeExpDest().equals("Externe")) {
						courrierReachDestinataireExterne = true;
						Expdestexterne expDestExte = new Expdestexterne();
						expDestExte = appMgr.getExpediteurById(
								expDest.getExpdestexterne()
										.getIdExpDestExterne()).get(0);
						if (expDestExte.getTypeutilisateur()
								.getTypeUtilisateurLibelle().equals("PP")) {
							suiviCourrier.setListDestinataire(expDestExte
									.getExpDestExterneNom()
									+ " "
									+ expDestExte.getExpDestExternePrenom()
									+ " (PP)");
						} else {
							suiviCourrier.setListDestinataire(expDestExte
									.getExpDestExterneNom() + " (PM)");
						}
					}
					suiviCourrier.setDestinataireReelle(suiviCourrier
							.getListDestinataire());
					suiviCourrier
							.setTransactionDestination(transactionDestination);
					// C*
					Date dateEcheance = courrierOriginal
							.getCourrierDateReponse();
					Date transactionDate = transaction
							.getTransactionDateTransaction();
					if (dateEcheance != null) {
						if (dateEcheance.getDate() == transactionDate.getDate()
								&& dateEcheance.getMonth() == transactionDate
										.getMonth()
								&& dateEcheance.getYear() == transactionDate
										.getYear()) {
							suiviCourrier.setToleranceRange("0J");
							repond = "Nécessite une réponse";
							suiviCourrier.setRepond("Nécessite une réponse");
							suiviCourrier.setRequireResponse(true);
						} else if (dateEcheance.compareTo(transactionDate) > 0) {
							suiviCourrier.setToleranceRange("+"
									+ compareTwoDates(dateEcheance,
											transactionDate, 1) + "J");
							repond = "";
							suiviCourrier.setRepond("Nécessite une réponse");
							suiviCourrier.setRequireResponse(true);
						} else if (dateEcheance.compareTo(transactionDate) < 0) {
							suiviCourrier.setToleranceRange("-"
									+ compareTwoDates(transactionDate,
											dateEcheance, 0) + "J");
							suiviCourrier
									.setRepond("Nécessite une réponse avec délai dépassé");
							suiviCourrier.setNotYetResponded(true);
						}
						if (transactionDestination
								.getTransactionDestDateTransfert() != null) {
							suiviCourrier
									.setDateTransfert(convertDateToString(transactionDestination
											.getTransactionDestDateTransfert()));
							Integer dureeTr = compareTwoDates(transactionDate,
									transactionDestination
											.getTransactionDestDateTransfert(),
									rangeForDuree);
							// // pour ne pas recalculerlejour ajouté au niveau
							// les transactions qui suient
							// if (rangeForDuree == 1) {
							// rangeForDuree =0;
							// } // pour ne pas recalculerlejour ajouté au
							// niveau les transactions qui suient
							dureeTotalTraitemnent += dureeTr;
							suiviCourrier.setDureeTraitement(dureeTr + "J");
						} else {
							suiviCourrier.setDateTransfert("Non Transmis");
							suiviCourrier.setDureeTraitement("--");
						}

					} else {
						System.out.println("transactionDestination.getTransactionDestDateTransfert() =================> 3: "+transactionDestination.getId().getIdTransaction());
		
						System.out.println("transactionDestination.getTransactionDestDateTransfert() =================> 2: "+transactionDestination
								.getTransactionDestDateTransfert());
						if (transactionDestination
								.getTransactionDestDateTransfert() != null) {
							suiviCourrier
									.setDateTransfert(convertDateToString(transactionDestination
											.getTransactionDestDateTransfert()));
							Integer dureeTr = compareTwoDates(transactionDate,
									transactionDestination
											.getTransactionDestDateTransfert(),
									rangeForDuree);
							// // pour ne pas recalculer le jour ajouté au
							// niveau les transactions qui suient
							// if (rangeForDuree == 1) {
							// rangeForDuree =0;
							// } // pour ne pas recalculer le jour ajouté au
							// niveau les transactions qui suient
							dureeTotalTraitemnent += dureeTr;
							suiviCourrier.setDureeTraitement(dureeTr + "J");
						} else {
							suiviCourrier.setDureeTraitement("--");
							suiviCourrier.setDateTransfert("Non Transmis");
						}
						repond = "";
						suiviCourrier.setRepond("Ne nécessite pas une réponse");
						suiviCourrier.setDoNotRequireResponse(true);
						suiviCourrier.setToleranceRange("--");
						suiviCourrier.setDateReponse("--");
						suiviCourrier.setAlign("center");
					}
					// C*
					// ETAT C*
					System.out.println(suiviCourrier.getTransaction().getEtat()
							.getEtatId());
					if (ArrayUtils.contains(arrayOfIdEtatAccepter,
							suiviCourrier.getTransaction().getEtat()
									.getEtatId())) {
						suiviCourrier.setEtatValidation(messageSource
								.getMessage("accepter", new Object[] {},
										lm.createLocal()));
					} else if (ArrayUtils.contains(arrayOfIdEtatRefuser,
							suiviCourrier.getTransaction().getEtat()
									.getEtatId())) {
						suiviCourrier.setEtatValidation(messageSource
								.getMessage("refuser", new Object[] {},
										lm.createLocal()));
					} else if (ArrayUtils.contains(arrayOfIdEtatEncour,
							suiviCourrier.getTransaction().getEtat()
									.getEtatId())) {
						suiviCourrier.setEtatValidation(messageSource
								.getMessage("enCours", new Object[] {},
										lm.createLocal()));
					}

					// if (suiviCourrier.getTransaction().getEtat()
					// .getEtatId().equals(3)) {
					// suiviCourrier.setEtatValidation(messageSource
					// .getMessage("refuser", new Object[] {},
					// lm.createLocal()));
					// } else {
					// if (suiviCourrier.getTransaction()
					// .getTransactionDateReponse() != null) {
					// suiviCourrier.setEtatValidation(messageSource
					// .getMessage("accepter",
					// new Object[] {},
					// lm.createLocal()));
					// } else {
					// suiviCourrier.setEtatValidation(messageSource
					// .getMessage("enCours", new Object[] {},
					// lm.createLocal()));
					// }
					// }
					// ETAT C*
					// *** AC
					if (vb.getPerson().getAssociatedBOC() != null) {
						if (vb.getPerson().getCn()
								.equals(suiviCourrier.getExpediteur())
								|| vb.getPerson()
										.getCn()
										.equals(suiviCourrier
												.getListDestinataire())
								|| vb.getPerson().getAssociatedBOC()
										.getNameBOC()
										.equals(suiviCourrier.getExpediteur())
								|| vb.getPerson()
										.getAssociatedBOC()
										.getNameBOC()
										.equals(suiviCourrier
												.getListDestinataire())) {
							suiviCourrier.setConsulter(true);
							suiviCourrier.setPasConsulter(false);
						} else {
							suiviCourrier.setConsulter(false);
							suiviCourrier.setPasConsulter(true);
						}
					} else {
						if (vb.getPerson().getCn()
								.equals(suiviCourrier.getExpediteur())
								|| vb.getPerson()
										.getCn()
										.equals(suiviCourrier
												.getListDestinataire())
								|| vb.getPerson().getAssociatedDirection()
										.getNameUnit()
										.equals(suiviCourrier.getExpediteur())
								|| vb.getPerson()
										.getAssociatedDirection()
										.getNameUnit()
										.equals(suiviCourrier
												.getListDestinataire())) {
							suiviCourrier.setConsulter(true);
							suiviCourrier.setPasConsulter(false);
						} else {
							suiviCourrier.setConsulter(false);
							suiviCourrier.setPasConsulter(true);
						}
					}

					suiviCourriers.add(suiviCourrier);
					System.out.println("pffffffffffff :f"+suiviCourriers.get(0).getListDestinataire());

				}
			}

			// }

			if (courrierOriginal.getCourrierDateReponseSysteme() != null
					|| courrierReachDestinataireExterne) {
				SuiviCourrierCourrier lastTransaction = suiviCourriers.get(0);
				lastTransaction.setDateConsultation("--");
				// lastTransaction.setDateTransfert(convertDateToString(lastTransaction.getTransaction().getTransactionDateTransaction()));
				lastTransaction.setDateTransfert("--");
				// lastTransaction.setDureeTraitement("1J");
				lastTransaction.setDureeTraitement("--");
				// lastTransaction.setNotTimelyResponse(false);
				// lastTransaction.setTimelyResponse(false);
				// lastTransaction.setRequireResponse(false);
				// lastTransaction.setNotYetResponded(false);
				// lastTransaction.setDoNotRequireResponse(false);
				if (courrierOriginal.getCourrierNecessiteReponse()
						.equalsIgnoreCase("oui")) {
					if (lastTransaction.getToleranceRange().contains("-")) {

						lastTransaction.setRepond("Répondu dans les délais");
						lastTransaction.setNotTimelyResponse(true);
						lastTransaction.setTimelyResponse(false);
						lastTransaction.setRequireResponse(false);
						lastTransaction.setNotYetResponded(false);
					} else {
						lastTransaction.setNotTimelyResponse(false);
						lastTransaction.setRepond("Répondu aprés les délais");
						lastTransaction.setTimelyResponse(true);
						lastTransaction.setRequireResponse(false);
						lastTransaction.setNotYetResponded(false);
					}
				} else {
					lastTransaction.setNotTimelyResponse(false);
					lastTransaction.setTimelyResponse(false);
					lastTransaction.setRequireResponse(false);
					lastTransaction.setNotYetResponded(false);
				}
			} else {
				// SuiviCourrierCourrier lastTransaction =
				// suiviCourriers.get(0);
				Date today = new Date();
				if (courrierOriginal.getCourrierNecessiteReponse()
						.equalsIgnoreCase("oui")) {
					if (today.after(courrier.getCourrierDateReponse())) {
						courrierEtat = 2;
					} else {
						courrierEtat = 1;
					}
				}
			}
			Integer ordreTransaction = suiviCourriers.size();
			// for (int i = 0; i < suiviCourriers.size() -1; i++) {
			// if
			// (suiviCourriers.get(i).getTransaction().getExpdest().getIdExpDest().equals(suiviCourriers.get(i+1).getTransaction().getExpdest().getIdExpDest()))
			// {
			// suiviCourriers.remove(suiviCourriers.get(i+1));
			// }
			// }
			for (SuiviCourrierCourrier suivi : suiviCourriers) {
				System.out.println("2019-06-11 Suivi : "+suivi.getDestinataireReelle());
				suivi.setNumeroOrdreTransaction(ordreTransaction--);
			}
			// Collections.reverse(suiviCourriers); // renverser l'ordre des
			// transactions
			LogClass logClass = new LogClass();
			logClass.addTrack(
					"consultation",
					"Evénement de log de consultation suivi destinataires du courrier "
							+ courrier.getIdCourrier() + "-"
							+ courrier.getCourrierReferenceCorrespondant(),
					vb.getPerson(), "INFO", appMgr);

			listTransactionCourrier.setWrappedData(suiviCourriers);

			// [KA] Liste Destinaire Annotation

			List<ListeDestinatairesModel> list = vg.getListeDestinataire();

			listeDestinatairesDM = new ListDataModel();
			listeDestinatairesDM.setWrappedData(list);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@SuppressWarnings("deprecation")
	private Integer compareTwoDates(Date date1, Date date2, int range) {
		// String result = "";
		Integer result = 0;
		// Différence
		long numberOfDay;
		System.out.println("date1 : " + date1.getClass());
		System.out.println("date2 : " + date2.getClass());
		if (date1 instanceof Timestamp) {
			date1.setHours(0);
			date1.setMinutes(0);
			date1.setSeconds(0);
		}
		if (date2 instanceof Timestamp) {
			date2.setHours(0);
			date2.setMinutes(0);
			date2.setSeconds(0);
		}
		long diff = Math.abs(date1.getTime() - date2.getTime());
		numberOfDay = (long) diff / CONST_DURATION_OF_DAY;
		// if (numberOfDay == 0) {
		// numberOfDay++;
		// }
		// result = String.valueOf(numberOfDay + range);
		result = (int) numberOfDay + range;
		return result;
	}

	private String convertDateToString(Date date) {
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		return sdf.format(date);
	}

	// ***
	public void getSelectedRow() {
		SuiviCourrierCourrier selectedSuiviCourrierCourrier = (SuiviCourrierCourrier) listTransactionCourrier
				.getRowData();
		decision = selectedSuiviCourrierCourrier.getEtatValidation();
		dateString = selectedSuiviCourrierCourrier.getDateReponse();
		comment = selectedSuiviCourrierCourrier.getTransaction()
				.getTransactionCommentaire();
		if (comment == null) {
			setComment("Pas de commentaire");
		}
	}

	@SuppressWarnings("unchecked")
	public void printPDFSuiviCourrier() {
		// courrier = vb.getCourrier();
		try {
			Integer ordreTransaction = suiviCourriers.size();
			// for (int i = 0; i < suiviCourriers.size() -1; i++) {
			// if
			// (suiviCourriers.get(i).getTransaction().getExpdest().getIdExpDest().equals(suiviCourriers.get(i+1).getTransaction().getExpdest().getIdExpDest()))
			// {
			// suiviCourriers.remove(suiviCourriers.get(i+1));
			// }
			// }
			for (SuiviCourrierCourrier suivi : suiviCourriers) {
				suivi.setNumeroOrdreTransaction(ordreTransaction--);
			}
			List<RapportCourrier> rapportcourrier = new ArrayList<RapportCourrier>();
			RapportCourrier rapport = new RapportCourrier();
			// Societe
			String societeNom = appMgr.listSocieteByLibelle("Nom_Societe")
					.get(0).getSocieteLibelle();
			rapport.setSocieteNom(societeNom);
			String societeOrganismeParent = appMgr
					.listSocieteByLibelle("Ministere_Nom").get(0)
					.getSocieteLibelle();
			rapport.setSocieteOrganismeParent(societeOrganismeParent);
			String societeRepublique = appMgr
					.listSocieteByLibelle("Republique_Nom").get(0)
					.getSocieteLibelle();
			rapport.setSocieteRepublique(societeRepublique);
			String societeVille = appMgr.listSocieteByLibelle("Ville_Nom")
					.get(0).getSocieteLibelle();
			rapport.setSocieteVille(societeVille);
			// Variables
			String nomProjet = appMgr
					.listVariablesByLibelle("Footer_Nom_Projet").get(0)
					.getVariablesContenu();
			rapport.setNomProjet(nomProjet);
			
			RapportSociete rs = new RapportSociete();
			//Unité Connecté 
			if(vb.getPerson().isBoc()){
				System.out.println("BOCT");
				rapport.setUniteConnecte(vb.getPerson().getAssociatedBOC().getNameBOC());
				rs .setUniteConnecte(vb.getPerson().getAssociatedBOC().getNameBOC());
			}else{
				System.out.println("Agent || Responsable || Secrétaire");
				rapport.setUniteConnecte(vb.getPerson().getAssociatedDirection().getNameUnit());
				rs.setUniteConnecte(vb.getPerson().getAssociatedDirection().getNameUnit());
			}
			listeSociete.add(rs);
			listeSociete.get(0).setSocieteNom(rapport.getSocieteNom());
			listeSociete.get(0).setSocieteRepublique(rapport.getSocieteRepublique());
			listeSociete.get(0).setSocieteVille(rapport.getSocieteVille());
			listeSociete.get(0).setSocieteOrganismeParent(rapport.getSocieteOrganismeParent());
			rapport.setListeSociete(listeSociete);
			// Courrier
			courrier = vb.getCourrier();

			// Nature
			int refnature = courrier.getNature().getNatureId();
			Nature nature = appMgr.getNatureById(refnature).get(0);

			// Urgence
			int refUrgence = courrier.getUrgence().getUrgenceId();
			Urgence urgence = appMgr.getUrgenceById(refUrgence).get(0);

			// confidentialite
			int confref = courrier.getConfidentialite().getConfidentialiteId();
			Confidentialite confidentialite = appMgr.getConfidentialiteById(
					confref).get(0);

			// Mode de Transmission
			int reftransmission = courrier.getTransmission()
					.getTransmissionId();
			Transmission transmission = appMgr.getTransmissionById(
					reftransmission).get(0);

			rapport.setCourrier(courrier);

			rapport.setNature(nature);
			rapport.setUrgence(urgence);
			rapport.setConfidentialite(confidentialite);
			rapport.setTransmission(transmission);

			// Destinataire / EXpediteur

			rapportExpediteurDestinatairelist = new ArrayList<RapportExpediteurDestinataire>();
			rapportExpediteurDestinataire = new RapportExpediteurDestinataire();

			CourrierDossier courrierDossier = appMgr.getCourrierDossierByIdCourrier(courrier.getIdCourrier()).get(0);

			int refdossier = courrierDossier.getId().getDossierId();
			Transaction transaction = new Transaction();
			transaction = appMgr.getTransactionByIdDossier(refdossier).get(0);
			//////////////KBS Transaction
			
			String nouvelleRefCourrier=transaction.getCourrierReferenceCorrespondant();
			courrier.setCourrierReferenceCorrespondant(nouvelleRefCourrier);
			System.out.println("/////////// printPDF Rapport Courriers liste  getCourrierReferenceCorrespondant"+ transaction.getCourrierReferenceCorrespondant());
			rapport.setCourrier(courrier);
			//////////////KBS Transaction
			rapport.setCodeUnique(vb.getCodeUniqueCourrier());
			// ** Annotation
			List<TransactionAnnotation> listTransactionAnnotations = appMgr
					.getAnnotationByIdTransaction(transaction
							.getTransactionId());
			List<Annotation> annotations = new ArrayList<Annotation>();
			if (!listTransactionAnnotations.isEmpty()) {
				annotations = appMgr
						.getAnnotationByIdAnotation(listTransactionAnnotations
								.get(0).getId().getIdAnnotation());
				if (annotations.size() != 0) {
					if (annotations.get(0).getAnnotationLibelle()
							.equals("Autre")) {
						rapport.setAnnotationList(transaction
								.getTransactionCommentaireAnnotation());
					} else {
						StringBuilder resultAnnotation = new StringBuilder();
						for (TransactionAnnotation ta : listTransactionAnnotations) {
							Integer refAnnotation = ta.getId()
									.getIdAnnotation();
							resultAnnotation.append(" / ").append(
									appMgr.getAnnotationByIdAnotation(
											refAnnotation).get(0)
											.getAnnotationLibelle());
						}
						resultAnnotation.substring(0, 4);
						rapport.setAnnotationList(resultAnnotation.toString());
					}
				}
			} else {
				annotations.add(new Annotation("", "", "", "", 0, null));
			}
			// rapport.setAnnotationList(vb.getCopyAnnotationResult());
			// System.out.println("annot " + vb.getCopyAnnotationResult());
			// ** Annotation
			int refExped = transaction.getExpdest().getIdExpDest();
			Expdest expdest = new Expdest();
			expdest = appMgr.getListExpDestByIdExpDest(refExped).get(0);
			int refExpediteur = 0;
			if (expdest.getIdExpDestLdap() != null) {
				refExpediteur = expdest.getIdExpDestLdap();
			} else {
				refExpediteur = expdest.getIdExpDest();
			}
			String type = expdest.getTypeExpDest();
			String nom = "";
			// EXpediteur
			if (type.equals("Interne-Person")) {
				nom = ldapOperation.getCnById(ldapOperation.CONTEXT_USER,
						"uid", refExpediteur);
			} else if (type.equals("Interne-Unité")) {
				nom = ldapOperation.getCnById(ldapOperation.CONTEXT_UNIT,
						"departmentNumber", refExpediteur);
			} else if (type.equals("Externe")) {
				if (expdest.getExpdestexterne().getTypeutilisateur()
						.getTypeUtilisateurLibelle().equals("PP")) {
					nom = expdest.getExpdestexterne().getExpDestExterneNom()
							+ " (PP)";
				} else {
					nom = expdest.getExpdestexterne().getExpDestExterneNom()
							+ " (PM)";
				}
			}

			rapportExpediteurDestinataire.setExpediteur("<b>Expéditeur : </b>"
					+ nom);

			// Destinataire
			String result = "";
			int refTransacation = transaction.getTransactionId();
			List<TransactionDestination> listTransactionDestination = new ArrayList<TransactionDestination>();
			listTransactionDestination = appMgr
					.getListTransactionDestinationByIdTransaction(refTransacation);

			for (TransactionDestination transactionDestination : listTransactionDestination) {
				expdest = new Expdest();
				expdest = appMgr.getListExpDestByIdExpDest(
						transactionDestination.getId().getIdExpDest()).get(0);
				type = expdest.getTypeExpDest();
				if (type.equals("Interne-Person")) {
					result = result
							+ ldapOperation.getCnById(
									ldapOperation.CONTEXT_USER, "uid",
									expdest.getIdExpDestLdap()) + " / ";
				} else if (type.equals("Interne-Unité")) {
					result = result
							+ ldapOperation.getCnById(
									ldapOperation.CONTEXT_UNIT,
									"departmentNumber",
									expdest.getIdExpDestLdap()) + " / ";
				} else if (type.equals("Externe")) {
					if (expdest.getExpdestexterne().getTypeutilisateur()
							.getTypeUtilisateurLibelle().equals("PP")) {
						result = result
								+ expdest.getExpdestexterne()
										.getExpDestExterneNom() + " (PP)"
								+ " / ";
					} else {
						result = result
								+ expdest.getExpdestexterne()
										.getExpDestExterneNom() + " (PM)"
								+ " / ";
					}
				}
			}
			if (!result.equals("")) {
				int lastIndex = result.lastIndexOf("/");
				result = result.substring(0, lastIndex);
			}

			rapportExpediteurDestinataire
					.setDestinataire("<b>Destinataire : </b>" + result);

			rapportExpediteurDestinatairelist
					.add(rapportExpediteurDestinataire);
			rapport.setRapportExpediteurDestinataire(rapportExpediteurDestinatairelist);
			// Liste des Annotations

			// Liste des documents
			List<Document> documents = appMgr.getDocumentByIdCourrier(courrier
					.getIdCourrier());
			List<Document> documentsVerifier = new ArrayList<Document>();
			for (Document d : documents) {
				if (d.getDocumentCommentaire() != null) {
					if (d.getDocumentCommentaire().equals(" ")) {
						d.setDocumentCommentaire("");
					}
				} else {
					d.setDocumentCommentaire("");
				}
				documentsVerifier.add(d);
			}
			rapport.setDocuments(documentsVerifier);
			/******** chemain par default *************/
			rapport.setPathJasper(vb.getPathJasper());
			nomProjet = appMgr.getList(Variables.class).get(0)
					.getVariablesContenu();
			rapport.setNomProjet(nomProjet);
			rapport.setListTransactionSuiviCourrier(suiviCourriers);
			rapportcourrier.add(rapport);
			export.exportToPDF(rapportcourrier,"CourrierSuivi",
					"CourrierSuivi");
		} catch (Exception e) {
			System.out.println("*******Erreur Export pdf*******");
			e.printStackTrace();
		}
	}

	// ************Getter & Setter********************
	public long getRecords() {
		records = suiviCourriers.size();
		return records;
	}

	public VariableGlobale getVb() {
		return vb;
	}

	public void setVb(VariableGlobale vb) {
		this.vb = vb;
	}

	public Export getExport() {
		return export;
	}

	public void setExport(Export export) {
		this.export = export;
	}

	public Courrier getCourrier() {
		return courrier;
	}

	public void setCourrier(Courrier courrier) {
		this.courrier = courrier;
	}

	public Nature getNature() {
		return nature;
	}

	public void setNature(Nature nature) {
		this.nature = nature;
	}

	public Transmission getTransmission() {
		return transmission;
	}

	public void setTransmission(Transmission transmission) {
		this.transmission = transmission;
	}

	public Confidentialite getConfidentialite() {
		return confidentialite;
	}

	public void setConfidentialite(Confidentialite confidentialite) {
		this.confidentialite = confidentialite;
	}

	public Urgence getUrgence() {
		return urgence;
	}

	public void setUrgence(Urgence urgence) {
		this.urgence = urgence;
	}

	public void setSuiviCourriers(List<SuiviCourrierCourrier> suiviCourriers) {
		this.suiviCourriers = suiviCourriers;
	}

	public List<SuiviCourrierCourrier> getSuiviCourriers() {
		return suiviCourriers;
	}

	public void setTransactions(List<Transaction> transactions) {
		this.transactions = transactions;
	}

	public List<Transaction> getTransactions() {
		return transactions;
	}

	public void setListTransactionCourrier(DataModel listTransactionCourrier) {
		this.listTransactionCourrier = listTransactionCourrier;
	}

	public DataModel getListTransactionCourrier() {
		return listTransactionCourrier;
	}

	public void setLdapOperation(LdapOperation ldapOperation) {
		this.ldapOperation = ldapOperation;
	}

	public LdapOperation getLdapOperation() {
		return ldapOperation;
	}

	public void setTransaction(Transaction transaction) {
		this.transaction = transaction;
	}

	public Transaction getTransaction() {
		return transaction;
	}

	public void setAlign(String align) {
		this.align = align;
	}

	public String getAlign() {
		return align;
	}

	public String getDecision() {
		return decision;
	}

	public void setDecision(String decision) {
		this.decision = decision;
	}

	public String getDateString() {
		return dateString;
	}

	public void setDateString(String dateString) {
		this.dateString = dateString;
	}

	public String getComment() {
		return comment;
	}

	public void setComment(String comment) {
		this.comment = comment;
	}

	// # from fonction initialize()
	// C*
	// if (transactionDestination
	// .getTransactionDestDateConsultation() == null) {
	// suiviCourrier
	// .setDateConsultation("Pas encore consulté");
	// suiviCourrier.setDateTransfert("Non transmis");
	// if (transactionDestination
	// .getTransactionDestDateReponse() != null) {
	// suiviCourrier
	// .setDateReponse(convertDateToString(transactionDestination
	// .getTransactionDestDateReponse()));
	// // C*
	// // Date dateReponse = transactionDestination
	// // .getTransactionDestDateReponse();
	// // C*
	// Date dateReponse = courrier.getCourrierDateReponse();
	// suiviCourrier
	// .setDateReponse(convertDateToString(dateReponse));
	// if (dateReponse.getDate() == dateJour.getDate()
	// && dateReponse.getMonth() == dateJour
	// .getMonth()
	// && dateReponse.getYear() == dateJour
	// .getYear()) {
	// suiviCourrier.setToleranceRange("0J");
	// suiviCourrier.setRequireResponse(true);
	// } else if (dateReponse.compareTo(dateJour) > 0) {
	// suiviCourrier.setToleranceRange("+"
	// + compareTwoDates(dateReponse,
	// dateJour, 1) + "J");
	// suiviCourrier.setRequireResponse(true);
	// } else if (dateReponse.compareTo(dateJour) < 0) {
	// suiviCourrier.setToleranceRange("-"
	// + compareTwoDates(dateJour,
	// dateReponse, 0) + "J");
	// suiviCourrier.setNotYetResponded(true);
	// }
	// } else {
	// suiviCourrier.setDoNotRequireResponse(true);
	// suiviCourrier.setToleranceRange("--");
	// suiviCourrier.setDateReponse("--");
	// suiviCourrier.setAlign("center");
	// }
	// } else {
	// // consulté par le destinataire
	// suiviCourrier
	// .setDateConsultation(convertDateToString(transactionDestination
	// .getTransactionDestDateConsultation()));
	// if (transactionDestination
	// .getTransactionDestDateTransfert() != null) {
	// suiviCourrier
	// .setDateTransfert(convertDateToString(transactionDestination
	// .getTransactionDestDateTransfert()));
	// if (transactionDestination
	// .getTransactionDestDateReponse() != null) {
	// suiviCourrier
	// .setDateReponse(convertDateToString(transactionDestination
	// .getTransactionDestDateReponse()));
	// // C*
	// // Date dateReponse = transactionDestination
	// // .getTransactionDestDateReponse();
	// // C*
	// Date dateReponse = courrier.getCourrierDateReponse();
	// Date dateTransfert = transactionDestination
	// .getTransactionDestDateTransfert();
	// if (dateReponse.getDate() == dateTransfert
	// .getDate()
	// && dateReponse.getMonth() == dateTransfert
	// .getMonth()
	// && dateReponse.getYear() == dateTransfert
	// .getYear()) {
	// suiviCourrier.setTimelyResponse(true);
	// suiviCourrier.setToleranceRange("0J");
	// } else if (dateTransfert.after(dateReponse)) {
	// suiviCourrier
	// .setNotTimelyResponse(true);
	// suiviCourrier.setToleranceRange("-"
	// + compareTwoDates(
	// dateTransfert,
	// dateReponse, 0) + "J");
	// } else if (dateTransfert
	// .before(dateReponse)) {
	// suiviCourrier.setTimelyResponse(true);
	// suiviCourrier
	// .setToleranceRange("+"
	// + compareTwoDates(
	// dateReponse,
	// dateTransfert,
	// 0) + "J");
	// }
	// } else {
	// suiviCourrier.setDoNotRequireResponse(true);
	// suiviCourrier.setToleranceRange("--");
	// suiviCourrier.setDateReponse("--");
	// suiviCourrier.setAlign("center");
	// }
	// } else {
	// suiviCourrier.setDateTransfert("Non transmis");
	// if (transactionDestination
	// .getTransactionDestDateReponse() != null) {
	// suiviCourrier
	// .setDateReponse(convertDateToString(transactionDestination
	// .getTransactionDestDateReponse()));
	// // C*
	// // Date dateReponse = transactionDestination
	// // .getTransactionDestDateReponse();
	// // C*
	// Date dateReponse = courrier.getCourrierDateReponse();
	// if (dateReponse.getDate() == dateJour
	// .getDate()
	// && dateReponse.getMonth() == dateJour
	// .getMonth()
	// && dateReponse.getYear() == dateJour
	// .getYear()) {
	// suiviCourrier.setToleranceRange("0J");
	// suiviCourrier.setRequireResponse(true);
	// } else if (dateJour.after(dateReponse)) {
	// suiviCourrier.setToleranceRange("-"
	// + compareTwoDates(dateJour,
	// dateReponse, 0) + "J");
	// suiviCourrier.setNotYetResponded(true);
	// } else if (dateJour.before(dateReponse)) {
	// suiviCourrier.setToleranceRange("+"
	// + compareTwoDates(dateReponse,
	// dateJour, 1) + "J");
	// suiviCourrier.setRequireResponse(true);
	// }
	// } else {
	// suiviCourrier.setDoNotRequireResponse(true);
	// suiviCourrier.setToleranceRange("--");
	// suiviCourrier.setDateReponse("--");
	// suiviCourrier.setAlign("center");
	// }
	// }
	// }
	// C*

	public Integer getDureeTotalTraitemnent() {
		return dureeTotalTraitemnent;
	}

	public void setDureeTotalTraitemnent(Integer dureeTotalTraitemnent) {
		this.dureeTotalTraitemnent = dureeTotalTraitemnent;
	}

	public Integer getCourrierEtat() {
		return courrierEtat;
	}

	public void setCourrierEtat(Integer courrierEtat) {
		this.courrierEtat = courrierEtat;
	}

	public VariableGlobale getVg() {
		return vg;
	}

	public void setVg(VariableGlobale vg) {
		this.vg = vg;
	}

	public DataModel getListeDestinatairesDM() {
		return listeDestinatairesDM;
	}

	public void setListeDestinatairesDM(DataModel listeDestinatairesDM) {
		this.listeDestinatairesDM = listeDestinatairesDM;
	}

	public void setNatureCategorie(NatureCategorie natureCategorie) {
		this.natureCategorie = natureCategorie;
	}

	public NatureCategorie getNatureCategorie() {
		return natureCategorie;
	}

	public void setEtatTransaction(String etatTransaction) {
		this.etatTransaction = etatTransaction;
	}

	public String getEtatTransaction() {
		return etatTransaction;
	}

	// commenté pour que le boc aussi consulte toute les transactions faites sur
	// un courrier
	// test pour differencier les transactions avec destination externe ou nn
	// if (transaction.getTransactionDestinationReelle() != null) {
	// // transactions =
	// // appMgr.getTransactionByIdDossier(vb.getReferenceDossier());
	// transactions = appMgr
	// .getTransactionByIdTransactionDestinationReelle(transaction
	// .getTransactionDestinationReelle()
	// .getTransactionDestinationReelleId());
	// for (Transaction tr : transactions) {
	// System.out.println("verif idTransaction : "
	// + tr.getTransactionId());
	// suiviCourrier = new SuiviCourrierCourrier();
	// suiviCourrier.setTransaction(tr);
	// transactionExpediteur = new Transaction();
	// transactionDestinationExpediteur = new TransactionDestination();
	// try {
	// transactionExpediteur = appMgr
	// .getTransactionExpediteurByIdTransactionDestinationReelle(
	// transaction
	// .getTransactionDestinationReelle()
	// .getTransactionDestinationReelleId(),
	// tr.getTransactionOrdre() - 1).get(0);
	// transactionDestinationExpediteur = appMgr
	// .getDestinationByIdTransaction(
	// transactionExpediteur
	// .getTransactionId()).get(0);
	// suiviCourrier
	// .setDateReception(convertDateToString(transactionExpediteur
	// .getTransactionDateTransaction()));
	// System.out.println("verif date réception : "
	// + transactionExpediteur
	// .getTransactionDateTransaction());
	// suiviCourrier
	// .setTransactionDestination(transactionDestinationExpediteur);
	// if (transactionDestinationExpediteur
	// .getTransactionDestDateConsultation() == null) {
	// suiviCourrier
	// .setDateConsultation("Pas encore consulté");
	// suiviCourrier.setDateTransfert("Non transmis");
	// if (transactionDestinationExpediteur
	// .getTransactionDestDateReponse() != null) {
	// Date dateReponse = transactionDestinationExpediteur
	// .getTransactionDestDateReponse();
	// suiviCourrier
	// .setDateReponse(convertDateToString(dateReponse));
	// if (dateReponse.getDate() == dateJour.getDate()
	// && dateReponse.getMonth() == dateJour
	// .getMonth()
	// && dateReponse.getYear() == dateJour
	// .getYear()) {
	// suiviCourrier.setToleranceRange("0J");
	// suiviCourrier.setRequireResponse(true);
	// } else if (dateReponse.compareTo(dateJour) > 0) {
	// suiviCourrier.setToleranceRange("+"
	// + compareTwoDates(dateReponse,
	// dateJour, 1) + "J");
	// suiviCourrier.setRequireResponse(true);
	// } else if (dateReponse.compareTo(dateJour) < 0) {
	// suiviCourrier.setToleranceRange("-"
	// + compareTwoDates(dateJour,
	// dateReponse, 0) + "J");
	// suiviCourrier.setNotYetResponded(true);
	// }
	// } else {
	// suiviCourrier.setDoNotRequireResponse(true);
	// suiviCourrier.setToleranceRange("--");
	// suiviCourrier.setDateReponse("--");
	// suiviCourrier.setAlign("center");
	// }
	// } else {
	// suiviCourrier
	// .setDateConsultation(convertDateToString(transactionDestinationExpediteur
	// .getTransactionDestDateConsultation()));
	// if (transactionDestinationExpediteur
	// .getTransactionDestDateTransfert() != null) {
	// suiviCourrier
	// .setDateTransfert(convertDateToString(transactionDestinationExpediteur
	// .getTransactionDestDateTransfert()));
	// if (transactionDestinationExpediteur
	// .getTransactionDestDateReponse() != null) {
	// suiviCourrier
	// .setDateReponse(convertDateToString(transactionDestinationExpediteur
	// .getTransactionDestDateReponse()));
	// Date dateReponse = transactionDestinationExpediteur
	// .getTransactionDestDateReponse();
	// Date dateTransfert = transactionDestinationExpediteur
	// .getTransactionDestDateTransfert();
	// if (dateReponse.getDate() == dateTransfert
	// .getDate()
	// && dateReponse.getMonth() == dateTransfert
	// .getMonth()
	// && dateReponse.getYear() == dateTransfert
	// .getYear()) {
	// suiviCourrier.setTimelyResponse(true);
	// suiviCourrier.setToleranceRange("0J");
	// } else if (dateTransfert.after(dateReponse)) {
	// suiviCourrier
	// .setNotTimelyResponse(true);
	// suiviCourrier.setToleranceRange("-"
	// + compareTwoDates(
	// dateTransfert,
	// dateReponse, 0) + "J");
	//
	// } else if (dateTransfert
	// .before(dateReponse)) {
	// suiviCourrier.setTimelyResponse(true);
	// suiviCourrier
	// .setToleranceRange("+"
	// + compareTwoDates(
	// dateReponse,
	// dateTransfert,
	// 0) + "J");
	// }
	// } else {
	// suiviCourrier.setDoNotRequireResponse(true);
	// suiviCourrier.setToleranceRange("--");
	// suiviCourrier.setDateReponse("--");
	// suiviCourrier.setAlign("center");
	// }
	// } else {
	// suiviCourrier.setDateTransfert("Non transmis");
	// if (transactionDestinationExpediteur
	// .getTransactionDestDateReponse() != null) {
	// suiviCourrier
	// .setDateReponse(convertDateToString(transactionDestinationExpediteur
	// .getTransactionDestDateReponse()));
	// Date dateReponse = transactionDestinationExpediteur
	// .getTransactionDestDateReponse();
	// if (dateReponse.getDate() == dateJour
	// .getDate()
	// && dateReponse.getMonth() == dateJour
	// .getMonth()
	// && dateReponse.getYear() == dateJour
	// .getYear()) {
	// suiviCourrier.setToleranceRange("0J");
	// suiviCourrier.setRequireResponse(true);
	// } else if (dateJour.after(dateReponse)) {
	// suiviCourrier.setToleranceRange("-"
	// + compareTwoDates(dateJour,
	// dateReponse, 0) + "J");
	// suiviCourrier.setNotYetResponded(true);
	// } else if (dateJour.before(dateReponse)) {
	// suiviCourrier.setToleranceRange("+"
	// + compareTwoDates(dateReponse,
	// dateJour, 1) + "J");
	// suiviCourrier.setRequireResponse(true);
	// }
	// } else {
	// suiviCourrier.setDoNotRequireResponse(true);
	// suiviCourrier.setToleranceRange("--");
	// suiviCourrier.setDateReponse("--");
	// suiviCourrier.setAlign("center");
	// }
	// }
	// }
	// } catch (IndexOutOfBoundsException e) {
	// suiviCourrier.setDateReception(convertDateToString(tr
	// .getTransactionDateTransaction()));
	// suiviCourrier.setDateTransfert(convertDateToString(tr
	// .getTransactionDateTransaction()));
	// // suiviCourrier.setTimelyResponse(true);
	// if (tr.getTransactionDateConsultation() != null) {
	// suiviCourrier
	// .setDateConsultation(convertDateToString(tr
	// .getTransactionDateConsultation()));
	// } else {
	// suiviCourrier.setDateConsultation("Non consulté");
	// }
	// }
	// expDest = new Expdest();
	// expDest = appMgr.getListExpDestByIdExpDest(
	// tr.getExpdest().getIdExpDest()).get(0);
	// if (expDest.getTypeExpDest().equals("Interne-Person")) {
	// suiviCourrier.setExpediteur(ldapOperation.getCnById(
	// ldapOperation.CONTEXT_USER, "uid",
	// expDest.getIdExpDestLdap()));
	// } else if (expDest.getTypeExpDest().equals("Interne-Unité")) {
	// suiviCourrier.setExpediteur(ldapOperation.getCnById(
	// ldapOperation.CONTEXT_UNIT, "departmentNumber",
	// expDest.getIdExpDestLdap()));
	// } else if (expDest.getTypeExpDest().equals("Interne-Boc")) {
	// suiviCourrier.setExpediteur(ldapOperation.getCnById(
	// ldapOperation.CONTEXT_BOC, "departmentNumber",
	// expDest.getIdExpDestLdap()));
	// } else if (expDest.getTypeExpDest().equals("Externe")) {
	// Expdestexterne expDestExte = new Expdestexterne();
	// expDestExte = appMgr.getExpediteurById(
	// expDest.getExpdestexterne()
	// .getIdExpDestExterne()).get(0);
	// if (expDestExte.getTypeutilisateur()
	// .getTypeUtilisateurLibelle().equals("PP")) {
	// suiviCourrier.setExpediteur(expDestExte
	// .getExpDestExterneNom()
	// + " "
	// + expDestExte.getExpDestExternePrenom()
	// + " (PP)");
	// } else {
	// suiviCourrier.setExpediteur(expDestExte
	// .getExpDestExterneNom() + " (PM)");
	// }
	// }
	//
	// TransactionDestinationReelle transactionDestinationReelle = new
	// TransactionDestinationReelle();
	// Expdestexterne expDestExterne;
	// transactionDestinationReelle = tr
	// .getTransactionDestinationReelle();
	// if (transactionDestinationReelle
	// .getTransactionDestinationReelleTypeDestinataire()
	// .equals("Externe")) {
	// expDestExterne = new Expdestexterne();
	// expDestExterne = appMgr
	// .getExpediteurById(
	// transactionDestinationReelle
	// .getTransactionDestinationReelleIdDestinataire())
	// .get(0);
	// if (expDestExterne.getTypeutilisateur()
	// .getTypeUtilisateurLibelle().equals("PP")) {
	// suiviCourrier.setDestinataireReelle(expDestExterne
	// .getExpDestExterneNom()
	// + " "
	// + expDestExterne.getExpDestExternePrenom()
	// + " (PP)");
	// } else {
	// suiviCourrier.setDestinataireReelle(expDestExterne
	// .getExpDestExterneNom() + " (PM)");
	// }
	// TransactionDestination transactionDestination = new
	// TransactionDestination();
	// transactionDestination = appMgr
	// .getListTransactionDestinationByIdTransaction(
	// tr.getTransactionId()).get(0);
	// System.out.println("verif idTransactionDestination : "
	// + transactionDestination.getId()
	// .getIdTransaction());
	// suiviCourrier
	// .setTransactionDestination(transactionDestination);
	// expDest = new Expdest();
	// expDest = appMgr.getListExpDestByIdExpDest(
	// transactionDestination.getId().getIdExpDest())
	// .get(0);
	// if (expDest.getTypeExpDest().equals("Interne-Person")) {
	// suiviCourrier.setListDestinataire(ldapOperation
	// .getCnById(ldapOperation.CONTEXT_USER,
	// "uid", expDest.getIdExpDestLdap()));
	// } else if (expDest.getTypeExpDest().equals(
	// "Interne-Unité")) {
	// suiviCourrier.setListDestinataire(ldapOperation
	// .getCnById(ldapOperation.CONTEXT_UNIT,
	// "departmentNumber",
	// expDest.getIdExpDestLdap()));
	// } else if (expDest.getTypeExpDest().equals(
	// "Interne-Boc")) {
	// suiviCourrier.setListDestinataire(ldapOperation
	// .getCnById(ldapOperation.CONTEXT_BOC,
	// "departmentNumber",
	// expDest.getIdExpDestLdap()));
	// } else if (expDest.getTypeExpDest().equals("Externe")) {
	// Expdestexterne expDestExte = new Expdestexterne();
	// expDestExte = appMgr.getExpediteurById(
	// expDest.getExpdestexterne()
	// .getIdExpDestExterne()).get(0);
	// if (expDestExte.getTypeutilisateur()
	// .getTypeUtilisateurLibelle().equals("PP")) {
	// suiviCourrier.setListDestinataire(expDestExte
	// .getExpDestExterneNom()
	// + " "
	// + expDestExte.getExpDestExternePrenom()
	// + " (PP)");
	// } else {
	// suiviCourrier.setListDestinataire(expDestExte
	// .getExpDestExterneNom() + " (PM)");
	// }
	// }
	// // if (transactionDestination.) {
	// //
	// // } else {
	// //
	// // }
	// }
	// if (suiviCourrier.getTransaction().getEtat().getEtatId()
	// .equals(3)) {
	// suiviCourrier.setEtatValidation(messageSource
	// .getMessage("refuser", new Object[] {},
	// lm.createLocal()));
	// } else {
	// if (suiviCourrier.getTransaction()
	// .getTransactionDateReponse() != null) {
	// suiviCourrier.setEtatValidation(messageSource
	// .getMessage("accepter", new Object[] {},
	// lm.createLocal()));
	// } else {
	// suiviCourrier.setEtatValidation(messageSource
	// .getMessage("enCours", new Object[] {},
	// lm.createLocal()));
	// }
	// }
	// // *** AC
	// if (vb.getPerson().getAssociatedBOC() != null) {
	// if (vb.getPerson().getCn()
	// .equals(suiviCourrier.getExpediteur())
	// || vb.getPerson()
	// .getCn()
	// .equals(suiviCourrier
	// .getListDestinataire())
	// || vb.getPerson().getAssociatedBOC()
	// .getNameBOC()
	// .equals(suiviCourrier.getExpediteur())
	// || vb.getPerson()
	// .getAssociatedBOC()
	// .getNameBOC()
	// .equals(suiviCourrier
	// .getListDestinataire())) {
	// suiviCourrier.setConsulter(true);
	// suiviCourrier.setPasConsulter(false);
	// } else {
	// suiviCourrier.setConsulter(false);
	// suiviCourrier.setPasConsulter(true);
	// }
	// }else{
	// if (vb.getPerson().getCn()
	// .equals(suiviCourrier.getExpediteur())
	// || vb.getPerson()
	// .getCn()
	// .equals(suiviCourrier
	// .getListDestinataire())
	// || vb.getPerson().getAssociatedDirection()
	// .getNameUnit()
	// .equals(suiviCourrier.getExpediteur())
	// || vb.getPerson()
	// .getAssociatedDirection()
	// .getNameUnit()
	// .equals(suiviCourrier
	// .getListDestinataire())) {
	// suiviCourrier.setConsulter(true);
	// suiviCourrier.setPasConsulter(false);
	// } else {
	// suiviCourrier.setConsulter(false);
	// suiviCourrier.setPasConsulter(true);
	// }
	// }
	//
	// suiviCourriers.add(suiviCourrier);
	// }
	// } else {

	// if (vb.getPerson().isBoc()) {
	// listTransaction = appMgr
	// .getListTransactionByDossierIdAndIdUtilisateur(vb
	// .getPerson().getId(), transaction
	// .getDossier().getDossierId());
	// listTransaction = appMgr
	// .getTransactionByIdDossier(transaction.getDossier()
	// .getDossierId());
	// } else {
	// String type = "";
	// if (vb.getPerson().isResponsable()) {
	// type = "sub_" + String.valueOf(vb.getPerson().getId());
	// } else if (vb.getPerson().isSecretary()) {
	// type = "secretary_"
	// + String.valueOf(vb.getPerson().getId());
	// } else if (vb.getPerson().isAgent()) {
	// type = "agent_"
	// + String.valueOf(vb.getPerson().getId());
	// }
	// listTransaction = appMgr
	// .getListTransactionByDossierIdAndTypeIntervenant(
	// type, transaction.getDossier()
	// .getDossierId());
	// }

}